/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.Suppliers;
import com.squareup.square.locations.CustomAttributeDefinitionsClient;
import com.squareup.square.locations.CustomAttributesClient;
import com.squareup.square.locations.TransactionsClient;
import com.squareup.square.types.CreateCheckoutRequest;
import com.squareup.square.types.CreateCheckoutResponse;
import com.squareup.square.types.CreateLocationRequest;
import com.squareup.square.types.CreateLocationResponse;
import com.squareup.square.types.GetLocationResponse;
import com.squareup.square.types.GetLocationsRequest;
import com.squareup.square.types.ListLocationsResponse;
import com.squareup.square.types.UpdateLocationRequest;
import com.squareup.square.types.UpdateLocationResponse;
import java.util.function.Supplier;

public class LocationsClient {
    protected final ClientOptions clientOptions;

    private final RawLocationsClient rawClient;

    protected final Supplier<CustomAttributeDefinitionsClient> customAttributeDefinitionsClient;

    protected final Supplier<CustomAttributesClient> customAttributesClient;

    protected final Supplier<TransactionsClient> transactionsClient;

    public LocationsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawLocationsClient(clientOptions);
        this.customAttributeDefinitionsClient =
                Suppliers.memoize(() -> new CustomAttributeDefinitionsClient(clientOptions));
        this.customAttributesClient = Suppliers.memoize(() -> new CustomAttributesClient(clientOptions));
        this.transactionsClient = Suppliers.memoize(() -> new TransactionsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawLocationsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Provides details about all of the seller's <a href="https://developer.squareup.com/docs/locations-api">locations</a>,
     * including those with an inactive status. Locations are listed alphabetically by <code>name</code>.
     */
    public ListLocationsResponse list() {
        return this.rawClient.list().body();
    }

    /**
     * Provides details about all of the seller's <a href="https://developer.squareup.com/docs/locations-api">locations</a>,
     * including those with an inactive status. Locations are listed alphabetically by <code>name</code>.
     */
    public ListLocationsResponse list(RequestOptions requestOptions) {
        return this.rawClient.list(requestOptions).body();
    }

    /**
     * Creates a <a href="https://developer.squareup.com/docs/locations-api">location</a>.
     * Creating new locations allows for separate configuration of receipt layouts, item prices,
     * and sales reports. Developers can use locations to separate sales activity through applications
     * that integrate with Square from sales activity elsewhere in a seller's account.
     * Locations created programmatically with the Locations API last forever and
     * are visible to the seller for their own management. Therefore, ensure that
     * each location has a sensible and unique name.
     */
    public CreateLocationResponse create() {
        return this.rawClient.create().body();
    }

    /**
     * Creates a <a href="https://developer.squareup.com/docs/locations-api">location</a>.
     * Creating new locations allows for separate configuration of receipt layouts, item prices,
     * and sales reports. Developers can use locations to separate sales activity through applications
     * that integrate with Square from sales activity elsewhere in a seller's account.
     * Locations created programmatically with the Locations API last forever and
     * are visible to the seller for their own management. Therefore, ensure that
     * each location has a sensible and unique name.
     */
    public CreateLocationResponse create(CreateLocationRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a <a href="https://developer.squareup.com/docs/locations-api">location</a>.
     * Creating new locations allows for separate configuration of receipt layouts, item prices,
     * and sales reports. Developers can use locations to separate sales activity through applications
     * that integrate with Square from sales activity elsewhere in a seller's account.
     * Locations created programmatically with the Locations API last forever and
     * are visible to the seller for their own management. Therefore, ensure that
     * each location has a sensible and unique name.
     */
    public CreateLocationResponse create(CreateLocationRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Retrieves details of a single location. Specify &quot;main&quot;
     * as the location ID to retrieve details of the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a>.
     */
    public GetLocationResponse get(GetLocationsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves details of a single location. Specify &quot;main&quot;
     * as the location ID to retrieve details of the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a>.
     */
    public GetLocationResponse get(GetLocationsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Updates a <a href="https://developer.squareup.com/docs/locations-api">location</a>.
     */
    public UpdateLocationResponse update(UpdateLocationRequest request) {
        return this.rawClient.update(request).body();
    }

    /**
     * Updates a <a href="https://developer.squareup.com/docs/locations-api">location</a>.
     */
    public UpdateLocationResponse update(UpdateLocationRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).body();
    }

    /**
     * Links a <code>checkoutId</code> to a <code>checkout_page_url</code> that customers are
     * directed to in order to provide their payment information using a
     * payment processing workflow hosted on connect.squareup.com.
     * <p>NOTE: The Checkout API has been updated with new features.
     * For more information, see <a href="https://developer.squareup.com/docs/checkout-api#checkout-api-highlights">Checkout API highlights</a>.</p>
     */
    public CreateCheckoutResponse checkouts(CreateCheckoutRequest request) {
        return this.rawClient.checkouts(request).body();
    }

    /**
     * Links a <code>checkoutId</code> to a <code>checkout_page_url</code> that customers are
     * directed to in order to provide their payment information using a
     * payment processing workflow hosted on connect.squareup.com.
     * <p>NOTE: The Checkout API has been updated with new features.
     * For more information, see <a href="https://developer.squareup.com/docs/checkout-api#checkout-api-highlights">Checkout API highlights</a>.</p>
     */
    public CreateCheckoutResponse checkouts(CreateCheckoutRequest request, RequestOptions requestOptions) {
        return this.rawClient.checkouts(request, requestOptions).body();
    }

    public CustomAttributeDefinitionsClient customAttributeDefinitions() {
        return this.customAttributeDefinitionsClient.get();
    }

    public CustomAttributesClient customAttributes() {
        return this.customAttributesClient.get();
    }

    public TransactionsClient transactions() {
        return this.transactionsClient.get();
    }
}
