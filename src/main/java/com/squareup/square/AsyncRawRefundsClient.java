/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.QueryStringMapper;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.GetPaymentRefundResponse;
import com.squareup.square.types.GetRefundsRequest;
import com.squareup.square.types.ListPaymentRefundsResponse;
import com.squareup.square.types.ListRefundsRequest;
import com.squareup.square.types.PaymentRefund;
import com.squareup.square.types.RefundPaymentRequest;
import com.squareup.square.types.RefundPaymentResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawRefundsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawRefundsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PaymentRefund>>> list() {
        return list(ListRefundsRequest.builder().build());
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PaymentRefund>>> list(
            ListRefundsRequest request) {
        return list(request, null);
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PaymentRefund>>> list(
            ListRefundsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/refunds");
        if (request.getBeginTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "begin_time", request.getBeginTime().get(), false);
        }
        if (request.getEndTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "end_time", request.getEndTime().get(), false);
        }
        if (request.getSortOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_order", request.getSortOrder().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLocationId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "location_id", request.getLocationId().get(), false);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), false);
        }
        if (request.getSourceType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "source_type", request.getSourceType().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getUpdatedAtBeginTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "updated_at_begin_time",
                    request.getUpdatedAtBeginTime().get(),
                    false);
        }
        if (request.getUpdatedAtEndTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "updated_at_end_time",
                    request.getUpdatedAtEndTime().get(),
                    false);
        }
        if (request.getSortField().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_field", request.getSortField().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PaymentRefund>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListPaymentRefundsResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListPaymentRefundsResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListRefundsRequest nextRequest = ListRefundsRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<PaymentRefund> result = parsedResponse.getRefunds().orElse(Collections.emptyList());
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<PaymentRefund>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/refund-payments">Refund Payment</a>.
     */
    public CompletableFuture<SquareClientHttpResponse<RefundPaymentResponse>> refundPayment(
            RefundPaymentRequest request) {
        return refundPayment(request, null);
    }

    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/refund-payments">Refund Payment</a>.
     */
    public CompletableFuture<SquareClientHttpResponse<RefundPaymentResponse>> refundPayment(
            RefundPaymentRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/refunds")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<RefundPaymentResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RefundPaymentResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a specific refund using the <code>refund_id</code>.
     */
    public CompletableFuture<SquareClientHttpResponse<GetPaymentRefundResponse>> get(GetRefundsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a specific refund using the <code>refund_id</code>.
     */
    public CompletableFuture<SquareClientHttpResponse<GetPaymentRefundResponse>> get(
            GetRefundsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/refunds")
                .addPathSegment(request.getRefundId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<GetPaymentRefundResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetPaymentRefundResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
