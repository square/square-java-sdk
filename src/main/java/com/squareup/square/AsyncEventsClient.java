/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.types.DisableEventsResponse;
import com.squareup.square.types.EnableEventsResponse;
import com.squareup.square.types.ListEventTypesRequest;
import com.squareup.square.types.ListEventTypesResponse;
import com.squareup.square.types.SearchEventsRequest;
import com.squareup.square.types.SearchEventsResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncEventsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawEventsClient rawClient;

    public AsyncEventsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawEventsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawEventsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Search for Square API events that occur within a 28-day timeframe.
     */
    public CompletableFuture<SearchEventsResponse> searchEvents() {
        return this.rawClient.searchEvents().thenApply(response -> response.body());
    }

    /**
     * Search for Square API events that occur within a 28-day timeframe.
     */
    public CompletableFuture<SearchEventsResponse> searchEvents(SearchEventsRequest request) {
        return this.rawClient.searchEvents(request).thenApply(response -> response.body());
    }

    /**
     * Search for Square API events that occur within a 28-day timeframe.
     */
    public CompletableFuture<SearchEventsResponse> searchEvents(
            SearchEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchEvents(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Disables events to prevent them from being searchable.
     * All events are disabled by default. You must enable events to make them searchable.
     * Disabling events for a specific time period prevents them from being searchable, even if you re-enable them later.
     */
    public CompletableFuture<DisableEventsResponse> disableEvents() {
        return this.rawClient.disableEvents().thenApply(response -> response.body());
    }

    /**
     * Disables events to prevent them from being searchable.
     * All events are disabled by default. You must enable events to make them searchable.
     * Disabling events for a specific time period prevents them from being searchable, even if you re-enable them later.
     */
    public CompletableFuture<DisableEventsResponse> disableEvents(RequestOptions requestOptions) {
        return this.rawClient.disableEvents(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Enables events to make them searchable. Only events that occur while in the enabled state are searchable.
     */
    public CompletableFuture<EnableEventsResponse> enableEvents() {
        return this.rawClient.enableEvents().thenApply(response -> response.body());
    }

    /**
     * Enables events to make them searchable. Only events that occur while in the enabled state are searchable.
     */
    public CompletableFuture<EnableEventsResponse> enableEvents(RequestOptions requestOptions) {
        return this.rawClient.enableEvents(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Lists all event types that you can subscribe to as webhooks or query using the Events API.
     */
    public CompletableFuture<ListEventTypesResponse> listEventTypes() {
        return this.rawClient.listEventTypes().thenApply(response -> response.body());
    }

    /**
     * Lists all event types that you can subscribe to as webhooks or query using the Events API.
     */
    public CompletableFuture<ListEventTypesResponse> listEventTypes(ListEventTypesRequest request) {
        return this.rawClient.listEventTypes(request).thenApply(response -> response.body());
    }

    /**
     * Lists all event types that you can subscribe to as webhooks or query using the Events API.
     */
    public CompletableFuture<ListEventTypesResponse> listEventTypes(
            ListEventTypesRequest request, RequestOptions requestOptions) {
        return this.rawClient.listEventTypes(request, requestOptions).thenApply(response -> response.body());
    }
}
