/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.loyalty.types.CreateLoyaltyRewardRequest;
import com.squareup.square.loyalty.types.DeleteRewardsRequest;
import com.squareup.square.loyalty.types.GetRewardsRequest;
import com.squareup.square.loyalty.types.RedeemLoyaltyRewardRequest;
import com.squareup.square.loyalty.types.SearchLoyaltyRewardsRequest;
import com.squareup.square.types.CreateLoyaltyRewardResponse;
import com.squareup.square.types.DeleteLoyaltyRewardResponse;
import com.squareup.square.types.GetLoyaltyRewardResponse;
import com.squareup.square.types.RedeemLoyaltyRewardResponse;
import com.squareup.square.types.SearchLoyaltyRewardsResponse;

public class RewardsClient {
    protected final ClientOptions clientOptions;

    private final RawRewardsClient rawClient;

    public RewardsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawRewardsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawRewardsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a loyalty reward. In the process, the endpoint does following:
     * <ul>
     * <li>Uses the <code>reward_tier_id</code> in the request to determine the number of points
     * to lock for this reward.</li>
     * <li>If the request includes <code>order_id</code>, it adds the reward and related discount to the order.</li>
     * </ul>
     * <p>After a reward is created, the points are locked and
     * not available for the buyer to redeem another reward.</p>
     */
    public CreateLoyaltyRewardResponse create(CreateLoyaltyRewardRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a loyalty reward. In the process, the endpoint does following:
     * <ul>
     * <li>Uses the <code>reward_tier_id</code> in the request to determine the number of points
     * to lock for this reward.</li>
     * <li>If the request includes <code>order_id</code>, it adds the reward and related discount to the order.</li>
     * </ul>
     * <p>After a reward is created, the points are locked and
     * not available for the buyer to redeem another reward.</p>
     */
    public CreateLoyaltyRewardResponse create(CreateLoyaltyRewardRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public SearchLoyaltyRewardsResponse search() {
        return this.rawClient.search().body();
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public SearchLoyaltyRewardsResponse search(SearchLoyaltyRewardsRequest request) {
        return this.rawClient.search(request).body();
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public SearchLoyaltyRewardsResponse search(SearchLoyaltyRewardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).body();
    }

    /**
     * Retrieves a loyalty reward.
     */
    public GetLoyaltyRewardResponse get(GetRewardsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves a loyalty reward.
     */
    public GetLoyaltyRewardResponse get(GetRewardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Deletes a loyalty reward by doing the following:
     * <ul>
     * <li>Returns the loyalty points back to the loyalty account.</li>
     * <li>If an order ID was specified when the reward was created
     * (see <a href="api-endpoint:Loyalty-CreateLoyaltyReward">CreateLoyaltyReward</a>),
     * it updates the order by removing the reward and related
     * discounts.</li>
     * </ul>
     * <p>You cannot delete a reward that has reached the terminal state (REDEEMED).</p>
     */
    public DeleteLoyaltyRewardResponse delete(DeleteRewardsRequest request) {
        return this.rawClient.delete(request).body();
    }

    /**
     * Deletes a loyalty reward by doing the following:
     * <ul>
     * <li>Returns the loyalty points back to the loyalty account.</li>
     * <li>If an order ID was specified when the reward was created
     * (see <a href="api-endpoint:Loyalty-CreateLoyaltyReward">CreateLoyaltyReward</a>),
     * it updates the order by removing the reward and related
     * discounts.</li>
     * </ul>
     * <p>You cannot delete a reward that has reached the terminal state (REDEEMED).</p>
     */
    public DeleteLoyaltyRewardResponse delete(DeleteRewardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.delete(request, requestOptions).body();
    }

    /**
     * Redeems a loyalty reward.
     * <p>The endpoint sets the reward to the <code>REDEEMED</code> terminal state.</p>
     * <p>If you are using your own order processing system (not using the
     * Orders API), you call this endpoint after the buyer paid for the
     * purchase.</p>
     * <p>After the reward reaches the terminal state, it cannot be deleted.
     * In other words, points used for the reward cannot be returned
     * to the account.</p>
     */
    public RedeemLoyaltyRewardResponse redeem(RedeemLoyaltyRewardRequest request) {
        return this.rawClient.redeem(request).body();
    }

    /**
     * Redeems a loyalty reward.
     * <p>The endpoint sets the reward to the <code>REDEEMED</code> terminal state.</p>
     * <p>If you are using your own order processing system (not using the
     * Orders API), you call this endpoint after the buyer paid for the
     * purchase.</p>
     * <p>After the reward reaches the terminal state, it cannot be deleted.
     * In other words, points used for the reward cannot be returned
     * to the account.</p>
     */
    public RedeemLoyaltyRewardResponse redeem(RedeemLoyaltyRewardRequest request, RequestOptions requestOptions) {
        return this.rawClient.redeem(request, requestOptions).body();
    }
}
