/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.loyalty.types.CalculateLoyaltyPointsRequest;
import com.squareup.square.loyalty.types.GetProgramsRequest;
import com.squareup.square.types.CalculateLoyaltyPointsResponse;
import com.squareup.square.types.GetLoyaltyProgramResponse;
import com.squareup.square.types.ListLoyaltyProgramsResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawProgramsClient {
    protected final ClientOptions clientOptions;

    public RawProgramsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns a list of loyalty programs in the seller's account.
     * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see <a href="https://developer.squareup.com/docs/loyalty/overview">Loyalty Program Overview</a>.
     * <p>Replaced with <a href="api-endpoint:Loyalty-RetrieveLoyaltyProgram">RetrieveLoyaltyProgram</a> when used with the keyword <code>main</code>.</p>
     */
    public SquareClientHttpResponse<ListLoyaltyProgramsResponse> list() {
        return list(null);
    }

    /**
     * Returns a list of loyalty programs in the seller's account.
     * Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see <a href="https://developer.squareup.com/docs/loyalty/overview">Loyalty Program Overview</a>.
     * <p>Replaced with <a href="api-endpoint:Loyalty-RetrieveLoyaltyProgram">RetrieveLoyaltyProgram</a> when used with the keyword <code>main</code>.</p>
     */
    public SquareClientHttpResponse<ListLoyaltyProgramsResponse> list(RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListLoyaltyProgramsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword <code>main</code>.
     * <p>Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see <a href="https://developer.squareup.com/docs/loyalty/overview">Loyalty Program Overview</a>.</p>
     */
    public SquareClientHttpResponse<GetLoyaltyProgramResponse> get(GetProgramsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves the loyalty program in a seller's account, specified by the program ID or the keyword <code>main</code>.
     * <p>Loyalty programs define how buyers can earn points and redeem points for rewards. Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard. For more information, see <a href="https://developer.squareup.com/docs/loyalty/overview">Loyalty Program Overview</a>.</p>
     */
    public SquareClientHttpResponse<GetLoyaltyProgramResponse> get(
            GetProgramsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetLoyaltyProgramResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Calculates the number of points a buyer can earn from a purchase. Applications might call this endpoint
     * to display the points to the buyer.
     * <ul>
     * <li>
     * <p>If you are using the Orders API to manage orders, provide the <code>order_id</code> and (optional) <code>loyalty_account_id</code>.
     * Square reads the order to compute the points earned from the base loyalty program and an associated
     * <a href="entity:LoyaltyPromotion">loyalty promotion</a>.</p>
     * </li>
     * <li>
     * <p>If you are not using the Orders API to manage orders, provide <code>transaction_amount_money</code> with the
     * purchase amount. Square uses this amount to calculate the points earned from the base loyalty program,
     * but not points earned from a loyalty promotion. For spend-based and visit-based programs, the <code>tax_mode</code>
     * setting of the accrual rule indicates how taxes should be treated for loyalty points accrual.
     * If the purchase qualifies for program points, call
     * <a href="api-endpoint:Loyalty-ListLoyaltyPromotions">ListLoyaltyPromotions</a> and perform a client-side computation
     * to calculate whether the purchase also qualifies for promotion points. For more information, see
     * <a href="https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points">Calculating promotion points</a>.</p>
     * </li>
     * </ul>
     */
    public SquareClientHttpResponse<CalculateLoyaltyPointsResponse> calculate(CalculateLoyaltyPointsRequest request) {
        return calculate(request, null);
    }

    /**
     * Calculates the number of points a buyer can earn from a purchase. Applications might call this endpoint
     * to display the points to the buyer.
     * <ul>
     * <li>
     * <p>If you are using the Orders API to manage orders, provide the <code>order_id</code> and (optional) <code>loyalty_account_id</code>.
     * Square reads the order to compute the points earned from the base loyalty program and an associated
     * <a href="entity:LoyaltyPromotion">loyalty promotion</a>.</p>
     * </li>
     * <li>
     * <p>If you are not using the Orders API to manage orders, provide <code>transaction_amount_money</code> with the
     * purchase amount. Square uses this amount to calculate the points earned from the base loyalty program,
     * but not points earned from a loyalty promotion. For spend-based and visit-based programs, the <code>tax_mode</code>
     * setting of the accrual rule indicates how taxes should be treated for loyalty points accrual.
     * If the purchase qualifies for program points, call
     * <a href="api-endpoint:Loyalty-ListLoyaltyPromotions">ListLoyaltyPromotions</a> and perform a client-side computation
     * to calculate whether the purchase also qualifies for promotion points. For more information, see
     * <a href="https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points">Calculating promotion points</a>.</p>
     * </li>
     * </ul>
     */
    public SquareClientHttpResponse<CalculateLoyaltyPointsResponse> calculate(
            CalculateLoyaltyPointsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .addPathSegments("calculate")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), CalculateLoyaltyPointsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }
}
