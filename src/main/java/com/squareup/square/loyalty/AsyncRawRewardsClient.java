/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.loyalty.types.CreateLoyaltyRewardRequest;
import com.squareup.square.loyalty.types.DeleteRewardsRequest;
import com.squareup.square.loyalty.types.GetRewardsRequest;
import com.squareup.square.loyalty.types.RedeemLoyaltyRewardRequest;
import com.squareup.square.loyalty.types.SearchLoyaltyRewardsRequest;
import com.squareup.square.types.CreateLoyaltyRewardResponse;
import com.squareup.square.types.DeleteLoyaltyRewardResponse;
import com.squareup.square.types.GetLoyaltyRewardResponse;
import com.squareup.square.types.RedeemLoyaltyRewardResponse;
import com.squareup.square.types.SearchLoyaltyRewardsResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawRewardsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawRewardsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates a loyalty reward. In the process, the endpoint does following:
     * <ul>
     * <li>Uses the <code>reward_tier_id</code> in the request to determine the number of points
     * to lock for this reward.</li>
     * <li>If the request includes <code>order_id</code>, it adds the reward and related discount to the order.</li>
     * </ul>
     * <p>After a reward is created, the points are locked and
     * not available for the buyer to redeem another reward.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateLoyaltyRewardResponse>> create(
            CreateLoyaltyRewardRequest request) {
        return create(request, null);
    }

    /**
     * Creates a loyalty reward. In the process, the endpoint does following:
     * <ul>
     * <li>Uses the <code>reward_tier_id</code> in the request to determine the number of points
     * to lock for this reward.</li>
     * <li>If the request includes <code>order_id</code>, it adds the reward and related discount to the order.</li>
     * </ul>
     * <p>After a reward is created, the points are locked and
     * not available for the buyer to redeem another reward.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateLoyaltyRewardResponse>> create(
            CreateLoyaltyRewardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/rewards")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<CreateLoyaltyRewardResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), CreateLoyaltyRewardResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SearchLoyaltyRewardsResponse>> search() {
        return search(SearchLoyaltyRewardsRequest.builder().build());
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SearchLoyaltyRewardsResponse>> search(
            SearchLoyaltyRewardsRequest request) {
        return search(request, null);
    }

    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a <code>query</code> object, <code>loyalty_account_id</code> is required and <code>status</code> is  optional.
     * <p>If you know a reward ID, use the
     * <a href="api-endpoint:Loyalty-RetrieveLoyaltyReward">RetrieveLoyaltyReward</a> endpoint.</p>
     * <p>Search results are sorted by <code>updated_at</code> in descending order.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SearchLoyaltyRewardsResponse>> search(
            SearchLoyaltyRewardsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/rewards/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SearchLoyaltyRewardsResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), SearchLoyaltyRewardsResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a loyalty reward.
     */
    public CompletableFuture<SquareClientHttpResponse<GetLoyaltyRewardResponse>> get(GetRewardsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a loyalty reward.
     */
    public CompletableFuture<SquareClientHttpResponse<GetLoyaltyRewardResponse>> get(
            GetRewardsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/rewards")
                .addPathSegment(request.getRewardId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<GetLoyaltyRewardResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetLoyaltyRewardResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Deletes a loyalty reward by doing the following:
     * <ul>
     * <li>Returns the loyalty points back to the loyalty account.</li>
     * <li>If an order ID was specified when the reward was created
     * (see <a href="api-endpoint:Loyalty-CreateLoyaltyReward">CreateLoyaltyReward</a>),
     * it updates the order by removing the reward and related
     * discounts.</li>
     * </ul>
     * <p>You cannot delete a reward that has reached the terminal state (REDEEMED).</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteLoyaltyRewardResponse>> delete(
            DeleteRewardsRequest request) {
        return delete(request, null);
    }

    /**
     * Deletes a loyalty reward by doing the following:
     * <ul>
     * <li>Returns the loyalty points back to the loyalty account.</li>
     * <li>If an order ID was specified when the reward was created
     * (see <a href="api-endpoint:Loyalty-CreateLoyaltyReward">CreateLoyaltyReward</a>),
     * it updates the order by removing the reward and related
     * discounts.</li>
     * </ul>
     * <p>You cannot delete a reward that has reached the terminal state (REDEEMED).</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteLoyaltyRewardResponse>> delete(
            DeleteRewardsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/rewards")
                .addPathSegment(request.getRewardId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<DeleteLoyaltyRewardResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), DeleteLoyaltyRewardResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Redeems a loyalty reward.
     * <p>The endpoint sets the reward to the <code>REDEEMED</code> terminal state.</p>
     * <p>If you are using your own order processing system (not using the
     * Orders API), you call this endpoint after the buyer paid for the
     * purchase.</p>
     * <p>After the reward reaches the terminal state, it cannot be deleted.
     * In other words, points used for the reward cannot be returned
     * to the account.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RedeemLoyaltyRewardResponse>> redeem(
            RedeemLoyaltyRewardRequest request) {
        return redeem(request, null);
    }

    /**
     * Redeems a loyalty reward.
     * <p>The endpoint sets the reward to the <code>REDEEMED</code> terminal state.</p>
     * <p>If you are using your own order processing system (not using the
     * Orders API), you call this endpoint after the buyer paid for the
     * purchase.</p>
     * <p>After the reward reaches the terminal state, it cannot be deleted.
     * In other words, points used for the reward cannot be returned
     * to the account.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RedeemLoyaltyRewardResponse>> redeem(
            RedeemLoyaltyRewardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/rewards")
                .addPathSegment(request.getRewardId())
                .addPathSegments("redeem")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<RedeemLoyaltyRewardResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), RedeemLoyaltyRewardResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
