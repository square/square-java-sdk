/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.LoyaltyReward;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateLoyaltyRewardRequest.Builder.class)
public final class CreateLoyaltyRewardRequest {
    private final LoyaltyReward reward;

    private final String idempotencyKey;

    private final Map<String, Object> additionalProperties;

    private CreateLoyaltyRewardRequest(
            LoyaltyReward reward, String idempotencyKey, Map<String, Object> additionalProperties) {
        this.reward = reward;
        this.idempotencyKey = idempotencyKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The reward to create.
     */
    @JsonProperty("reward")
    public LoyaltyReward getReward() {
        return reward;
    }

    /**
     * @return A unique string that identifies this <code>CreateLoyaltyReward</code> request.
     * Keys can be any valid string, but must be unique for every request.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateLoyaltyRewardRequest && equalTo((CreateLoyaltyRewardRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateLoyaltyRewardRequest other) {
        return reward.equals(other.reward) && idempotencyKey.equals(other.idempotencyKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.reward, this.idempotencyKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RewardStage builder() {
        return new Builder();
    }

    public interface RewardStage {
        /**
         * <p>The reward to create.</p>
         */
        IdempotencyKeyStage reward(@NotNull LoyaltyReward reward);

        Builder from(CreateLoyaltyRewardRequest other);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies this <code>CreateLoyaltyReward</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         */
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface _FinalStage {
        CreateLoyaltyRewardRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RewardStage, IdempotencyKeyStage, _FinalStage {
        private LoyaltyReward reward;

        private String idempotencyKey;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateLoyaltyRewardRequest other) {
            reward(other.getReward());
            idempotencyKey(other.getIdempotencyKey());
            return this;
        }

        /**
         * <p>The reward to create.</p>
         * <p>The reward to create.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("reward")
        public IdempotencyKeyStage reward(@NotNull LoyaltyReward reward) {
            this.reward = Objects.requireNonNull(reward, "reward must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>CreateLoyaltyReward</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         * <p>A unique string that identifies this <code>CreateLoyaltyReward</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        @java.lang.Override
        public CreateLoyaltyRewardRequest build() {
            return new CreateLoyaltyRewardRequest(reward, idempotencyKey, additionalProperties);
        }
    }
}
