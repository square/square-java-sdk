/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.LoyaltyEventAdjustPoints;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AdjustLoyaltyPointsRequest.Builder.class)
public final class AdjustLoyaltyPointsRequest {
    private final String accountId;

    private final String idempotencyKey;

    private final LoyaltyEventAdjustPoints adjustPoints;

    private final Optional<Boolean> allowNegativeBalance;

    private final Map<String, Object> additionalProperties;

    private AdjustLoyaltyPointsRequest(
            String accountId,
            String idempotencyKey,
            LoyaltyEventAdjustPoints adjustPoints,
            Optional<Boolean> allowNegativeBalance,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.idempotencyKey = idempotencyKey;
        this.adjustPoints = adjustPoints;
        this.allowNegativeBalance = allowNegativeBalance;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.
     */
    @JsonProperty("account_id")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return A unique string that identifies this <code>AdjustLoyaltyPoints</code> request.
     * Keys can be any valid string, but must be unique for every request.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The points to add or subtract and the reason for the adjustment. To add points, specify a positive integer.
     * To subtract points, specify a negative integer.
     */
    @JsonProperty("adjust_points")
    public LoyaltyEventAdjustPoints getAdjustPoints() {
        return adjustPoints;
    }

    /**
     * @return Indicates whether to allow a negative adjustment to result in a negative balance. If <code>true</code>, a negative
     * balance is allowed when subtracting points. If <code>false</code>, Square returns a <code>BAD_REQUEST</code> error when subtracting
     * the specified number of points would result in a negative balance. The default value is <code>false</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getAllowNegativeBalance() {
        if (allowNegativeBalance == null) {
            return Optional.empty();
        }
        return allowNegativeBalance;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("allow_negative_balance")
    private Optional<Boolean> _getAllowNegativeBalance() {
        return allowNegativeBalance;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AdjustLoyaltyPointsRequest && equalTo((AdjustLoyaltyPointsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AdjustLoyaltyPointsRequest other) {
        return accountId.equals(other.accountId)
                && idempotencyKey.equals(other.idempotencyKey)
                && adjustPoints.equals(other.adjustPoints)
                && allowNegativeBalance.equals(other.allowNegativeBalance);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.idempotencyKey, this.adjustPoints, this.allowNegativeBalance);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         */
        IdempotencyKeyStage accountId(@NotNull String accountId);

        Builder from(AdjustLoyaltyPointsRequest other);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies this <code>AdjustLoyaltyPoints</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         */
        AdjustPointsStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface AdjustPointsStage {
        /**
         * <p>The points to add or subtract and the reason for the adjustment. To add points, specify a positive integer.
         * To subtract points, specify a negative integer.</p>
         */
        _FinalStage adjustPoints(@NotNull LoyaltyEventAdjustPoints adjustPoints);
    }

    public interface _FinalStage {
        AdjustLoyaltyPointsRequest build();

        /**
         * <p>Indicates whether to allow a negative adjustment to result in a negative balance. If <code>true</code>, a negative
         * balance is allowed when subtracting points. If <code>false</code>, Square returns a <code>BAD_REQUEST</code> error when subtracting
         * the specified number of points would result in a negative balance. The default value is <code>false</code>.</p>
         */
        _FinalStage allowNegativeBalance(Optional<Boolean> allowNegativeBalance);

        _FinalStage allowNegativeBalance(Boolean allowNegativeBalance);

        _FinalStage allowNegativeBalance(Nullable<Boolean> allowNegativeBalance);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountIdStage, IdempotencyKeyStage, AdjustPointsStage, _FinalStage {
        private String accountId;

        private String idempotencyKey;

        private LoyaltyEventAdjustPoints adjustPoints;

        private Optional<Boolean> allowNegativeBalance = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AdjustLoyaltyPointsRequest other) {
            accountId(other.getAccountId());
            idempotencyKey(other.getIdempotencyKey());
            adjustPoints(other.getAdjustPoints());
            allowNegativeBalance(other.getAllowNegativeBalance());
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("account_id")
        public IdempotencyKeyStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>AdjustLoyaltyPoints</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         * <p>A unique string that identifies this <code>AdjustLoyaltyPoints</code> request.
         * Keys can be any valid string, but must be unique for every request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public AdjustPointsStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The points to add or subtract and the reason for the adjustment. To add points, specify a positive integer.
         * To subtract points, specify a negative integer.</p>
         * <p>The points to add or subtract and the reason for the adjustment. To add points, specify a positive integer.
         * To subtract points, specify a negative integer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("adjust_points")
        public _FinalStage adjustPoints(@NotNull LoyaltyEventAdjustPoints adjustPoints) {
            this.adjustPoints = Objects.requireNonNull(adjustPoints, "adjustPoints must not be null");
            return this;
        }

        /**
         * <p>Indicates whether to allow a negative adjustment to result in a negative balance. If <code>true</code>, a negative
         * balance is allowed when subtracting points. If <code>false</code>, Square returns a <code>BAD_REQUEST</code> error when subtracting
         * the specified number of points would result in a negative balance. The default value is <code>false</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allowNegativeBalance(Nullable<Boolean> allowNegativeBalance) {
            if (allowNegativeBalance.isNull()) {
                this.allowNegativeBalance = null;
            } else if (allowNegativeBalance.isEmpty()) {
                this.allowNegativeBalance = Optional.empty();
            } else {
                this.allowNegativeBalance = Optional.of(allowNegativeBalance.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether to allow a negative adjustment to result in a negative balance. If <code>true</code>, a negative
         * balance is allowed when subtracting points. If <code>false</code>, Square returns a <code>BAD_REQUEST</code> error when subtracting
         * the specified number of points would result in a negative balance. The default value is <code>false</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allowNegativeBalance(Boolean allowNegativeBalance) {
            this.allowNegativeBalance = Optional.ofNullable(allowNegativeBalance);
            return this;
        }

        /**
         * <p>Indicates whether to allow a negative adjustment to result in a negative balance. If <code>true</code>, a negative
         * balance is allowed when subtracting points. If <code>false</code>, Square returns a <code>BAD_REQUEST</code> error when subtracting
         * the specified number of points would result in a negative balance. The default value is <code>false</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "allow_negative_balance", nulls = Nulls.SKIP)
        public _FinalStage allowNegativeBalance(Optional<Boolean> allowNegativeBalance) {
            this.allowNegativeBalance = allowNegativeBalance;
            return this;
        }

        @java.lang.Override
        public AdjustLoyaltyPointsRequest build() {
            return new AdjustLoyaltyPointsRequest(
                    accountId, idempotencyKey, adjustPoints, allowNegativeBalance, additionalProperties);
        }
    }
}
