/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.LoyaltyEventAccumulatePoints;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccumulateLoyaltyPointsRequest.Builder.class)
public final class AccumulateLoyaltyPointsRequest {
    private final String accountId;

    private final LoyaltyEventAccumulatePoints accumulatePoints;

    private final String idempotencyKey;

    private final String locationId;

    private final Map<String, Object> additionalProperties;

    private AccumulateLoyaltyPointsRequest(
            String accountId,
            LoyaltyEventAccumulatePoints accumulatePoints,
            String idempotencyKey,
            String locationId,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.accumulatePoints = accumulatePoints;
        this.idempotencyKey = idempotencyKey;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.
     */
    @JsonProperty("account_id")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return The points to add to the account.
     * If you are using the Orders API to manage orders, specify the order ID.
     * Otherwise, specify the points to add.
     */
    @JsonProperty("accumulate_points")
    public LoyaltyEventAccumulatePoints getAccumulatePoints() {
        return accumulatePoints;
    }

    /**
     * @return A unique string that identifies the <code>AccumulateLoyaltyPoints</code> request.
     * Keys can be any valid string but must be unique for every request.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The <a href="entity:Location">location</a> where the purchase was made.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccumulateLoyaltyPointsRequest && equalTo((AccumulateLoyaltyPointsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccumulateLoyaltyPointsRequest other) {
        return accountId.equals(other.accountId)
                && accumulatePoints.equals(other.accumulatePoints)
                && idempotencyKey.equals(other.idempotencyKey)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.accumulatePoints, this.idempotencyKey, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         */
        AccumulatePointsStage accountId(@NotNull String accountId);

        Builder from(AccumulateLoyaltyPointsRequest other);
    }

    public interface AccumulatePointsStage {
        /**
         * <p>The points to add to the account.
         * If you are using the Orders API to manage orders, specify the order ID.
         * Otherwise, specify the points to add.</p>
         */
        IdempotencyKeyStage accumulatePoints(@NotNull LoyaltyEventAccumulatePoints accumulatePoints);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies the <code>AccumulateLoyaltyPoints</code> request.
         * Keys can be any valid string but must be unique for every request.</p>
         */
        LocationIdStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface LocationIdStage {
        /**
         * <p>The <a href="entity:Location">location</a> where the purchase was made.</p>
         */
        _FinalStage locationId(@NotNull String locationId);
    }

    public interface _FinalStage {
        AccumulateLoyaltyPointsRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AccountIdStage, AccumulatePointsStage, IdempotencyKeyStage, LocationIdStage, _FinalStage {
        private String accountId;

        private LoyaltyEventAccumulatePoints accumulatePoints;

        private String idempotencyKey;

        private String locationId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AccumulateLoyaltyPointsRequest other) {
            accountId(other.getAccountId());
            accumulatePoints(other.getAccumulatePoints());
            idempotencyKey(other.getIdempotencyKey());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("account_id")
        public AccumulatePointsStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>The points to add to the account.
         * If you are using the Orders API to manage orders, specify the order ID.
         * Otherwise, specify the points to add.</p>
         * <p>The points to add to the account.
         * If you are using the Orders API to manage orders, specify the order ID.
         * Otherwise, specify the points to add.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("accumulate_points")
        public IdempotencyKeyStage accumulatePoints(@NotNull LoyaltyEventAccumulatePoints accumulatePoints) {
            this.accumulatePoints = Objects.requireNonNull(accumulatePoints, "accumulatePoints must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies the <code>AccumulateLoyaltyPoints</code> request.
         * Keys can be any valid string but must be unique for every request.</p>
         * <p>A unique string that identifies the <code>AccumulateLoyaltyPoints</code> request.
         * Keys can be any valid string but must be unique for every request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public LocationIdStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The <a href="entity:Location">location</a> where the purchase was made.</p>
         * <p>The <a href="entity:Location">location</a> where the purchase was made.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        @java.lang.Override
        public AccumulateLoyaltyPointsRequest build() {
            return new AccumulateLoyaltyPointsRequest(
                    accountId, accumulatePoints, idempotencyKey, locationId, additionalProperties);
        }
    }
}
