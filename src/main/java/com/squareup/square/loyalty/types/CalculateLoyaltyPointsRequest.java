/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.Money;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculateLoyaltyPointsRequest.Builder.class)
public final class CalculateLoyaltyPointsRequest {
    private final String programId;

    private final Optional<String> orderId;

    private final Optional<Money> transactionAmountMoney;

    private final Optional<String> loyaltyAccountId;

    private final Map<String, Object> additionalProperties;

    private CalculateLoyaltyPointsRequest(
            String programId,
            Optional<String> orderId,
            Optional<Money> transactionAmountMoney,
            Optional<String> loyaltyAccountId,
            Map<String, Object> additionalProperties) {
        this.programId = programId;
        this.orderId = orderId;
        this.transactionAmountMoney = transactionAmountMoney;
        this.loyaltyAccountId = loyaltyAccountId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:LoyaltyProgram">loyalty program</a>, which defines the rules for accruing points.
     */
    @JsonProperty("program_id")
    public String getProgramId() {
        return programId;
    }

    /**
     * @return The <a href="entity:Order">order</a> ID for which to calculate the points.
     * Specify this field if your application uses the Orders API to process orders.
     * Otherwise, specify the <code>transaction_amount_money</code>.
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return The purchase amount for which to calculate the points.
     * Specify this field if your application does not use the Orders API to process orders.
     * Otherwise, specify the <code>order_id</code>.
     */
    @JsonProperty("transaction_amount_money")
    public Optional<Money> getTransactionAmountMoney() {
        return transactionAmountMoney;
    }

    /**
     * @return The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>. Optionally specify this field
     * if your application uses the Orders API to process orders.
     * <p>If specified, the <code>promotion_points</code> field in the response shows the number of points the buyer would
     * earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
     * <code>trigger_limit</code> (the maximum number of times that a buyer can trigger the promotion) has been reached.
     * If not specified, the <code>promotion_points</code> field shows the number of points the purchase qualifies
     * for regardless of the trigger limit.</p>
     */
    @JsonIgnore
    public Optional<String> getLoyaltyAccountId() {
        if (loyaltyAccountId == null) {
            return Optional.empty();
        }
        return loyaltyAccountId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("loyalty_account_id")
    private Optional<String> _getLoyaltyAccountId() {
        return loyaltyAccountId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculateLoyaltyPointsRequest && equalTo((CalculateLoyaltyPointsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculateLoyaltyPointsRequest other) {
        return programId.equals(other.programId)
                && orderId.equals(other.orderId)
                && transactionAmountMoney.equals(other.transactionAmountMoney)
                && loyaltyAccountId.equals(other.loyaltyAccountId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.programId, this.orderId, this.transactionAmountMoney, this.loyaltyAccountId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProgramIdStage builder() {
        return new Builder();
    }

    public interface ProgramIdStage {
        /**
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a>, which defines the rules for accruing points.</p>
         */
        _FinalStage programId(@NotNull String programId);

        Builder from(CalculateLoyaltyPointsRequest other);
    }

    public interface _FinalStage {
        CalculateLoyaltyPointsRequest build();

        /**
         * <p>The <a href="entity:Order">order</a> ID for which to calculate the points.
         * Specify this field if your application uses the Orders API to process orders.
         * Otherwise, specify the <code>transaction_amount_money</code>.</p>
         */
        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage orderId(Nullable<String> orderId);

        /**
         * <p>The purchase amount for which to calculate the points.
         * Specify this field if your application does not use the Orders API to process orders.
         * Otherwise, specify the <code>order_id</code>.</p>
         */
        _FinalStage transactionAmountMoney(Optional<Money> transactionAmountMoney);

        _FinalStage transactionAmountMoney(Money transactionAmountMoney);

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>. Optionally specify this field
         * if your application uses the Orders API to process orders.</p>
         * <p>If specified, the <code>promotion_points</code> field in the response shows the number of points the buyer would
         * earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
         * <code>trigger_limit</code> (the maximum number of times that a buyer can trigger the promotion) has been reached.
         * If not specified, the <code>promotion_points</code> field shows the number of points the purchase qualifies
         * for regardless of the trigger limit.</p>
         */
        _FinalStage loyaltyAccountId(Optional<String> loyaltyAccountId);

        _FinalStage loyaltyAccountId(String loyaltyAccountId);

        _FinalStage loyaltyAccountId(Nullable<String> loyaltyAccountId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProgramIdStage, _FinalStage {
        private String programId;

        private Optional<String> loyaltyAccountId = Optional.empty();

        private Optional<Money> transactionAmountMoney = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculateLoyaltyPointsRequest other) {
            programId(other.getProgramId());
            orderId(other.getOrderId());
            transactionAmountMoney(other.getTransactionAmountMoney());
            loyaltyAccountId(other.getLoyaltyAccountId());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a>, which defines the rules for accruing points.</p>
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a>, which defines the rules for accruing points.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("program_id")
        public _FinalStage programId(@NotNull String programId) {
            this.programId = Objects.requireNonNull(programId, "programId must not be null");
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>. Optionally specify this field
         * if your application uses the Orders API to process orders.</p>
         * <p>If specified, the <code>promotion_points</code> field in the response shows the number of points the buyer would
         * earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
         * <code>trigger_limit</code> (the maximum number of times that a buyer can trigger the promotion) has been reached.
         * If not specified, the <code>promotion_points</code> field shows the number of points the purchase qualifies
         * for regardless of the trigger limit.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage loyaltyAccountId(Nullable<String> loyaltyAccountId) {
            if (loyaltyAccountId.isNull()) {
                this.loyaltyAccountId = null;
            } else if (loyaltyAccountId.isEmpty()) {
                this.loyaltyAccountId = Optional.empty();
            } else {
                this.loyaltyAccountId = Optional.of(loyaltyAccountId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>. Optionally specify this field
         * if your application uses the Orders API to process orders.</p>
         * <p>If specified, the <code>promotion_points</code> field in the response shows the number of points the buyer would
         * earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
         * <code>trigger_limit</code> (the maximum number of times that a buyer can trigger the promotion) has been reached.
         * If not specified, the <code>promotion_points</code> field shows the number of points the purchase qualifies
         * for regardless of the trigger limit.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage loyaltyAccountId(String loyaltyAccountId) {
            this.loyaltyAccountId = Optional.ofNullable(loyaltyAccountId);
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:LoyaltyAccount">loyalty account</a>. Optionally specify this field
         * if your application uses the Orders API to process orders.</p>
         * <p>If specified, the <code>promotion_points</code> field in the response shows the number of points the buyer would
         * earn from the purchase. In this case, Square uses the account ID to determine whether the promotion's
         * <code>trigger_limit</code> (the maximum number of times that a buyer can trigger the promotion) has been reached.
         * If not specified, the <code>promotion_points</code> field shows the number of points the purchase qualifies
         * for regardless of the trigger limit.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "loyalty_account_id", nulls = Nulls.SKIP)
        public _FinalStage loyaltyAccountId(Optional<String> loyaltyAccountId) {
            this.loyaltyAccountId = loyaltyAccountId;
            return this;
        }

        /**
         * <p>The purchase amount for which to calculate the points.
         * Specify this field if your application does not use the Orders API to process orders.
         * Otherwise, specify the <code>order_id</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionAmountMoney(Money transactionAmountMoney) {
            this.transactionAmountMoney = Optional.ofNullable(transactionAmountMoney);
            return this;
        }

        /**
         * <p>The purchase amount for which to calculate the points.
         * Specify this field if your application does not use the Orders API to process orders.
         * Otherwise, specify the <code>order_id</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transaction_amount_money", nulls = Nulls.SKIP)
        public _FinalStage transactionAmountMoney(Optional<Money> transactionAmountMoney) {
            this.transactionAmountMoney = transactionAmountMoney;
            return this;
        }

        /**
         * <p>The <a href="entity:Order">order</a> ID for which to calculate the points.
         * Specify this field if your application uses the Orders API to process orders.
         * Otherwise, specify the <code>transaction_amount_money</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:Order">order</a> ID for which to calculate the points.
         * Specify this field if your application uses the Orders API to process orders.
         * Otherwise, specify the <code>transaction_amount_money</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>The <a href="entity:Order">order</a> ID for which to calculate the points.
         * Specify this field if your application uses the Orders API to process orders.
         * Otherwise, specify the <code>transaction_amount_money</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.Override
        public CalculateLoyaltyPointsRequest build() {
            return new CalculateLoyaltyPointsRequest(
                    programId, orderId, transactionAmountMoney, loyaltyAccountId, additionalProperties);
        }
    }
}
