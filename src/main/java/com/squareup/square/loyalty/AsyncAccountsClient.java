/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.loyalty.types.AccumulateLoyaltyPointsRequest;
import com.squareup.square.loyalty.types.AdjustLoyaltyPointsRequest;
import com.squareup.square.loyalty.types.CreateLoyaltyAccountRequest;
import com.squareup.square.loyalty.types.GetAccountsRequest;
import com.squareup.square.loyalty.types.SearchLoyaltyAccountsRequest;
import com.squareup.square.types.AccumulateLoyaltyPointsResponse;
import com.squareup.square.types.AdjustLoyaltyPointsResponse;
import com.squareup.square.types.CreateLoyaltyAccountResponse;
import com.squareup.square.types.GetLoyaltyAccountResponse;
import com.squareup.square.types.SearchLoyaltyAccountsResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncAccountsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAccountsClient rawClient;

    public AsyncAccountsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAccountsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAccountsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a loyalty account. To create a loyalty account, you must provide the <code>program_id</code> and a <code>mapping</code> with the <code>phone_number</code> of the buyer.
     */
    public CompletableFuture<CreateLoyaltyAccountResponse> create(CreateLoyaltyAccountRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a loyalty account. To create a loyalty account, you must provide the <code>program_id</code> and a <code>mapping</code> with the <code>phone_number</code> of the buyer.
     */
    public CompletableFuture<CreateLoyaltyAccountResponse> create(
            CreateLoyaltyAccountRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Searches for loyalty accounts in a loyalty program.
     * <p>You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty <code>query</code> object or omit it entirely.</p>
     * <p>Search results are sorted by <code>created_at</code> in ascending order.</p>
     */
    public CompletableFuture<SearchLoyaltyAccountsResponse> search() {
        return this.rawClient.search().thenApply(response -> response.body());
    }

    /**
     * Searches for loyalty accounts in a loyalty program.
     * <p>You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty <code>query</code> object or omit it entirely.</p>
     * <p>Search results are sorted by <code>created_at</code> in ascending order.</p>
     */
    public CompletableFuture<SearchLoyaltyAccountsResponse> search(SearchLoyaltyAccountsRequest request) {
        return this.rawClient.search(request).thenApply(response -> response.body());
    }

    /**
     * Searches for loyalty accounts in a loyalty program.
     * <p>You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty <code>query</code> object or omit it entirely.</p>
     * <p>Search results are sorted by <code>created_at</code> in ascending order.</p>
     */
    public CompletableFuture<SearchLoyaltyAccountsResponse> search(
            SearchLoyaltyAccountsRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a loyalty account.
     */
    public CompletableFuture<GetLoyaltyAccountResponse> get(GetAccountsRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a loyalty account.
     */
    public CompletableFuture<GetLoyaltyAccountResponse> get(GetAccountsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Adds points earned from a purchase to a <a href="entity:LoyaltyAccount">loyalty account</a>.
     * <ul>
     * <li>
     * <p>If you are using the Orders API to manage orders, provide the <code>order_id</code>. Square reads the order
     * to compute the points earned from both the base loyalty program and an associated
     * <a href="entity:LoyaltyPromotion">loyalty promotion</a>. For purchases that qualify for multiple accrual
     * rules, Square computes points based on the accrual rule that grants the most points.
     * For purchases that qualify for multiple promotions, Square computes points based on the most
     * recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.</p>
     * </li>
     * <li>
     * <p>If you are not using the Orders API to manage orders, provide <code>points</code> with the number of points to add.
     * You must first perform a client-side computation of the points earned from the loyalty program and
     * loyalty promotion. For spend-based and visit-based programs, you can call <a href="api-endpoint:Loyalty-CalculateLoyaltyPoints">CalculateLoyaltyPoints</a>
     * to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
     * <a href="https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points">Calculating promotion points</a>.</p>
     * </li>
     * </ul>
     */
    public CompletableFuture<AccumulateLoyaltyPointsResponse> accumulatePoints(AccumulateLoyaltyPointsRequest request) {
        return this.rawClient.accumulatePoints(request).thenApply(response -> response.body());
    }

    /**
     * Adds points earned from a purchase to a <a href="entity:LoyaltyAccount">loyalty account</a>.
     * <ul>
     * <li>
     * <p>If you are using the Orders API to manage orders, provide the <code>order_id</code>. Square reads the order
     * to compute the points earned from both the base loyalty program and an associated
     * <a href="entity:LoyaltyPromotion">loyalty promotion</a>. For purchases that qualify for multiple accrual
     * rules, Square computes points based on the accrual rule that grants the most points.
     * For purchases that qualify for multiple promotions, Square computes points based on the most
     * recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.</p>
     * </li>
     * <li>
     * <p>If you are not using the Orders API to manage orders, provide <code>points</code> with the number of points to add.
     * You must first perform a client-side computation of the points earned from the loyalty program and
     * loyalty promotion. For spend-based and visit-based programs, you can call <a href="api-endpoint:Loyalty-CalculateLoyaltyPoints">CalculateLoyaltyPoints</a>
     * to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
     * <a href="https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points">Calculating promotion points</a>.</p>
     * </li>
     * </ul>
     */
    public CompletableFuture<AccumulateLoyaltyPointsResponse> accumulatePoints(
            AccumulateLoyaltyPointsRequest request, RequestOptions requestOptions) {
        return this.rawClient.accumulatePoints(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Adds points to or subtracts points from a buyer's account.
     * <p>Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
     * <a href="api-endpoint:Loyalty-AccumulateLoyaltyPoints">AccumulateLoyaltyPoints</a>
     * to add points when a buyer pays for the purchase.</p>
     */
    public CompletableFuture<AdjustLoyaltyPointsResponse> adjust(AdjustLoyaltyPointsRequest request) {
        return this.rawClient.adjust(request).thenApply(response -> response.body());
    }

    /**
     * Adds points to or subtracts points from a buyer's account.
     * <p>Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
     * <a href="api-endpoint:Loyalty-AccumulateLoyaltyPoints">AccumulateLoyaltyPoints</a>
     * to add points when a buyer pays for the purchase.</p>
     */
    public CompletableFuture<AdjustLoyaltyPointsResponse> adjust(
            AdjustLoyaltyPointsRequest request, RequestOptions requestOptions) {
        return this.rawClient.adjust(request, requestOptions).thenApply(response -> response.body());
    }
}
