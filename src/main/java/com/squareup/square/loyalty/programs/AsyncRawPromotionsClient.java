/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.loyalty.programs;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.QueryStringMapper;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.loyalty.programs.types.CancelPromotionsRequest;
import com.squareup.square.loyalty.programs.types.CreateLoyaltyPromotionRequest;
import com.squareup.square.loyalty.programs.types.GetPromotionsRequest;
import com.squareup.square.loyalty.programs.types.ListPromotionsRequest;
import com.squareup.square.types.CancelLoyaltyPromotionResponse;
import com.squareup.square.types.CreateLoyaltyPromotionResponse;
import com.squareup.square.types.GetLoyaltyPromotionResponse;
import com.squareup.square.types.ListLoyaltyPromotionsResponse;
import com.squareup.square.types.LoyaltyPromotion;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawPromotionsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawPromotionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Lists the loyalty promotions associated with a <a href="entity:LoyaltyProgram">loyalty program</a>.
     * Results are sorted by the <code>created_at</code> date in descending order (newest to oldest).
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<LoyaltyPromotion>>> list(
            ListPromotionsRequest request) {
        return list(request, null);
    }

    /**
     * Lists the loyalty promotions associated with a <a href="entity:LoyaltyProgram">loyalty program</a>.
     * Results are sorted by the <code>created_at</code> date in descending order (newest to oldest).
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<LoyaltyPromotion>>> list(
            ListPromotionsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .addPathSegments("promotions");
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<LoyaltyPromotion>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListLoyaltyPromotionsResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListLoyaltyPromotionsResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListPromotionsRequest nextRequest = ListPromotionsRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<LoyaltyPromotion> result =
                                parsedResponse.getLoyaltyPromotions().orElse(Collections.emptyList());
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<LoyaltyPromotion>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Creates a loyalty promotion for a <a href="entity:LoyaltyProgram">loyalty program</a>. A loyalty promotion
     * enables buyers to earn points in addition to those earned from the base loyalty program.
     * <p>This endpoint sets the loyalty promotion to the <code>ACTIVE</code> or <code>SCHEDULED</code> status, depending on the
     * <code>available_time</code> setting. A loyalty program can have a maximum of 10 loyalty promotions with an
     * <code>ACTIVE</code> or <code>SCHEDULED</code> status.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateLoyaltyPromotionResponse>> create(
            CreateLoyaltyPromotionRequest request) {
        return create(request, null);
    }

    /**
     * Creates a loyalty promotion for a <a href="entity:LoyaltyProgram">loyalty program</a>. A loyalty promotion
     * enables buyers to earn points in addition to those earned from the base loyalty program.
     * <p>This endpoint sets the loyalty promotion to the <code>ACTIVE</code> or <code>SCHEDULED</code> status, depending on the
     * <code>available_time</code> setting. A loyalty program can have a maximum of 10 loyalty promotions with an
     * <code>ACTIVE</code> or <code>SCHEDULED</code> status.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateLoyaltyPromotionResponse>> create(
            CreateLoyaltyPromotionRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .addPathSegments("promotions")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<CreateLoyaltyPromotionResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), CreateLoyaltyPromotionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a loyalty promotion.
     */
    public CompletableFuture<SquareClientHttpResponse<GetLoyaltyPromotionResponse>> get(GetPromotionsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a loyalty promotion.
     */
    public CompletableFuture<SquareClientHttpResponse<GetLoyaltyPromotionResponse>> get(
            GetPromotionsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .addPathSegments("promotions")
                .addPathSegment(request.getPromotionId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<GetLoyaltyPromotionResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetLoyaltyPromotionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Cancels a loyalty promotion. Use this endpoint to cancel an <code>ACTIVE</code> promotion earlier than the
     * end date, cancel an <code>ACTIVE</code> promotion when an end date is not specified, or cancel a <code>SCHEDULED</code> promotion.
     * Because updating a promotion is not supported, you can also use this endpoint to cancel a promotion before
     * you create a new one.
     * <p>This endpoint sets the loyalty promotion to the <code>CANCELED</code> state</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CancelLoyaltyPromotionResponse>> cancel(
            CancelPromotionsRequest request) {
        return cancel(request, null);
    }

    /**
     * Cancels a loyalty promotion. Use this endpoint to cancel an <code>ACTIVE</code> promotion earlier than the
     * end date, cancel an <code>ACTIVE</code> promotion when an end date is not specified, or cancel a <code>SCHEDULED</code> promotion.
     * Because updating a promotion is not supported, you can also use this endpoint to cancel a promotion before
     * you create a new one.
     * <p>This endpoint sets the loyalty promotion to the <code>CANCELED</code> state</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CancelLoyaltyPromotionResponse>> cancel(
            CancelPromotionsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/programs")
                .addPathSegment(request.getProgramId())
                .addPathSegments("promotions")
                .addPathSegment(request.getPromotionId())
                .addPathSegments("cancel")
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<CancelLoyaltyPromotionResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), CancelLoyaltyPromotionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
