/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.Suppliers;
import com.squareup.square.teammembers.AsyncWageSettingClient;
import com.squareup.square.types.BatchCreateTeamMembersRequest;
import com.squareup.square.types.BatchCreateTeamMembersResponse;
import com.squareup.square.types.BatchUpdateTeamMembersRequest;
import com.squareup.square.types.BatchUpdateTeamMembersResponse;
import com.squareup.square.types.CreateTeamMemberRequest;
import com.squareup.square.types.CreateTeamMemberResponse;
import com.squareup.square.types.GetTeamMemberResponse;
import com.squareup.square.types.GetTeamMembersRequest;
import com.squareup.square.types.SearchTeamMembersRequest;
import com.squareup.square.types.SearchTeamMembersResponse;
import com.squareup.square.types.UpdateTeamMemberResponse;
import com.squareup.square.types.UpdateTeamMembersRequest;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncTeamMembersClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncWageSettingClient> wageSettingClient;

    public AsyncTeamMembersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.wageSettingClient = Suppliers.memoize(() -> new AsyncWageSettingClient(clientOptions));
    }

    /**
     * Creates a single <code>TeamMember</code> object. The <code>TeamMember</code> object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * <ul>
     * <li><code>given_name</code></li>
     * <li><code>family_name</code></li>
     * </ul>
     * <p>Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#createteammember">Troubleshooting the Team API</a>.</p>
     */
    public CompletableFuture<CreateTeamMemberResponse> create() {
        return create(CreateTeamMemberRequest.builder().build());
    }

    /**
     * Creates a single <code>TeamMember</code> object. The <code>TeamMember</code> object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * <ul>
     * <li><code>given_name</code></li>
     * <li><code>family_name</code></li>
     * </ul>
     * <p>Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#createteammember">Troubleshooting the Team API</a>.</p>
     */
    public CompletableFuture<CreateTeamMemberResponse> create(CreateTeamMemberRequest request) {
        return create(request, null);
    }

    /**
     * Creates a single <code>TeamMember</code> object. The <code>TeamMember</code> object is returned on successful creates.
     * You must provide the following values in your request to this endpoint:
     * <ul>
     * <li><code>given_name</code></li>
     * <li><code>family_name</code></li>
     * </ul>
     * <p>Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#createteammember">Troubleshooting the Team API</a>.</p>
     */
    public CompletableFuture<CreateTeamMemberResponse> create(
            CreateTeamMemberRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CreateTeamMemberResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), CreateTeamMemberResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Creates multiple <code>TeamMember</code> objects. The created <code>TeamMember</code> objects are returned on successful creates.
     * This process is non-transactional and processes as much of the request as possible. If one of the creates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed create.
     * <p>Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members">Troubleshooting the Team API</a>.</p>
     */
    public CompletableFuture<BatchCreateTeamMembersResponse> batchCreate(BatchCreateTeamMembersRequest request) {
        return batchCreate(request, null);
    }

    /**
     * Creates multiple <code>TeamMember</code> objects. The created <code>TeamMember</code> objects are returned on successful creates.
     * This process is non-transactional and processes as much of the request as possible. If one of the creates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed create.
     * <p>Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members">Troubleshooting the Team API</a>.</p>
     */
    public CompletableFuture<BatchCreateTeamMembersResponse> batchCreate(
            BatchCreateTeamMembersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members/bulk-create")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BatchCreateTeamMembersResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), BatchCreateTeamMembersResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Updates multiple <code>TeamMember</code> objects. The updated <code>TeamMember</code> objects are returned on successful updates.
     * This process is non-transactional and processes as much of the request as possible. If one of the updates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed update.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<BatchUpdateTeamMembersResponse> batchUpdate(BatchUpdateTeamMembersRequest request) {
        return batchUpdate(request, null);
    }

    /**
     * Updates multiple <code>TeamMember</code> objects. The updated <code>TeamMember</code> objects are returned on successful updates.
     * This process is non-transactional and processes as much of the request as possible. If one of the updates in
     * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
     * contains explicit error information for the failed update.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<BatchUpdateTeamMembersResponse> batchUpdate(
            BatchUpdateTeamMembersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members/bulk-update")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<BatchUpdateTeamMembersResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), BatchUpdateTeamMembersResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Returns a paginated list of <code>TeamMember</code> objects for a business.
     * The list can be filtered by location IDs, <code>ACTIVE</code> or <code>INACTIVE</code> status, or whether
     * the team member is the Square account owner.
     */
    public CompletableFuture<SearchTeamMembersResponse> search() {
        return search(SearchTeamMembersRequest.builder().build());
    }

    /**
     * Returns a paginated list of <code>TeamMember</code> objects for a business.
     * The list can be filtered by location IDs, <code>ACTIVE</code> or <code>INACTIVE</code> status, or whether
     * the team member is the Square account owner.
     */
    public CompletableFuture<SearchTeamMembersResponse> search(SearchTeamMembersRequest request) {
        return search(request, null);
    }

    /**
     * Returns a paginated list of <code>TeamMember</code> objects for a business.
     * The list can be filtered by location IDs, <code>ACTIVE</code> or <code>INACTIVE</code> status, or whether
     * the team member is the Square account owner.
     */
    public CompletableFuture<SearchTeamMembersResponse> search(
            SearchTeamMembersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SearchTeamMembersResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), SearchTeamMembersResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a <code>TeamMember</code> object for the given <code>TeamMember.id</code>.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<GetTeamMemberResponse> get(GetTeamMembersRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a <code>TeamMember</code> object for the given <code>TeamMember.id</code>.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<GetTeamMemberResponse> get(GetTeamMembersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members")
                .addPathSegment(request.getTeamMemberId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<GetTeamMemberResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), GetTeamMemberResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Updates a single <code>TeamMember</code> object. The <code>TeamMember</code> object is returned on successful updates.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<UpdateTeamMemberResponse> update(UpdateTeamMembersRequest request) {
        return update(request, null);
    }

    /**
     * Updates a single <code>TeamMember</code> object. The <code>TeamMember</code> object is returned on successful updates.
     * Learn about <a href="https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member">Troubleshooting the Team API</a>.
     */
    public CompletableFuture<UpdateTeamMemberResponse> update(
            UpdateTeamMembersRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/team-members")
                .addPathSegment(request.getTeamMemberId())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<UpdateTeamMemberResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), UpdateTeamMemberResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public AsyncWageSettingClient wageSetting() {
        return this.wageSettingClient.get();
    }
}
