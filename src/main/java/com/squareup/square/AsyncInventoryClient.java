/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.BatchChangeInventoryRequest;
import com.squareup.square.types.BatchChangeInventoryResponse;
import com.squareup.square.types.BatchGetInventoryChangesResponse;
import com.squareup.square.types.BatchGetInventoryCountsRequest;
import com.squareup.square.types.BatchGetInventoryCountsResponse;
import com.squareup.square.types.BatchRetrieveInventoryChangesRequest;
import com.squareup.square.types.ChangesInventoryRequest;
import com.squareup.square.types.DeprecatedGetAdjustmentInventoryRequest;
import com.squareup.square.types.DeprecatedGetPhysicalCountInventoryRequest;
import com.squareup.square.types.GetAdjustmentInventoryRequest;
import com.squareup.square.types.GetInventoryAdjustmentResponse;
import com.squareup.square.types.GetInventoryPhysicalCountResponse;
import com.squareup.square.types.GetInventoryRequest;
import com.squareup.square.types.GetInventoryTransferResponse;
import com.squareup.square.types.GetPhysicalCountInventoryRequest;
import com.squareup.square.types.GetTransferInventoryRequest;
import com.squareup.square.types.InventoryChange;
import com.squareup.square.types.InventoryCount;
import java.util.concurrent.CompletableFuture;

public class AsyncInventoryClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawInventoryClient rawClient;

    public AsyncInventoryClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawInventoryClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawInventoryClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-RetrieveInventoryAdjustment">RetrieveInventoryAdjustment</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<GetInventoryAdjustmentResponse> deprecatedGetAdjustment(
            DeprecatedGetAdjustmentInventoryRequest request) {
        return this.rawClient.deprecatedGetAdjustment(request).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-RetrieveInventoryAdjustment">RetrieveInventoryAdjustment</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<GetInventoryAdjustmentResponse> deprecatedGetAdjustment(
            DeprecatedGetAdjustmentInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.deprecatedGetAdjustment(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryAdjustment">InventoryAdjustment</a> object
     * with the provided <code>adjustment_id</code>.
     */
    public CompletableFuture<GetInventoryAdjustmentResponse> getAdjustment(GetAdjustmentInventoryRequest request) {
        return this.rawClient.getAdjustment(request).thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryAdjustment">InventoryAdjustment</a> object
     * with the provided <code>adjustment_id</code>.
     */
    public CompletableFuture<GetInventoryAdjustmentResponse> getAdjustment(
            GetAdjustmentInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.getAdjustment(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchChangeInventory">BatchChangeInventory</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchChangeInventoryResponse> deprecatedBatchChange(BatchChangeInventoryRequest request) {
        return this.rawClient.deprecatedBatchChange(request).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchChangeInventory">BatchChangeInventory</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchChangeInventoryResponse> deprecatedBatchChange(
            BatchChangeInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.deprecatedBatchChange(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryChanges">BatchRetrieveInventoryChanges</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryChangesResponse> deprecatedBatchGetChanges() {
        return this.rawClient.deprecatedBatchGetChanges().thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryChanges">BatchRetrieveInventoryChanges</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryChangesResponse> deprecatedBatchGetChanges(
            BatchRetrieveInventoryChangesRequest request) {
        return this.rawClient.deprecatedBatchGetChanges(request).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryChanges">BatchRetrieveInventoryChanges</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryChangesResponse> deprecatedBatchGetChanges(
            BatchRetrieveInventoryChangesRequest request, RequestOptions requestOptions) {
        return this.rawClient.deprecatedBatchGetChanges(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryCounts">BatchRetrieveInventoryCounts</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryCountsResponse> deprecatedBatchGetCounts() {
        return this.rawClient.deprecatedBatchGetCounts().thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryCounts">BatchRetrieveInventoryCounts</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryCountsResponse> deprecatedBatchGetCounts(
            BatchGetInventoryCountsRequest request) {
        return this.rawClient.deprecatedBatchGetCounts(request).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-BatchRetrieveInventoryCounts">BatchRetrieveInventoryCounts</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<BatchGetInventoryCountsResponse> deprecatedBatchGetCounts(
            BatchGetInventoryCountsRequest request, RequestOptions requestOptions) {
        return this.rawClient.deprecatedBatchGetCounts(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Applies adjustments and counts to the provided item quantities.
     * <p>On success: returns the current calculated counts for all objects
     * referenced in the request.
     * On failure: returns a list of related errors.</p>
     */
    public CompletableFuture<BatchChangeInventoryResponse> batchCreateChanges(BatchChangeInventoryRequest request) {
        return this.rawClient.batchCreateChanges(request).thenApply(response -> response.body());
    }

    /**
     * Applies adjustments and counts to the provided item quantities.
     * <p>On success: returns the current calculated counts for all objects
     * referenced in the request.
     * On failure: returns a list of related errors.</p>
     */
    public CompletableFuture<BatchChangeInventoryResponse> batchCreateChanges(
            BatchChangeInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.batchCreateChanges(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     * <p>Results are paginated and sorted in ascending order according their
     * <code>occurred_at</code> timestamp (oldest first).</p>
     * <p>BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryChange>> batchGetChanges() {
        return this.rawClient.batchGetChanges().thenApply(response -> response.body());
    }

    /**
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     * <p>Results are paginated and sorted in ascending order according their
     * <code>occurred_at</code> timestamp (oldest first).</p>
     * <p>BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryChange>> batchGetChanges(
            BatchRetrieveInventoryChangesRequest request) {
        return this.rawClient.batchGetChanges(request).thenApply(response -> response.body());
    }

    /**
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     * <p>Results are paginated and sorted in ascending order according their
     * <code>occurred_at</code> timestamp (oldest first).</p>
     * <p>BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryChange>> batchGetChanges(
            BatchRetrieveInventoryChangesRequest request, RequestOptions requestOptions) {
        return this.rawClient.batchGetChanges(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns current counts for the provided
     * <a href="entity:CatalogObject">CatalogObject</a>s at the requested
     * <a href="entity:Location">Location</a>s.
     * <p>Results are paginated and sorted in descending order according to their
     * <code>calculated_at</code> timestamp (newest first).</p>
     * <p>When <code>updated_after</code> is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a &quot;sync&quot; operation, for example
     * in response to receiving a Webhook notification.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryCount>> batchGetCounts() {
        return this.rawClient.batchGetCounts().thenApply(response -> response.body());
    }

    /**
     * Returns current counts for the provided
     * <a href="entity:CatalogObject">CatalogObject</a>s at the requested
     * <a href="entity:Location">Location</a>s.
     * <p>Results are paginated and sorted in descending order according to their
     * <code>calculated_at</code> timestamp (newest first).</p>
     * <p>When <code>updated_after</code> is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a &quot;sync&quot; operation, for example
     * in response to receiving a Webhook notification.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryCount>> batchGetCounts(
            BatchGetInventoryCountsRequest request) {
        return this.rawClient.batchGetCounts(request).thenApply(response -> response.body());
    }

    /**
     * Returns current counts for the provided
     * <a href="entity:CatalogObject">CatalogObject</a>s at the requested
     * <a href="entity:Location">Location</a>s.
     * <p>Results are paginated and sorted in descending order according to their
     * <code>calculated_at</code> timestamp (newest first).</p>
     * <p>When <code>updated_after</code> is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a &quot;sync&quot; operation, for example
     * in response to receiving a Webhook notification.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryCount>> batchGetCounts(
            BatchGetInventoryCountsRequest request, RequestOptions requestOptions) {
        return this.rawClient.batchGetCounts(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-RetrieveInventoryPhysicalCount">RetrieveInventoryPhysicalCount</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<GetInventoryPhysicalCountResponse> deprecatedGetPhysicalCount(
            DeprecatedGetPhysicalCountInventoryRequest request) {
        return this.rawClient.deprecatedGetPhysicalCount(request).thenApply(response -> response.body());
    }

    /**
     * Deprecated version of <a href="api-endpoint:Inventory-RetrieveInventoryPhysicalCount">RetrieveInventoryPhysicalCount</a> after the endpoint URL
     * is updated to conform to the standard convention.
     */
    public CompletableFuture<GetInventoryPhysicalCountResponse> deprecatedGetPhysicalCount(
            DeprecatedGetPhysicalCountInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .deprecatedGetPhysicalCount(request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a>
     * object with the provided <code>physical_count_id</code>.
     */
    public CompletableFuture<GetInventoryPhysicalCountResponse> getPhysicalCount(
            GetPhysicalCountInventoryRequest request) {
        return this.rawClient.getPhysicalCount(request).thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a>
     * object with the provided <code>physical_count_id</code>.
     */
    public CompletableFuture<GetInventoryPhysicalCountResponse> getPhysicalCount(
            GetPhysicalCountInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.getPhysicalCount(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryTransfer">InventoryTransfer</a> object
     * with the provided <code>transfer_id</code>.
     */
    public CompletableFuture<GetInventoryTransferResponse> getTransfer(GetTransferInventoryRequest request) {
        return this.rawClient.getTransfer(request).thenApply(response -> response.body());
    }

    /**
     * Returns the <a href="entity:InventoryTransfer">InventoryTransfer</a> object
     * with the provided <code>transfer_id</code>.
     */
    public CompletableFuture<GetInventoryTransferResponse> getTransfer(
            GetTransferInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.getTransfer(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves the current calculated stock count for a given
     * <a href="entity:CatalogObject">CatalogObject</a> at a given set of
     * <a href="entity:Location">Location</a>s. Responses are paginated and unsorted.
     * For more sophisticated queries, use a batch endpoint.
     */
    public CompletableFuture<SyncPagingIterable<InventoryCount>> get(GetInventoryRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves the current calculated stock count for a given
     * <a href="entity:CatalogObject">CatalogObject</a> at a given set of
     * <a href="entity:Location">Location</a>s. Responses are paginated and unsorted.
     * For more sophisticated queries, use a batch endpoint.
     */
    public CompletableFuture<SyncPagingIterable<InventoryCount>> get(
            GetInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns a set of physical counts and inventory adjustments for the
     * provided <a href="entity:CatalogObject">CatalogObject</a> at the requested
     * <a href="entity:Location">Location</a>s.
     * <p>You can achieve the same result by calling <a href="api-endpoint:Inventory-BatchRetrieveInventoryChanges">BatchRetrieveInventoryChanges</a>
     * and having the <code>catalog_object_ids</code> list contain a single element of the <code>CatalogObject</code> ID.</p>
     * <p>Results are paginated and sorted in descending order according to their
     * <code>occurred_at</code> timestamp (newest first).</p>
     * <p>There are no limits on how far back the caller can page. This endpoint can be
     * used to display recent changes for a specific item. For more
     * sophisticated queries, use a batch endpoint.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryChange>> changes(ChangesInventoryRequest request) {
        return this.rawClient.changes(request).thenApply(response -> response.body());
    }

    /**
     * Returns a set of physical counts and inventory adjustments for the
     * provided <a href="entity:CatalogObject">CatalogObject</a> at the requested
     * <a href="entity:Location">Location</a>s.
     * <p>You can achieve the same result by calling <a href="api-endpoint:Inventory-BatchRetrieveInventoryChanges">BatchRetrieveInventoryChanges</a>
     * and having the <code>catalog_object_ids</code> list contain a single element of the <code>CatalogObject</code> ID.</p>
     * <p>Results are paginated and sorted in descending order according to their
     * <code>occurred_at</code> timestamp (newest first).</p>
     * <p>There are no limits on how far back the caller can page. This endpoint can be
     * used to display recent changes for a specific item. For more
     * sophisticated queries, use a batch endpoint.</p>
     */
    public CompletableFuture<SyncPagingIterable<InventoryChange>> changes(
            ChangesInventoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.changes(request, requestOptions).thenApply(response -> response.body());
    }
}
