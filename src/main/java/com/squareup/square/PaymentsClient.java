/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.CancelPaymentByIdempotencyKeyRequest;
import com.squareup.square.types.CancelPaymentByIdempotencyKeyResponse;
import com.squareup.square.types.CancelPaymentResponse;
import com.squareup.square.types.CancelPaymentsRequest;
import com.squareup.square.types.CompletePaymentRequest;
import com.squareup.square.types.CompletePaymentResponse;
import com.squareup.square.types.CreatePaymentRequest;
import com.squareup.square.types.CreatePaymentResponse;
import com.squareup.square.types.GetPaymentResponse;
import com.squareup.square.types.GetPaymentsRequest;
import com.squareup.square.types.ListPaymentsRequest;
import com.squareup.square.types.Payment;
import com.squareup.square.types.UpdatePaymentRequest;
import com.squareup.square.types.UpdatePaymentResponse;

public class PaymentsClient {
    protected final ClientOptions clientOptions;

    private final RawPaymentsClient rawClient;

    public PaymentsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawPaymentsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawPaymentsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves a list of payments taken by the account making the request.
     * <p>Results are eventually consistent, and new payments or changes to payments might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public SyncPagingIterable<Payment> list() {
        return this.rawClient.list().body();
    }

    /**
     * Retrieves a list of payments taken by the account making the request.
     * <p>Results are eventually consistent, and new payments or changes to payments might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public SyncPagingIterable<Payment> list(ListPaymentsRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * Retrieves a list of payments taken by the account making the request.
     * <p>Results are eventually consistent, and new payments or changes to payments might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public SyncPagingIterable<Payment> list(ListPaymentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Creates a payment using the provided source. You can use this endpoint
     * to charge a card (credit/debit card or
     * Square gift card) or record a payment that the seller received outside of Square
     * (cash payment from a buyer or a payment that an external entity
     * processed on behalf of the seller).
     * <p>The endpoint creates a
     * <code>Payment</code> object and returns it in the response.</p>
     */
    public CreatePaymentResponse create(CreatePaymentRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a payment using the provided source. You can use this endpoint
     * to charge a card (credit/debit card or
     * Square gift card) or record a payment that the seller received outside of Square
     * (cash payment from a buyer or a payment that an external entity
     * processed on behalf of the seller).
     * <p>The endpoint creates a
     * <code>Payment</code> object and returns it in the response.</p>
     */
    public CreatePaymentResponse create(CreatePaymentRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the
     * request.
     * <p>Use this method when the status of a <code>CreatePayment</code> request is unknown (for example, after you send a
     * <code>CreatePayment</code> request, a network error occurs and you do not get a response). In this case, you can
     * direct Square to cancel the payment using this endpoint. In the request, you provide the same
     * idempotency key that you provided in your <code>CreatePayment</code> request that you want to cancel. After
     * canceling the payment, you can submit your <code>CreatePayment</code> request again.</p>
     * <p>Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
     * returns successfully.</p>
     */
    public CancelPaymentByIdempotencyKeyResponse cancelByIdempotencyKey(CancelPaymentByIdempotencyKeyRequest request) {
        return this.rawClient.cancelByIdempotencyKey(request).body();
    }

    /**
     * Cancels (voids) a payment identified by the idempotency key that is specified in the
     * request.
     * <p>Use this method when the status of a <code>CreatePayment</code> request is unknown (for example, after you send a
     * <code>CreatePayment</code> request, a network error occurs and you do not get a response). In this case, you can
     * direct Square to cancel the payment using this endpoint. In the request, you provide the same
     * idempotency key that you provided in your <code>CreatePayment</code> request that you want to cancel. After
     * canceling the payment, you can submit your <code>CreatePayment</code> request again.</p>
     * <p>Note that if no payment with the specified idempotency key is found, no action is taken and the endpoint
     * returns successfully.</p>
     */
    public CancelPaymentByIdempotencyKeyResponse cancelByIdempotencyKey(
            CancelPaymentByIdempotencyKeyRequest request, RequestOptions requestOptions) {
        return this.rawClient.cancelByIdempotencyKey(request, requestOptions).body();
    }

    /**
     * Retrieves details for a specific payment.
     */
    public GetPaymentResponse get(GetPaymentsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves details for a specific payment.
     */
    public GetPaymentResponse get(GetPaymentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Updates a payment with the APPROVED status.
     * You can update the <code>amount_money</code> and <code>tip_money</code> using this endpoint.
     */
    public UpdatePaymentResponse update(UpdatePaymentRequest request) {
        return this.rawClient.update(request).body();
    }

    /**
     * Updates a payment with the APPROVED status.
     * You can update the <code>amount_money</code> and <code>tip_money</code> using this endpoint.
     */
    public UpdatePaymentResponse update(UpdatePaymentRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).body();
    }

    /**
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with
     * the APPROVED <code>status</code>.
     */
    public CancelPaymentResponse cancel(CancelPaymentsRequest request) {
        return this.rawClient.cancel(request).body();
    }

    /**
     * Cancels (voids) a payment. You can use this endpoint to cancel a payment with
     * the APPROVED <code>status</code>.
     */
    public CancelPaymentResponse cancel(CancelPaymentsRequest request, RequestOptions requestOptions) {
        return this.rawClient.cancel(request, requestOptions).body();
    }

    /**
     * Completes (captures) a payment.
     * By default, payments are set to complete immediately after they are created.
     * <p>You can use this endpoint to complete a payment with the APPROVED <code>status</code>.</p>
     */
    public CompletePaymentResponse complete(CompletePaymentRequest request) {
        return this.rawClient.complete(request).body();
    }

    /**
     * Completes (captures) a payment.
     * By default, payments are set to complete immediately after they are created.
     * <p>You can use this endpoint to complete a payment with the APPROVED <code>status</code>.</p>
     */
    public CompletePaymentResponse complete(CompletePaymentRequest request, RequestOptions requestOptions) {
        return this.rawClient.complete(request, requestOptions).body();
    }
}
