/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.locations.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.VisibilityFilter;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListCustomAttributeDefinitionsRequest.Builder.class)
public final class ListCustomAttributeDefinitionsRequest {
    private final Optional<VisibilityFilter> visibilityFilter;

    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Map<String, Object> additionalProperties;

    private ListCustomAttributeDefinitionsRequest(
            Optional<VisibilityFilter> visibilityFilter,
            Optional<Integer> limit,
            Optional<String> cursor,
            Map<String, Object> additionalProperties) {
        this.visibilityFilter = visibilityFilter;
        this.limit = limit;
        this.cursor = cursor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters the <code>CustomAttributeDefinition</code> results by their <code>visibility</code> values.
     */
    @JsonIgnore
    public Optional<VisibilityFilter> getVisibilityFilter() {
        if (visibilityFilter == null) {
            return Optional.empty();
        }
        return visibilityFilter;
    }

    /**
     * @return The maximum number of results to return in a single paged response. This limit is advisory.
     * The response might contain more or fewer results. The minimum value is 1 and the maximum value is 100.
     * The default value is 20. For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return The cursor returned in the paged response from the previous call to this endpoint.
     * Provide this cursor to retrieve the next page of results for your original request.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("visibility_filter")
    private Optional<VisibilityFilter> _getVisibilityFilter() {
        return visibilityFilter;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListCustomAttributeDefinitionsRequest
                && equalTo((ListCustomAttributeDefinitionsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListCustomAttributeDefinitionsRequest other) {
        return visibilityFilter.equals(other.visibilityFilter)
                && limit.equals(other.limit)
                && cursor.equals(other.cursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.visibilityFilter, this.limit, this.cursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<VisibilityFilter> visibilityFilter = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListCustomAttributeDefinitionsRequest other) {
            visibilityFilter(other.getVisibilityFilter());
            limit(other.getLimit());
            cursor(other.getCursor());
            return this;
        }

        /**
         * <p>Filters the <code>CustomAttributeDefinition</code> results by their <code>visibility</code> values.</p>
         */
        @JsonSetter(value = "visibility_filter", nulls = Nulls.SKIP)
        public Builder visibilityFilter(Optional<VisibilityFilter> visibilityFilter) {
            this.visibilityFilter = visibilityFilter;
            return this;
        }

        public Builder visibilityFilter(VisibilityFilter visibilityFilter) {
            this.visibilityFilter = Optional.ofNullable(visibilityFilter);
            return this;
        }

        public Builder visibilityFilter(Nullable<VisibilityFilter> visibilityFilter) {
            if (visibilityFilter.isNull()) {
                this.visibilityFilter = null;
            } else if (visibilityFilter.isEmpty()) {
                this.visibilityFilter = Optional.empty();
            } else {
                this.visibilityFilter = Optional.of(visibilityFilter.get());
            }
            return this;
        }

        /**
         * <p>The maximum number of results to return in a single paged response. This limit is advisory.
         * The response might contain more or fewer results. The minimum value is 1 and the maximum value is 100.
         * The default value is 20. For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>The cursor returned in the paged response from the previous call to this endpoint.
         * Provide this cursor to retrieve the next page of results for your original request.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        public ListCustomAttributeDefinitionsRequest build() {
            return new ListCustomAttributeDefinitionsRequest(visibilityFilter, limit, cursor, additionalProperties);
        }
    }
}
