/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.locations.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CaptureTransactionsRequest.Builder.class)
public final class CaptureTransactionsRequest {
    private final String locationId;

    private final String transactionId;

    private final Map<String, Object> additionalProperties;

    private CaptureTransactionsRequest(
            String locationId, String transactionId, Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.transactionId = transactionId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return
     */
    @JsonProperty("transaction_id")
    public String getTransactionId() {
        return transactionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CaptureTransactionsRequest && equalTo((CaptureTransactionsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CaptureTransactionsRequest other) {
        return locationId.equals(other.locationId) && transactionId.equals(other.transactionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.transactionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        TransactionIdStage locationId(@NotNull String locationId);

        Builder from(CaptureTransactionsRequest other);
    }

    public interface TransactionIdStage {
        _FinalStage transactionId(@NotNull String transactionId);
    }

    public interface _FinalStage {
        CaptureTransactionsRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LocationIdStage, TransactionIdStage, _FinalStage {
        private String locationId;

        private String transactionId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CaptureTransactionsRequest other) {
            locationId(other.getLocationId());
            transactionId(other.getTransactionId());
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public TransactionIdStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transaction_id")
        public _FinalStage transactionId(@NotNull String transactionId) {
            this.transactionId = Objects.requireNonNull(transactionId, "transactionId must not be null");
            return this;
        }

        @java.lang.Override
        public CaptureTransactionsRequest build() {
            return new CaptureTransactionsRequest(locationId, transactionId, additionalProperties);
        }
    }
}
