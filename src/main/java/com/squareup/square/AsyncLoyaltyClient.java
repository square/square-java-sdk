/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.Suppliers;
import com.squareup.square.loyalty.AsyncAccountsClient;
import com.squareup.square.loyalty.AsyncProgramsClient;
import com.squareup.square.loyalty.AsyncRewardsClient;
import com.squareup.square.types.SearchLoyaltyEventsRequest;
import com.squareup.square.types.SearchLoyaltyEventsResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncLoyaltyClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncAccountsClient> accountsClient;

    protected final Supplier<AsyncProgramsClient> programsClient;

    protected final Supplier<AsyncRewardsClient> rewardsClient;

    public AsyncLoyaltyClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.accountsClient = Suppliers.memoize(() -> new AsyncAccountsClient(clientOptions));
        this.programsClient = Suppliers.memoize(() -> new AsyncProgramsClient(clientOptions));
        this.rewardsClient = Suppliers.memoize(() -> new AsyncRewardsClient(clientOptions));
    }

    /**
     * Searches for loyalty events.
     * <p>A Square loyalty program maintains a ledger of events that occur during the lifetime of a
     * buyer's loyalty account. Each change in the point balance
     * (for example, points earned, points redeemed, and points expired) is
     * recorded in the ledger. Using this endpoint, you can search the ledger for events.</p>
     * <p>Search results are sorted by <code>created_at</code> in descending order.</p>
     */
    public CompletableFuture<SearchLoyaltyEventsResponse> searchEvents() {
        return searchEvents(SearchLoyaltyEventsRequest.builder().build());
    }

    /**
     * Searches for loyalty events.
     * <p>A Square loyalty program maintains a ledger of events that occur during the lifetime of a
     * buyer's loyalty account. Each change in the point balance
     * (for example, points earned, points redeemed, and points expired) is
     * recorded in the ledger. Using this endpoint, you can search the ledger for events.</p>
     * <p>Search results are sorted by <code>created_at</code> in descending order.</p>
     */
    public CompletableFuture<SearchLoyaltyEventsResponse> searchEvents(SearchLoyaltyEventsRequest request) {
        return searchEvents(request, null);
    }

    /**
     * Searches for loyalty events.
     * <p>A Square loyalty program maintains a ledger of events that occur during the lifetime of a
     * buyer's loyalty account. Each change in the point balance
     * (for example, points earned, points redeemed, and points expired) is
     * recorded in the ledger. Using this endpoint, you can search the ledger for events.</p>
     * <p>Search results are sorted by <code>created_at</code> in descending order.</p>
     */
    public CompletableFuture<SearchLoyaltyEventsResponse> searchEvents(
            SearchLoyaltyEventsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/loyalty/events/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SearchLoyaltyEventsResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), SearchLoyaltyEventsResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public AsyncAccountsClient accounts() {
        return this.accountsClient.get();
    }

    public AsyncProgramsClient programs() {
        return this.programsClient.get();
    }

    public AsyncRewardsClient rewards() {
        return this.rewardsClient.get();
    }
}
