/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.types.ObtainTokenRequest;
import com.squareup.square.types.ObtainTokenResponse;
import com.squareup.square.types.RetrieveTokenStatusResponse;
import com.squareup.square.types.RevokeTokenRequest;
import com.squareup.square.types.RevokeTokenResponse;

public class OAuthClient {
    protected final ClientOptions clientOptions;

    private final RawOAuthClient rawClient;

    public OAuthClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawOAuthClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawOAuthClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Revokes an access token generated with the OAuth flow.
     * <p>If an account has more than one OAuth access token for your application, this
     * endpoint revokes all of them, regardless of which token you specify.</p>
     * <p><strong>Important:</strong> The <code>Authorization</code> header for this endpoint must have the
     * following format:</p>
     * <pre><code>Authorization: Client APPLICATION_SECRET
     * </code></pre>
     * <p>Replace <code>APPLICATION_SECRET</code> with the application secret on the <strong>OAuth</strong>
     * page for your application in the Developer Dashboard.</p>
     */
    public RevokeTokenResponse revokeToken() {
        return this.rawClient.revokeToken().body();
    }

    /**
     * Revokes an access token generated with the OAuth flow.
     * <p>If an account has more than one OAuth access token for your application, this
     * endpoint revokes all of them, regardless of which token you specify.</p>
     * <p><strong>Important:</strong> The <code>Authorization</code> header for this endpoint must have the
     * following format:</p>
     * <pre><code>Authorization: Client APPLICATION_SECRET
     * </code></pre>
     * <p>Replace <code>APPLICATION_SECRET</code> with the application secret on the <strong>OAuth</strong>
     * page for your application in the Developer Dashboard.</p>
     */
    public RevokeTokenResponse revokeToken(RevokeTokenRequest request) {
        return this.rawClient.revokeToken(request).body();
    }

    /**
     * Revokes an access token generated with the OAuth flow.
     * <p>If an account has more than one OAuth access token for your application, this
     * endpoint revokes all of them, regardless of which token you specify.</p>
     * <p><strong>Important:</strong> The <code>Authorization</code> header for this endpoint must have the
     * following format:</p>
     * <pre><code>Authorization: Client APPLICATION_SECRET
     * </code></pre>
     * <p>Replace <code>APPLICATION_SECRET</code> with the application secret on the <strong>OAuth</strong>
     * page for your application in the Developer Dashboard.</p>
     */
    public RevokeTokenResponse revokeToken(RevokeTokenRequest request, RequestOptions requestOptions) {
        return this.rawClient.revokeToken(request, requestOptions).body();
    }

    /**
     * Returns an OAuth access token and refresh token using the <code>authorization_code</code>
     * or <code>refresh_token</code> grant type.
     * <p>When <code>grant_type</code> is <code>authorization_code</code>:</p>
     * <ul>
     * <li>With the <a href="https://developer.squareup.com/docs/oauth-api/overview#code-flow">code flow</a>,
     * provide <code>code</code>, <code>client_id</code>, and <code>client_secret</code>.</li>
     * <li>With the <a href="https://developer.squareup.com/docs/oauth-api/overview#pkce-flow">PKCE flow</a>,
     * provide <code>code</code>, <code>client_id</code>, and <code>code_verifier</code>.</li>
     * </ul>
     * <p>When <code>grant_type</code> is <code>refresh_token</code>:</p>
     * <ul>
     * <li>With the code flow, provide <code>refresh_token</code>, <code>client_id</code>, and <code>client_secret</code>.
     * The response returns the same refresh token provided in the request.</li>
     * <li>With the PKCE flow, provide <code>refresh_token</code> and <code>client_id</code>. The response returns
     * a new refresh token.</li>
     * </ul>
     * <p>You can use the <code>scopes</code> parameter to limit the set of permissions authorized by the
     * access token. You can use the <code>short_lived</code> parameter to create an access token that
     * expires in 24 hours.</p>
     * <p><strong>Important:</strong> OAuth tokens should be encrypted and stored on a secure server.
     * Application clients should never interact directly with OAuth tokens.</p>
     */
    public ObtainTokenResponse obtainToken(ObtainTokenRequest request) {
        return this.rawClient.obtainToken(request).body();
    }

    /**
     * Returns an OAuth access token and refresh token using the <code>authorization_code</code>
     * or <code>refresh_token</code> grant type.
     * <p>When <code>grant_type</code> is <code>authorization_code</code>:</p>
     * <ul>
     * <li>With the <a href="https://developer.squareup.com/docs/oauth-api/overview#code-flow">code flow</a>,
     * provide <code>code</code>, <code>client_id</code>, and <code>client_secret</code>.</li>
     * <li>With the <a href="https://developer.squareup.com/docs/oauth-api/overview#pkce-flow">PKCE flow</a>,
     * provide <code>code</code>, <code>client_id</code>, and <code>code_verifier</code>.</li>
     * </ul>
     * <p>When <code>grant_type</code> is <code>refresh_token</code>:</p>
     * <ul>
     * <li>With the code flow, provide <code>refresh_token</code>, <code>client_id</code>, and <code>client_secret</code>.
     * The response returns the same refresh token provided in the request.</li>
     * <li>With the PKCE flow, provide <code>refresh_token</code> and <code>client_id</code>. The response returns
     * a new refresh token.</li>
     * </ul>
     * <p>You can use the <code>scopes</code> parameter to limit the set of permissions authorized by the
     * access token. You can use the <code>short_lived</code> parameter to create an access token that
     * expires in 24 hours.</p>
     * <p><strong>Important:</strong> OAuth tokens should be encrypted and stored on a secure server.
     * Application clients should never interact directly with OAuth tokens.</p>
     */
    public ObtainTokenResponse obtainToken(ObtainTokenRequest request, RequestOptions requestOptions) {
        return this.rawClient.obtainToken(request, requestOptions).body();
    }

    /**
     * Returns information about an <a href="https://developer.squareup.com/docs/build-basics/access-tokens#get-an-oauth-access-token">OAuth access token</a> or an application’s <a href="https://developer.squareup.com/docs/build-basics/access-tokens#get-a-personal-access-token">personal access token</a>.
     * <p>Add the access token to the Authorization header of the request.</p>
     * <p><strong>Important:</strong> The <code>Authorization</code> header you provide to this endpoint must have the following format:</p>
     * <pre><code>Authorization: Bearer ACCESS_TOKEN
     * </code></pre>
     * <p>where <code>ACCESS_TOKEN</code> is a
     * <a href="https://developer.squareup.com/docs/build-basics/access-tokens">valid production authorization credential</a>.</p>
     * <p>If the access token is expired or not a valid access token, the endpoint returns an <code>UNAUTHORIZED</code> error.</p>
     */
    public RetrieveTokenStatusResponse retrieveTokenStatus() {
        return this.rawClient.retrieveTokenStatus().body();
    }

    /**
     * Returns information about an <a href="https://developer.squareup.com/docs/build-basics/access-tokens#get-an-oauth-access-token">OAuth access token</a> or an application’s <a href="https://developer.squareup.com/docs/build-basics/access-tokens#get-a-personal-access-token">personal access token</a>.
     * <p>Add the access token to the Authorization header of the request.</p>
     * <p><strong>Important:</strong> The <code>Authorization</code> header you provide to this endpoint must have the following format:</p>
     * <pre><code>Authorization: Bearer ACCESS_TOKEN
     * </code></pre>
     * <p>where <code>ACCESS_TOKEN</code> is a
     * <a href="https://developer.squareup.com/docs/build-basics/access-tokens">valid production authorization credential</a>.</p>
     * <p>If the access token is expired or not a valid access token, the endpoint returns an <code>UNAUTHORIZED</code> error.</p>
     */
    public RetrieveTokenStatusResponse retrieveTokenStatus(RequestOptions requestOptions) {
        return this.rawClient.retrieveTokenStatus(requestOptions).body();
    }

    public void authorize() {
        this.rawClient.authorize().body();
    }

    public void authorize(RequestOptions requestOptions) {
        this.rawClient.authorize(requestOptions).body();
    }
}
