/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Address.Builder.class)
public final class Address {
    private final Optional<String> addressLine1;

    private final Optional<String> addressLine2;

    private final Optional<String> addressLine3;

    private final Optional<String> locality;

    private final Optional<String> sublocality;

    private final Optional<String> sublocality2;

    private final Optional<String> sublocality3;

    private final Optional<String> administrativeDistrictLevel1;

    private final Optional<String> administrativeDistrictLevel2;

    private final Optional<String> administrativeDistrictLevel3;

    private final Optional<String> postalCode;

    private final Optional<Country> country;

    private final Optional<String> firstName;

    private final Optional<String> lastName;

    private final Map<String, Object> additionalProperties;

    private Address(
            Optional<String> addressLine1,
            Optional<String> addressLine2,
            Optional<String> addressLine3,
            Optional<String> locality,
            Optional<String> sublocality,
            Optional<String> sublocality2,
            Optional<String> sublocality3,
            Optional<String> administrativeDistrictLevel1,
            Optional<String> administrativeDistrictLevel2,
            Optional<String> administrativeDistrictLevel3,
            Optional<String> postalCode,
            Optional<Country> country,
            Optional<String> firstName,
            Optional<String> lastName,
            Map<String, Object> additionalProperties) {
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.addressLine3 = addressLine3;
        this.locality = locality;
        this.sublocality = sublocality;
        this.sublocality2 = sublocality2;
        this.sublocality3 = sublocality3;
        this.administrativeDistrictLevel1 = administrativeDistrictLevel1;
        this.administrativeDistrictLevel2 = administrativeDistrictLevel2;
        this.administrativeDistrictLevel3 = administrativeDistrictLevel3;
        this.postalCode = postalCode;
        this.country = country;
        this.firstName = firstName;
        this.lastName = lastName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The first line of the address.
     * <p>Fields that start with <code>address_line</code> provide the address's most specific
     * details, like street number, street name, and building name. They do <em>not</em>
     * provide less specific details like city, state/province, or country (these
     * details are provided in other fields).</p>
     */
    @JsonIgnore
    public Optional<String> getAddressLine1() {
        if (addressLine1 == null) {
            return Optional.empty();
        }
        return addressLine1;
    }

    /**
     * @return The second line of the address, if any.
     */
    @JsonIgnore
    public Optional<String> getAddressLine2() {
        if (addressLine2 == null) {
            return Optional.empty();
        }
        return addressLine2;
    }

    /**
     * @return The third line of the address, if any.
     */
    @JsonIgnore
    public Optional<String> getAddressLine3() {
        if (addressLine3 == null) {
            return Optional.empty();
        }
        return addressLine3;
    }

    /**
     * @return The city or town of the address. For a full list of field meanings by country, see <a href="https://developer.squareup.com/docs/build-basics/working-with-addresses">Working with Addresses</a>.
     */
    @JsonIgnore
    public Optional<String> getLocality() {
        if (locality == null) {
            return Optional.empty();
        }
        return locality;
    }

    /**
     * @return A civil region within the address's <code>locality</code>, if any.
     */
    @JsonIgnore
    public Optional<String> getSublocality() {
        if (sublocality == null) {
            return Optional.empty();
        }
        return sublocality;
    }

    /**
     * @return A civil region within the address's <code>sublocality</code>, if any.
     */
    @JsonIgnore
    public Optional<String> getSublocality2() {
        if (sublocality2 == null) {
            return Optional.empty();
        }
        return sublocality2;
    }

    /**
     * @return A civil region within the address's <code>sublocality_2</code>, if any.
     */
    @JsonIgnore
    public Optional<String> getSublocality3() {
        if (sublocality3 == null) {
            return Optional.empty();
        }
        return sublocality3;
    }

    /**
     * @return A civil entity within the address's country. In the US, this
     * is the state. For a full list of field meanings by country, see <a href="https://developer.squareup.com/docs/build-basics/working-with-addresses">Working with Addresses</a>.
     */
    @JsonIgnore
    public Optional<String> getAdministrativeDistrictLevel1() {
        if (administrativeDistrictLevel1 == null) {
            return Optional.empty();
        }
        return administrativeDistrictLevel1;
    }

    /**
     * @return A civil entity within the address's <code>administrative_district_level_1</code>.
     * In the US, this is the county.
     */
    @JsonIgnore
    public Optional<String> getAdministrativeDistrictLevel2() {
        if (administrativeDistrictLevel2 == null) {
            return Optional.empty();
        }
        return administrativeDistrictLevel2;
    }

    /**
     * @return A civil entity within the address's <code>administrative_district_level_2</code>,
     * if any.
     */
    @JsonIgnore
    public Optional<String> getAdministrativeDistrictLevel3() {
        if (administrativeDistrictLevel3 == null) {
            return Optional.empty();
        }
        return administrativeDistrictLevel3;
    }

    /**
     * @return The address's postal code. For a full list of field meanings by country, see <a href="https://developer.squareup.com/docs/build-basics/working-with-addresses">Working with Addresses</a>.
     */
    @JsonIgnore
    public Optional<String> getPostalCode() {
        if (postalCode == null) {
            return Optional.empty();
        }
        return postalCode;
    }

    /**
     * @return The address's country, in the two-letter format of ISO 3166. For example, <code>US</code> or <code>FR</code>.
     * See <a href="#type-country">Country</a> for possible values
     */
    @JsonProperty("country")
    public Optional<Country> getCountry() {
        return country;
    }

    /**
     * @return Optional first name when it's representing recipient.
     */
    @JsonIgnore
    public Optional<String> getFirstName() {
        if (firstName == null) {
            return Optional.empty();
        }
        return firstName;
    }

    /**
     * @return Optional last name when it's representing recipient.
     */
    @JsonIgnore
    public Optional<String> getLastName() {
        if (lastName == null) {
            return Optional.empty();
        }
        return lastName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("address_line_1")
    private Optional<String> _getAddressLine1() {
        return addressLine1;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("address_line_2")
    private Optional<String> _getAddressLine2() {
        return addressLine2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("address_line_3")
    private Optional<String> _getAddressLine3() {
        return addressLine3;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("locality")
    private Optional<String> _getLocality() {
        return locality;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sublocality")
    private Optional<String> _getSublocality() {
        return sublocality;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sublocality_2")
    private Optional<String> _getSublocality2() {
        return sublocality2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sublocality_3")
    private Optional<String> _getSublocality3() {
        return sublocality3;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("administrative_district_level_1")
    private Optional<String> _getAdministrativeDistrictLevel1() {
        return administrativeDistrictLevel1;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("administrative_district_level_2")
    private Optional<String> _getAdministrativeDistrictLevel2() {
        return administrativeDistrictLevel2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("administrative_district_level_3")
    private Optional<String> _getAdministrativeDistrictLevel3() {
        return administrativeDistrictLevel3;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("postal_code")
    private Optional<String> _getPostalCode() {
        return postalCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("first_name")
    private Optional<String> _getFirstName() {
        return firstName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("last_name")
    private Optional<String> _getLastName() {
        return lastName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Address && equalTo((Address) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Address other) {
        return addressLine1.equals(other.addressLine1)
                && addressLine2.equals(other.addressLine2)
                && addressLine3.equals(other.addressLine3)
                && locality.equals(other.locality)
                && sublocality.equals(other.sublocality)
                && sublocality2.equals(other.sublocality2)
                && sublocality3.equals(other.sublocality3)
                && administrativeDistrictLevel1.equals(other.administrativeDistrictLevel1)
                && administrativeDistrictLevel2.equals(other.administrativeDistrictLevel2)
                && administrativeDistrictLevel3.equals(other.administrativeDistrictLevel3)
                && postalCode.equals(other.postalCode)
                && country.equals(other.country)
                && firstName.equals(other.firstName)
                && lastName.equals(other.lastName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.addressLine1,
                this.addressLine2,
                this.addressLine3,
                this.locality,
                this.sublocality,
                this.sublocality2,
                this.sublocality3,
                this.administrativeDistrictLevel1,
                this.administrativeDistrictLevel2,
                this.administrativeDistrictLevel3,
                this.postalCode,
                this.country,
                this.firstName,
                this.lastName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> addressLine1 = Optional.empty();

        private Optional<String> addressLine2 = Optional.empty();

        private Optional<String> addressLine3 = Optional.empty();

        private Optional<String> locality = Optional.empty();

        private Optional<String> sublocality = Optional.empty();

        private Optional<String> sublocality2 = Optional.empty();

        private Optional<String> sublocality3 = Optional.empty();

        private Optional<String> administrativeDistrictLevel1 = Optional.empty();

        private Optional<String> administrativeDistrictLevel2 = Optional.empty();

        private Optional<String> administrativeDistrictLevel3 = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<Country> country = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Address other) {
            addressLine1(other.getAddressLine1());
            addressLine2(other.getAddressLine2());
            addressLine3(other.getAddressLine3());
            locality(other.getLocality());
            sublocality(other.getSublocality());
            sublocality2(other.getSublocality2());
            sublocality3(other.getSublocality3());
            administrativeDistrictLevel1(other.getAdministrativeDistrictLevel1());
            administrativeDistrictLevel2(other.getAdministrativeDistrictLevel2());
            administrativeDistrictLevel3(other.getAdministrativeDistrictLevel3());
            postalCode(other.getPostalCode());
            country(other.getCountry());
            firstName(other.getFirstName());
            lastName(other.getLastName());
            return this;
        }

        @JsonSetter(value = "address_line_1", nulls = Nulls.SKIP)
        public Builder addressLine1(Optional<String> addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }

        public Builder addressLine1(String addressLine1) {
            this.addressLine1 = Optional.ofNullable(addressLine1);
            return this;
        }

        public Builder addressLine1(Nullable<String> addressLine1) {
            if (addressLine1.isNull()) {
                this.addressLine1 = null;
            } else if (addressLine1.isEmpty()) {
                this.addressLine1 = Optional.empty();
            } else {
                this.addressLine1 = Optional.of(addressLine1.get());
            }
            return this;
        }

        @JsonSetter(value = "address_line_2", nulls = Nulls.SKIP)
        public Builder addressLine2(Optional<String> addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }

        public Builder addressLine2(String addressLine2) {
            this.addressLine2 = Optional.ofNullable(addressLine2);
            return this;
        }

        public Builder addressLine2(Nullable<String> addressLine2) {
            if (addressLine2.isNull()) {
                this.addressLine2 = null;
            } else if (addressLine2.isEmpty()) {
                this.addressLine2 = Optional.empty();
            } else {
                this.addressLine2 = Optional.of(addressLine2.get());
            }
            return this;
        }

        @JsonSetter(value = "address_line_3", nulls = Nulls.SKIP)
        public Builder addressLine3(Optional<String> addressLine3) {
            this.addressLine3 = addressLine3;
            return this;
        }

        public Builder addressLine3(String addressLine3) {
            this.addressLine3 = Optional.ofNullable(addressLine3);
            return this;
        }

        public Builder addressLine3(Nullable<String> addressLine3) {
            if (addressLine3.isNull()) {
                this.addressLine3 = null;
            } else if (addressLine3.isEmpty()) {
                this.addressLine3 = Optional.empty();
            } else {
                this.addressLine3 = Optional.of(addressLine3.get());
            }
            return this;
        }

        @JsonSetter(value = "locality", nulls = Nulls.SKIP)
        public Builder locality(Optional<String> locality) {
            this.locality = locality;
            return this;
        }

        public Builder locality(String locality) {
            this.locality = Optional.ofNullable(locality);
            return this;
        }

        public Builder locality(Nullable<String> locality) {
            if (locality.isNull()) {
                this.locality = null;
            } else if (locality.isEmpty()) {
                this.locality = Optional.empty();
            } else {
                this.locality = Optional.of(locality.get());
            }
            return this;
        }

        @JsonSetter(value = "sublocality", nulls = Nulls.SKIP)
        public Builder sublocality(Optional<String> sublocality) {
            this.sublocality = sublocality;
            return this;
        }

        public Builder sublocality(String sublocality) {
            this.sublocality = Optional.ofNullable(sublocality);
            return this;
        }

        public Builder sublocality(Nullable<String> sublocality) {
            if (sublocality.isNull()) {
                this.sublocality = null;
            } else if (sublocality.isEmpty()) {
                this.sublocality = Optional.empty();
            } else {
                this.sublocality = Optional.of(sublocality.get());
            }
            return this;
        }

        @JsonSetter(value = "sublocality_2", nulls = Nulls.SKIP)
        public Builder sublocality2(Optional<String> sublocality2) {
            this.sublocality2 = sublocality2;
            return this;
        }

        public Builder sublocality2(String sublocality2) {
            this.sublocality2 = Optional.ofNullable(sublocality2);
            return this;
        }

        public Builder sublocality2(Nullable<String> sublocality2) {
            if (sublocality2.isNull()) {
                this.sublocality2 = null;
            } else if (sublocality2.isEmpty()) {
                this.sublocality2 = Optional.empty();
            } else {
                this.sublocality2 = Optional.of(sublocality2.get());
            }
            return this;
        }

        @JsonSetter(value = "sublocality_3", nulls = Nulls.SKIP)
        public Builder sublocality3(Optional<String> sublocality3) {
            this.sublocality3 = sublocality3;
            return this;
        }

        public Builder sublocality3(String sublocality3) {
            this.sublocality3 = Optional.ofNullable(sublocality3);
            return this;
        }

        public Builder sublocality3(Nullable<String> sublocality3) {
            if (sublocality3.isNull()) {
                this.sublocality3 = null;
            } else if (sublocality3.isEmpty()) {
                this.sublocality3 = Optional.empty();
            } else {
                this.sublocality3 = Optional.of(sublocality3.get());
            }
            return this;
        }

        @JsonSetter(value = "administrative_district_level_1", nulls = Nulls.SKIP)
        public Builder administrativeDistrictLevel1(Optional<String> administrativeDistrictLevel1) {
            this.administrativeDistrictLevel1 = administrativeDistrictLevel1;
            return this;
        }

        public Builder administrativeDistrictLevel1(String administrativeDistrictLevel1) {
            this.administrativeDistrictLevel1 = Optional.ofNullable(administrativeDistrictLevel1);
            return this;
        }

        public Builder administrativeDistrictLevel1(Nullable<String> administrativeDistrictLevel1) {
            if (administrativeDistrictLevel1.isNull()) {
                this.administrativeDistrictLevel1 = null;
            } else if (administrativeDistrictLevel1.isEmpty()) {
                this.administrativeDistrictLevel1 = Optional.empty();
            } else {
                this.administrativeDistrictLevel1 = Optional.of(administrativeDistrictLevel1.get());
            }
            return this;
        }

        @JsonSetter(value = "administrative_district_level_2", nulls = Nulls.SKIP)
        public Builder administrativeDistrictLevel2(Optional<String> administrativeDistrictLevel2) {
            this.administrativeDistrictLevel2 = administrativeDistrictLevel2;
            return this;
        }

        public Builder administrativeDistrictLevel2(String administrativeDistrictLevel2) {
            this.administrativeDistrictLevel2 = Optional.ofNullable(administrativeDistrictLevel2);
            return this;
        }

        public Builder administrativeDistrictLevel2(Nullable<String> administrativeDistrictLevel2) {
            if (administrativeDistrictLevel2.isNull()) {
                this.administrativeDistrictLevel2 = null;
            } else if (administrativeDistrictLevel2.isEmpty()) {
                this.administrativeDistrictLevel2 = Optional.empty();
            } else {
                this.administrativeDistrictLevel2 = Optional.of(administrativeDistrictLevel2.get());
            }
            return this;
        }

        @JsonSetter(value = "administrative_district_level_3", nulls = Nulls.SKIP)
        public Builder administrativeDistrictLevel3(Optional<String> administrativeDistrictLevel3) {
            this.administrativeDistrictLevel3 = administrativeDistrictLevel3;
            return this;
        }

        public Builder administrativeDistrictLevel3(String administrativeDistrictLevel3) {
            this.administrativeDistrictLevel3 = Optional.ofNullable(administrativeDistrictLevel3);
            return this;
        }

        public Builder administrativeDistrictLevel3(Nullable<String> administrativeDistrictLevel3) {
            if (administrativeDistrictLevel3.isNull()) {
                this.administrativeDistrictLevel3 = null;
            } else if (administrativeDistrictLevel3.isEmpty()) {
                this.administrativeDistrictLevel3 = Optional.empty();
            } else {
                this.administrativeDistrictLevel3 = Optional.of(administrativeDistrictLevel3.get());
            }
            return this;
        }

        @JsonSetter(value = "postal_code", nulls = Nulls.SKIP)
        public Builder postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        public Builder postalCode(Nullable<String> postalCode) {
            if (postalCode.isNull()) {
                this.postalCode = null;
            } else if (postalCode.isEmpty()) {
                this.postalCode = Optional.empty();
            } else {
                this.postalCode = Optional.of(postalCode.get());
            }
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<Country> country) {
            this.country = country;
            return this;
        }

        public Builder country(Country country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "first_name", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Nullable<String> firstName) {
            if (firstName.isNull()) {
                this.firstName = null;
            } else if (firstName.isEmpty()) {
                this.firstName = Optional.empty();
            } else {
                this.firstName = Optional.of(firstName.get());
            }
            return this;
        }

        @JsonSetter(value = "last_name", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Nullable<String> lastName) {
            if (lastName.isNull()) {
                this.lastName = null;
            } else if (lastName.isEmpty()) {
                this.lastName = Optional.empty();
            } else {
                this.lastName = Optional.of(lastName.get());
            }
            return this;
        }

        public Address build() {
            return new Address(
                    addressLine1,
                    addressLine2,
                    addressLine3,
                    locality,
                    sublocality,
                    sublocality2,
                    sublocality3,
                    administrativeDistrictLevel1,
                    administrativeDistrictLevel2,
                    administrativeDistrictLevel3,
                    postalCode,
                    country,
                    firstName,
                    lastName,
                    additionalProperties);
        }
    }
}
