/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceCheckoutOptions.Builder.class)
public final class DeviceCheckoutOptions {
    private final String deviceId;

    private final Optional<Boolean> skipReceiptScreen;

    private final Optional<Boolean> collectSignature;

    private final Optional<TipSettings> tipSettings;

    private final Optional<Boolean> showItemizedCart;

    private final Map<String, Object> additionalProperties;

    private DeviceCheckoutOptions(
            String deviceId,
            Optional<Boolean> skipReceiptScreen,
            Optional<Boolean> collectSignature,
            Optional<TipSettings> tipSettings,
            Optional<Boolean> showItemizedCart,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.skipReceiptScreen = skipReceiptScreen;
        this.collectSignature = collectSignature;
        this.tipSettings = tipSettings;
        this.showItemizedCart = showItemizedCart;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID of the device intended for this <code>TerminalCheckout</code>.
     * A list of <code>DeviceCode</code> objects can be retrieved from the /v2/devices/codes endpoint.
     * Match a <code>DeviceCode.device_id</code> value with <code>device_id</code> to get the associated device code.
     */
    @JsonProperty("device_id")
    public String getDeviceId() {
        return deviceId;
    }

    /**
     * @return Instructs the device to skip the receipt screen. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getSkipReceiptScreen() {
        if (skipReceiptScreen == null) {
            return Optional.empty();
        }
        return skipReceiptScreen;
    }

    /**
     * @return Indicates that signature collection is desired during checkout. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getCollectSignature() {
        if (collectSignature == null) {
            return Optional.empty();
        }
        return collectSignature;
    }

    /**
     * @return Tip-specific settings.
     */
    @JsonProperty("tip_settings")
    public Optional<TipSettings> getTipSettings() {
        return tipSettings;
    }

    /**
     * @return Show the itemization screen prior to taking a payment. This field is only meaningful when the
     * checkout includes an order ID. Defaults to true.
     */
    @JsonIgnore
    public Optional<Boolean> getShowItemizedCart() {
        if (showItemizedCart == null) {
            return Optional.empty();
        }
        return showItemizedCart;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("skip_receipt_screen")
    private Optional<Boolean> _getSkipReceiptScreen() {
        return skipReceiptScreen;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("collect_signature")
    private Optional<Boolean> _getCollectSignature() {
        return collectSignature;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("show_itemized_cart")
    private Optional<Boolean> _getShowItemizedCart() {
        return showItemizedCart;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceCheckoutOptions && equalTo((DeviceCheckoutOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceCheckoutOptions other) {
        return deviceId.equals(other.deviceId)
                && skipReceiptScreen.equals(other.skipReceiptScreen)
                && collectSignature.equals(other.collectSignature)
                && tipSettings.equals(other.tipSettings)
                && showItemizedCart.equals(other.showItemizedCart);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.deviceId, this.skipReceiptScreen, this.collectSignature, this.tipSettings, this.showItemizedCart);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeviceIdStage builder() {
        return new Builder();
    }

    public interface DeviceIdStage {
        /**
         * <p>The unique ID of the device intended for this <code>TerminalCheckout</code>.
         * A list of <code>DeviceCode</code> objects can be retrieved from the /v2/devices/codes endpoint.
         * Match a <code>DeviceCode.device_id</code> value with <code>device_id</code> to get the associated device code.</p>
         */
        _FinalStage deviceId(@NotNull String deviceId);

        Builder from(DeviceCheckoutOptions other);
    }

    public interface _FinalStage {
        DeviceCheckoutOptions build();

        /**
         * <p>Instructs the device to skip the receipt screen. Defaults to false.</p>
         */
        _FinalStage skipReceiptScreen(Optional<Boolean> skipReceiptScreen);

        _FinalStage skipReceiptScreen(Boolean skipReceiptScreen);

        _FinalStage skipReceiptScreen(Nullable<Boolean> skipReceiptScreen);

        /**
         * <p>Indicates that signature collection is desired during checkout. Defaults to false.</p>
         */
        _FinalStage collectSignature(Optional<Boolean> collectSignature);

        _FinalStage collectSignature(Boolean collectSignature);

        _FinalStage collectSignature(Nullable<Boolean> collectSignature);

        /**
         * <p>Tip-specific settings.</p>
         */
        _FinalStage tipSettings(Optional<TipSettings> tipSettings);

        _FinalStage tipSettings(TipSettings tipSettings);

        /**
         * <p>Show the itemization screen prior to taking a payment. This field is only meaningful when the
         * checkout includes an order ID. Defaults to true.</p>
         */
        _FinalStage showItemizedCart(Optional<Boolean> showItemizedCart);

        _FinalStage showItemizedCart(Boolean showItemizedCart);

        _FinalStage showItemizedCart(Nullable<Boolean> showItemizedCart);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DeviceIdStage, _FinalStage {
        private String deviceId;

        private Optional<Boolean> showItemizedCart = Optional.empty();

        private Optional<TipSettings> tipSettings = Optional.empty();

        private Optional<Boolean> collectSignature = Optional.empty();

        private Optional<Boolean> skipReceiptScreen = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeviceCheckoutOptions other) {
            deviceId(other.getDeviceId());
            skipReceiptScreen(other.getSkipReceiptScreen());
            collectSignature(other.getCollectSignature());
            tipSettings(other.getTipSettings());
            showItemizedCart(other.getShowItemizedCart());
            return this;
        }

        /**
         * <p>The unique ID of the device intended for this <code>TerminalCheckout</code>.
         * A list of <code>DeviceCode</code> objects can be retrieved from the /v2/devices/codes endpoint.
         * Match a <code>DeviceCode.device_id</code> value with <code>device_id</code> to get the associated device code.</p>
         * <p>The unique ID of the device intended for this <code>TerminalCheckout</code>.
         * A list of <code>DeviceCode</code> objects can be retrieved from the /v2/devices/codes endpoint.
         * Match a <code>DeviceCode.device_id</code> value with <code>device_id</code> to get the associated device code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("device_id")
        public _FinalStage deviceId(@NotNull String deviceId) {
            this.deviceId = Objects.requireNonNull(deviceId, "deviceId must not be null");
            return this;
        }

        /**
         * <p>Show the itemization screen prior to taking a payment. This field is only meaningful when the
         * checkout includes an order ID. Defaults to true.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage showItemizedCart(Nullable<Boolean> showItemizedCart) {
            if (showItemizedCart.isNull()) {
                this.showItemizedCart = null;
            } else if (showItemizedCart.isEmpty()) {
                this.showItemizedCart = Optional.empty();
            } else {
                this.showItemizedCart = Optional.of(showItemizedCart.get());
            }
            return this;
        }

        /**
         * <p>Show the itemization screen prior to taking a payment. This field is only meaningful when the
         * checkout includes an order ID. Defaults to true.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage showItemizedCart(Boolean showItemizedCart) {
            this.showItemizedCart = Optional.ofNullable(showItemizedCart);
            return this;
        }

        /**
         * <p>Show the itemization screen prior to taking a payment. This field is only meaningful when the
         * checkout includes an order ID. Defaults to true.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "show_itemized_cart", nulls = Nulls.SKIP)
        public _FinalStage showItemizedCart(Optional<Boolean> showItemizedCart) {
            this.showItemizedCart = showItemizedCart;
            return this;
        }

        /**
         * <p>Tip-specific settings.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tipSettings(TipSettings tipSettings) {
            this.tipSettings = Optional.ofNullable(tipSettings);
            return this;
        }

        /**
         * <p>Tip-specific settings.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tip_settings", nulls = Nulls.SKIP)
        public _FinalStage tipSettings(Optional<TipSettings> tipSettings) {
            this.tipSettings = tipSettings;
            return this;
        }

        /**
         * <p>Indicates that signature collection is desired during checkout. Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage collectSignature(Nullable<Boolean> collectSignature) {
            if (collectSignature.isNull()) {
                this.collectSignature = null;
            } else if (collectSignature.isEmpty()) {
                this.collectSignature = Optional.empty();
            } else {
                this.collectSignature = Optional.of(collectSignature.get());
            }
            return this;
        }

        /**
         * <p>Indicates that signature collection is desired during checkout. Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage collectSignature(Boolean collectSignature) {
            this.collectSignature = Optional.ofNullable(collectSignature);
            return this;
        }

        /**
         * <p>Indicates that signature collection is desired during checkout. Defaults to false.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "collect_signature", nulls = Nulls.SKIP)
        public _FinalStage collectSignature(Optional<Boolean> collectSignature) {
            this.collectSignature = collectSignature;
            return this;
        }

        /**
         * <p>Instructs the device to skip the receipt screen. Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage skipReceiptScreen(Nullable<Boolean> skipReceiptScreen) {
            if (skipReceiptScreen.isNull()) {
                this.skipReceiptScreen = null;
            } else if (skipReceiptScreen.isEmpty()) {
                this.skipReceiptScreen = Optional.empty();
            } else {
                this.skipReceiptScreen = Optional.of(skipReceiptScreen.get());
            }
            return this;
        }

        /**
         * <p>Instructs the device to skip the receipt screen. Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage skipReceiptScreen(Boolean skipReceiptScreen) {
            this.skipReceiptScreen = Optional.ofNullable(skipReceiptScreen);
            return this;
        }

        /**
         * <p>Instructs the device to skip the receipt screen. Defaults to false.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "skip_receipt_screen", nulls = Nulls.SKIP)
        public _FinalStage skipReceiptScreen(Optional<Boolean> skipReceiptScreen) {
            this.skipReceiptScreen = skipReceiptScreen;
            return this;
        }

        @java.lang.Override
        public DeviceCheckoutOptions build() {
            return new DeviceCheckoutOptions(
                    deviceId, skipReceiptScreen, collectSignature, tipSettings, showItemizedCart, additionalProperties);
        }
    }
}
