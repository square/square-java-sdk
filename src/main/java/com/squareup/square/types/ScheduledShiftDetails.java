/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScheduledShiftDetails.Builder.class)
public final class ScheduledShiftDetails {
    private final Optional<String> teamMemberId;

    private final Optional<String> locationId;

    private final Optional<String> jobId;

    private final Optional<String> startAt;

    private final Optional<String> endAt;

    private final Optional<String> notes;

    private final Optional<Boolean> isDeleted;

    private final Optional<String> timezone;

    private final Map<String, Object> additionalProperties;

    private ScheduledShiftDetails(
            Optional<String> teamMemberId,
            Optional<String> locationId,
            Optional<String> jobId,
            Optional<String> startAt,
            Optional<String> endAt,
            Optional<String> notes,
            Optional<Boolean> isDeleted,
            Optional<String> timezone,
            Map<String, Object> additionalProperties) {
        this.teamMemberId = teamMemberId;
        this.locationId = locationId;
        this.jobId = jobId;
        this.startAt = startAt;
        this.endAt = endAt;
        this.notes = notes;
        this.isDeleted = isDeleted;
        this.timezone = timezone;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:TeamMember">team member</a> scheduled for the shift.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return The ID of the <a href="entity:Location">location</a> the shift is scheduled for.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The ID of the <a href="entity:Job">job</a> the shift is scheduled for.
     */
    @JsonIgnore
    public Optional<String> getJobId() {
        if (jobId == null) {
            return Optional.empty();
        }
        return jobId;
    }

    /**
     * @return The start time of the shift, in RFC 3339 format in the time zone +
     * offset of the shift location specified in <code>location_id</code>. Precision up to the minute
     * is respected; seconds are truncated.
     */
    @JsonIgnore
    public Optional<String> getStartAt() {
        if (startAt == null) {
            return Optional.empty();
        }
        return startAt;
    }

    /**
     * @return The end time for the shift, in RFC 3339 format in the time zone +
     * offset of the shift location specified in <code>location_id</code>. Precision up to the minute
     * is respected; seconds are truncated.
     */
    @JsonIgnore
    public Optional<String> getEndAt() {
        if (endAt == null) {
            return Optional.empty();
        }
        return endAt;
    }

    /**
     * @return Optional notes for the shift.
     */
    @JsonIgnore
    public Optional<String> getNotes() {
        if (notes == null) {
            return Optional.empty();
        }
        return notes;
    }

    /**
     * @return Indicates whether the draft shift version is deleted. If set to <code>true</code> when the shift
     * is published, the entire scheduled shift (including the published shift) is deleted and
     * cannot be accessed using any endpoint.
     */
    @JsonIgnore
    public Optional<Boolean> getIsDeleted() {
        if (isDeleted == null) {
            return Optional.empty();
        }
        return isDeleted;
    }

    /**
     * @return The time zone of the shift location, calculated based on the <code>location_id</code>. This field
     * is provided for convenience.
     */
    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("job_id")
    private Optional<String> _getJobId() {
        return jobId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_at")
    private Optional<String> _getStartAt() {
        return startAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_at")
    private Optional<String> _getEndAt() {
        return endAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("notes")
    private Optional<String> _getNotes() {
        return notes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_deleted")
    private Optional<Boolean> _getIsDeleted() {
        return isDeleted;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScheduledShiftDetails && equalTo((ScheduledShiftDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScheduledShiftDetails other) {
        return teamMemberId.equals(other.teamMemberId)
                && locationId.equals(other.locationId)
                && jobId.equals(other.jobId)
                && startAt.equals(other.startAt)
                && endAt.equals(other.endAt)
                && notes.equals(other.notes)
                && isDeleted.equals(other.isDeleted)
                && timezone.equals(other.timezone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.teamMemberId,
                this.locationId,
                this.jobId,
                this.startAt,
                this.endAt,
                this.notes,
                this.isDeleted,
                this.timezone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<String> startAt = Optional.empty();

        private Optional<String> endAt = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<Boolean> isDeleted = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScheduledShiftDetails other) {
            teamMemberId(other.getTeamMemberId());
            locationId(other.getLocationId());
            jobId(other.getJobId());
            startAt(other.getStartAt());
            endAt(other.getEndAt());
            notes(other.getNotes());
            isDeleted(other.getIsDeleted());
            timezone(other.getTimezone());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:TeamMember">team member</a> scheduled for the shift.</p>
         */
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Location">location</a> the shift is scheduled for.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Job">job</a> the shift is scheduled for.</p>
         */
        @JsonSetter(value = "job_id", nulls = Nulls.SKIP)
        public Builder jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Nullable<String> jobId) {
            if (jobId.isNull()) {
                this.jobId = null;
            } else if (jobId.isEmpty()) {
                this.jobId = Optional.empty();
            } else {
                this.jobId = Optional.of(jobId.get());
            }
            return this;
        }

        /**
         * <p>The start time of the shift, in RFC 3339 format in the time zone +
         * offset of the shift location specified in <code>location_id</code>. Precision up to the minute
         * is respected; seconds are truncated.</p>
         */
        @JsonSetter(value = "start_at", nulls = Nulls.SKIP)
        public Builder startAt(Optional<String> startAt) {
            this.startAt = startAt;
            return this;
        }

        public Builder startAt(String startAt) {
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Nullable<String> startAt) {
            if (startAt.isNull()) {
                this.startAt = null;
            } else if (startAt.isEmpty()) {
                this.startAt = Optional.empty();
            } else {
                this.startAt = Optional.of(startAt.get());
            }
            return this;
        }

        /**
         * <p>The end time for the shift, in RFC 3339 format in the time zone +
         * offset of the shift location specified in <code>location_id</code>. Precision up to the minute
         * is respected; seconds are truncated.</p>
         */
        @JsonSetter(value = "end_at", nulls = Nulls.SKIP)
        public Builder endAt(Optional<String> endAt) {
            this.endAt = endAt;
            return this;
        }

        public Builder endAt(String endAt) {
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Nullable<String> endAt) {
            if (endAt.isNull()) {
                this.endAt = null;
            } else if (endAt.isEmpty()) {
                this.endAt = Optional.empty();
            } else {
                this.endAt = Optional.of(endAt.get());
            }
            return this;
        }

        /**
         * <p>Optional notes for the shift.</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Nullable<String> notes) {
            if (notes.isNull()) {
                this.notes = null;
            } else if (notes.isEmpty()) {
                this.notes = Optional.empty();
            } else {
                this.notes = Optional.of(notes.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether the draft shift version is deleted. If set to <code>true</code> when the shift
         * is published, the entire scheduled shift (including the published shift) is deleted and
         * cannot be accessed using any endpoint.</p>
         */
        @JsonSetter(value = "is_deleted", nulls = Nulls.SKIP)
        public Builder isDeleted(Optional<Boolean> isDeleted) {
            this.isDeleted = isDeleted;
            return this;
        }

        public Builder isDeleted(Boolean isDeleted) {
            this.isDeleted = Optional.ofNullable(isDeleted);
            return this;
        }

        public Builder isDeleted(Nullable<Boolean> isDeleted) {
            if (isDeleted.isNull()) {
                this.isDeleted = null;
            } else if (isDeleted.isEmpty()) {
                this.isDeleted = Optional.empty();
            } else {
                this.isDeleted = Optional.of(isDeleted.get());
            }
            return this;
        }

        /**
         * <p>The time zone of the shift location, calculated based on the <code>location_id</code>. This field
         * is provided for convenience.</p>
         */
        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public ScheduledShiftDetails build() {
            return new ScheduledShiftDetails(
                    teamMemberId, locationId, jobId, startAt, endAt, notes, isDeleted, timezone, additionalProperties);
        }
    }
}
