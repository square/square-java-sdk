/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardUpdatedEventObject.Builder.class)
public final class CardUpdatedEventObject {
    private final Optional<Card> card;

    private final Map<String, Object> additionalProperties;

    private CardUpdatedEventObject(Optional<Card> card, Map<String, Object> additionalProperties) {
        this.card = card;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The updated card.
     */
    @JsonProperty("card")
    public Optional<Card> getCard() {
        return card;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardUpdatedEventObject && equalTo((CardUpdatedEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardUpdatedEventObject other) {
        return card.equals(other.card);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.card);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Card> card = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardUpdatedEventObject other) {
            card(other.getCard());
            return this;
        }

        /**
         * <p>The updated card.</p>
         */
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Card> card) {
            this.card = card;
            return this;
        }

        public Builder card(Card card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        public CardUpdatedEventObject build() {
            return new CardUpdatedEventObject(card, additionalProperties);
        }
    }
}
