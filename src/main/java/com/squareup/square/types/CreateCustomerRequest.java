/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCustomerRequest.Builder.class)
public final class CreateCustomerRequest {
    private final Optional<String> idempotencyKey;

    private final Optional<String> givenName;

    private final Optional<String> familyName;

    private final Optional<String> companyName;

    private final Optional<String> nickname;

    private final Optional<String> emailAddress;

    private final Optional<Address> address;

    private final Optional<String> phoneNumber;

    private final Optional<String> referenceId;

    private final Optional<String> note;

    private final Optional<String> birthday;

    private final Optional<CustomerTaxIds> taxIds;

    private final Map<String, Object> additionalProperties;

    private CreateCustomerRequest(
            Optional<String> idempotencyKey,
            Optional<String> givenName,
            Optional<String> familyName,
            Optional<String> companyName,
            Optional<String> nickname,
            Optional<String> emailAddress,
            Optional<Address> address,
            Optional<String> phoneNumber,
            Optional<String> referenceId,
            Optional<String> note,
            Optional<String> birthday,
            Optional<CustomerTaxIds> taxIds,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.givenName = givenName;
        this.familyName = familyName;
        this.companyName = companyName;
        this.nickname = nickname;
        this.emailAddress = emailAddress;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.referenceId = referenceId;
        this.note = note;
        this.birthday = birthday;
        this.taxIds = taxIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The idempotency key for the request.	For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The given name (that is, the first name) associated with the customer profile.
     * <p>The maximum length for this value is 300 characters.</p>
     */
    @JsonProperty("given_name")
    public Optional<String> getGivenName() {
        return givenName;
    }

    /**
     * @return The family name (that is, the last name) associated with the customer profile.
     * <p>The maximum length for this value is 300 characters.</p>
     */
    @JsonProperty("family_name")
    public Optional<String> getFamilyName() {
        return familyName;
    }

    /**
     * @return A business name associated with the customer profile.
     * <p>The maximum length for this value is 500 characters.</p>
     */
    @JsonProperty("company_name")
    public Optional<String> getCompanyName() {
        return companyName;
    }

    /**
     * @return A nickname for the customer profile.
     * <p>The maximum length for this value is 100 characters.</p>
     */
    @JsonProperty("nickname")
    public Optional<String> getNickname() {
        return nickname;
    }

    /**
     * @return The email address associated with the customer profile.
     * <p>The maximum length for this value is 254 characters.</p>
     */
    @JsonProperty("email_address")
    public Optional<String> getEmailAddress() {
        return emailAddress;
    }

    /**
     * @return The physical address associated with the customer profile. For maximum length constraints, see
     * <a href="https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#address">Customer addresses</a>.
     * The <code>first_name</code> and <code>last_name</code> fields are ignored if they are present in the request.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return The phone number associated with the customer profile. The phone number must be valid and can contain
     * 9â€“16 digits, with an optional <code>+</code> prefix and country code. For more information, see
     * <a href="https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#phone-number">Customer phone numbers</a>.
     */
    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return An optional second ID used to associate the customer profile with an
     * entity in another system.
     * <p>The maximum length for this value is 100 characters.</p>
     */
    @JsonProperty("reference_id")
    public Optional<String> getReferenceId() {
        return referenceId;
    }

    /**
     * @return A custom note associated with the customer profile.
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    /**
     * @return The birthday associated with the customer profile, in <code>YYYY-MM-DD</code> or <code>MM-DD</code> format. For example,
     * specify <code>1998-09-21</code> for September 21, 1998, or <code>09-21</code> for September 21. Birthdays are returned in <code>YYYY-MM-DD</code>
     * format, where <code>YYYY</code> is the specified birth year or <code>0000</code> if a birth year is not specified.
     */
    @JsonProperty("birthday")
    public Optional<String> getBirthday() {
        return birthday;
    }

    /**
     * @return The tax ID associated with the customer profile. This field is available only for customers of sellers
     * in EU countries or the United Kingdom. For more information,
     * see <a href="https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids">Customer tax IDs</a>.
     */
    @JsonProperty("tax_ids")
    public Optional<CustomerTaxIds> getTaxIds() {
        return taxIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCustomerRequest && equalTo((CreateCustomerRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCustomerRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && givenName.equals(other.givenName)
                && familyName.equals(other.familyName)
                && companyName.equals(other.companyName)
                && nickname.equals(other.nickname)
                && emailAddress.equals(other.emailAddress)
                && address.equals(other.address)
                && phoneNumber.equals(other.phoneNumber)
                && referenceId.equals(other.referenceId)
                && note.equals(other.note)
                && birthday.equals(other.birthday)
                && taxIds.equals(other.taxIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.givenName,
                this.familyName,
                this.companyName,
                this.nickname,
                this.emailAddress,
                this.address,
                this.phoneNumber,
                this.referenceId,
                this.note,
                this.birthday,
                this.taxIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<String> givenName = Optional.empty();

        private Optional<String> familyName = Optional.empty();

        private Optional<String> companyName = Optional.empty();

        private Optional<String> nickname = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> birthday = Optional.empty();

        private Optional<CustomerTaxIds> taxIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateCustomerRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            givenName(other.getGivenName());
            familyName(other.getFamilyName());
            companyName(other.getCompanyName());
            nickname(other.getNickname());
            emailAddress(other.getEmailAddress());
            address(other.getAddress());
            phoneNumber(other.getPhoneNumber());
            referenceId(other.getReferenceId());
            note(other.getNote());
            birthday(other.getBirthday());
            taxIds(other.getTaxIds());
            return this;
        }

        /**
         * <p>The idempotency key for the request.	For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         */
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>The given name (that is, the first name) associated with the customer profile.</p>
         * <p>The maximum length for this value is 300 characters.</p>
         */
        @JsonSetter(value = "given_name", nulls = Nulls.SKIP)
        public Builder givenName(Optional<String> givenName) {
            this.givenName = givenName;
            return this;
        }

        public Builder givenName(String givenName) {
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        /**
         * <p>The family name (that is, the last name) associated with the customer profile.</p>
         * <p>The maximum length for this value is 300 characters.</p>
         */
        @JsonSetter(value = "family_name", nulls = Nulls.SKIP)
        public Builder familyName(Optional<String> familyName) {
            this.familyName = familyName;
            return this;
        }

        public Builder familyName(String familyName) {
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        /**
         * <p>A business name associated with the customer profile.</p>
         * <p>The maximum length for this value is 500 characters.</p>
         */
        @JsonSetter(value = "company_name", nulls = Nulls.SKIP)
        public Builder companyName(Optional<String> companyName) {
            this.companyName = companyName;
            return this;
        }

        public Builder companyName(String companyName) {
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * <p>A nickname for the customer profile.</p>
         * <p>The maximum length for this value is 100 characters.</p>
         */
        @JsonSetter(value = "nickname", nulls = Nulls.SKIP)
        public Builder nickname(Optional<String> nickname) {
            this.nickname = nickname;
            return this;
        }

        public Builder nickname(String nickname) {
            this.nickname = Optional.ofNullable(nickname);
            return this;
        }

        /**
         * <p>The email address associated with the customer profile.</p>
         * <p>The maximum length for this value is 254 characters.</p>
         */
        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * <p>The physical address associated with the customer profile. For maximum length constraints, see
         * <a href="https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#address">Customer addresses</a>.
         * The <code>first_name</code> and <code>last_name</code> fields are ignored if they are present in the request.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>The phone number associated with the customer profile. The phone number must be valid and can contain
         * 9â€“16 digits, with an optional <code>+</code> prefix and country code. For more information, see
         * <a href="https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#phone-number">Customer phone numbers</a>.</p>
         */
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>An optional second ID used to associate the customer profile with an
         * entity in another system.</p>
         * <p>The maximum length for this value is 100 characters.</p>
         */
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        /**
         * <p>A custom note associated with the customer profile.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>The birthday associated with the customer profile, in <code>YYYY-MM-DD</code> or <code>MM-DD</code> format. For example,
         * specify <code>1998-09-21</code> for September 21, 1998, or <code>09-21</code> for September 21. Birthdays are returned in <code>YYYY-MM-DD</code>
         * format, where <code>YYYY</code> is the specified birth year or <code>0000</code> if a birth year is not specified.</p>
         */
        @JsonSetter(value = "birthday", nulls = Nulls.SKIP)
        public Builder birthday(Optional<String> birthday) {
            this.birthday = birthday;
            return this;
        }

        public Builder birthday(String birthday) {
            this.birthday = Optional.ofNullable(birthday);
            return this;
        }

        /**
         * <p>The tax ID associated with the customer profile. This field is available only for customers of sellers
         * in EU countries or the United Kingdom. For more information,
         * see <a href="https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids">Customer tax IDs</a>.</p>
         */
        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(Optional<CustomerTaxIds> taxIds) {
            this.taxIds = taxIds;
            return this;
        }

        public Builder taxIds(CustomerTaxIds taxIds) {
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        public CreateCustomerRequest build() {
            return new CreateCustomerRequest(
                    idempotencyKey,
                    givenName,
                    familyName,
                    companyName,
                    nickname,
                    emailAddress,
                    address,
                    phoneNumber,
                    referenceId,
                    note,
                    birthday,
                    taxIds,
                    additionalProperties);
        }
    }
}
