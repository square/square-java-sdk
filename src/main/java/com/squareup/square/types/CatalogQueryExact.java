/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQueryExact.Builder.class)
public final class CatalogQueryExact {
    private final String attributeName;

    private final String attributeValue;

    private final Map<String, Object> additionalProperties;

    private CatalogQueryExact(String attributeName, String attributeValue, Map<String, Object> additionalProperties) {
        this.attributeName = attributeName;
        this.attributeValue = attributeValue;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the attribute to be searched. Matching of the attribute name is exact.
     */
    @JsonProperty("attribute_name")
    public String getAttributeName() {
        return attributeName;
    }

    /**
     * @return The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
     * For example, if a specified value of &quot;sma&quot;, objects with the named attribute value of &quot;Small&quot;, &quot;small&quot; are both matched.
     */
    @JsonProperty("attribute_value")
    public String getAttributeValue() {
        return attributeValue;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQueryExact && equalTo((CatalogQueryExact) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQueryExact other) {
        return attributeName.equals(other.attributeName) && attributeValue.equals(other.attributeValue);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attributeName, this.attributeValue);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AttributeNameStage builder() {
        return new Builder();
    }

    public interface AttributeNameStage {
        AttributeValueStage attributeName(@NotNull String attributeName);

        Builder from(CatalogQueryExact other);
    }

    public interface AttributeValueStage {
        _FinalStage attributeValue(@NotNull String attributeValue);
    }

    public interface _FinalStage {
        CatalogQueryExact build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AttributeNameStage, AttributeValueStage, _FinalStage {
        private String attributeName;

        private String attributeValue;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogQueryExact other) {
            attributeName(other.getAttributeName());
            attributeValue(other.getAttributeValue());
            return this;
        }

        /**
         * <p>The name of the attribute to be searched. Matching of the attribute name is exact.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("attribute_name")
        public AttributeValueStage attributeName(@NotNull String attributeName) {
            this.attributeName = Objects.requireNonNull(attributeName, "attributeName must not be null");
            return this;
        }

        /**
         * <p>The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
         * For example, if a specified value of &quot;sma&quot;, objects with the named attribute value of &quot;Small&quot;, &quot;small&quot; are both matched.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("attribute_value")
        public _FinalStage attributeValue(@NotNull String attributeValue) {
            this.attributeValue = Objects.requireNonNull(attributeValue, "attributeValue must not be null");
            return this;
        }

        @java.lang.Override
        public CatalogQueryExact build() {
            return new CatalogQueryExact(attributeName, attributeValue, additionalProperties);
        }
    }
}
