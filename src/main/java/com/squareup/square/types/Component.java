/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Component.Builder.class)
public final class Component {
    private final ComponentComponentType type;

    private final Optional<DeviceComponentDetailsApplicationDetails> applicationDetails;

    private final Optional<DeviceComponentDetailsCardReaderDetails> cardReaderDetails;

    private final Optional<DeviceComponentDetailsBatteryDetails> batteryDetails;

    private final Optional<DeviceComponentDetailsWiFiDetails> wifiDetails;

    private final Optional<DeviceComponentDetailsEthernetDetails> ethernetDetails;

    private final Map<String, Object> additionalProperties;

    private Component(
            ComponentComponentType type,
            Optional<DeviceComponentDetailsApplicationDetails> applicationDetails,
            Optional<DeviceComponentDetailsCardReaderDetails> cardReaderDetails,
            Optional<DeviceComponentDetailsBatteryDetails> batteryDetails,
            Optional<DeviceComponentDetailsWiFiDetails> wifiDetails,
            Optional<DeviceComponentDetailsEthernetDetails> ethernetDetails,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.applicationDetails = applicationDetails;
        this.cardReaderDetails = cardReaderDetails;
        this.batteryDetails = batteryDetails;
        this.wifiDetails = wifiDetails;
        this.ethernetDetails = ethernetDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of this component. Each component type has expected properties expressed
     * in a structured format within its corresponding <code>*_details</code> field.
     * See <a href="#type-componenttype">ComponentType</a> for possible values
     */
    @JsonProperty("type")
    public ComponentComponentType getType() {
        return type;
    }

    /**
     * @return Structured data for an <code>Application</code>, set for Components of type <code>APPLICATION</code>.
     */
    @JsonProperty("application_details")
    public Optional<DeviceComponentDetailsApplicationDetails> getApplicationDetails() {
        return applicationDetails;
    }

    /**
     * @return Structured data for a <code>CardReader</code>, set for Components of type <code>CARD_READER</code>.
     */
    @JsonProperty("card_reader_details")
    public Optional<DeviceComponentDetailsCardReaderDetails> getCardReaderDetails() {
        return cardReaderDetails;
    }

    /**
     * @return Structured data for a <code>Battery</code>, set for Components of type <code>BATTERY</code>.
     */
    @JsonProperty("battery_details")
    public Optional<DeviceComponentDetailsBatteryDetails> getBatteryDetails() {
        return batteryDetails;
    }

    /**
     * @return Structured data for a <code>WiFi</code> interface, set for Components of type <code>WIFI</code>.
     */
    @JsonProperty("wifi_details")
    public Optional<DeviceComponentDetailsWiFiDetails> getWifiDetails() {
        return wifiDetails;
    }

    /**
     * @return Structured data for an <code>Ethernet</code> interface, set for Components of type <code>ETHERNET</code>.
     */
    @JsonProperty("ethernet_details")
    public Optional<DeviceComponentDetailsEthernetDetails> getEthernetDetails() {
        return ethernetDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Component && equalTo((Component) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Component other) {
        return type.equals(other.type)
                && applicationDetails.equals(other.applicationDetails)
                && cardReaderDetails.equals(other.cardReaderDetails)
                && batteryDetails.equals(other.batteryDetails)
                && wifiDetails.equals(other.wifiDetails)
                && ethernetDetails.equals(other.ethernetDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.applicationDetails,
                this.cardReaderDetails,
                this.batteryDetails,
                this.wifiDetails,
                this.ethernetDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of this component. Each component type has expected properties expressed
         * in a structured format within its corresponding <code>*_details</code> field.
         * See <a href="#type-componenttype">ComponentType</a> for possible values</p>
         */
        _FinalStage type(@NotNull ComponentComponentType type);

        Builder from(Component other);
    }

    public interface _FinalStage {
        Component build();

        /**
         * <p>Structured data for an <code>Application</code>, set for Components of type <code>APPLICATION</code>.</p>
         */
        _FinalStage applicationDetails(Optional<DeviceComponentDetailsApplicationDetails> applicationDetails);

        _FinalStage applicationDetails(DeviceComponentDetailsApplicationDetails applicationDetails);

        /**
         * <p>Structured data for a <code>CardReader</code>, set for Components of type <code>CARD_READER</code>.</p>
         */
        _FinalStage cardReaderDetails(Optional<DeviceComponentDetailsCardReaderDetails> cardReaderDetails);

        _FinalStage cardReaderDetails(DeviceComponentDetailsCardReaderDetails cardReaderDetails);

        /**
         * <p>Structured data for a <code>Battery</code>, set for Components of type <code>BATTERY</code>.</p>
         */
        _FinalStage batteryDetails(Optional<DeviceComponentDetailsBatteryDetails> batteryDetails);

        _FinalStage batteryDetails(DeviceComponentDetailsBatteryDetails batteryDetails);

        /**
         * <p>Structured data for a <code>WiFi</code> interface, set for Components of type <code>WIFI</code>.</p>
         */
        _FinalStage wifiDetails(Optional<DeviceComponentDetailsWiFiDetails> wifiDetails);

        _FinalStage wifiDetails(DeviceComponentDetailsWiFiDetails wifiDetails);

        /**
         * <p>Structured data for an <code>Ethernet</code> interface, set for Components of type <code>ETHERNET</code>.</p>
         */
        _FinalStage ethernetDetails(Optional<DeviceComponentDetailsEthernetDetails> ethernetDetails);

        _FinalStage ethernetDetails(DeviceComponentDetailsEthernetDetails ethernetDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private ComponentComponentType type;

        private Optional<DeviceComponentDetailsEthernetDetails> ethernetDetails = Optional.empty();

        private Optional<DeviceComponentDetailsWiFiDetails> wifiDetails = Optional.empty();

        private Optional<DeviceComponentDetailsBatteryDetails> batteryDetails = Optional.empty();

        private Optional<DeviceComponentDetailsCardReaderDetails> cardReaderDetails = Optional.empty();

        private Optional<DeviceComponentDetailsApplicationDetails> applicationDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Component other) {
            type(other.getType());
            applicationDetails(other.getApplicationDetails());
            cardReaderDetails(other.getCardReaderDetails());
            batteryDetails(other.getBatteryDetails());
            wifiDetails(other.getWifiDetails());
            ethernetDetails(other.getEthernetDetails());
            return this;
        }

        /**
         * <p>The type of this component. Each component type has expected properties expressed
         * in a structured format within its corresponding <code>*_details</code> field.
         * See <a href="#type-componenttype">ComponentType</a> for possible values</p>
         * <p>The type of this component. Each component type has expected properties expressed
         * in a structured format within its corresponding <code>*_details</code> field.
         * See <a href="#type-componenttype">ComponentType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull ComponentComponentType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Structured data for an <code>Ethernet</code> interface, set for Components of type <code>ETHERNET</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ethernetDetails(DeviceComponentDetailsEthernetDetails ethernetDetails) {
            this.ethernetDetails = Optional.ofNullable(ethernetDetails);
            return this;
        }

        /**
         * <p>Structured data for an <code>Ethernet</code> interface, set for Components of type <code>ETHERNET</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ethernet_details", nulls = Nulls.SKIP)
        public _FinalStage ethernetDetails(Optional<DeviceComponentDetailsEthernetDetails> ethernetDetails) {
            this.ethernetDetails = ethernetDetails;
            return this;
        }

        /**
         * <p>Structured data for a <code>WiFi</code> interface, set for Components of type <code>WIFI</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage wifiDetails(DeviceComponentDetailsWiFiDetails wifiDetails) {
            this.wifiDetails = Optional.ofNullable(wifiDetails);
            return this;
        }

        /**
         * <p>Structured data for a <code>WiFi</code> interface, set for Components of type <code>WIFI</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "wifi_details", nulls = Nulls.SKIP)
        public _FinalStage wifiDetails(Optional<DeviceComponentDetailsWiFiDetails> wifiDetails) {
            this.wifiDetails = wifiDetails;
            return this;
        }

        /**
         * <p>Structured data for a <code>Battery</code>, set for Components of type <code>BATTERY</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batteryDetails(DeviceComponentDetailsBatteryDetails batteryDetails) {
            this.batteryDetails = Optional.ofNullable(batteryDetails);
            return this;
        }

        /**
         * <p>Structured data for a <code>Battery</code>, set for Components of type <code>BATTERY</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "battery_details", nulls = Nulls.SKIP)
        public _FinalStage batteryDetails(Optional<DeviceComponentDetailsBatteryDetails> batteryDetails) {
            this.batteryDetails = batteryDetails;
            return this;
        }

        /**
         * <p>Structured data for a <code>CardReader</code>, set for Components of type <code>CARD_READER</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cardReaderDetails(DeviceComponentDetailsCardReaderDetails cardReaderDetails) {
            this.cardReaderDetails = Optional.ofNullable(cardReaderDetails);
            return this;
        }

        /**
         * <p>Structured data for a <code>CardReader</code>, set for Components of type <code>CARD_READER</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "card_reader_details", nulls = Nulls.SKIP)
        public _FinalStage cardReaderDetails(Optional<DeviceComponentDetailsCardReaderDetails> cardReaderDetails) {
            this.cardReaderDetails = cardReaderDetails;
            return this;
        }

        /**
         * <p>Structured data for an <code>Application</code>, set for Components of type <code>APPLICATION</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage applicationDetails(DeviceComponentDetailsApplicationDetails applicationDetails) {
            this.applicationDetails = Optional.ofNullable(applicationDetails);
            return this;
        }

        /**
         * <p>Structured data for an <code>Application</code>, set for Components of type <code>APPLICATION</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "application_details", nulls = Nulls.SKIP)
        public _FinalStage applicationDetails(Optional<DeviceComponentDetailsApplicationDetails> applicationDetails) {
            this.applicationDetails = applicationDetails;
            return this;
        }

        @java.lang.Override
        public Component build() {
            return new Component(
                    type,
                    applicationDetails,
                    cardReaderDetails,
                    batteryDetails,
                    wifiDetails,
                    ethernetDetails,
                    additionalProperties);
        }
    }
}
