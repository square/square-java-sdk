/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogProductSet.Builder.class)
public final class CatalogProductSet {
    private final Optional<String> name;

    private final Optional<List<String>> productIdsAny;

    private final Optional<List<String>> productIdsAll;

    private final Optional<Long> quantityExact;

    private final Optional<Long> quantityMin;

    private final Optional<Long> quantityMax;

    private final Optional<Boolean> allProducts;

    private final Map<String, Object> additionalProperties;

    private CatalogProductSet(
            Optional<String> name,
            Optional<List<String>> productIdsAny,
            Optional<List<String>> productIdsAll,
            Optional<Long> quantityExact,
            Optional<Long> quantityMin,
            Optional<Long> quantityMax,
            Optional<Boolean> allProducts,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.productIdsAny = productIdsAny;
        this.productIdsAll = productIdsAll;
        this.quantityExact = quantityExact;
        this.quantityMin = quantityMin;
        this.quantityMax = quantityMax;
        this.allProducts = allProducts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return User-defined name for the product set. For example, &quot;Clearance Items&quot;
     * or &quot;Winter Sale Items&quot;.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Unique IDs for any <code>CatalogObject</code> included in this product set. Any
     * number of these catalog objects can be in an order for a pricing rule to apply.
     * <p>This can be used with <code>product_ids_all</code> in a parent <code>CatalogProductSet</code> to
     * match groups of products for a bulk discount, such as a discount for an
     * entree and side combo.</p>
     * <p>Only one of <code>product_ids_all</code>, <code>product_ids_any</code>, or <code>all_products</code> can be set.</p>
     * <p>Max: 500 catalog object IDs.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getProductIdsAny() {
        if (productIdsAny == null) {
            return Optional.empty();
        }
        return productIdsAny;
    }

    /**
     * @return Unique IDs for any <code>CatalogObject</code> included in this product set.
     * All objects in this set must be included in an order for a pricing rule to apply.
     * <p>Only one of <code>product_ids_all</code>, <code>product_ids_any</code>, or <code>all_products</code> can be set.</p>
     * <p>Max: 500 catalog object IDs.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getProductIdsAll() {
        if (productIdsAll == null) {
            return Optional.empty();
        }
        return productIdsAll;
    }

    /**
     * @return If set, there must be exactly this many items from <code>products_any</code> or <code>products_all</code>
     * in the cart for the discount to apply.
     * <p>Cannot be combined with either <code>quantity_min</code> or <code>quantity_max</code>.</p>
     */
    @JsonIgnore
    public Optional<Long> getQuantityExact() {
        if (quantityExact == null) {
            return Optional.empty();
        }
        return quantityExact;
    }

    /**
     * @return If set, there must be at least this many items from <code>products_any</code> or <code>products_all</code>
     * in a cart for the discount to apply. See <code>quantity_exact</code>. Defaults to 0 if
     * <code>quantity_exact</code>, <code>quantity_min</code> and <code>quantity_max</code> are all unspecified.
     */
    @JsonIgnore
    public Optional<Long> getQuantityMin() {
        if (quantityMin == null) {
            return Optional.empty();
        }
        return quantityMin;
    }

    /**
     * @return If set, the pricing rule will apply to a maximum of this many items from
     * <code>products_any</code> or <code>products_all</code>.
     */
    @JsonIgnore
    public Optional<Long> getQuantityMax() {
        if (quantityMax == null) {
            return Optional.empty();
        }
        return quantityMax;
    }

    /**
     * @return If set to <code>true</code>, the product set will include every item in the catalog.
     * Only one of <code>product_ids_all</code>, <code>product_ids_any</code>, or <code>all_products</code> can be set.
     */
    @JsonIgnore
    public Optional<Boolean> getAllProducts() {
        if (allProducts == null) {
            return Optional.empty();
        }
        return allProducts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("product_ids_any")
    private Optional<List<String>> _getProductIdsAny() {
        return productIdsAny;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("product_ids_all")
    private Optional<List<String>> _getProductIdsAll() {
        return productIdsAll;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity_exact")
    private Optional<Long> _getQuantityExact() {
        return quantityExact;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity_min")
    private Optional<Long> _getQuantityMin() {
        return quantityMin;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity_max")
    private Optional<Long> _getQuantityMax() {
        return quantityMax;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("all_products")
    private Optional<Boolean> _getAllProducts() {
        return allProducts;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogProductSet && equalTo((CatalogProductSet) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogProductSet other) {
        return name.equals(other.name)
                && productIdsAny.equals(other.productIdsAny)
                && productIdsAll.equals(other.productIdsAll)
                && quantityExact.equals(other.quantityExact)
                && quantityMin.equals(other.quantityMin)
                && quantityMax.equals(other.quantityMax)
                && allProducts.equals(other.allProducts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.productIdsAny,
                this.productIdsAll,
                this.quantityExact,
                this.quantityMin,
                this.quantityMax,
                this.allProducts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<List<String>> productIdsAny = Optional.empty();

        private Optional<List<String>> productIdsAll = Optional.empty();

        private Optional<Long> quantityExact = Optional.empty();

        private Optional<Long> quantityMin = Optional.empty();

        private Optional<Long> quantityMax = Optional.empty();

        private Optional<Boolean> allProducts = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogProductSet other) {
            name(other.getName());
            productIdsAny(other.getProductIdsAny());
            productIdsAll(other.getProductIdsAll());
            quantityExact(other.getQuantityExact());
            quantityMin(other.getQuantityMin());
            quantityMax(other.getQuantityMax());
            allProducts(other.getAllProducts());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "product_ids_any", nulls = Nulls.SKIP)
        public Builder productIdsAny(Optional<List<String>> productIdsAny) {
            this.productIdsAny = productIdsAny;
            return this;
        }

        public Builder productIdsAny(List<String> productIdsAny) {
            this.productIdsAny = Optional.ofNullable(productIdsAny);
            return this;
        }

        public Builder productIdsAny(Nullable<List<String>> productIdsAny) {
            if (productIdsAny.isNull()) {
                this.productIdsAny = null;
            } else if (productIdsAny.isEmpty()) {
                this.productIdsAny = Optional.empty();
            } else {
                this.productIdsAny = Optional.of(productIdsAny.get());
            }
            return this;
        }

        @JsonSetter(value = "product_ids_all", nulls = Nulls.SKIP)
        public Builder productIdsAll(Optional<List<String>> productIdsAll) {
            this.productIdsAll = productIdsAll;
            return this;
        }

        public Builder productIdsAll(List<String> productIdsAll) {
            this.productIdsAll = Optional.ofNullable(productIdsAll);
            return this;
        }

        public Builder productIdsAll(Nullable<List<String>> productIdsAll) {
            if (productIdsAll.isNull()) {
                this.productIdsAll = null;
            } else if (productIdsAll.isEmpty()) {
                this.productIdsAll = Optional.empty();
            } else {
                this.productIdsAll = Optional.of(productIdsAll.get());
            }
            return this;
        }

        @JsonSetter(value = "quantity_exact", nulls = Nulls.SKIP)
        public Builder quantityExact(Optional<Long> quantityExact) {
            this.quantityExact = quantityExact;
            return this;
        }

        public Builder quantityExact(Long quantityExact) {
            this.quantityExact = Optional.ofNullable(quantityExact);
            return this;
        }

        public Builder quantityExact(Nullable<Long> quantityExact) {
            if (quantityExact.isNull()) {
                this.quantityExact = null;
            } else if (quantityExact.isEmpty()) {
                this.quantityExact = Optional.empty();
            } else {
                this.quantityExact = Optional.of(quantityExact.get());
            }
            return this;
        }

        @JsonSetter(value = "quantity_min", nulls = Nulls.SKIP)
        public Builder quantityMin(Optional<Long> quantityMin) {
            this.quantityMin = quantityMin;
            return this;
        }

        public Builder quantityMin(Long quantityMin) {
            this.quantityMin = Optional.ofNullable(quantityMin);
            return this;
        }

        public Builder quantityMin(Nullable<Long> quantityMin) {
            if (quantityMin.isNull()) {
                this.quantityMin = null;
            } else if (quantityMin.isEmpty()) {
                this.quantityMin = Optional.empty();
            } else {
                this.quantityMin = Optional.of(quantityMin.get());
            }
            return this;
        }

        @JsonSetter(value = "quantity_max", nulls = Nulls.SKIP)
        public Builder quantityMax(Optional<Long> quantityMax) {
            this.quantityMax = quantityMax;
            return this;
        }

        public Builder quantityMax(Long quantityMax) {
            this.quantityMax = Optional.ofNullable(quantityMax);
            return this;
        }

        public Builder quantityMax(Nullable<Long> quantityMax) {
            if (quantityMax.isNull()) {
                this.quantityMax = null;
            } else if (quantityMax.isEmpty()) {
                this.quantityMax = Optional.empty();
            } else {
                this.quantityMax = Optional.of(quantityMax.get());
            }
            return this;
        }

        @JsonSetter(value = "all_products", nulls = Nulls.SKIP)
        public Builder allProducts(Optional<Boolean> allProducts) {
            this.allProducts = allProducts;
            return this;
        }

        public Builder allProducts(Boolean allProducts) {
            this.allProducts = Optional.ofNullable(allProducts);
            return this;
        }

        public Builder allProducts(Nullable<Boolean> allProducts) {
            if (allProducts.isNull()) {
                this.allProducts = null;
            } else if (allProducts.isEmpty()) {
                this.allProducts = Optional.empty();
            } else {
                this.allProducts = Optional.of(allProducts.get());
            }
            return this;
        }

        public CatalogProductSet build() {
            return new CatalogProductSet(
                    name,
                    productIdsAny,
                    productIdsAll,
                    quantityExact,
                    quantityMin,
                    quantityMax,
                    allProducts,
                    additionalProperties);
        }
    }
}
