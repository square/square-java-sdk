/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Vendor.Builder.class)
public final class Vendor {
    private final Optional<String> id;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> name;

    private final Optional<Address> address;

    private final Optional<List<VendorContact>> contacts;

    private final Optional<String> accountNumber;

    private final Optional<String> note;

    private final Optional<Integer> version;

    private final Optional<VendorStatus> status;

    private final Map<String, Object> additionalProperties;

    private Vendor(
            Optional<String> id,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> name,
            Optional<Address> address,
            Optional<List<VendorContact>> contacts,
            Optional<String> accountNumber,
            Optional<String> note,
            Optional<Integer> version,
            Optional<VendorStatus> status,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.address = address;
        this.contacts = contacts;
        this.accountNumber = accountNumber;
        this.note = note;
        this.version = version;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique Square-generated ID for the <a href="entity:Vendor">Vendor</a>.
     * This field is required when attempting to update a <a href="entity:Vendor">Vendor</a>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return An RFC 3339-formatted timestamp that indicates when the
     * <a href="entity:Vendor">Vendor</a> was created.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return An RFC 3339-formatted timestamp that indicates when the
     * <a href="entity:Vendor">Vendor</a> was last updated.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The name of the <a href="entity:Vendor">Vendor</a>.
     * This field is required when attempting to create or update a <a href="entity:Vendor">Vendor</a>.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The address of the <a href="entity:Vendor">Vendor</a>.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return The contacts of the <a href="entity:Vendor">Vendor</a>.
     */
    @JsonIgnore
    public Optional<List<VendorContact>> getContacts() {
        if (contacts == null) {
            return Optional.empty();
        }
        return contacts;
    }

    /**
     * @return The account number of the <a href="entity:Vendor">Vendor</a>.
     */
    @JsonIgnore
    public Optional<String> getAccountNumber() {
        if (accountNumber == null) {
            return Optional.empty();
        }
        return accountNumber;
    }

    /**
     * @return A note detailing information about the <a href="entity:Vendor">Vendor</a>.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The version of the <a href="entity:Vendor">Vendor</a>.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The status of the <a href="entity:Vendor">Vendor</a>.
     * See <a href="#type-status">Status</a> for possible values
     */
    @JsonProperty("status")
    public Optional<VendorStatus> getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("contacts")
    private Optional<List<VendorContact>> _getContacts() {
        return contacts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("account_number")
    private Optional<String> _getAccountNumber() {
        return accountNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Vendor && equalTo((Vendor) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Vendor other) {
        return id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && name.equals(other.name)
                && address.equals(other.address)
                && contacts.equals(other.contacts)
                && accountNumber.equals(other.accountNumber)
                && note.equals(other.note)
                && version.equals(other.version)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.createdAt,
                this.updatedAt,
                this.name,
                this.address,
                this.contacts,
                this.accountNumber,
                this.note,
                this.version,
                this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<List<VendorContact>> contacts = Optional.empty();

        private Optional<String> accountNumber = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<VendorStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Vendor other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            address(other.getAddress());
            contacts(other.getContacts());
            accountNumber(other.getAccountNumber());
            note(other.getNote());
            version(other.getVersion());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>A unique Square-generated ID for the <a href="entity:Vendor">Vendor</a>.
         * This field is required when attempting to update a <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>An RFC 3339-formatted timestamp that indicates when the
         * <a href="entity:Vendor">Vendor</a> was created.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>An RFC 3339-formatted timestamp that indicates when the
         * <a href="entity:Vendor">Vendor</a> was last updated.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The name of the <a href="entity:Vendor">Vendor</a>.
         * This field is required when attempting to create or update a <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The address of the <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>The contacts of the <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<VendorContact>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<VendorContact> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        public Builder contacts(Nullable<List<VendorContact>> contacts) {
            if (contacts.isNull()) {
                this.contacts = null;
            } else if (contacts.isEmpty()) {
                this.contacts = Optional.empty();
            } else {
                this.contacts = Optional.of(contacts.get());
            }
            return this;
        }

        /**
         * <p>The account number of the <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "account_number", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<String> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        public Builder accountNumber(Nullable<String> accountNumber) {
            if (accountNumber.isNull()) {
                this.accountNumber = null;
            } else if (accountNumber.isEmpty()) {
                this.accountNumber = Optional.empty();
            } else {
                this.accountNumber = Optional.of(accountNumber.get());
            }
            return this;
        }

        /**
         * <p>A note detailing information about the <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        public Builder note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>The version of the <a href="entity:Vendor">Vendor</a>.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The status of the <a href="entity:Vendor">Vendor</a>.
         * See <a href="#type-status">Status</a> for possible values</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<VendorStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(VendorStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Vendor build() {
            return new Vendor(
                    id,
                    createdAt,
                    updatedAt,
                    name,
                    address,
                    contacts,
                    accountNumber,
                    note,
                    version,
                    status,
                    additionalProperties);
        }
    }
}
