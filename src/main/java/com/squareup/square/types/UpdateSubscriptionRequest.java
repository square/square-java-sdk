/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateSubscriptionRequest.Builder.class)
public final class UpdateSubscriptionRequest {
    private final String subscriptionId;

    private final Optional<Subscription> subscription;

    private final Map<String, Object> additionalProperties;

    private UpdateSubscriptionRequest(
            String subscriptionId, Optional<Subscription> subscription, Map<String, Object> additionalProperties) {
        this.subscriptionId = subscriptionId;
        this.subscription = subscription;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the subscription to update.
     */
    @JsonProperty("subscription_id")
    public String getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return The subscription object containing the current version, and fields to update.
     * Unset fields will be left at their current server values, and JSON <code>null</code> values will
     * be treated as a request to clear the relevant data.
     */
    @JsonProperty("subscription")
    public Optional<Subscription> getSubscription() {
        return subscription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateSubscriptionRequest && equalTo((UpdateSubscriptionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateSubscriptionRequest other) {
        return subscriptionId.equals(other.subscriptionId) && subscription.equals(other.subscription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.subscriptionId, this.subscription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SubscriptionIdStage builder() {
        return new Builder();
    }

    public interface SubscriptionIdStage {
        _FinalStage subscriptionId(@NotNull String subscriptionId);

        Builder from(UpdateSubscriptionRequest other);
    }

    public interface _FinalStage {
        UpdateSubscriptionRequest build();

        _FinalStage subscription(Optional<Subscription> subscription);

        _FinalStage subscription(Subscription subscription);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SubscriptionIdStage, _FinalStage {
        private String subscriptionId;

        private Optional<Subscription> subscription = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateSubscriptionRequest other) {
            subscriptionId(other.getSubscriptionId());
            subscription(other.getSubscription());
            return this;
        }

        /**
         * <p>The ID of the subscription to update.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subscription_id")
        public _FinalStage subscriptionId(@NotNull String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId, "subscriptionId must not be null");
            return this;
        }

        /**
         * <p>The subscription object containing the current version, and fields to update.
         * Unset fields will be left at their current server values, and JSON <code>null</code> values will
         * be treated as a request to clear the relevant data.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscription(Subscription subscription) {
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscription", nulls = Nulls.SKIP)
        public _FinalStage subscription(Optional<Subscription> subscription) {
            this.subscription = subscription;
            return this;
        }

        @java.lang.Override
        public UpdateSubscriptionRequest build() {
            return new UpdateSubscriptionRequest(subscriptionId, subscription, additionalProperties);
        }
    }
}
