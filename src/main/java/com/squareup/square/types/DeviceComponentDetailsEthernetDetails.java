/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceComponentDetailsEthernetDetails.Builder.class)
public final class DeviceComponentDetailsEthernetDetails {
    private final Optional<Boolean> active;

    private final Optional<String> ipAddressV4;

    private final Optional<String> macAddress;

    private final Map<String, Object> additionalProperties;

    private DeviceComponentDetailsEthernetDetails(
            Optional<Boolean> active,
            Optional<String> ipAddressV4,
            Optional<String> macAddress,
            Map<String, Object> additionalProperties) {
        this.active = active;
        this.ipAddressV4 = ipAddressV4;
        this.macAddress = macAddress;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A boolean to represent whether the Ethernet interface is currently active.
     */
    @JsonIgnore
    public Optional<Boolean> getActive() {
        if (active == null) {
            return Optional.empty();
        }
        return active;
    }

    /**
     * @return The string representation of the device’s IPv4 address.
     */
    @JsonIgnore
    public Optional<String> getIpAddressV4() {
        if (ipAddressV4 == null) {
            return Optional.empty();
        }
        return ipAddressV4;
    }

    /**
     * @return The mac address of the device in this network.
     */
    @JsonIgnore
    public Optional<String> getMacAddress() {
        if (macAddress == null) {
            return Optional.empty();
        }
        return macAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("active")
    private Optional<Boolean> _getActive() {
        return active;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ip_address_v4")
    private Optional<String> _getIpAddressV4() {
        return ipAddressV4;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("mac_address")
    private Optional<String> _getMacAddress() {
        return macAddress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceComponentDetailsEthernetDetails
                && equalTo((DeviceComponentDetailsEthernetDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceComponentDetailsEthernetDetails other) {
        return active.equals(other.active)
                && ipAddressV4.equals(other.ipAddressV4)
                && macAddress.equals(other.macAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.active, this.ipAddressV4, this.macAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> active = Optional.empty();

        private Optional<String> ipAddressV4 = Optional.empty();

        private Optional<String> macAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceComponentDetailsEthernetDetails other) {
            active(other.getActive());
            ipAddressV4(other.getIpAddressV4());
            macAddress(other.getMacAddress());
            return this;
        }

        /**
         * <p>A boolean to represent whether the Ethernet interface is currently active.</p>
         */
        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Nullable<Boolean> active) {
            if (active.isNull()) {
                this.active = null;
            } else if (active.isEmpty()) {
                this.active = Optional.empty();
            } else {
                this.active = Optional.of(active.get());
            }
            return this;
        }

        /**
         * <p>The string representation of the device’s IPv4 address.</p>
         */
        @JsonSetter(value = "ip_address_v4", nulls = Nulls.SKIP)
        public Builder ipAddressV4(Optional<String> ipAddressV4) {
            this.ipAddressV4 = ipAddressV4;
            return this;
        }

        public Builder ipAddressV4(String ipAddressV4) {
            this.ipAddressV4 = Optional.ofNullable(ipAddressV4);
            return this;
        }

        public Builder ipAddressV4(Nullable<String> ipAddressV4) {
            if (ipAddressV4.isNull()) {
                this.ipAddressV4 = null;
            } else if (ipAddressV4.isEmpty()) {
                this.ipAddressV4 = Optional.empty();
            } else {
                this.ipAddressV4 = Optional.of(ipAddressV4.get());
            }
            return this;
        }

        /**
         * <p>The mac address of the device in this network.</p>
         */
        @JsonSetter(value = "mac_address", nulls = Nulls.SKIP)
        public Builder macAddress(Optional<String> macAddress) {
            this.macAddress = macAddress;
            return this;
        }

        public Builder macAddress(String macAddress) {
            this.macAddress = Optional.ofNullable(macAddress);
            return this;
        }

        public Builder macAddress(Nullable<String> macAddress) {
            if (macAddress.isNull()) {
                this.macAddress = null;
            } else if (macAddress.isEmpty()) {
                this.macAddress = Optional.empty();
            } else {
                this.macAddress = Optional.of(macAddress.get());
            }
            return this;
        }

        public DeviceComponentDetailsEthernetDetails build() {
            return new DeviceComponentDetailsEthernetDetails(active, ipAddressV4, macAddress, additionalProperties);
        }
    }
}
