/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerDeletedEventEventContext.Builder.class)
public final class CustomerDeletedEventEventContext {
    private final Optional<CustomerDeletedEventEventContextMerge> merge;

    private final Map<String, Object> additionalProperties;

    private CustomerDeletedEventEventContext(
            Optional<CustomerDeletedEventEventContextMerge> merge, Map<String, Object> additionalProperties) {
        this.merge = merge;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information about the merge operation associated with the event.
     */
    @JsonProperty("merge")
    public Optional<CustomerDeletedEventEventContextMerge> getMerge() {
        return merge;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerDeletedEventEventContext && equalTo((CustomerDeletedEventEventContext) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerDeletedEventEventContext other) {
        return merge.equals(other.merge);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.merge);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CustomerDeletedEventEventContextMerge> merge = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerDeletedEventEventContext other) {
            merge(other.getMerge());
            return this;
        }

        @JsonSetter(value = "merge", nulls = Nulls.SKIP)
        public Builder merge(Optional<CustomerDeletedEventEventContextMerge> merge) {
            this.merge = merge;
            return this;
        }

        public Builder merge(CustomerDeletedEventEventContextMerge merge) {
            this.merge = Optional.ofNullable(merge);
            return this;
        }

        public CustomerDeletedEventEventContext build() {
            return new CustomerDeletedEventEventContext(merge, additionalProperties);
        }
    }
}
