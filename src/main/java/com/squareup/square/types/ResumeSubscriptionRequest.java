/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResumeSubscriptionRequest.Builder.class)
public final class ResumeSubscriptionRequest {
    private final String subscriptionId;

    private final Optional<String> resumeEffectiveDate;

    private final Optional<ChangeTiming> resumeChangeTiming;

    private final Map<String, Object> additionalProperties;

    private ResumeSubscriptionRequest(
            String subscriptionId,
            Optional<String> resumeEffectiveDate,
            Optional<ChangeTiming> resumeChangeTiming,
            Map<String, Object> additionalProperties) {
        this.subscriptionId = subscriptionId;
        this.resumeEffectiveDate = resumeEffectiveDate;
        this.resumeChangeTiming = resumeChangeTiming;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the subscription to resume.
     */
    @JsonProperty("subscription_id")
    public String getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date when the subscription reactivated.
     */
    @JsonIgnore
    public Optional<String> getResumeEffectiveDate() {
        if (resumeEffectiveDate == null) {
            return Optional.empty();
        }
        return resumeEffectiveDate;
    }

    /**
     * @return The timing to resume a subscription, relative to the specified
     * <code>resume_effective_date</code> attribute value.
     * See <a href="#type-changetiming">ChangeTiming</a> for possible values
     */
    @JsonProperty("resume_change_timing")
    public Optional<ChangeTiming> getResumeChangeTiming() {
        return resumeChangeTiming;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("resume_effective_date")
    private Optional<String> _getResumeEffectiveDate() {
        return resumeEffectiveDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResumeSubscriptionRequest && equalTo((ResumeSubscriptionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResumeSubscriptionRequest other) {
        return subscriptionId.equals(other.subscriptionId)
                && resumeEffectiveDate.equals(other.resumeEffectiveDate)
                && resumeChangeTiming.equals(other.resumeChangeTiming);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.subscriptionId, this.resumeEffectiveDate, this.resumeChangeTiming);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SubscriptionIdStage builder() {
        return new Builder();
    }

    public interface SubscriptionIdStage {
        /**
         * <p>The ID of the subscription to resume.</p>
         */
        _FinalStage subscriptionId(@NotNull String subscriptionId);

        Builder from(ResumeSubscriptionRequest other);
    }

    public interface _FinalStage {
        ResumeSubscriptionRequest build();

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date when the subscription reactivated.</p>
         */
        _FinalStage resumeEffectiveDate(Optional<String> resumeEffectiveDate);

        _FinalStage resumeEffectiveDate(String resumeEffectiveDate);

        _FinalStage resumeEffectiveDate(Nullable<String> resumeEffectiveDate);

        /**
         * <p>The timing to resume a subscription, relative to the specified
         * <code>resume_effective_date</code> attribute value.
         * See <a href="#type-changetiming">ChangeTiming</a> for possible values</p>
         */
        _FinalStage resumeChangeTiming(Optional<ChangeTiming> resumeChangeTiming);

        _FinalStage resumeChangeTiming(ChangeTiming resumeChangeTiming);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SubscriptionIdStage, _FinalStage {
        private String subscriptionId;

        private Optional<ChangeTiming> resumeChangeTiming = Optional.empty();

        private Optional<String> resumeEffectiveDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ResumeSubscriptionRequest other) {
            subscriptionId(other.getSubscriptionId());
            resumeEffectiveDate(other.getResumeEffectiveDate());
            resumeChangeTiming(other.getResumeChangeTiming());
            return this;
        }

        /**
         * <p>The ID of the subscription to resume.</p>
         * <p>The ID of the subscription to resume.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subscription_id")
        public _FinalStage subscriptionId(@NotNull String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId, "subscriptionId must not be null");
            return this;
        }

        /**
         * <p>The timing to resume a subscription, relative to the specified
         * <code>resume_effective_date</code> attribute value.
         * See <a href="#type-changetiming">ChangeTiming</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage resumeChangeTiming(ChangeTiming resumeChangeTiming) {
            this.resumeChangeTiming = Optional.ofNullable(resumeChangeTiming);
            return this;
        }

        /**
         * <p>The timing to resume a subscription, relative to the specified
         * <code>resume_effective_date</code> attribute value.
         * See <a href="#type-changetiming">ChangeTiming</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "resume_change_timing", nulls = Nulls.SKIP)
        public _FinalStage resumeChangeTiming(Optional<ChangeTiming> resumeChangeTiming) {
            this.resumeChangeTiming = resumeChangeTiming;
            return this;
        }

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date when the subscription reactivated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage resumeEffectiveDate(Nullable<String> resumeEffectiveDate) {
            if (resumeEffectiveDate.isNull()) {
                this.resumeEffectiveDate = null;
            } else if (resumeEffectiveDate.isEmpty()) {
                this.resumeEffectiveDate = Optional.empty();
            } else {
                this.resumeEffectiveDate = Optional.of(resumeEffectiveDate.get());
            }
            return this;
        }

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date when the subscription reactivated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage resumeEffectiveDate(String resumeEffectiveDate) {
            this.resumeEffectiveDate = Optional.ofNullable(resumeEffectiveDate);
            return this;
        }

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date when the subscription reactivated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "resume_effective_date", nulls = Nulls.SKIP)
        public _FinalStage resumeEffectiveDate(Optional<String> resumeEffectiveDate) {
            this.resumeEffectiveDate = resumeEffectiveDate;
            return this;
        }

        @java.lang.Override
        public ResumeSubscriptionRequest build() {
            return new ResumeSubscriptionRequest(
                    subscriptionId, resumeEffectiveDate, resumeChangeTiming, additionalProperties);
        }
    }
}
