/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorCreatedEventObject.Builder.class)
public final class VendorCreatedEventObject {
    private final Optional<String> operation;

    private final Optional<Vendor> vendor;

    private final Map<String, Object> additionalProperties;

    private VendorCreatedEventObject(
            Optional<String> operation, Optional<Vendor> vendor, Map<String, Object> additionalProperties) {
        this.operation = operation;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The operation on the vendor that caused the event to be published. The value is <code>CREATED</code>.
     * See <a href="#type-operation">Operation</a> for possible values
     */
    @JsonProperty("operation")
    public Optional<String> getOperation() {
        return operation;
    }

    /**
     * @return The created vendor as the result of the specified operation.
     */
    @JsonProperty("vendor")
    public Optional<Vendor> getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorCreatedEventObject && equalTo((VendorCreatedEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorCreatedEventObject other) {
        return operation.equals(other.operation) && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operation, this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> operation = Optional.empty();

        private Optional<Vendor> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorCreatedEventObject other) {
            operation(other.getOperation());
            vendor(other.getVendor());
            return this;
        }

        /**
         * <p>The operation on the vendor that caused the event to be published. The value is <code>CREATED</code>.
         * See <a href="#type-operation">Operation</a> for possible values</p>
         */
        @JsonSetter(value = "operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        /**
         * <p>The created vendor as the result of the specified operation.</p>
         */
        @JsonSetter(value = "vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<Vendor> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(Vendor vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public VendorCreatedEventObject build() {
            return new VendorCreatedEventObject(operation, vendor, additionalProperties);
        }
    }
}
