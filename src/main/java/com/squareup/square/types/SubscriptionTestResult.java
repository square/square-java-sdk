/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionTestResult.Builder.class)
public final class SubscriptionTestResult {
    private final Optional<String> id;

    private final Optional<Integer> statusCode;

    private final Optional<String> payload;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private SubscriptionTestResult(
            Optional<String> id,
            Optional<Integer> statusCode,
            Optional<String> payload,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.statusCode = statusCode;
        this.payload = payload;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A Square-generated unique ID for the subscription test result.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The status code returned by the subscription notification URL.
     */
    @JsonIgnore
    public Optional<Integer> getStatusCode() {
        if (statusCode == null) {
            return Optional.empty();
        }
        return statusCode;
    }

    /**
     * @return An object containing the payload of the test event. For example, a <code>payment.created</code> event.
     */
    @JsonIgnore
    public Optional<String> getPayload() {
        if (payload == null) {
            return Optional.empty();
        }
        return payload;
    }

    /**
     * @return The timestamp of when the subscription was created, in RFC 3339 format.
     * For example, &quot;2016-09-04T23:59:33.123Z&quot;.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the subscription was updated, in RFC 3339 format. For example, &quot;2016-09-04T23:59:33.123Z&quot;.
     * Because a subscription test result is unique, this field is the same as the <code>created_at</code> field.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status_code")
    private Optional<Integer> _getStatusCode() {
        return statusCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payload")
    private Optional<String> _getPayload() {
        return payload;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionTestResult && equalTo((SubscriptionTestResult) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionTestResult other) {
        return id.equals(other.id)
                && statusCode.equals(other.statusCode)
                && payload.equals(other.payload)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.statusCode, this.payload, this.createdAt, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<Integer> statusCode = Optional.empty();

        private Optional<String> payload = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SubscriptionTestResult other) {
            id(other.getId());
            statusCode(other.getStatusCode());
            payload(other.getPayload());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>A Square-generated unique ID for the subscription test result.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The status code returned by the subscription notification URL.</p>
         */
        @JsonSetter(value = "status_code", nulls = Nulls.SKIP)
        public Builder statusCode(Optional<Integer> statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        public Builder statusCode(Integer statusCode) {
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }

        public Builder statusCode(Nullable<Integer> statusCode) {
            if (statusCode.isNull()) {
                this.statusCode = null;
            } else if (statusCode.isEmpty()) {
                this.statusCode = Optional.empty();
            } else {
                this.statusCode = Optional.of(statusCode.get());
            }
            return this;
        }

        /**
         * <p>An object containing the payload of the test event. For example, a <code>payment.created</code> event.</p>
         */
        @JsonSetter(value = "payload", nulls = Nulls.SKIP)
        public Builder payload(Optional<String> payload) {
            this.payload = payload;
            return this;
        }

        public Builder payload(String payload) {
            this.payload = Optional.ofNullable(payload);
            return this;
        }

        public Builder payload(Nullable<String> payload) {
            if (payload.isNull()) {
                this.payload = null;
            } else if (payload.isEmpty()) {
                this.payload = Optional.empty();
            } else {
                this.payload = Optional.of(payload.get());
            }
            return this;
        }

        /**
         * <p>The timestamp of when the subscription was created, in RFC 3339 format.
         * For example, &quot;2016-09-04T23:59:33.123Z&quot;.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp of when the subscription was updated, in RFC 3339 format. For example, &quot;2016-09-04T23:59:33.123Z&quot;.
         * Because a subscription test result is unique, this field is the same as the <code>created_at</code> field.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public SubscriptionTestResult build() {
            return new SubscriptionTestResult(id, statusCode, payload, createdAt, updatedAt, additionalProperties);
        }
    }
}
