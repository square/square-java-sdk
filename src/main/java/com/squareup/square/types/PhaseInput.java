/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PhaseInput.Builder.class)
public final class PhaseInput {
    private final long ordinal;

    private final Optional<String> orderTemplateId;

    private final Map<String, Object> additionalProperties;

    private PhaseInput(long ordinal, Optional<String> orderTemplateId, Map<String, Object> additionalProperties) {
        this.ordinal = ordinal;
        this.orderTemplateId = orderTemplateId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return index of phase in total subscription plan
     */
    @JsonProperty("ordinal")
    public long getOrdinal() {
        return ordinal;
    }

    /**
     * @return id of order to be used in billing
     */
    @JsonIgnore
    public Optional<String> getOrderTemplateId() {
        if (orderTemplateId == null) {
            return Optional.empty();
        }
        return orderTemplateId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_template_id")
    private Optional<String> _getOrderTemplateId() {
        return orderTemplateId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PhaseInput && equalTo((PhaseInput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PhaseInput other) {
        return ordinal == other.ordinal && orderTemplateId.equals(other.orderTemplateId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ordinal, this.orderTemplateId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrdinalStage builder() {
        return new Builder();
    }

    public interface OrdinalStage {
        _FinalStage ordinal(long ordinal);

        Builder from(PhaseInput other);
    }

    public interface _FinalStage {
        PhaseInput build();

        _FinalStage orderTemplateId(Optional<String> orderTemplateId);

        _FinalStage orderTemplateId(String orderTemplateId);

        _FinalStage orderTemplateId(Nullable<String> orderTemplateId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrdinalStage, _FinalStage {
        private long ordinal;

        private Optional<String> orderTemplateId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PhaseInput other) {
            ordinal(other.getOrdinal());
            orderTemplateId(other.getOrderTemplateId());
            return this;
        }

        /**
         * <p>index of phase in total subscription plan</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ordinal")
        public _FinalStage ordinal(long ordinal) {
            this.ordinal = ordinal;
            return this;
        }

        /**
         * <p>id of order to be used in billing</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderTemplateId(Nullable<String> orderTemplateId) {
            if (orderTemplateId.isNull()) {
                this.orderTemplateId = null;
            } else if (orderTemplateId.isEmpty()) {
                this.orderTemplateId = Optional.empty();
            } else {
                this.orderTemplateId = Optional.of(orderTemplateId.get());
            }
            return this;
        }

        /**
         * <p>id of order to be used in billing</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderTemplateId(String orderTemplateId) {
            this.orderTemplateId = Optional.ofNullable(orderTemplateId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "order_template_id", nulls = Nulls.SKIP)
        public _FinalStage orderTemplateId(Optional<String> orderTemplateId) {
            this.orderTemplateId = orderTemplateId;
            return this;
        }

        @java.lang.Override
        public PhaseInput build() {
            return new PhaseInput(ordinal, orderTemplateId, additionalProperties);
        }
    }
}
