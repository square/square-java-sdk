/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class OrderFulfillmentState {
    public static final OrderFulfillmentState CANCELED = new OrderFulfillmentState(Value.CANCELED, "CANCELED");

    public static final OrderFulfillmentState PROPOSED = new OrderFulfillmentState(Value.PROPOSED, "PROPOSED");

    public static final OrderFulfillmentState COMPLETED = new OrderFulfillmentState(Value.COMPLETED, "COMPLETED");

    public static final OrderFulfillmentState RESERVED = new OrderFulfillmentState(Value.RESERVED, "RESERVED");

    public static final OrderFulfillmentState PREPARED = new OrderFulfillmentState(Value.PREPARED, "PREPARED");

    public static final OrderFulfillmentState FAILED = new OrderFulfillmentState(Value.FAILED, "FAILED");

    private final Value value;

    private final String string;

    OrderFulfillmentState(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof OrderFulfillmentState
                        && this.string.equals(((OrderFulfillmentState) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case CANCELED:
                return visitor.visitCanceled();
            case PROPOSED:
                return visitor.visitProposed();
            case COMPLETED:
                return visitor.visitCompleted();
            case RESERVED:
                return visitor.visitReserved();
            case PREPARED:
                return visitor.visitPrepared();
            case FAILED:
                return visitor.visitFailed();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static OrderFulfillmentState valueOf(String value) {
        switch (value) {
            case "CANCELED":
                return CANCELED;
            case "PROPOSED":
                return PROPOSED;
            case "COMPLETED":
                return COMPLETED;
            case "RESERVED":
                return RESERVED;
            case "PREPARED":
                return PREPARED;
            case "FAILED":
                return FAILED;
            default:
                return new OrderFulfillmentState(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        PROPOSED,

        RESERVED,

        PREPARED,

        COMPLETED,

        CANCELED,

        FAILED,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitProposed();

        T visitReserved();

        T visitPrepared();

        T visitCompleted();

        T visitCanceled();

        T visitFailed();

        T visitUnknown(String unknownType);
    }
}
