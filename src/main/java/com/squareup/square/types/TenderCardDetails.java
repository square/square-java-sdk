/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TenderCardDetails.Builder.class)
public final class TenderCardDetails {
    private final Optional<TenderCardDetailsStatus> status;

    private final Optional<Card> card;

    private final Optional<TenderCardDetailsEntryMethod> entryMethod;

    private final Map<String, Object> additionalProperties;

    private TenderCardDetails(
            Optional<TenderCardDetailsStatus> status,
            Optional<Card> card,
            Optional<TenderCardDetailsEntryMethod> entryMethod,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.card = card;
        this.entryMethod = entryMethod;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The credit card payment's current state (such as <code>AUTHORIZED</code> or
     * <code>CAPTURED</code>). See <a href="entity:TenderCardDetailsStatus">TenderCardDetailsStatus</a>
     * for possible values.
     * See <a href="#type-tendercarddetailsstatus">TenderCardDetailsStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<TenderCardDetailsStatus> getStatus() {
        return status;
    }

    /**
     * @return The credit card's non-confidential details.
     */
    @JsonProperty("card")
    public Optional<Card> getCard() {
        return card;
    }

    /**
     * @return The method used to enter the card's details for the transaction.
     * See <a href="#type-tendercarddetailsentrymethod">TenderCardDetailsEntryMethod</a> for possible values
     */
    @JsonProperty("entry_method")
    public Optional<TenderCardDetailsEntryMethod> getEntryMethod() {
        return entryMethod;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TenderCardDetails && equalTo((TenderCardDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TenderCardDetails other) {
        return status.equals(other.status) && card.equals(other.card) && entryMethod.equals(other.entryMethod);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.card, this.entryMethod);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TenderCardDetailsStatus> status = Optional.empty();

        private Optional<Card> card = Optional.empty();

        private Optional<TenderCardDetailsEntryMethod> entryMethod = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TenderCardDetails other) {
            status(other.getStatus());
            card(other.getCard());
            entryMethod(other.getEntryMethod());
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TenderCardDetailsStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TenderCardDetailsStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Card> card) {
            this.card = card;
            return this;
        }

        public Builder card(Card card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        @JsonSetter(value = "entry_method", nulls = Nulls.SKIP)
        public Builder entryMethod(Optional<TenderCardDetailsEntryMethod> entryMethod) {
            this.entryMethod = entryMethod;
            return this;
        }

        public Builder entryMethod(TenderCardDetailsEntryMethod entryMethod) {
            this.entryMethod = Optional.ofNullable(entryMethod);
            return this;
        }

        public TenderCardDetails build() {
            return new TenderCardDetails(status, card, entryMethod, additionalProperties);
        }
    }
}
