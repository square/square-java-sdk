/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyProgramTerminology.Builder.class)
public final class LoyaltyProgramTerminology {
    private final String one;

    private final String other;

    private final Map<String, Object> additionalProperties;

    private LoyaltyProgramTerminology(String one, String other, Map<String, Object> additionalProperties) {
        this.one = one;
        this.other = other;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A singular unit for a point (for example, 1 point is called 1 star).
     */
    @JsonProperty("one")
    public String getOne() {
        return one;
    }

    /**
     * @return A plural unit for point (for example, 10 points is called 10 stars).
     */
    @JsonProperty("other")
    public String getOther() {
        return other;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyProgramTerminology && equalTo((LoyaltyProgramTerminology) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyProgramTerminology other) {
        return one.equals(other.one) && other.equals(other.other);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.one, this.other);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OneStage builder() {
        return new Builder();
    }

    public interface OneStage {
        /**
         * <p>A singular unit for a point (for example, 1 point is called 1 star).</p>
         */
        OtherStage one(@NotNull String one);

        Builder from(LoyaltyProgramTerminology other);
    }

    public interface OtherStage {
        /**
         * <p>A plural unit for point (for example, 10 points is called 10 stars).</p>
         */
        _FinalStage other(@NotNull String other);
    }

    public interface _FinalStage {
        LoyaltyProgramTerminology build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OneStage, OtherStage, _FinalStage {
        private String one;

        private String other;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LoyaltyProgramTerminology other) {
            one(other.getOne());
            other(other.getOther());
            return this;
        }

        /**
         * <p>A singular unit for a point (for example, 1 point is called 1 star).</p>
         * <p>A singular unit for a point (for example, 1 point is called 1 star).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("one")
        public OtherStage one(@NotNull String one) {
            this.one = Objects.requireNonNull(one, "one must not be null");
            return this;
        }

        /**
         * <p>A plural unit for point (for example, 10 points is called 10 stars).</p>
         * <p>A plural unit for point (for example, 10 points is called 10 stars).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("other")
        public _FinalStage other(@NotNull String other) {
            this.other = Objects.requireNonNull(other, "other must not be null");
            return this;
        }

        @java.lang.Override
        public LoyaltyProgramTerminology build() {
            return new LoyaltyProgramTerminology(one, other, additionalProperties);
        }
    }
}
