/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AchDetails.Builder.class)
public final class AchDetails {
    private final Optional<String> routingNumber;

    private final Optional<String> accountNumberSuffix;

    private final Optional<String> accountType;

    private final Map<String, Object> additionalProperties;

    private AchDetails(
            Optional<String> routingNumber,
            Optional<String> accountNumberSuffix,
            Optional<String> accountType,
            Map<String, Object> additionalProperties) {
        this.routingNumber = routingNumber;
        this.accountNumberSuffix = accountNumberSuffix;
        this.accountType = accountType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The routing number for the bank account.
     */
    @JsonIgnore
    public Optional<String> getRoutingNumber() {
        if (routingNumber == null) {
            return Optional.empty();
        }
        return routingNumber;
    }

    /**
     * @return The last few digits of the bank account number.
     */
    @JsonIgnore
    public Optional<String> getAccountNumberSuffix() {
        if (accountNumberSuffix == null) {
            return Optional.empty();
        }
        return accountNumberSuffix;
    }

    /**
     * @return The type of the bank account performing the transfer. The account type can be <code>CHECKING</code>,
     * <code>SAVINGS</code>, or <code>UNKNOWN</code>.
     */
    @JsonIgnore
    public Optional<String> getAccountType() {
        if (accountType == null) {
            return Optional.empty();
        }
        return accountType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("routing_number")
    private Optional<String> _getRoutingNumber() {
        return routingNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("account_number_suffix")
    private Optional<String> _getAccountNumberSuffix() {
        return accountNumberSuffix;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("account_type")
    private Optional<String> _getAccountType() {
        return accountType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AchDetails && equalTo((AchDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AchDetails other) {
        return routingNumber.equals(other.routingNumber)
                && accountNumberSuffix.equals(other.accountNumberSuffix)
                && accountType.equals(other.accountType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.routingNumber, this.accountNumberSuffix, this.accountType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> routingNumber = Optional.empty();

        private Optional<String> accountNumberSuffix = Optional.empty();

        private Optional<String> accountType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AchDetails other) {
            routingNumber(other.getRoutingNumber());
            accountNumberSuffix(other.getAccountNumberSuffix());
            accountType(other.getAccountType());
            return this;
        }

        /**
         * <p>The routing number for the bank account.</p>
         */
        @JsonSetter(value = "routing_number", nulls = Nulls.SKIP)
        public Builder routingNumber(Optional<String> routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        public Builder routingNumber(String routingNumber) {
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        public Builder routingNumber(Nullable<String> routingNumber) {
            if (routingNumber.isNull()) {
                this.routingNumber = null;
            } else if (routingNumber.isEmpty()) {
                this.routingNumber = Optional.empty();
            } else {
                this.routingNumber = Optional.of(routingNumber.get());
            }
            return this;
        }

        /**
         * <p>The last few digits of the bank account number.</p>
         */
        @JsonSetter(value = "account_number_suffix", nulls = Nulls.SKIP)
        public Builder accountNumberSuffix(Optional<String> accountNumberSuffix) {
            this.accountNumberSuffix = accountNumberSuffix;
            return this;
        }

        public Builder accountNumberSuffix(String accountNumberSuffix) {
            this.accountNumberSuffix = Optional.ofNullable(accountNumberSuffix);
            return this;
        }

        public Builder accountNumberSuffix(Nullable<String> accountNumberSuffix) {
            if (accountNumberSuffix.isNull()) {
                this.accountNumberSuffix = null;
            } else if (accountNumberSuffix.isEmpty()) {
                this.accountNumberSuffix = Optional.empty();
            } else {
                this.accountNumberSuffix = Optional.of(accountNumberSuffix.get());
            }
            return this;
        }

        /**
         * <p>The type of the bank account performing the transfer. The account type can be <code>CHECKING</code>,
         * <code>SAVINGS</code>, or <code>UNKNOWN</code>.</p>
         */
        @JsonSetter(value = "account_type", nulls = Nulls.SKIP)
        public Builder accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        public Builder accountType(Nullable<String> accountType) {
            if (accountType.isNull()) {
                this.accountType = null;
            } else if (accountType.isEmpty()) {
                this.accountType = Optional.empty();
            } else {
                this.accountType = Optional.of(accountType.get());
            }
            return this;
        }

        public AchDetails build() {
            return new AchDetails(routingNumber, accountNumberSuffix, accountType, additionalProperties);
        }
    }
}
