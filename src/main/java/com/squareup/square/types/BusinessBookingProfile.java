/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BusinessBookingProfile.Builder.class)
public final class BusinessBookingProfile {
    private final Optional<String> sellerId;

    private final Optional<String> createdAt;

    private final Optional<Boolean> bookingEnabled;

    private final Optional<BusinessBookingProfileCustomerTimezoneChoice> customerTimezoneChoice;

    private final Optional<BusinessBookingProfileBookingPolicy> bookingPolicy;

    private final Optional<Boolean> allowUserCancel;

    private final Optional<BusinessAppointmentSettings> businessAppointmentSettings;

    private final Optional<Boolean> supportSellerLevelWrites;

    private final Map<String, Object> additionalProperties;

    private BusinessBookingProfile(
            Optional<String> sellerId,
            Optional<String> createdAt,
            Optional<Boolean> bookingEnabled,
            Optional<BusinessBookingProfileCustomerTimezoneChoice> customerTimezoneChoice,
            Optional<BusinessBookingProfileBookingPolicy> bookingPolicy,
            Optional<Boolean> allowUserCancel,
            Optional<BusinessAppointmentSettings> businessAppointmentSettings,
            Optional<Boolean> supportSellerLevelWrites,
            Map<String, Object> additionalProperties) {
        this.sellerId = sellerId;
        this.createdAt = createdAt;
        this.bookingEnabled = bookingEnabled;
        this.customerTimezoneChoice = customerTimezoneChoice;
        this.bookingPolicy = bookingPolicy;
        this.allowUserCancel = allowUserCancel;
        this.businessAppointmentSettings = businessAppointmentSettings;
        this.supportSellerLevelWrites = supportSellerLevelWrites;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the seller, obtainable using the Merchants API.
     */
    @JsonIgnore
    public Optional<String> getSellerId() {
        if (sellerId == null) {
            return Optional.empty();
        }
        return sellerId;
    }

    /**
     * @return The RFC 3339 timestamp specifying the booking's creation time.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Indicates whether the seller is open for booking.
     */
    @JsonIgnore
    public Optional<Boolean> getBookingEnabled() {
        if (bookingEnabled == null) {
            return Optional.empty();
        }
        return bookingEnabled;
    }

    /**
     * @return The choice of customer's time zone information of a booking.
     * The Square online booking site and all notifications to customers uses either the seller locationâ€™s time zone
     * or the time zone the customer chooses at booking.
     * See <a href="#type-businessbookingprofilecustomertimezonechoice">BusinessBookingProfileCustomerTimezoneChoice</a> for possible values
     */
    @JsonProperty("customer_timezone_choice")
    public Optional<BusinessBookingProfileCustomerTimezoneChoice> getCustomerTimezoneChoice() {
        return customerTimezoneChoice;
    }

    /**
     * @return The policy for the seller to automatically accept booking requests (<code>ACCEPT_ALL</code>) or not (<code>REQUIRES_ACCEPTANCE</code>).
     * See <a href="#type-businessbookingprofilebookingpolicy">BusinessBookingProfileBookingPolicy</a> for possible values
     */
    @JsonProperty("booking_policy")
    public Optional<BusinessBookingProfileBookingPolicy> getBookingPolicy() {
        return bookingPolicy;
    }

    /**
     * @return Indicates whether customers can cancel or reschedule their own bookings (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getAllowUserCancel() {
        if (allowUserCancel == null) {
            return Optional.empty();
        }
        return allowUserCancel;
    }

    /**
     * @return Settings for appointment-type bookings.
     */
    @JsonProperty("business_appointment_settings")
    public Optional<BusinessAppointmentSettings> getBusinessAppointmentSettings() {
        return businessAppointmentSettings;
    }

    /**
     * @return Indicates whether the seller's subscription to Square Appointments supports creating, updating or canceling an appointment through the API (<code>true</code>) or not (<code>false</code>) using seller permission.
     */
    @JsonIgnore
    public Optional<Boolean> getSupportSellerLevelWrites() {
        if (supportSellerLevelWrites == null) {
            return Optional.empty();
        }
        return supportSellerLevelWrites;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("seller_id")
    private Optional<String> _getSellerId() {
        return sellerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("booking_enabled")
    private Optional<Boolean> _getBookingEnabled() {
        return bookingEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("allow_user_cancel")
    private Optional<Boolean> _getAllowUserCancel() {
        return allowUserCancel;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("support_seller_level_writes")
    private Optional<Boolean> _getSupportSellerLevelWrites() {
        return supportSellerLevelWrites;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BusinessBookingProfile && equalTo((BusinessBookingProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BusinessBookingProfile other) {
        return sellerId.equals(other.sellerId)
                && createdAt.equals(other.createdAt)
                && bookingEnabled.equals(other.bookingEnabled)
                && customerTimezoneChoice.equals(other.customerTimezoneChoice)
                && bookingPolicy.equals(other.bookingPolicy)
                && allowUserCancel.equals(other.allowUserCancel)
                && businessAppointmentSettings.equals(other.businessAppointmentSettings)
                && supportSellerLevelWrites.equals(other.supportSellerLevelWrites);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sellerId,
                this.createdAt,
                this.bookingEnabled,
                this.customerTimezoneChoice,
                this.bookingPolicy,
                this.allowUserCancel,
                this.businessAppointmentSettings,
                this.supportSellerLevelWrites);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sellerId = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<Boolean> bookingEnabled = Optional.empty();

        private Optional<BusinessBookingProfileCustomerTimezoneChoice> customerTimezoneChoice = Optional.empty();

        private Optional<BusinessBookingProfileBookingPolicy> bookingPolicy = Optional.empty();

        private Optional<Boolean> allowUserCancel = Optional.empty();

        private Optional<BusinessAppointmentSettings> businessAppointmentSettings = Optional.empty();

        private Optional<Boolean> supportSellerLevelWrites = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BusinessBookingProfile other) {
            sellerId(other.getSellerId());
            createdAt(other.getCreatedAt());
            bookingEnabled(other.getBookingEnabled());
            customerTimezoneChoice(other.getCustomerTimezoneChoice());
            bookingPolicy(other.getBookingPolicy());
            allowUserCancel(other.getAllowUserCancel());
            businessAppointmentSettings(other.getBusinessAppointmentSettings());
            supportSellerLevelWrites(other.getSupportSellerLevelWrites());
            return this;
        }

        @JsonSetter(value = "seller_id", nulls = Nulls.SKIP)
        public Builder sellerId(Optional<String> sellerId) {
            this.sellerId = sellerId;
            return this;
        }

        public Builder sellerId(String sellerId) {
            this.sellerId = Optional.ofNullable(sellerId);
            return this;
        }

        public Builder sellerId(Nullable<String> sellerId) {
            if (sellerId.isNull()) {
                this.sellerId = null;
            } else if (sellerId.isEmpty()) {
                this.sellerId = Optional.empty();
            } else {
                this.sellerId = Optional.of(sellerId.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "booking_enabled", nulls = Nulls.SKIP)
        public Builder bookingEnabled(Optional<Boolean> bookingEnabled) {
            this.bookingEnabled = bookingEnabled;
            return this;
        }

        public Builder bookingEnabled(Boolean bookingEnabled) {
            this.bookingEnabled = Optional.ofNullable(bookingEnabled);
            return this;
        }

        public Builder bookingEnabled(Nullable<Boolean> bookingEnabled) {
            if (bookingEnabled.isNull()) {
                this.bookingEnabled = null;
            } else if (bookingEnabled.isEmpty()) {
                this.bookingEnabled = Optional.empty();
            } else {
                this.bookingEnabled = Optional.of(bookingEnabled.get());
            }
            return this;
        }

        @JsonSetter(value = "customer_timezone_choice", nulls = Nulls.SKIP)
        public Builder customerTimezoneChoice(
                Optional<BusinessBookingProfileCustomerTimezoneChoice> customerTimezoneChoice) {
            this.customerTimezoneChoice = customerTimezoneChoice;
            return this;
        }

        public Builder customerTimezoneChoice(BusinessBookingProfileCustomerTimezoneChoice customerTimezoneChoice) {
            this.customerTimezoneChoice = Optional.ofNullable(customerTimezoneChoice);
            return this;
        }

        @JsonSetter(value = "booking_policy", nulls = Nulls.SKIP)
        public Builder bookingPolicy(Optional<BusinessBookingProfileBookingPolicy> bookingPolicy) {
            this.bookingPolicy = bookingPolicy;
            return this;
        }

        public Builder bookingPolicy(BusinessBookingProfileBookingPolicy bookingPolicy) {
            this.bookingPolicy = Optional.ofNullable(bookingPolicy);
            return this;
        }

        @JsonSetter(value = "allow_user_cancel", nulls = Nulls.SKIP)
        public Builder allowUserCancel(Optional<Boolean> allowUserCancel) {
            this.allowUserCancel = allowUserCancel;
            return this;
        }

        public Builder allowUserCancel(Boolean allowUserCancel) {
            this.allowUserCancel = Optional.ofNullable(allowUserCancel);
            return this;
        }

        public Builder allowUserCancel(Nullable<Boolean> allowUserCancel) {
            if (allowUserCancel.isNull()) {
                this.allowUserCancel = null;
            } else if (allowUserCancel.isEmpty()) {
                this.allowUserCancel = Optional.empty();
            } else {
                this.allowUserCancel = Optional.of(allowUserCancel.get());
            }
            return this;
        }

        @JsonSetter(value = "business_appointment_settings", nulls = Nulls.SKIP)
        public Builder businessAppointmentSettings(Optional<BusinessAppointmentSettings> businessAppointmentSettings) {
            this.businessAppointmentSettings = businessAppointmentSettings;
            return this;
        }

        public Builder businessAppointmentSettings(BusinessAppointmentSettings businessAppointmentSettings) {
            this.businessAppointmentSettings = Optional.ofNullable(businessAppointmentSettings);
            return this;
        }

        @JsonSetter(value = "support_seller_level_writes", nulls = Nulls.SKIP)
        public Builder supportSellerLevelWrites(Optional<Boolean> supportSellerLevelWrites) {
            this.supportSellerLevelWrites = supportSellerLevelWrites;
            return this;
        }

        public Builder supportSellerLevelWrites(Boolean supportSellerLevelWrites) {
            this.supportSellerLevelWrites = Optional.ofNullable(supportSellerLevelWrites);
            return this;
        }

        public Builder supportSellerLevelWrites(Nullable<Boolean> supportSellerLevelWrites) {
            if (supportSellerLevelWrites.isNull()) {
                this.supportSellerLevelWrites = null;
            } else if (supportSellerLevelWrites.isEmpty()) {
                this.supportSellerLevelWrites = Optional.empty();
            } else {
                this.supportSellerLevelWrites = Optional.of(supportSellerLevelWrites.get());
            }
            return this;
        }

        public BusinessBookingProfile build() {
            return new BusinessBookingProfile(
                    sellerId,
                    createdAt,
                    bookingEnabled,
                    customerTimezoneChoice,
                    bookingPolicy,
                    allowUserCancel,
                    businessAppointmentSettings,
                    supportSellerLevelWrites,
                    additionalProperties);
        }
    }
}
