/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AcceptedPaymentMethods.Builder.class)
public final class AcceptedPaymentMethods {
    private final Optional<Boolean> applePay;

    private final Optional<Boolean> googlePay;

    private final Optional<Boolean> cashAppPay;

    private final Optional<Boolean> afterpayClearpay;

    private final Map<String, Object> additionalProperties;

    private AcceptedPaymentMethods(
            Optional<Boolean> applePay,
            Optional<Boolean> googlePay,
            Optional<Boolean> cashAppPay,
            Optional<Boolean> afterpayClearpay,
            Map<String, Object> additionalProperties) {
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.cashAppPay = cashAppPay;
        this.afterpayClearpay = afterpayClearpay;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether Apple Pay is accepted at checkout.
     */
    @JsonIgnore
    public Optional<Boolean> getApplePay() {
        if (applePay == null) {
            return Optional.empty();
        }
        return applePay;
    }

    /**
     * @return Whether Google Pay is accepted at checkout.
     */
    @JsonIgnore
    public Optional<Boolean> getGooglePay() {
        if (googlePay == null) {
            return Optional.empty();
        }
        return googlePay;
    }

    /**
     * @return Whether Cash App Pay is accepted at checkout.
     */
    @JsonIgnore
    public Optional<Boolean> getCashAppPay() {
        if (cashAppPay == null) {
            return Optional.empty();
        }
        return cashAppPay;
    }

    /**
     * @return Whether Afterpay/Clearpay is accepted at checkout.
     */
    @JsonIgnore
    public Optional<Boolean> getAfterpayClearpay() {
        if (afterpayClearpay == null) {
            return Optional.empty();
        }
        return afterpayClearpay;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("apple_pay")
    private Optional<Boolean> _getApplePay() {
        return applePay;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("google_pay")
    private Optional<Boolean> _getGooglePay() {
        return googlePay;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cash_app_pay")
    private Optional<Boolean> _getCashAppPay() {
        return cashAppPay;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("afterpay_clearpay")
    private Optional<Boolean> _getAfterpayClearpay() {
        return afterpayClearpay;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AcceptedPaymentMethods && equalTo((AcceptedPaymentMethods) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AcceptedPaymentMethods other) {
        return applePay.equals(other.applePay)
                && googlePay.equals(other.googlePay)
                && cashAppPay.equals(other.cashAppPay)
                && afterpayClearpay.equals(other.afterpayClearpay);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.applePay, this.googlePay, this.cashAppPay, this.afterpayClearpay);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> applePay = Optional.empty();

        private Optional<Boolean> googlePay = Optional.empty();

        private Optional<Boolean> cashAppPay = Optional.empty();

        private Optional<Boolean> afterpayClearpay = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AcceptedPaymentMethods other) {
            applePay(other.getApplePay());
            googlePay(other.getGooglePay());
            cashAppPay(other.getCashAppPay());
            afterpayClearpay(other.getAfterpayClearpay());
            return this;
        }

        @JsonSetter(value = "apple_pay", nulls = Nulls.SKIP)
        public Builder applePay(Optional<Boolean> applePay) {
            this.applePay = applePay;
            return this;
        }

        public Builder applePay(Boolean applePay) {
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        public Builder applePay(Nullable<Boolean> applePay) {
            if (applePay.isNull()) {
                this.applePay = null;
            } else if (applePay.isEmpty()) {
                this.applePay = Optional.empty();
            } else {
                this.applePay = Optional.of(applePay.get());
            }
            return this;
        }

        @JsonSetter(value = "google_pay", nulls = Nulls.SKIP)
        public Builder googlePay(Optional<Boolean> googlePay) {
            this.googlePay = googlePay;
            return this;
        }

        public Builder googlePay(Boolean googlePay) {
            this.googlePay = Optional.ofNullable(googlePay);
            return this;
        }

        public Builder googlePay(Nullable<Boolean> googlePay) {
            if (googlePay.isNull()) {
                this.googlePay = null;
            } else if (googlePay.isEmpty()) {
                this.googlePay = Optional.empty();
            } else {
                this.googlePay = Optional.of(googlePay.get());
            }
            return this;
        }

        @JsonSetter(value = "cash_app_pay", nulls = Nulls.SKIP)
        public Builder cashAppPay(Optional<Boolean> cashAppPay) {
            this.cashAppPay = cashAppPay;
            return this;
        }

        public Builder cashAppPay(Boolean cashAppPay) {
            this.cashAppPay = Optional.ofNullable(cashAppPay);
            return this;
        }

        public Builder cashAppPay(Nullable<Boolean> cashAppPay) {
            if (cashAppPay.isNull()) {
                this.cashAppPay = null;
            } else if (cashAppPay.isEmpty()) {
                this.cashAppPay = Optional.empty();
            } else {
                this.cashAppPay = Optional.of(cashAppPay.get());
            }
            return this;
        }

        @JsonSetter(value = "afterpay_clearpay", nulls = Nulls.SKIP)
        public Builder afterpayClearpay(Optional<Boolean> afterpayClearpay) {
            this.afterpayClearpay = afterpayClearpay;
            return this;
        }

        public Builder afterpayClearpay(Boolean afterpayClearpay) {
            this.afterpayClearpay = Optional.ofNullable(afterpayClearpay);
            return this;
        }

        public Builder afterpayClearpay(Nullable<Boolean> afterpayClearpay) {
            if (afterpayClearpay.isNull()) {
                this.afterpayClearpay = null;
            } else if (afterpayClearpay.isEmpty()) {
                this.afterpayClearpay = Optional.empty();
            } else {
                this.afterpayClearpay = Optional.of(afterpayClearpay.get());
            }
            return this;
        }

        public AcceptedPaymentMethods build() {
            return new AcceptedPaymentMethods(applePay, googlePay, cashAppPay, afterpayClearpay, additionalProperties);
        }
    }
}
