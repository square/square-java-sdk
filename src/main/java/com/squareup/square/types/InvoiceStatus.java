/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class InvoiceStatus {
    public static final InvoiceStatus PARTIALLY_PAID = new InvoiceStatus(Value.PARTIALLY_PAID, "PARTIALLY_PAID");

    public static final InvoiceStatus PARTIALLY_REFUNDED =
            new InvoiceStatus(Value.PARTIALLY_REFUNDED, "PARTIALLY_REFUNDED");

    public static final InvoiceStatus CANCELED = new InvoiceStatus(Value.CANCELED, "CANCELED");

    public static final InvoiceStatus PAYMENT_PENDING = new InvoiceStatus(Value.PAYMENT_PENDING, "PAYMENT_PENDING");

    public static final InvoiceStatus SCHEDULED = new InvoiceStatus(Value.SCHEDULED, "SCHEDULED");

    public static final InvoiceStatus REFUNDED = new InvoiceStatus(Value.REFUNDED, "REFUNDED");

    public static final InvoiceStatus DRAFT = new InvoiceStatus(Value.DRAFT, "DRAFT");

    public static final InvoiceStatus PAID = new InvoiceStatus(Value.PAID, "PAID");

    public static final InvoiceStatus UNPAID = new InvoiceStatus(Value.UNPAID, "UNPAID");

    public static final InvoiceStatus FAILED = new InvoiceStatus(Value.FAILED, "FAILED");

    private final Value value;

    private final String string;

    InvoiceStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof InvoiceStatus && this.string.equals(((InvoiceStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case PARTIALLY_PAID:
                return visitor.visitPartiallyPaid();
            case PARTIALLY_REFUNDED:
                return visitor.visitPartiallyRefunded();
            case CANCELED:
                return visitor.visitCanceled();
            case PAYMENT_PENDING:
                return visitor.visitPaymentPending();
            case SCHEDULED:
                return visitor.visitScheduled();
            case REFUNDED:
                return visitor.visitRefunded();
            case DRAFT:
                return visitor.visitDraft();
            case PAID:
                return visitor.visitPaid();
            case UNPAID:
                return visitor.visitUnpaid();
            case FAILED:
                return visitor.visitFailed();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static InvoiceStatus valueOf(String value) {
        switch (value) {
            case "PARTIALLY_PAID":
                return PARTIALLY_PAID;
            case "PARTIALLY_REFUNDED":
                return PARTIALLY_REFUNDED;
            case "CANCELED":
                return CANCELED;
            case "PAYMENT_PENDING":
                return PAYMENT_PENDING;
            case "SCHEDULED":
                return SCHEDULED;
            case "REFUNDED":
                return REFUNDED;
            case "DRAFT":
                return DRAFT;
            case "PAID":
                return PAID;
            case "UNPAID":
                return UNPAID;
            case "FAILED":
                return FAILED;
            default:
                return new InvoiceStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        DRAFT,

        UNPAID,

        SCHEDULED,

        PARTIALLY_PAID,

        PAID,

        PARTIALLY_REFUNDED,

        REFUNDED,

        CANCELED,

        FAILED,

        PAYMENT_PENDING,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitDraft();

        T visitUnpaid();

        T visitScheduled();

        T visitPartiallyPaid();

        T visitPaid();

        T visitPartiallyRefunded();

        T visitRefunded();

        T visitCanceled();

        T visitFailed();

        T visitPaymentPending();

        T visitUnknown(String unknownType);
    }
}
