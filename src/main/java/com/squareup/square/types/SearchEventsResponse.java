/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchEventsResponse.Builder.class)
public final class SearchEventsResponse {
    private final Optional<List<Error>> errors;

    private final Optional<List<Event>> events;

    private final Optional<List<EventMetadata>> metadata;

    private final Optional<String> cursor;

    private final Map<String, Object> additionalProperties;

    private SearchEventsResponse(
            Optional<List<Error>> errors,
            Optional<List<Event>> events,
            Optional<List<EventMetadata>> metadata,
            Optional<String> cursor,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.events = events;
        this.metadata = metadata;
        this.cursor = cursor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information on errors encountered during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The list of <a href="entity:Event">Event</a>s returned by the search.
     */
    @JsonProperty("events")
    public Optional<List<Event>> getEvents() {
        return events;
    }

    /**
     * @return Contains the metadata of an event. For more information, see <a href="entity:Event">Event</a>.
     */
    @JsonProperty("metadata")
    public Optional<List<EventMetadata>> getMetadata() {
        return metadata;
    }

    /**
     * @return When a response is truncated, it includes a cursor that you can use in a subsequent request to fetch the next set of events. If empty, this is the final response.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchEventsResponse && equalTo((SearchEventsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchEventsResponse other) {
        return errors.equals(other.errors)
                && events.equals(other.events)
                && metadata.equals(other.metadata)
                && cursor.equals(other.cursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.events, this.metadata, this.cursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<List<Event>> events = Optional.empty();

        private Optional<List<EventMetadata>> metadata = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchEventsResponse other) {
            errors(other.getErrors());
            events(other.getEvents());
            metadata(other.getMetadata());
            cursor(other.getCursor());
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "events", nulls = Nulls.SKIP)
        public Builder events(Optional<List<Event>> events) {
            this.events = events;
            return this;
        }

        public Builder events(List<Event> events) {
            this.events = Optional.ofNullable(events);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<List<EventMetadata>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(List<EventMetadata> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public SearchEventsResponse build() {
            return new SearchEventsResponse(errors, events, metadata, cursor, additionalProperties);
        }
    }
}
