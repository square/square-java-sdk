/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutLocationSettingsBranding.Builder.class)
public final class CheckoutLocationSettingsBranding {
    private final Optional<CheckoutLocationSettingsBrandingHeaderType> headerType;

    private final Optional<String> buttonColor;

    private final Optional<CheckoutLocationSettingsBrandingButtonShape> buttonShape;

    private final Map<String, Object> additionalProperties;

    private CheckoutLocationSettingsBranding(
            Optional<CheckoutLocationSettingsBrandingHeaderType> headerType,
            Optional<String> buttonColor,
            Optional<CheckoutLocationSettingsBrandingButtonShape> buttonShape,
            Map<String, Object> additionalProperties) {
        this.headerType = headerType;
        this.buttonColor = buttonColor;
        this.buttonShape = buttonShape;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Show the location logo on the checkout page.
     * See <a href="#type-headertype">HeaderType</a> for possible values
     */
    @JsonProperty("header_type")
    public Optional<CheckoutLocationSettingsBrandingHeaderType> getHeaderType() {
        return headerType;
    }

    /**
     * @return The HTML-supported hex color for the button on the checkout page (for example, &quot;#FFFFFF&quot;).
     */
    @JsonIgnore
    public Optional<String> getButtonColor() {
        if (buttonColor == null) {
            return Optional.empty();
        }
        return buttonColor;
    }

    /**
     * @return The shape of the button on the checkout page.
     * See <a href="#type-buttonshape">ButtonShape</a> for possible values
     */
    @JsonProperty("button_shape")
    public Optional<CheckoutLocationSettingsBrandingButtonShape> getButtonShape() {
        return buttonShape;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("button_color")
    private Optional<String> _getButtonColor() {
        return buttonColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutLocationSettingsBranding && equalTo((CheckoutLocationSettingsBranding) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutLocationSettingsBranding other) {
        return headerType.equals(other.headerType)
                && buttonColor.equals(other.buttonColor)
                && buttonShape.equals(other.buttonShape);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.headerType, this.buttonColor, this.buttonShape);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CheckoutLocationSettingsBrandingHeaderType> headerType = Optional.empty();

        private Optional<String> buttonColor = Optional.empty();

        private Optional<CheckoutLocationSettingsBrandingButtonShape> buttonShape = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutLocationSettingsBranding other) {
            headerType(other.getHeaderType());
            buttonColor(other.getButtonColor());
            buttonShape(other.getButtonShape());
            return this;
        }

        /**
         * <p>Show the location logo on the checkout page.
         * See <a href="#type-headertype">HeaderType</a> for possible values</p>
         */
        @JsonSetter(value = "header_type", nulls = Nulls.SKIP)
        public Builder headerType(Optional<CheckoutLocationSettingsBrandingHeaderType> headerType) {
            this.headerType = headerType;
            return this;
        }

        public Builder headerType(CheckoutLocationSettingsBrandingHeaderType headerType) {
            this.headerType = Optional.ofNullable(headerType);
            return this;
        }

        /**
         * <p>The HTML-supported hex color for the button on the checkout page (for example, &quot;#FFFFFF&quot;).</p>
         */
        @JsonSetter(value = "button_color", nulls = Nulls.SKIP)
        public Builder buttonColor(Optional<String> buttonColor) {
            this.buttonColor = buttonColor;
            return this;
        }

        public Builder buttonColor(String buttonColor) {
            this.buttonColor = Optional.ofNullable(buttonColor);
            return this;
        }

        public Builder buttonColor(Nullable<String> buttonColor) {
            if (buttonColor.isNull()) {
                this.buttonColor = null;
            } else if (buttonColor.isEmpty()) {
                this.buttonColor = Optional.empty();
            } else {
                this.buttonColor = Optional.of(buttonColor.get());
            }
            return this;
        }

        /**
         * <p>The shape of the button on the checkout page.
         * See <a href="#type-buttonshape">ButtonShape</a> for possible values</p>
         */
        @JsonSetter(value = "button_shape", nulls = Nulls.SKIP)
        public Builder buttonShape(Optional<CheckoutLocationSettingsBrandingButtonShape> buttonShape) {
            this.buttonShape = buttonShape;
            return this;
        }

        public Builder buttonShape(CheckoutLocationSettingsBrandingButtonShape buttonShape) {
            this.buttonShape = Optional.ofNullable(buttonShape);
            return this;
        }

        public CheckoutLocationSettingsBranding build() {
            return new CheckoutLocationSettingsBranding(headerType, buttonColor, buttonShape, additionalProperties);
        }
    }
}
