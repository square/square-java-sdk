/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListBookingsRequest.Builder.class)
public final class ListBookingsRequest {
    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Optional<String> customerId;

    private final Optional<String> teamMemberId;

    private final Optional<String> locationId;

    private final Optional<String> startAtMin;

    private final Optional<String> startAtMax;

    private final Map<String, Object> additionalProperties;

    private ListBookingsRequest(
            Optional<Integer> limit,
            Optional<String> cursor,
            Optional<String> customerId,
            Optional<String> teamMemberId,
            Optional<String> locationId,
            Optional<String> startAtMin,
            Optional<String> startAtMax,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.cursor = cursor;
        this.customerId = customerId;
        this.teamMemberId = teamMemberId;
        this.locationId = locationId;
        this.startAtMin = startAtMin;
        this.startAtMax = startAtMax;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The maximum number of results per page to return in a paged response.
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return The pagination cursor from the preceding response to return the next page of the results. Do not set this when retrieving the first page of the results.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The <a href="entity:Customer">customer</a> for whom to retrieve bookings. If this is not set, bookings for all customers are retrieved.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The team member for whom to retrieve bookings. If this is not set, bookings of all members are retrieved.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return The location for which to retrieve bookings. If this is not set, all locations' bookings are retrieved.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The RFC 3339 timestamp specifying the earliest of the start time. If this is not set, the current time is used.
     */
    @JsonIgnore
    public Optional<String> getStartAtMin() {
        if (startAtMin == null) {
            return Optional.empty();
        }
        return startAtMin;
    }

    /**
     * @return The RFC 3339 timestamp specifying the latest of the start time. If this is not set, the time of 31 days after <code>start_at_min</code> is used.
     */
    @JsonIgnore
    public Optional<String> getStartAtMax() {
        if (startAtMax == null) {
            return Optional.empty();
        }
        return startAtMax;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_at_min")
    private Optional<String> _getStartAtMin() {
        return startAtMin;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_at_max")
    private Optional<String> _getStartAtMax() {
        return startAtMax;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListBookingsRequest && equalTo((ListBookingsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListBookingsRequest other) {
        return limit.equals(other.limit)
                && cursor.equals(other.cursor)
                && customerId.equals(other.customerId)
                && teamMemberId.equals(other.teamMemberId)
                && locationId.equals(other.locationId)
                && startAtMin.equals(other.startAtMin)
                && startAtMax.equals(other.startAtMax);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.limit,
                this.cursor,
                this.customerId,
                this.teamMemberId,
                this.locationId,
                this.startAtMin,
                this.startAtMax);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> startAtMin = Optional.empty();

        private Optional<String> startAtMax = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListBookingsRequest other) {
            limit(other.getLimit());
            cursor(other.getCursor());
            customerId(other.getCustomerId());
            teamMemberId(other.getTeamMemberId());
            locationId(other.getLocationId());
            startAtMin(other.getStartAtMin());
            startAtMax(other.getStartAtMax());
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        @JsonSetter(value = "start_at_min", nulls = Nulls.SKIP)
        public Builder startAtMin(Optional<String> startAtMin) {
            this.startAtMin = startAtMin;
            return this;
        }

        public Builder startAtMin(String startAtMin) {
            this.startAtMin = Optional.ofNullable(startAtMin);
            return this;
        }

        public Builder startAtMin(Nullable<String> startAtMin) {
            if (startAtMin.isNull()) {
                this.startAtMin = null;
            } else if (startAtMin.isEmpty()) {
                this.startAtMin = Optional.empty();
            } else {
                this.startAtMin = Optional.of(startAtMin.get());
            }
            return this;
        }

        @JsonSetter(value = "start_at_max", nulls = Nulls.SKIP)
        public Builder startAtMax(Optional<String> startAtMax) {
            this.startAtMax = startAtMax;
            return this;
        }

        public Builder startAtMax(String startAtMax) {
            this.startAtMax = Optional.ofNullable(startAtMax);
            return this;
        }

        public Builder startAtMax(Nullable<String> startAtMax) {
            if (startAtMax.isNull()) {
                this.startAtMax = null;
            } else if (startAtMax.isEmpty()) {
                this.startAtMax = Optional.empty();
            } else {
                this.startAtMax = Optional.of(startAtMax.get());
            }
            return this;
        }

        public ListBookingsRequest build() {
            return new ListBookingsRequest(
                    limit, cursor, customerId, teamMemberId, locationId, startAtMin, startAtMax, additionalProperties);
        }
    }
}
