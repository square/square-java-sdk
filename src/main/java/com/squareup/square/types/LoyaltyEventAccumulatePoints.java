/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyEventAccumulatePoints.Builder.class)
public final class LoyaltyEventAccumulatePoints {
    private final Optional<String> loyaltyProgramId;

    private final Optional<Integer> points;

    private final Optional<String> orderId;

    private final Map<String, Object> additionalProperties;

    private LoyaltyEventAccumulatePoints(
            Optional<String> loyaltyProgramId,
            Optional<Integer> points,
            Optional<String> orderId,
            Map<String, Object> additionalProperties) {
        this.loyaltyProgramId = loyaltyProgramId;
        this.points = points;
        this.orderId = orderId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:LoyaltyProgram">loyalty program</a>.
     */
    @JsonProperty("loyalty_program_id")
    public Optional<String> getLoyaltyProgramId() {
        return loyaltyProgramId;
    }

    /**
     * @return The number of points accumulated by the event.
     */
    @JsonIgnore
    public Optional<Integer> getPoints() {
        if (points == null) {
            return Optional.empty();
        }
        return points;
    }

    /**
     * @return The ID of the <a href="entity:Order">order</a> for which the buyer accumulated the points.
     * This field is returned only if the Orders API is used to process orders.
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("points")
    private Optional<Integer> _getPoints() {
        return points;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyEventAccumulatePoints && equalTo((LoyaltyEventAccumulatePoints) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyEventAccumulatePoints other) {
        return loyaltyProgramId.equals(other.loyaltyProgramId)
                && points.equals(other.points)
                && orderId.equals(other.orderId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.loyaltyProgramId, this.points, this.orderId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> loyaltyProgramId = Optional.empty();

        private Optional<Integer> points = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoyaltyEventAccumulatePoints other) {
            loyaltyProgramId(other.getLoyaltyProgramId());
            points(other.getPoints());
            orderId(other.getOrderId());
            return this;
        }

        @JsonSetter(value = "loyalty_program_id", nulls = Nulls.SKIP)
        public Builder loyaltyProgramId(Optional<String> loyaltyProgramId) {
            this.loyaltyProgramId = loyaltyProgramId;
            return this;
        }

        public Builder loyaltyProgramId(String loyaltyProgramId) {
            this.loyaltyProgramId = Optional.ofNullable(loyaltyProgramId);
            return this;
        }

        @JsonSetter(value = "points", nulls = Nulls.SKIP)
        public Builder points(Optional<Integer> points) {
            this.points = points;
            return this;
        }

        public Builder points(Integer points) {
            this.points = Optional.ofNullable(points);
            return this;
        }

        public Builder points(Nullable<Integer> points) {
            if (points.isNull()) {
                this.points = null;
            } else if (points.isEmpty()) {
                this.points = Optional.empty();
            } else {
                this.points = Optional.of(points.get());
            }
            return this;
        }

        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        public LoyaltyEventAccumulatePoints build() {
            return new LoyaltyEventAccumulatePoints(loyaltyProgramId, points, orderId, additionalProperties);
        }
    }
}
