/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FilterValue.Builder.class)
public final class FilterValue {
    private final Optional<List<String>> all;

    private final Optional<List<String>> any;

    private final Optional<List<String>> none;

    private final Map<String, Object> additionalProperties;

    private FilterValue(
            Optional<List<String>> all,
            Optional<List<String>> any,
            Optional<List<String>> none,
            Map<String, Object> additionalProperties) {
        this.all = all;
        this.any = any;
        this.none = none;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of terms that must be present on the field of the resource.
     */
    @JsonIgnore
    public Optional<List<String>> getAll() {
        if (all == null) {
            return Optional.empty();
        }
        return all;
    }

    /**
     * @return A list of terms where at least one of them must be present on the
     * field of the resource.
     */
    @JsonIgnore
    public Optional<List<String>> getAny() {
        if (any == null) {
            return Optional.empty();
        }
        return any;
    }

    /**
     * @return A list of terms that must not be present on the field the resource
     */
    @JsonIgnore
    public Optional<List<String>> getNone() {
        if (none == null) {
            return Optional.empty();
        }
        return none;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("all")
    private Optional<List<String>> _getAll() {
        return all;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("any")
    private Optional<List<String>> _getAny() {
        return any;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("none")
    private Optional<List<String>> _getNone() {
        return none;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FilterValue && equalTo((FilterValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FilterValue other) {
        return all.equals(other.all) && any.equals(other.any) && none.equals(other.none);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.all, this.any, this.none);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> all = Optional.empty();

        private Optional<List<String>> any = Optional.empty();

        private Optional<List<String>> none = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FilterValue other) {
            all(other.getAll());
            any(other.getAny());
            none(other.getNone());
            return this;
        }

        /**
         * <p>A list of terms that must be present on the field of the resource.</p>
         */
        @JsonSetter(value = "all", nulls = Nulls.SKIP)
        public Builder all(Optional<List<String>> all) {
            this.all = all;
            return this;
        }

        public Builder all(List<String> all) {
            this.all = Optional.ofNullable(all);
            return this;
        }

        public Builder all(Nullable<List<String>> all) {
            if (all.isNull()) {
                this.all = null;
            } else if (all.isEmpty()) {
                this.all = Optional.empty();
            } else {
                this.all = Optional.of(all.get());
            }
            return this;
        }

        /**
         * <p>A list of terms where at least one of them must be present on the
         * field of the resource.</p>
         */
        @JsonSetter(value = "any", nulls = Nulls.SKIP)
        public Builder any(Optional<List<String>> any) {
            this.any = any;
            return this;
        }

        public Builder any(List<String> any) {
            this.any = Optional.ofNullable(any);
            return this;
        }

        public Builder any(Nullable<List<String>> any) {
            if (any.isNull()) {
                this.any = null;
            } else if (any.isEmpty()) {
                this.any = Optional.empty();
            } else {
                this.any = Optional.of(any.get());
            }
            return this;
        }

        /**
         * <p>A list of terms that must not be present on the field the resource</p>
         */
        @JsonSetter(value = "none", nulls = Nulls.SKIP)
        public Builder none(Optional<List<String>> none) {
            this.none = none;
            return this;
        }

        public Builder none(List<String> none) {
            this.none = Optional.ofNullable(none);
            return this;
        }

        public Builder none(Nullable<List<String>> none) {
            if (none.isNull()) {
                this.none = null;
            } else if (none.isEmpty()) {
                this.none = Optional.empty();
            } else {
                this.none = Optional.of(none.get());
            }
            return this;
        }

        public FilterValue build() {
            return new FilterValue(all, any, none, additionalProperties);
        }
    }
}
