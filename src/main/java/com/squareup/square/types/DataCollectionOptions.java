/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DataCollectionOptions.Builder.class)
public final class DataCollectionOptions {
    private final String title;

    private final String body;

    private final DataCollectionOptionsInputType inputType;

    private final Optional<CollectedData> collectedData;

    private final Map<String, Object> additionalProperties;

    private DataCollectionOptions(
            String title,
            String body,
            DataCollectionOptionsInputType inputType,
            Optional<CollectedData> collectedData,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.body = body;
        this.inputType = inputType;
        this.collectedData = collectedData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The title text to display in the data collection flow on the Terminal.
     */
    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return The body text to display under the title in the data collection screen flow on the
     * Terminal.
     */
    @JsonProperty("body")
    public String getBody() {
        return body;
    }

    /**
     * @return Represents the type of the input text.
     * See <a href="#type-inputtype">InputType</a> for possible values
     */
    @JsonProperty("input_type")
    public DataCollectionOptionsInputType getInputType() {
        return inputType;
    }

    /**
     * @return The buyer’s input text from the data collection screen.
     */
    @JsonProperty("collected_data")
    public Optional<CollectedData> getCollectedData() {
        return collectedData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DataCollectionOptions && equalTo((DataCollectionOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DataCollectionOptions other) {
        return title.equals(other.title)
                && body.equals(other.body)
                && inputType.equals(other.inputType)
                && collectedData.equals(other.collectedData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.title, this.body, this.inputType, this.collectedData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        BodyStage title(@NotNull String title);

        Builder from(DataCollectionOptions other);
    }

    public interface BodyStage {
        InputTypeStage body(@NotNull String body);
    }

    public interface InputTypeStage {
        _FinalStage inputType(@NotNull DataCollectionOptionsInputType inputType);
    }

    public interface _FinalStage {
        DataCollectionOptions build();

        _FinalStage collectedData(Optional<CollectedData> collectedData);

        _FinalStage collectedData(CollectedData collectedData);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TitleStage, BodyStage, InputTypeStage, _FinalStage {
        private String title;

        private String body;

        private DataCollectionOptionsInputType inputType;

        private Optional<CollectedData> collectedData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DataCollectionOptions other) {
            title(other.getTitle());
            body(other.getBody());
            inputType(other.getInputType());
            collectedData(other.getCollectedData());
            return this;
        }

        /**
         * <p>The title text to display in the data collection flow on the Terminal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public BodyStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>The body text to display under the title in the data collection screen flow on the
         * Terminal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("body")
        public InputTypeStage body(@NotNull String body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        /**
         * <p>Represents the type of the input text.
         * See <a href="#type-inputtype">InputType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("input_type")
        public _FinalStage inputType(@NotNull DataCollectionOptionsInputType inputType) {
            this.inputType = Objects.requireNonNull(inputType, "inputType must not be null");
            return this;
        }

        /**
         * <p>The buyer’s input text from the data collection screen.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage collectedData(CollectedData collectedData) {
            this.collectedData = Optional.ofNullable(collectedData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "collected_data", nulls = Nulls.SKIP)
        public _FinalStage collectedData(Optional<CollectedData> collectedData) {
            this.collectedData = collectedData;
            return this;
        }

        @java.lang.Override
        public DataCollectionOptions build() {
            return new DataCollectionOptions(title, body, inputType, collectedData, additionalProperties);
        }
    }
}
