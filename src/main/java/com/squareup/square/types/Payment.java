/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Payment.Builder.class)
public final class Payment {
    private final Optional<String> id;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<Money> amountMoney;

    private final Optional<Money> tipMoney;

    private final Optional<Money> totalMoney;

    private final Optional<Money> appFeeMoney;

    private final Optional<Money> approvedMoney;

    private final Optional<List<ProcessingFee>> processingFee;

    private final Optional<Money> refundedMoney;

    private final Optional<String> status;

    private final Optional<String> delayDuration;

    private final Optional<String> delayAction;

    private final Optional<String> delayedUntil;

    private final Optional<String> sourceType;

    private final Optional<CardPaymentDetails> cardDetails;

    private final Optional<CashPaymentDetails> cashDetails;

    private final Optional<BankAccountPaymentDetails> bankAccountDetails;

    private final Optional<ExternalPaymentDetails> externalDetails;

    private final Optional<DigitalWalletDetails> walletDetails;

    private final Optional<BuyNowPayLaterDetails> buyNowPayLaterDetails;

    private final Optional<SquareAccountDetails> squareAccountDetails;

    private final Optional<String> locationId;

    private final Optional<String> orderId;

    private final Optional<String> referenceId;

    private final Optional<String> customerId;

    private final Optional<String> employeeId;

    private final Optional<String> teamMemberId;

    private final Optional<List<String>> refundIds;

    private final Optional<RiskEvaluation> riskEvaluation;

    private final Optional<String> terminalCheckoutId;

    private final Optional<String> buyerEmailAddress;

    private final Optional<Address> billingAddress;

    private final Optional<Address> shippingAddress;

    private final Optional<String> note;

    private final Optional<String> statementDescriptionIdentifier;

    private final Optional<List<String>> capabilities;

    private final Optional<String> receiptNumber;

    private final Optional<String> receiptUrl;

    private final Optional<DeviceDetails> deviceDetails;

    private final Optional<ApplicationDetails> applicationDetails;

    private final Optional<Boolean> isOfflinePayment;

    private final Optional<OfflinePaymentDetails> offlinePaymentDetails;

    private final Optional<String> versionToken;

    private final Map<String, Object> additionalProperties;

    private Payment(
            Optional<String> id,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<Money> amountMoney,
            Optional<Money> tipMoney,
            Optional<Money> totalMoney,
            Optional<Money> appFeeMoney,
            Optional<Money> approvedMoney,
            Optional<List<ProcessingFee>> processingFee,
            Optional<Money> refundedMoney,
            Optional<String> status,
            Optional<String> delayDuration,
            Optional<String> delayAction,
            Optional<String> delayedUntil,
            Optional<String> sourceType,
            Optional<CardPaymentDetails> cardDetails,
            Optional<CashPaymentDetails> cashDetails,
            Optional<BankAccountPaymentDetails> bankAccountDetails,
            Optional<ExternalPaymentDetails> externalDetails,
            Optional<DigitalWalletDetails> walletDetails,
            Optional<BuyNowPayLaterDetails> buyNowPayLaterDetails,
            Optional<SquareAccountDetails> squareAccountDetails,
            Optional<String> locationId,
            Optional<String> orderId,
            Optional<String> referenceId,
            Optional<String> customerId,
            Optional<String> employeeId,
            Optional<String> teamMemberId,
            Optional<List<String>> refundIds,
            Optional<RiskEvaluation> riskEvaluation,
            Optional<String> terminalCheckoutId,
            Optional<String> buyerEmailAddress,
            Optional<Address> billingAddress,
            Optional<Address> shippingAddress,
            Optional<String> note,
            Optional<String> statementDescriptionIdentifier,
            Optional<List<String>> capabilities,
            Optional<String> receiptNumber,
            Optional<String> receiptUrl,
            Optional<DeviceDetails> deviceDetails,
            Optional<ApplicationDetails> applicationDetails,
            Optional<Boolean> isOfflinePayment,
            Optional<OfflinePaymentDetails> offlinePaymentDetails,
            Optional<String> versionToken,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.amountMoney = amountMoney;
        this.tipMoney = tipMoney;
        this.totalMoney = totalMoney;
        this.appFeeMoney = appFeeMoney;
        this.approvedMoney = approvedMoney;
        this.processingFee = processingFee;
        this.refundedMoney = refundedMoney;
        this.status = status;
        this.delayDuration = delayDuration;
        this.delayAction = delayAction;
        this.delayedUntil = delayedUntil;
        this.sourceType = sourceType;
        this.cardDetails = cardDetails;
        this.cashDetails = cashDetails;
        this.bankAccountDetails = bankAccountDetails;
        this.externalDetails = externalDetails;
        this.walletDetails = walletDetails;
        this.buyNowPayLaterDetails = buyNowPayLaterDetails;
        this.squareAccountDetails = squareAccountDetails;
        this.locationId = locationId;
        this.orderId = orderId;
        this.referenceId = referenceId;
        this.customerId = customerId;
        this.employeeId = employeeId;
        this.teamMemberId = teamMemberId;
        this.refundIds = refundIds;
        this.riskEvaluation = riskEvaluation;
        this.terminalCheckoutId = terminalCheckoutId;
        this.buyerEmailAddress = buyerEmailAddress;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.note = note;
        this.statementDescriptionIdentifier = statementDescriptionIdentifier;
        this.capabilities = capabilities;
        this.receiptNumber = receiptNumber;
        this.receiptUrl = receiptUrl;
        this.deviceDetails = deviceDetails;
        this.applicationDetails = applicationDetails;
        this.isOfflinePayment = isOfflinePayment;
        this.offlinePaymentDetails = offlinePaymentDetails;
        this.versionToken = versionToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID for the payment.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The timestamp of when the payment was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the payment was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The amount processed for this payment, not including <code>tip_money</code>.
     * <p>The amount is specified in the smallest denomination of the applicable currency (for example,
     * US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The amount designated as a tip for the seller's staff.
     * <p>Tips for external vendors such as a 3rd party delivery courier must be recorded using Order.service_charges.</p>
     * <p>This amount is specified in the smallest denomination of the applicable currency (for example,
     * US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     */
    @JsonProperty("tip_money")
    public Optional<Money> getTipMoney() {
        return tipMoney;
    }

    /**
     * @return The total amount for the payment, including <code>amount_money</code> and <code>tip_money</code>.
     * This amount is specified in the smallest denomination of the applicable currency (for example,
     * US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.
     */
    @JsonProperty("total_money")
    public Optional<Money> getTotalMoney() {
        return totalMoney;
    }

    /**
     * @return The amount the developer is taking as a fee for facilitating the payment on behalf
     * of the seller. This amount is specified in the smallest denomination of the applicable currency
     * (for example, US dollar amounts are specified in cents). For more information,
     * see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.
     * <p>The amount cannot be more than 90% of the <code>total_money</code> value.</p>
     * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
     * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
     */
    @JsonProperty("app_fee_money")
    public Optional<Money> getAppFeeMoney() {
        return appFeeMoney;
    }

    /**
     * @return The amount of money approved for this payment. This value may change if Square chooses to
     * obtain reauthorization as part of a call to <a href="api-endpoint:Payments-UpdatePayment">UpdatePayment</a>.
     */
    @JsonProperty("approved_money")
    public Optional<Money> getApprovedMoney() {
        return approvedMoney;
    }

    /**
     * @return The processing fees and fee adjustments assessed by Square for this payment.
     */
    @JsonProperty("processing_fee")
    public Optional<List<ProcessingFee>> getProcessingFee() {
        return processingFee;
    }

    /**
     * @return The total amount of the payment refunded to date.
     * <p>This amount is specified in the smallest denomination of the applicable currency (for example,
     * US dollar amounts are specified in cents).</p>
     */
    @JsonProperty("refunded_money")
    public Optional<Money> getRefundedMoney() {
        return refundedMoney;
    }

    /**
     * @return Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
     */
    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    /**
     * @return The duration of time after the payment's creation when Square automatically applies the
     * <code>delay_action</code> to the payment. This automatic <code>delay_action</code> applies only to payments that
     * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the <code>delay_duration</code>
     * time period.
     * <p>This field is specified as a time duration, in RFC 3339 format.</p>
     * <p>Notes:
     * This feature is only supported for card payments.</p>
     * <p>Default:</p>
     * <ul>
     * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
     * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
     * </ul>
     */
    @JsonProperty("delay_duration")
    public Optional<String> getDelayDuration() {
        return delayDuration;
    }

    /**
     * @return The action to be applied to the payment when the <code>delay_duration</code> has elapsed.
     * <p>Current values include <code>CANCEL</code> and <code>COMPLETE</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getDelayAction() {
        if (delayAction == null) {
            return Optional.empty();
        }
        return delayAction;
    }

    /**
     * @return The read-only timestamp of when the <code>delay_action</code> is automatically applied,
     * in RFC 3339 format.
     * <p>Note that this field is calculated by summing the payment's <code>delay_duration</code> and <code>created_at</code>
     * fields. The <code>created_at</code> field is generated by Square and might not exactly match the
     * time on your local machine.</p>
     */
    @JsonProperty("delayed_until")
    public Optional<String> getDelayedUntil() {
        return delayedUntil;
    }

    /**
     * @return The source type for this payment.
     * <p>Current values include <code>CARD</code>, <code>BANK_ACCOUNT</code>, <code>WALLET</code>, <code>BUY_NOW_PAY_LATER</code>, <code>SQUARE_ACCOUNT</code>,
     * <code>CASH</code> and <code>EXTERNAL</code>. For information about these payment source types,
     * see <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
     */
    @JsonProperty("source_type")
    public Optional<String> getSourceType() {
        return sourceType;
    }

    /**
     * @return Details about a card payment. These details are only populated if the source_type is <code>CARD</code>.
     */
    @JsonProperty("card_details")
    public Optional<CardPaymentDetails> getCardDetails() {
        return cardDetails;
    }

    /**
     * @return Details about a cash payment. These details are only populated if the source_type is <code>CASH</code>.
     */
    @JsonProperty("cash_details")
    public Optional<CashPaymentDetails> getCashDetails() {
        return cashDetails;
    }

    /**
     * @return Details about a bank account payment. These details are only populated if the source_type is <code>BANK_ACCOUNT</code>.
     */
    @JsonProperty("bank_account_details")
    public Optional<BankAccountPaymentDetails> getBankAccountDetails() {
        return bankAccountDetails;
    }

    /**
     * @return Details about an external payment. The details are only populated
     * if the <code>source_type</code> is <code>EXTERNAL</code>.
     */
    @JsonProperty("external_details")
    public Optional<ExternalPaymentDetails> getExternalDetails() {
        return externalDetails;
    }

    /**
     * @return Details about an wallet payment. The details are only populated
     * if the <code>source_type</code> is <code>WALLET</code>.
     */
    @JsonProperty("wallet_details")
    public Optional<DigitalWalletDetails> getWalletDetails() {
        return walletDetails;
    }

    /**
     * @return Details about a Buy Now Pay Later payment. The details are only populated
     * if the <code>source_type</code> is <code>BUY_NOW_PAY_LATER</code>. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments/afterpay-payments">Afterpay Payments</a>.
     */
    @JsonProperty("buy_now_pay_later_details")
    public Optional<BuyNowPayLaterDetails> getBuyNowPayLaterDetails() {
        return buyNowPayLaterDetails;
    }

    /**
     * @return Details about a Square Account payment. The details are only populated
     * if the <code>source_type</code> is <code>SQUARE_ACCOUNT</code>.
     */
    @JsonProperty("square_account_details")
    public Optional<SquareAccountDetails> getSquareAccountDetails() {
        return squareAccountDetails;
    }

    /**
     * @return The ID of the location associated with the payment.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    /**
     * @return The ID of the order associated with the payment.
     */
    @JsonProperty("order_id")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return An optional ID that associates the payment with an entity in
     * another system.
     */
    @JsonProperty("reference_id")
    public Optional<String> getReferenceId() {
        return referenceId;
    }

    /**
     * @return The ID of the customer associated with the payment. If the ID is
     * not provided in the <code>CreatePayment</code> request that was used to create the <code>Payment</code>,
     * Square may use information in the request
     * (such as the billing and shipping address, email address, and payment source)
     * to identify a matching customer profile in the Customer Directory.
     * If found, the profile ID is used. If a profile is not found, the
     * API attempts to create an
     * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profile</a>.
     * If the API cannot create an
     * instant profile (either because the seller has disabled it or the
     * seller's region prevents creating it), this field remains unset. Note that
     * this process is asynchronous and it may take some time before a
     * customer ID is added to the payment.
     */
    @JsonProperty("customer_id")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    /**
     * @return <strong>Deprecated</strong>: Use <code>Payment.team_member_id</code> instead.
     * <p>An optional ID of the employee associated with taking the payment.</p>
     */
    @JsonProperty("employee_id")
    public Optional<String> getEmployeeId() {
        return employeeId;
    }

    /**
     * @return An optional ID of the <a href="entity:TeamMember">TeamMember</a> associated with taking the payment.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return A list of <code>refund_id</code>s identifying refunds for the payment.
     */
    @JsonProperty("refund_ids")
    public Optional<List<String>> getRefundIds() {
        return refundIds;
    }

    /**
     * @return Provides information about the risk associated with the payment, as determined by Square.
     * This field is present for payments to sellers that have opted in to receive risk
     * evaluations.
     */
    @JsonProperty("risk_evaluation")
    public Optional<RiskEvaluation> getRiskEvaluation() {
        return riskEvaluation;
    }

    /**
     * @return An optional ID for a Terminal checkout that is associated with the payment.
     */
    @JsonProperty("terminal_checkout_id")
    public Optional<String> getTerminalCheckoutId() {
        return terminalCheckoutId;
    }

    /**
     * @return The buyer's email address.
     */
    @JsonProperty("buyer_email_address")
    public Optional<String> getBuyerEmailAddress() {
        return buyerEmailAddress;
    }

    /**
     * @return The buyer's billing address.
     */
    @JsonProperty("billing_address")
    public Optional<Address> getBillingAddress() {
        return billingAddress;
    }

    /**
     * @return The buyer's shipping address.
     */
    @JsonProperty("shipping_address")
    public Optional<Address> getShippingAddress() {
        return shippingAddress;
    }

    /**
     * @return An optional note to include when creating a payment.
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    /**
     * @return Additional payment information that gets added to the customer's card statement
     * as part of the statement description.
     * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
     * to fit the required information including the Square identifier (SQ *) and the name of the
     * seller taking the payment.</p>
     */
    @JsonProperty("statement_description_identifier")
    public Optional<String> getStatementDescriptionIdentifier() {
        return statementDescriptionIdentifier;
    }

    /**
     * @return Actions that can be performed on this payment:
     * <ul>
     * <li><code>EDIT_AMOUNT_UP</code> - The payment amount can be edited up.</li>
     * <li><code>EDIT_AMOUNT_DOWN</code> - The payment amount can be edited down.</li>
     * <li><code>EDIT_TIP_AMOUNT_UP</code> - The tip amount can be edited up.</li>
     * <li><code>EDIT_TIP_AMOUNT_DOWN</code> - The tip amount can be edited down.</li>
     * <li><code>EDIT_DELAY_ACTION</code> - The delay_action can be edited.</li>
     * </ul>
     */
    @JsonProperty("capabilities")
    public Optional<List<String>> getCapabilities() {
        return capabilities;
    }

    /**
     * @return The payment's receipt number.
     * The field is missing if a payment is canceled.
     */
    @JsonProperty("receipt_number")
    public Optional<String> getReceiptNumber() {
        return receiptNumber;
    }

    /**
     * @return The URL for the payment's receipt.
     * The field is only populated for COMPLETED payments.
     */
    @JsonProperty("receipt_url")
    public Optional<String> getReceiptUrl() {
        return receiptUrl;
    }

    /**
     * @return Details about the device that took the payment.
     */
    @JsonProperty("device_details")
    public Optional<DeviceDetails> getDeviceDetails() {
        return deviceDetails;
    }

    /**
     * @return Details about the application that took the payment.
     */
    @JsonProperty("application_details")
    public Optional<ApplicationDetails> getApplicationDetails() {
        return applicationDetails;
    }

    /**
     * @return Whether or not this payment was taken offline.
     */
    @JsonProperty("is_offline_payment")
    public Optional<Boolean> getIsOfflinePayment() {
        return isOfflinePayment;
    }

    /**
     * @return Additional information about the payment if it was taken offline.
     */
    @JsonProperty("offline_payment_details")
    public Optional<OfflinePaymentDetails> getOfflinePaymentDetails() {
        return offlinePaymentDetails;
    }

    /**
     * @return Used for optimistic concurrency. This opaque token identifies a specific version of the
     * <code>Payment</code> object.
     */
    @JsonIgnore
    public Optional<String> getVersionToken() {
        if (versionToken == null) {
            return Optional.empty();
        }
        return versionToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("delay_action")
    private Optional<String> _getDelayAction() {
        return delayAction;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("version_token")
    private Optional<String> _getVersionToken() {
        return versionToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Payment && equalTo((Payment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Payment other) {
        return id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && amountMoney.equals(other.amountMoney)
                && tipMoney.equals(other.tipMoney)
                && totalMoney.equals(other.totalMoney)
                && appFeeMoney.equals(other.appFeeMoney)
                && approvedMoney.equals(other.approvedMoney)
                && processingFee.equals(other.processingFee)
                && refundedMoney.equals(other.refundedMoney)
                && status.equals(other.status)
                && delayDuration.equals(other.delayDuration)
                && delayAction.equals(other.delayAction)
                && delayedUntil.equals(other.delayedUntil)
                && sourceType.equals(other.sourceType)
                && cardDetails.equals(other.cardDetails)
                && cashDetails.equals(other.cashDetails)
                && bankAccountDetails.equals(other.bankAccountDetails)
                && externalDetails.equals(other.externalDetails)
                && walletDetails.equals(other.walletDetails)
                && buyNowPayLaterDetails.equals(other.buyNowPayLaterDetails)
                && squareAccountDetails.equals(other.squareAccountDetails)
                && locationId.equals(other.locationId)
                && orderId.equals(other.orderId)
                && referenceId.equals(other.referenceId)
                && customerId.equals(other.customerId)
                && employeeId.equals(other.employeeId)
                && teamMemberId.equals(other.teamMemberId)
                && refundIds.equals(other.refundIds)
                && riskEvaluation.equals(other.riskEvaluation)
                && terminalCheckoutId.equals(other.terminalCheckoutId)
                && buyerEmailAddress.equals(other.buyerEmailAddress)
                && billingAddress.equals(other.billingAddress)
                && shippingAddress.equals(other.shippingAddress)
                && note.equals(other.note)
                && statementDescriptionIdentifier.equals(other.statementDescriptionIdentifier)
                && capabilities.equals(other.capabilities)
                && receiptNumber.equals(other.receiptNumber)
                && receiptUrl.equals(other.receiptUrl)
                && deviceDetails.equals(other.deviceDetails)
                && applicationDetails.equals(other.applicationDetails)
                && isOfflinePayment.equals(other.isOfflinePayment)
                && offlinePaymentDetails.equals(other.offlinePaymentDetails)
                && versionToken.equals(other.versionToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.createdAt,
                this.updatedAt,
                this.amountMoney,
                this.tipMoney,
                this.totalMoney,
                this.appFeeMoney,
                this.approvedMoney,
                this.processingFee,
                this.refundedMoney,
                this.status,
                this.delayDuration,
                this.delayAction,
                this.delayedUntil,
                this.sourceType,
                this.cardDetails,
                this.cashDetails,
                this.bankAccountDetails,
                this.externalDetails,
                this.walletDetails,
                this.buyNowPayLaterDetails,
                this.squareAccountDetails,
                this.locationId,
                this.orderId,
                this.referenceId,
                this.customerId,
                this.employeeId,
                this.teamMemberId,
                this.refundIds,
                this.riskEvaluation,
                this.terminalCheckoutId,
                this.buyerEmailAddress,
                this.billingAddress,
                this.shippingAddress,
                this.note,
                this.statementDescriptionIdentifier,
                this.capabilities,
                this.receiptNumber,
                this.receiptUrl,
                this.deviceDetails,
                this.applicationDetails,
                this.isOfflinePayment,
                this.offlinePaymentDetails,
                this.versionToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<Money> tipMoney = Optional.empty();

        private Optional<Money> totalMoney = Optional.empty();

        private Optional<Money> appFeeMoney = Optional.empty();

        private Optional<Money> approvedMoney = Optional.empty();

        private Optional<List<ProcessingFee>> processingFee = Optional.empty();

        private Optional<Money> refundedMoney = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<String> delayDuration = Optional.empty();

        private Optional<String> delayAction = Optional.empty();

        private Optional<String> delayedUntil = Optional.empty();

        private Optional<String> sourceType = Optional.empty();

        private Optional<CardPaymentDetails> cardDetails = Optional.empty();

        private Optional<CashPaymentDetails> cashDetails = Optional.empty();

        private Optional<BankAccountPaymentDetails> bankAccountDetails = Optional.empty();

        private Optional<ExternalPaymentDetails> externalDetails = Optional.empty();

        private Optional<DigitalWalletDetails> walletDetails = Optional.empty();

        private Optional<BuyNowPayLaterDetails> buyNowPayLaterDetails = Optional.empty();

        private Optional<SquareAccountDetails> squareAccountDetails = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> employeeId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<List<String>> refundIds = Optional.empty();

        private Optional<RiskEvaluation> riskEvaluation = Optional.empty();

        private Optional<String> terminalCheckoutId = Optional.empty();

        private Optional<String> buyerEmailAddress = Optional.empty();

        private Optional<Address> billingAddress = Optional.empty();

        private Optional<Address> shippingAddress = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> statementDescriptionIdentifier = Optional.empty();

        private Optional<List<String>> capabilities = Optional.empty();

        private Optional<String> receiptNumber = Optional.empty();

        private Optional<String> receiptUrl = Optional.empty();

        private Optional<DeviceDetails> deviceDetails = Optional.empty();

        private Optional<ApplicationDetails> applicationDetails = Optional.empty();

        private Optional<Boolean> isOfflinePayment = Optional.empty();

        private Optional<OfflinePaymentDetails> offlinePaymentDetails = Optional.empty();

        private Optional<String> versionToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Payment other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            amountMoney(other.getAmountMoney());
            tipMoney(other.getTipMoney());
            totalMoney(other.getTotalMoney());
            appFeeMoney(other.getAppFeeMoney());
            approvedMoney(other.getApprovedMoney());
            processingFee(other.getProcessingFee());
            refundedMoney(other.getRefundedMoney());
            status(other.getStatus());
            delayDuration(other.getDelayDuration());
            delayAction(other.getDelayAction());
            delayedUntil(other.getDelayedUntil());
            sourceType(other.getSourceType());
            cardDetails(other.getCardDetails());
            cashDetails(other.getCashDetails());
            bankAccountDetails(other.getBankAccountDetails());
            externalDetails(other.getExternalDetails());
            walletDetails(other.getWalletDetails());
            buyNowPayLaterDetails(other.getBuyNowPayLaterDetails());
            squareAccountDetails(other.getSquareAccountDetails());
            locationId(other.getLocationId());
            orderId(other.getOrderId());
            referenceId(other.getReferenceId());
            customerId(other.getCustomerId());
            employeeId(other.getEmployeeId());
            teamMemberId(other.getTeamMemberId());
            refundIds(other.getRefundIds());
            riskEvaluation(other.getRiskEvaluation());
            terminalCheckoutId(other.getTerminalCheckoutId());
            buyerEmailAddress(other.getBuyerEmailAddress());
            billingAddress(other.getBillingAddress());
            shippingAddress(other.getShippingAddress());
            note(other.getNote());
            statementDescriptionIdentifier(other.getStatementDescriptionIdentifier());
            capabilities(other.getCapabilities());
            receiptNumber(other.getReceiptNumber());
            receiptUrl(other.getReceiptUrl());
            deviceDetails(other.getDeviceDetails());
            applicationDetails(other.getApplicationDetails());
            isOfflinePayment(other.getIsOfflinePayment());
            offlinePaymentDetails(other.getOfflinePaymentDetails());
            versionToken(other.getVersionToken());
            return this;
        }

        /**
         * <p>A unique ID for the payment.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The timestamp of when the payment was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp of when the payment was last updated, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The amount processed for this payment, not including <code>tip_money</code>.</p>
         * <p>The amount is specified in the smallest denomination of the applicable currency (for example,
         * US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         */
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The amount designated as a tip for the seller's staff.</p>
         * <p>Tips for external vendors such as a 3rd party delivery courier must be recorded using Order.service_charges.</p>
         * <p>This amount is specified in the smallest denomination of the applicable currency (for example,
         * US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         */
        @JsonSetter(value = "tip_money", nulls = Nulls.SKIP)
        public Builder tipMoney(Optional<Money> tipMoney) {
            this.tipMoney = tipMoney;
            return this;
        }

        public Builder tipMoney(Money tipMoney) {
            this.tipMoney = Optional.ofNullable(tipMoney);
            return this;
        }

        /**
         * <p>The total amount for the payment, including <code>amount_money</code> and <code>tip_money</code>.
         * This amount is specified in the smallest denomination of the applicable currency (for example,
         * US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         */
        @JsonSetter(value = "total_money", nulls = Nulls.SKIP)
        public Builder totalMoney(Optional<Money> totalMoney) {
            this.totalMoney = totalMoney;
            return this;
        }

        public Builder totalMoney(Money totalMoney) {
            this.totalMoney = Optional.ofNullable(totalMoney);
            return this;
        }

        /**
         * <p>The amount the developer is taking as a fee for facilitating the payment on behalf
         * of the seller. This amount is specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information,
         * see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>The amount cannot be more than 90% of the <code>total_money</code> value.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
         * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         */
        @JsonSetter(value = "app_fee_money", nulls = Nulls.SKIP)
        public Builder appFeeMoney(Optional<Money> appFeeMoney) {
            this.appFeeMoney = appFeeMoney;
            return this;
        }

        public Builder appFeeMoney(Money appFeeMoney) {
            this.appFeeMoney = Optional.ofNullable(appFeeMoney);
            return this;
        }

        /**
         * <p>The amount of money approved for this payment. This value may change if Square chooses to
         * obtain reauthorization as part of a call to <a href="api-endpoint:Payments-UpdatePayment">UpdatePayment</a>.</p>
         */
        @JsonSetter(value = "approved_money", nulls = Nulls.SKIP)
        public Builder approvedMoney(Optional<Money> approvedMoney) {
            this.approvedMoney = approvedMoney;
            return this;
        }

        public Builder approvedMoney(Money approvedMoney) {
            this.approvedMoney = Optional.ofNullable(approvedMoney);
            return this;
        }

        /**
         * <p>The processing fees and fee adjustments assessed by Square for this payment.</p>
         */
        @JsonSetter(value = "processing_fee", nulls = Nulls.SKIP)
        public Builder processingFee(Optional<List<ProcessingFee>> processingFee) {
            this.processingFee = processingFee;
            return this;
        }

        public Builder processingFee(List<ProcessingFee> processingFee) {
            this.processingFee = Optional.ofNullable(processingFee);
            return this;
        }

        /**
         * <p>The total amount of the payment refunded to date.</p>
         * <p>This amount is specified in the smallest denomination of the applicable currency (for example,
         * US dollar amounts are specified in cents).</p>
         */
        @JsonSetter(value = "refunded_money", nulls = Nulls.SKIP)
        public Builder refundedMoney(Optional<Money> refundedMoney) {
            this.refundedMoney = refundedMoney;
            return this;
        }

        public Builder refundedMoney(Money refundedMoney) {
            this.refundedMoney = Optional.ofNullable(refundedMoney);
            return this;
        }

        /**
         * <p>Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The duration of time after the payment's creation when Square automatically applies the
         * <code>delay_action</code> to the payment. This automatic <code>delay_action</code> applies only to payments that
         * do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the <code>delay_duration</code>
         * time period.</p>
         * <p>This field is specified as a time duration, in RFC 3339 format.</p>
         * <p>Notes:
         * This feature is only supported for card payments.</p>
         * <p>Default:</p>
         * <ul>
         * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
         * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
         * </ul>
         */
        @JsonSetter(value = "delay_duration", nulls = Nulls.SKIP)
        public Builder delayDuration(Optional<String> delayDuration) {
            this.delayDuration = delayDuration;
            return this;
        }

        public Builder delayDuration(String delayDuration) {
            this.delayDuration = Optional.ofNullable(delayDuration);
            return this;
        }

        /**
         * <p>The action to be applied to the payment when the <code>delay_duration</code> has elapsed.</p>
         * <p>Current values include <code>CANCEL</code> and <code>COMPLETE</code>.</p>
         */
        @JsonSetter(value = "delay_action", nulls = Nulls.SKIP)
        public Builder delayAction(Optional<String> delayAction) {
            this.delayAction = delayAction;
            return this;
        }

        public Builder delayAction(String delayAction) {
            this.delayAction = Optional.ofNullable(delayAction);
            return this;
        }

        public Builder delayAction(Nullable<String> delayAction) {
            if (delayAction.isNull()) {
                this.delayAction = null;
            } else if (delayAction.isEmpty()) {
                this.delayAction = Optional.empty();
            } else {
                this.delayAction = Optional.of(delayAction.get());
            }
            return this;
        }

        /**
         * <p>The read-only timestamp of when the <code>delay_action</code> is automatically applied,
         * in RFC 3339 format.</p>
         * <p>Note that this field is calculated by summing the payment's <code>delay_duration</code> and <code>created_at</code>
         * fields. The <code>created_at</code> field is generated by Square and might not exactly match the
         * time on your local machine.</p>
         */
        @JsonSetter(value = "delayed_until", nulls = Nulls.SKIP)
        public Builder delayedUntil(Optional<String> delayedUntil) {
            this.delayedUntil = delayedUntil;
            return this;
        }

        public Builder delayedUntil(String delayedUntil) {
            this.delayedUntil = Optional.ofNullable(delayedUntil);
            return this;
        }

        /**
         * <p>The source type for this payment.</p>
         * <p>Current values include <code>CARD</code>, <code>BANK_ACCOUNT</code>, <code>WALLET</code>, <code>BUY_NOW_PAY_LATER</code>, <code>SQUARE_ACCOUNT</code>,
         * <code>CASH</code> and <code>EXTERNAL</code>. For information about these payment source types,
         * see <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
         */
        @JsonSetter(value = "source_type", nulls = Nulls.SKIP)
        public Builder sourceType(Optional<String> sourceType) {
            this.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            this.sourceType = Optional.ofNullable(sourceType);
            return this;
        }

        /**
         * <p>Details about a card payment. These details are only populated if the source_type is <code>CARD</code>.</p>
         */
        @JsonSetter(value = "card_details", nulls = Nulls.SKIP)
        public Builder cardDetails(Optional<CardPaymentDetails> cardDetails) {
            this.cardDetails = cardDetails;
            return this;
        }

        public Builder cardDetails(CardPaymentDetails cardDetails) {
            this.cardDetails = Optional.ofNullable(cardDetails);
            return this;
        }

        /**
         * <p>Details about a cash payment. These details are only populated if the source_type is <code>CASH</code>.</p>
         */
        @JsonSetter(value = "cash_details", nulls = Nulls.SKIP)
        public Builder cashDetails(Optional<CashPaymentDetails> cashDetails) {
            this.cashDetails = cashDetails;
            return this;
        }

        public Builder cashDetails(CashPaymentDetails cashDetails) {
            this.cashDetails = Optional.ofNullable(cashDetails);
            return this;
        }

        /**
         * <p>Details about a bank account payment. These details are only populated if the source_type is <code>BANK_ACCOUNT</code>.</p>
         */
        @JsonSetter(value = "bank_account_details", nulls = Nulls.SKIP)
        public Builder bankAccountDetails(Optional<BankAccountPaymentDetails> bankAccountDetails) {
            this.bankAccountDetails = bankAccountDetails;
            return this;
        }

        public Builder bankAccountDetails(BankAccountPaymentDetails bankAccountDetails) {
            this.bankAccountDetails = Optional.ofNullable(bankAccountDetails);
            return this;
        }

        /**
         * <p>Details about an external payment. The details are only populated
         * if the <code>source_type</code> is <code>EXTERNAL</code>.</p>
         */
        @JsonSetter(value = "external_details", nulls = Nulls.SKIP)
        public Builder externalDetails(Optional<ExternalPaymentDetails> externalDetails) {
            this.externalDetails = externalDetails;
            return this;
        }

        public Builder externalDetails(ExternalPaymentDetails externalDetails) {
            this.externalDetails = Optional.ofNullable(externalDetails);
            return this;
        }

        /**
         * <p>Details about an wallet payment. The details are only populated
         * if the <code>source_type</code> is <code>WALLET</code>.</p>
         */
        @JsonSetter(value = "wallet_details", nulls = Nulls.SKIP)
        public Builder walletDetails(Optional<DigitalWalletDetails> walletDetails) {
            this.walletDetails = walletDetails;
            return this;
        }

        public Builder walletDetails(DigitalWalletDetails walletDetails) {
            this.walletDetails = Optional.ofNullable(walletDetails);
            return this;
        }

        /**
         * <p>Details about a Buy Now Pay Later payment. The details are only populated
         * if the <code>source_type</code> is <code>BUY_NOW_PAY_LATER</code>. For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/afterpay-payments">Afterpay Payments</a>.</p>
         */
        @JsonSetter(value = "buy_now_pay_later_details", nulls = Nulls.SKIP)
        public Builder buyNowPayLaterDetails(Optional<BuyNowPayLaterDetails> buyNowPayLaterDetails) {
            this.buyNowPayLaterDetails = buyNowPayLaterDetails;
            return this;
        }

        public Builder buyNowPayLaterDetails(BuyNowPayLaterDetails buyNowPayLaterDetails) {
            this.buyNowPayLaterDetails = Optional.ofNullable(buyNowPayLaterDetails);
            return this;
        }

        /**
         * <p>Details about a Square Account payment. The details are only populated
         * if the <code>source_type</code> is <code>SQUARE_ACCOUNT</code>.</p>
         */
        @JsonSetter(value = "square_account_details", nulls = Nulls.SKIP)
        public Builder squareAccountDetails(Optional<SquareAccountDetails> squareAccountDetails) {
            this.squareAccountDetails = squareAccountDetails;
            return this;
        }

        public Builder squareAccountDetails(SquareAccountDetails squareAccountDetails) {
            this.squareAccountDetails = Optional.ofNullable(squareAccountDetails);
            return this;
        }

        /**
         * <p>The ID of the location associated with the payment.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The ID of the order associated with the payment.</p>
         */
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>An optional ID that associates the payment with an entity in
         * another system.</p>
         */
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        /**
         * <p>The ID of the customer associated with the payment. If the ID is
         * not provided in the <code>CreatePayment</code> request that was used to create the <code>Payment</code>,
         * Square may use information in the request
         * (such as the billing and shipping address, email address, and payment source)
         * to identify a matching customer profile in the Customer Directory.
         * If found, the profile ID is used. If a profile is not found, the
         * API attempts to create an
         * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profile</a>.
         * If the API cannot create an
         * instant profile (either because the seller has disabled it or the
         * seller's region prevents creating it), this field remains unset. Note that
         * this process is asynchronous and it may take some time before a
         * customer ID is added to the payment.</p>
         */
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p><strong>Deprecated</strong>: Use <code>Payment.team_member_id</code> instead.</p>
         * <p>An optional ID of the employee associated with taking the payment.</p>
         */
        @JsonSetter(value = "employee_id", nulls = Nulls.SKIP)
        public Builder employeeId(Optional<String> employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        /**
         * <p>An optional ID of the <a href="entity:TeamMember">TeamMember</a> associated with taking the payment.</p>
         */
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        /**
         * <p>A list of <code>refund_id</code>s identifying refunds for the payment.</p>
         */
        @JsonSetter(value = "refund_ids", nulls = Nulls.SKIP)
        public Builder refundIds(Optional<List<String>> refundIds) {
            this.refundIds = refundIds;
            return this;
        }

        public Builder refundIds(List<String> refundIds) {
            this.refundIds = Optional.ofNullable(refundIds);
            return this;
        }

        /**
         * <p>Provides information about the risk associated with the payment, as determined by Square.
         * This field is present for payments to sellers that have opted in to receive risk
         * evaluations.</p>
         */
        @JsonSetter(value = "risk_evaluation", nulls = Nulls.SKIP)
        public Builder riskEvaluation(Optional<RiskEvaluation> riskEvaluation) {
            this.riskEvaluation = riskEvaluation;
            return this;
        }

        public Builder riskEvaluation(RiskEvaluation riskEvaluation) {
            this.riskEvaluation = Optional.ofNullable(riskEvaluation);
            return this;
        }

        /**
         * <p>An optional ID for a Terminal checkout that is associated with the payment.</p>
         */
        @JsonSetter(value = "terminal_checkout_id", nulls = Nulls.SKIP)
        public Builder terminalCheckoutId(Optional<String> terminalCheckoutId) {
            this.terminalCheckoutId = terminalCheckoutId;
            return this;
        }

        public Builder terminalCheckoutId(String terminalCheckoutId) {
            this.terminalCheckoutId = Optional.ofNullable(terminalCheckoutId);
            return this;
        }

        /**
         * <p>The buyer's email address.</p>
         */
        @JsonSetter(value = "buyer_email_address", nulls = Nulls.SKIP)
        public Builder buyerEmailAddress(Optional<String> buyerEmailAddress) {
            this.buyerEmailAddress = buyerEmailAddress;
            return this;
        }

        public Builder buyerEmailAddress(String buyerEmailAddress) {
            this.buyerEmailAddress = Optional.ofNullable(buyerEmailAddress);
            return this;
        }

        /**
         * <p>The buyer's billing address.</p>
         */
        @JsonSetter(value = "billing_address", nulls = Nulls.SKIP)
        public Builder billingAddress(Optional<Address> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder billingAddress(Address billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * <p>The buyer's shipping address.</p>
         */
        @JsonSetter(value = "shipping_address", nulls = Nulls.SKIP)
        public Builder shippingAddress(Optional<Address> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(Address shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        /**
         * <p>An optional note to include when creating a payment.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>Additional payment information that gets added to the customer's card statement
         * as part of the statement description.</p>
         * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
         * to fit the required information including the Square identifier (SQ *) and the name of the
         * seller taking the payment.</p>
         */
        @JsonSetter(value = "statement_description_identifier", nulls = Nulls.SKIP)
        public Builder statementDescriptionIdentifier(Optional<String> statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = statementDescriptionIdentifier;
            return this;
        }

        public Builder statementDescriptionIdentifier(String statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = Optional.ofNullable(statementDescriptionIdentifier);
            return this;
        }

        /**
         * <p>Actions that can be performed on this payment:</p>
         * <ul>
         * <li><code>EDIT_AMOUNT_UP</code> - The payment amount can be edited up.</li>
         * <li><code>EDIT_AMOUNT_DOWN</code> - The payment amount can be edited down.</li>
         * <li><code>EDIT_TIP_AMOUNT_UP</code> - The tip amount can be edited up.</li>
         * <li><code>EDIT_TIP_AMOUNT_DOWN</code> - The tip amount can be edited down.</li>
         * <li><code>EDIT_DELAY_ACTION</code> - The delay_action can be edited.</li>
         * </ul>
         */
        @JsonSetter(value = "capabilities", nulls = Nulls.SKIP)
        public Builder capabilities(Optional<List<String>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<String> capabilities) {
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        /**
         * <p>The payment's receipt number.
         * The field is missing if a payment is canceled.</p>
         */
        @JsonSetter(value = "receipt_number", nulls = Nulls.SKIP)
        public Builder receiptNumber(Optional<String> receiptNumber) {
            this.receiptNumber = receiptNumber;
            return this;
        }

        public Builder receiptNumber(String receiptNumber) {
            this.receiptNumber = Optional.ofNullable(receiptNumber);
            return this;
        }

        /**
         * <p>The URL for the payment's receipt.
         * The field is only populated for COMPLETED payments.</p>
         */
        @JsonSetter(value = "receipt_url", nulls = Nulls.SKIP)
        public Builder receiptUrl(Optional<String> receiptUrl) {
            this.receiptUrl = receiptUrl;
            return this;
        }

        public Builder receiptUrl(String receiptUrl) {
            this.receiptUrl = Optional.ofNullable(receiptUrl);
            return this;
        }

        /**
         * <p>Details about the device that took the payment.</p>
         */
        @JsonSetter(value = "device_details", nulls = Nulls.SKIP)
        public Builder deviceDetails(Optional<DeviceDetails> deviceDetails) {
            this.deviceDetails = deviceDetails;
            return this;
        }

        public Builder deviceDetails(DeviceDetails deviceDetails) {
            this.deviceDetails = Optional.ofNullable(deviceDetails);
            return this;
        }

        /**
         * <p>Details about the application that took the payment.</p>
         */
        @JsonSetter(value = "application_details", nulls = Nulls.SKIP)
        public Builder applicationDetails(Optional<ApplicationDetails> applicationDetails) {
            this.applicationDetails = applicationDetails;
            return this;
        }

        public Builder applicationDetails(ApplicationDetails applicationDetails) {
            this.applicationDetails = Optional.ofNullable(applicationDetails);
            return this;
        }

        /**
         * <p>Whether or not this payment was taken offline.</p>
         */
        @JsonSetter(value = "is_offline_payment", nulls = Nulls.SKIP)
        public Builder isOfflinePayment(Optional<Boolean> isOfflinePayment) {
            this.isOfflinePayment = isOfflinePayment;
            return this;
        }

        public Builder isOfflinePayment(Boolean isOfflinePayment) {
            this.isOfflinePayment = Optional.ofNullable(isOfflinePayment);
            return this;
        }

        /**
         * <p>Additional information about the payment if it was taken offline.</p>
         */
        @JsonSetter(value = "offline_payment_details", nulls = Nulls.SKIP)
        public Builder offlinePaymentDetails(Optional<OfflinePaymentDetails> offlinePaymentDetails) {
            this.offlinePaymentDetails = offlinePaymentDetails;
            return this;
        }

        public Builder offlinePaymentDetails(OfflinePaymentDetails offlinePaymentDetails) {
            this.offlinePaymentDetails = Optional.ofNullable(offlinePaymentDetails);
            return this;
        }

        /**
         * <p>Used for optimistic concurrency. This opaque token identifies a specific version of the
         * <code>Payment</code> object.</p>
         */
        @JsonSetter(value = "version_token", nulls = Nulls.SKIP)
        public Builder versionToken(Optional<String> versionToken) {
            this.versionToken = versionToken;
            return this;
        }

        public Builder versionToken(String versionToken) {
            this.versionToken = Optional.ofNullable(versionToken);
            return this;
        }

        public Builder versionToken(Nullable<String> versionToken) {
            if (versionToken.isNull()) {
                this.versionToken = null;
            } else if (versionToken.isEmpty()) {
                this.versionToken = Optional.empty();
            } else {
                this.versionToken = Optional.of(versionToken.get());
            }
            return this;
        }

        public Payment build() {
            return new Payment(
                    id,
                    createdAt,
                    updatedAt,
                    amountMoney,
                    tipMoney,
                    totalMoney,
                    appFeeMoney,
                    approvedMoney,
                    processingFee,
                    refundedMoney,
                    status,
                    delayDuration,
                    delayAction,
                    delayedUntil,
                    sourceType,
                    cardDetails,
                    cashDetails,
                    bankAccountDetails,
                    externalDetails,
                    walletDetails,
                    buyNowPayLaterDetails,
                    squareAccountDetails,
                    locationId,
                    orderId,
                    referenceId,
                    customerId,
                    employeeId,
                    teamMemberId,
                    refundIds,
                    riskEvaluation,
                    terminalCheckoutId,
                    buyerEmailAddress,
                    billingAddress,
                    shippingAddress,
                    note,
                    statementDescriptionIdentifier,
                    capabilities,
                    receiptNumber,
                    receiptUrl,
                    deviceDetails,
                    applicationDetails,
                    isOfflinePayment,
                    offlinePaymentDetails,
                    versionToken,
                    additionalProperties);
        }
    }
}
