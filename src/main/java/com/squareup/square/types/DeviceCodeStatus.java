/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class DeviceCodeStatus {
    public static final DeviceCodeStatus PAIRED = new DeviceCodeStatus(Value.PAIRED, "PAIRED");

    public static final DeviceCodeStatus EXPIRED = new DeviceCodeStatus(Value.EXPIRED, "EXPIRED");

    public static final DeviceCodeStatus UNPAIRED = new DeviceCodeStatus(Value.UNPAIRED, "UNPAIRED");

    public static final DeviceCodeStatus UNKNOWN = new DeviceCodeStatus(Value.UNKNOWN, "UNKNOWN");

    private final Value value;

    private final String string;

    DeviceCodeStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof DeviceCodeStatus && this.string.equals(((DeviceCodeStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case PAIRED:
                return visitor.visitPaired();
            case EXPIRED:
                return visitor.visitExpired();
            case UNPAIRED:
                return visitor.visitUnpaired();
            case UNKNOWN:
                return visitor.visitUnknown();
            case _UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static DeviceCodeStatus valueOf(String value) {
        switch (value) {
            case "PAIRED":
                return PAIRED;
            case "EXPIRED":
                return EXPIRED;
            case "UNPAIRED":
                return UNPAIRED;
            case "UNKNOWN":
                return UNKNOWN;
            default:
                return new DeviceCodeStatus(Value._UNKNOWN, value);
        }
    }

    public enum Value {
        UNKNOWN,

        UNPAIRED,

        PAIRED,

        EXPIRED,

        _UNKNOWN
    }

    public interface Visitor<T> {
        T visitUnknown();

        T visitUnpaired();

        T visitPaired();

        T visitExpired();

        T visitUnknown(String unknownType);
    }
}
