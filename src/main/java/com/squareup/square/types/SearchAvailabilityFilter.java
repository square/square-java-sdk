/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchAvailabilityFilter.Builder.class)
public final class SearchAvailabilityFilter {
    private final TimeRange startAtRange;

    private final Optional<String> locationId;

    private final Optional<List<SegmentFilter>> segmentFilters;

    private final Optional<String> bookingId;

    private final Map<String, Object> additionalProperties;

    private SearchAvailabilityFilter(
            TimeRange startAtRange,
            Optional<String> locationId,
            Optional<List<SegmentFilter>> segmentFilters,
            Optional<String> bookingId,
            Map<String, Object> additionalProperties) {
        this.startAtRange = startAtRange;
        this.locationId = locationId;
        this.segmentFilters = segmentFilters;
        this.bookingId = bookingId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The query expression to search for buy-accessible availabilities with their starting times falling within the specified time range.
     * The time range must be at least 24 hours and at most 32 days long.
     * For waitlist availabilities, the time range can be 0 or more up to 367 days long.
     */
    @JsonProperty("start_at_range")
    public TimeRange getStartAtRange() {
        return startAtRange;
    }

    /**
     * @return The query expression to search for buyer-accessible availabilities with their location IDs matching the specified location ID.
     * This query expression cannot be set if <code>booking_id</code> is set.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The query expression to search for buyer-accessible availabilities matching the specified list of segment filters.
     * If the size of the <code>segment_filters</code> list is <code>n</code>, the search returns availabilities with <code>n</code> segments per availability.
     * <p>This query expression cannot be set if <code>booking_id</code> is set.</p>
     */
    @JsonIgnore
    public Optional<List<SegmentFilter>> getSegmentFilters() {
        if (segmentFilters == null) {
            return Optional.empty();
        }
        return segmentFilters;
    }

    /**
     * @return The query expression to search for buyer-accessible availabilities for an existing booking by matching the specified <code>booking_id</code> value.
     * This is commonly used to reschedule an appointment.
     * If this expression is set, the <code>location_id</code> and <code>segment_filters</code> expressions cannot be set.
     */
    @JsonIgnore
    public Optional<String> getBookingId() {
        if (bookingId == null) {
            return Optional.empty();
        }
        return bookingId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("segment_filters")
    private Optional<List<SegmentFilter>> _getSegmentFilters() {
        return segmentFilters;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("booking_id")
    private Optional<String> _getBookingId() {
        return bookingId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchAvailabilityFilter && equalTo((SearchAvailabilityFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchAvailabilityFilter other) {
        return startAtRange.equals(other.startAtRange)
                && locationId.equals(other.locationId)
                && segmentFilters.equals(other.segmentFilters)
                && bookingId.equals(other.bookingId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startAtRange, this.locationId, this.segmentFilters, this.bookingId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StartAtRangeStage builder() {
        return new Builder();
    }

    public interface StartAtRangeStage {
        _FinalStage startAtRange(@NotNull TimeRange startAtRange);

        Builder from(SearchAvailabilityFilter other);
    }

    public interface _FinalStage {
        SearchAvailabilityFilter build();

        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        _FinalStage locationId(Nullable<String> locationId);

        _FinalStage segmentFilters(Optional<List<SegmentFilter>> segmentFilters);

        _FinalStage segmentFilters(List<SegmentFilter> segmentFilters);

        _FinalStage segmentFilters(Nullable<List<SegmentFilter>> segmentFilters);

        _FinalStage bookingId(Optional<String> bookingId);

        _FinalStage bookingId(String bookingId);

        _FinalStage bookingId(Nullable<String> bookingId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StartAtRangeStage, _FinalStage {
        private TimeRange startAtRange;

        private Optional<String> bookingId = Optional.empty();

        private Optional<List<SegmentFilter>> segmentFilters = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchAvailabilityFilter other) {
            startAtRange(other.getStartAtRange());
            locationId(other.getLocationId());
            segmentFilters(other.getSegmentFilters());
            bookingId(other.getBookingId());
            return this;
        }

        /**
         * <p>The query expression to search for buy-accessible availabilities with their starting times falling within the specified time range.
         * The time range must be at least 24 hours and at most 32 days long.
         * For waitlist availabilities, the time range can be 0 or more up to 367 days long.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("start_at_range")
        public _FinalStage startAtRange(@NotNull TimeRange startAtRange) {
            this.startAtRange = Objects.requireNonNull(startAtRange, "startAtRange must not be null");
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities for an existing booking by matching the specified <code>booking_id</code> value.
         * This is commonly used to reschedule an appointment.
         * If this expression is set, the <code>location_id</code> and <code>segment_filters</code> expressions cannot be set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bookingId(Nullable<String> bookingId) {
            if (bookingId.isNull()) {
                this.bookingId = null;
            } else if (bookingId.isEmpty()) {
                this.bookingId = Optional.empty();
            } else {
                this.bookingId = Optional.of(bookingId.get());
            }
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities for an existing booking by matching the specified <code>booking_id</code> value.
         * This is commonly used to reschedule an appointment.
         * If this expression is set, the <code>location_id</code> and <code>segment_filters</code> expressions cannot be set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bookingId(String bookingId) {
            this.bookingId = Optional.ofNullable(bookingId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "booking_id", nulls = Nulls.SKIP)
        public _FinalStage bookingId(Optional<String> bookingId) {
            this.bookingId = bookingId;
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities matching the specified list of segment filters.
         * If the size of the <code>segment_filters</code> list is <code>n</code>, the search returns availabilities with <code>n</code> segments per availability.</p>
         * <p>This query expression cannot be set if <code>booking_id</code> is set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage segmentFilters(Nullable<List<SegmentFilter>> segmentFilters) {
            if (segmentFilters.isNull()) {
                this.segmentFilters = null;
            } else if (segmentFilters.isEmpty()) {
                this.segmentFilters = Optional.empty();
            } else {
                this.segmentFilters = Optional.of(segmentFilters.get());
            }
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities matching the specified list of segment filters.
         * If the size of the <code>segment_filters</code> list is <code>n</code>, the search returns availabilities with <code>n</code> segments per availability.</p>
         * <p>This query expression cannot be set if <code>booking_id</code> is set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage segmentFilters(List<SegmentFilter> segmentFilters) {
            this.segmentFilters = Optional.ofNullable(segmentFilters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "segment_filters", nulls = Nulls.SKIP)
        public _FinalStage segmentFilters(Optional<List<SegmentFilter>> segmentFilters) {
            this.segmentFilters = segmentFilters;
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities with their location IDs matching the specified location ID.
         * This query expression cannot be set if <code>booking_id</code> is set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The query expression to search for buyer-accessible availabilities with their location IDs matching the specified location ID.
         * This query expression cannot be set if <code>booking_id</code> is set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        @java.lang.Override
        public SearchAvailabilityFilter build() {
            return new SearchAvailabilityFilter(
                    startAtRange, locationId, segmentFilters, bookingId, additionalProperties);
        }
    }
}
