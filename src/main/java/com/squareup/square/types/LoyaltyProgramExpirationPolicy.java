/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyProgramExpirationPolicy.Builder.class)
public final class LoyaltyProgramExpirationPolicy {
    private final String expirationDuration;

    private final Map<String, Object> additionalProperties;

    private LoyaltyProgramExpirationPolicy(String expirationDuration, Map<String, Object> additionalProperties) {
        this.expirationDuration = expirationDuration;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The number of months before points expire, in <code>P[n]M</code> RFC 3339 duration format. For example, a value of <code>P12M</code> represents a duration of 12 months.
     * Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  <code>P12M</code> duration, points earned on July 6, 2020 expire on August 1, 2021.
     */
    @JsonProperty("expiration_duration")
    public String getExpirationDuration() {
        return expirationDuration;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyProgramExpirationPolicy && equalTo((LoyaltyProgramExpirationPolicy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyProgramExpirationPolicy other) {
        return expirationDuration.equals(other.expirationDuration);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.expirationDuration);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExpirationDurationStage builder() {
        return new Builder();
    }

    public interface ExpirationDurationStage {
        _FinalStage expirationDuration(@NotNull String expirationDuration);

        Builder from(LoyaltyProgramExpirationPolicy other);
    }

    public interface _FinalStage {
        LoyaltyProgramExpirationPolicy build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExpirationDurationStage, _FinalStage {
        private String expirationDuration;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LoyaltyProgramExpirationPolicy other) {
            expirationDuration(other.getExpirationDuration());
            return this;
        }

        /**
         * <p>The number of months before points expire, in <code>P[n]M</code> RFC 3339 duration format. For example, a value of <code>P12M</code> represents a duration of 12 months.
         * Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  <code>P12M</code> duration, points earned on July 6, 2020 expire on August 1, 2021.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expiration_duration")
        public _FinalStage expirationDuration(@NotNull String expirationDuration) {
            this.expirationDuration = Objects.requireNonNull(expirationDuration, "expirationDuration must not be null");
            return this;
        }

        @java.lang.Override
        public LoyaltyProgramExpirationPolicy build() {
            return new LoyaltyProgramExpirationPolicy(expirationDuration, additionalProperties);
        }
    }
}
