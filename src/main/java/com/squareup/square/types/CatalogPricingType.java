/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class CatalogPricingType {
    public static final CatalogPricingType VARIABLE_PRICING =
            new CatalogPricingType(Value.VARIABLE_PRICING, "VARIABLE_PRICING");

    public static final CatalogPricingType FIXED_PRICING = new CatalogPricingType(Value.FIXED_PRICING, "FIXED_PRICING");

    private final Value value;

    private final String string;

    CatalogPricingType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof CatalogPricingType && this.string.equals(((CatalogPricingType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case VARIABLE_PRICING:
                return visitor.visitVariablePricing();
            case FIXED_PRICING:
                return visitor.visitFixedPricing();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static CatalogPricingType valueOf(String value) {
        switch (value) {
            case "VARIABLE_PRICING":
                return VARIABLE_PRICING;
            case "FIXED_PRICING":
                return FIXED_PRICING;
            default:
                return new CatalogPricingType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        FIXED_PRICING,

        VARIABLE_PRICING,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitFixedPricing();

        T visitVariablePricing();

        T visitUnknown(String unknownType);
    }
}
