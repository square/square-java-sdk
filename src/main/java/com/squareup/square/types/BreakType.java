/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BreakType.Builder.class)
public final class BreakType {
    private final Optional<String> id;

    private final String locationId;

    private final String breakName;

    private final String expectedDuration;

    private final boolean isPaid;

    private final Optional<Integer> version;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private BreakType(
            Optional<String> id,
            String locationId,
            String breakName,
            String expectedDuration,
            boolean isPaid,
            Optional<Integer> version,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.locationId = locationId;
        this.breakName = breakName;
        this.expectedDuration = expectedDuration;
        this.isPaid = isPaid;
        this.version = version;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The UUID for this object.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of the business location this type of break applies to.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return A human-readable name for this type of break. The name is displayed to
     * team members in Square products.
     */
    @JsonProperty("break_name")
    public String getBreakName() {
        return breakName;
    }

    /**
     * @return Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
     * this break. Precision less than minutes is truncated.
     * <p>Example for break expected duration of 15 minutes: PT15M</p>
     */
    @JsonProperty("expected_duration")
    public String getExpectedDuration() {
        return expectedDuration;
    }

    /**
     * @return Whether this break counts towards time worked for compensation
     * purposes.
     */
    @JsonProperty("is_paid")
    public boolean getIsPaid() {
        return isPaid;
    }

    /**
     * @return Used for resolving concurrency issues. The request fails if the version
     * provided does not match the server version at the time of the request. If a value is not
     * provided, Square's servers execute a &quot;blind&quot; write; potentially
     * overwriting another writer's data.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return A read-only timestamp in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return A read-only timestamp in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BreakType && equalTo((BreakType) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BreakType other) {
        return id.equals(other.id)
                && locationId.equals(other.locationId)
                && breakName.equals(other.breakName)
                && expectedDuration.equals(other.expectedDuration)
                && isPaid == other.isPaid
                && version.equals(other.version)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.locationId,
                this.breakName,
                this.expectedDuration,
                this.isPaid,
                this.version,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        BreakNameStage locationId(@NotNull String locationId);

        Builder from(BreakType other);
    }

    public interface BreakNameStage {
        ExpectedDurationStage breakName(@NotNull String breakName);
    }

    public interface ExpectedDurationStage {
        IsPaidStage expectedDuration(@NotNull String expectedDuration);
    }

    public interface IsPaidStage {
        _FinalStage isPaid(boolean isPaid);
    }

    public interface _FinalStage {
        BreakType build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage version(Optional<Integer> version);

        _FinalStage version(Integer version);

        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements LocationIdStage, BreakNameStage, ExpectedDurationStage, IsPaidStage, _FinalStage {
        private String locationId;

        private String breakName;

        private String expectedDuration;

        private boolean isPaid;

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BreakType other) {
            id(other.getId());
            locationId(other.getLocationId());
            breakName(other.getBreakName());
            expectedDuration(other.getExpectedDuration());
            isPaid(other.getIsPaid());
            version(other.getVersion());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The ID of the business location this type of break applies to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public BreakNameStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>A human-readable name for this type of break. The name is displayed to
         * team members in Square products.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("break_name")
        public ExpectedDurationStage breakName(@NotNull String breakName) {
            this.breakName = Objects.requireNonNull(breakName, "breakName must not be null");
            return this;
        }

        /**
         * <p>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
         * this break. Precision less than minutes is truncated.</p>
         * <p>Example for break expected duration of 15 minutes: PT15M</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expected_duration")
        public IsPaidStage expectedDuration(@NotNull String expectedDuration) {
            this.expectedDuration = Objects.requireNonNull(expectedDuration, "expectedDuration must not be null");
            return this;
        }

        /**
         * <p>Whether this break counts towards time worked for compensation
         * purposes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("is_paid")
        public _FinalStage isPaid(boolean isPaid) {
            this.isPaid = isPaid;
            return this;
        }

        /**
         * <p>A read-only timestamp in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>A read-only timestamp in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Used for resolving concurrency issues. The request fails if the version
         * provided does not match the server version at the time of the request. If a value is not
         * provided, Square's servers execute a &quot;blind&quot; write; potentially
         * overwriting another writer's data.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>The UUID for this object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public BreakType build() {
            return new BreakType(
                    id,
                    locationId,
                    breakName,
                    expectedDuration,
                    isPaid,
                    version,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
