/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange.Builder.class)
public final class CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange {
    private final Money min;

    private final Money max;

    private final Map<String, Object> additionalProperties;

    private CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange(
            Money min, Money max, Map<String, Object> additionalProperties) {
        this.min = min;
        this.max = max;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("min")
    public Money getMin() {
        return min;
    }

    @JsonProperty("max")
    public Money getMax() {
        return max;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange
                && equalTo((CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange other) {
        return min.equals(other.min) && max.equals(other.max);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.min, this.max);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MinStage builder() {
        return new Builder();
    }

    public interface MinStage {
        MaxStage min(@NotNull Money min);

        Builder from(CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange other);
    }

    public interface MaxStage {
        _FinalStage max(@NotNull Money max);
    }

    public interface _FinalStage {
        CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MinStage, MaxStage, _FinalStage {
        private Money min;

        private Money max;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange other) {
            min(other.getMin());
            max(other.getMax());
            return this;
        }

        @java.lang.Override
        @JsonSetter("min")
        public MaxStage min(@NotNull Money min) {
            this.min = Objects.requireNonNull(min, "min must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("max")
        public _FinalStage max(@NotNull Money max) {
            this.max = Objects.requireNonNull(max, "max must not be null");
            return this;
        }

        @java.lang.Override
        public CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange build() {
            return new CheckoutMerchantSettingsPaymentMethodsAfterpayClearpayEligibilityRange(
                    min, max, additionalProperties);
        }
    }
}
