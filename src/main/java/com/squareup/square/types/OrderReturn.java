/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderReturn.Builder.class)
public final class OrderReturn {
    private final Optional<String> uid;

    private final Optional<String> sourceOrderId;

    private final Optional<List<OrderReturnLineItem>> returnLineItems;

    private final Optional<List<OrderReturnServiceCharge>> returnServiceCharges;

    private final Optional<List<OrderReturnTax>> returnTaxes;

    private final Optional<List<OrderReturnDiscount>> returnDiscounts;

    private final Optional<List<OrderReturnTip>> returnTips;

    private final Optional<OrderRoundingAdjustment> roundingAdjustment;

    private final Optional<OrderMoneyAmounts> returnAmounts;

    private final Map<String, Object> additionalProperties;

    private OrderReturn(
            Optional<String> uid,
            Optional<String> sourceOrderId,
            Optional<List<OrderReturnLineItem>> returnLineItems,
            Optional<List<OrderReturnServiceCharge>> returnServiceCharges,
            Optional<List<OrderReturnTax>> returnTaxes,
            Optional<List<OrderReturnDiscount>> returnDiscounts,
            Optional<List<OrderReturnTip>> returnTips,
            Optional<OrderRoundingAdjustment> roundingAdjustment,
            Optional<OrderMoneyAmounts> returnAmounts,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.sourceOrderId = sourceOrderId;
        this.returnLineItems = returnLineItems;
        this.returnServiceCharges = returnServiceCharges;
        this.returnTaxes = returnTaxes;
        this.returnDiscounts = returnDiscounts;
        this.returnTips = returnTips;
        this.roundingAdjustment = roundingAdjustment;
        this.returnAmounts = returnAmounts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the return only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return An order that contains the original sale of these return line items. This is unset
     * for unlinked returns.
     */
    @JsonIgnore
    public Optional<String> getSourceOrderId() {
        if (sourceOrderId == null) {
            return Optional.empty();
        }
        return sourceOrderId;
    }

    /**
     * @return A collection of line items that are being returned.
     */
    @JsonIgnore
    public Optional<List<OrderReturnLineItem>> getReturnLineItems() {
        if (returnLineItems == null) {
            return Optional.empty();
        }
        return returnLineItems;
    }

    /**
     * @return A collection of service charges that are being returned.
     */
    @JsonIgnore
    public Optional<List<OrderReturnServiceCharge>> getReturnServiceCharges() {
        if (returnServiceCharges == null) {
            return Optional.empty();
        }
        return returnServiceCharges;
    }

    /**
     * @return A collection of references to taxes being returned for an order, including the total
     * applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
     * order.
     */
    @JsonProperty("return_taxes")
    public Optional<List<OrderReturnTax>> getReturnTaxes() {
        return returnTaxes;
    }

    /**
     * @return A collection of references to discounts being returned for an order, including the total
     * applied discount amount to be returned. The discounts must reference a top-level discount ID
     * from the source order.
     */
    @JsonProperty("return_discounts")
    public Optional<List<OrderReturnDiscount>> getReturnDiscounts() {
        return returnDiscounts;
    }

    /**
     * @return A collection of references to tips being returned for an order.
     */
    @JsonIgnore
    public Optional<List<OrderReturnTip>> getReturnTips() {
        if (returnTips == null) {
            return Optional.empty();
        }
        return returnTips;
    }

    /**
     * @return A positive or negative rounding adjustment to the total value being returned. Adjustments are commonly
     * used to apply cash rounding when the minimum unit of the account is smaller than the lowest
     * physical denomination of the currency.
     */
    @JsonProperty("rounding_adjustment")
    public Optional<OrderRoundingAdjustment> getRoundingAdjustment() {
        return roundingAdjustment;
    }

    /**
     * @return An aggregate monetary value being returned by this return entry.
     */
    @JsonProperty("return_amounts")
    public Optional<OrderMoneyAmounts> getReturnAmounts() {
        return returnAmounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_order_id")
    private Optional<String> _getSourceOrderId() {
        return sourceOrderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("return_line_items")
    private Optional<List<OrderReturnLineItem>> _getReturnLineItems() {
        return returnLineItems;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("return_service_charges")
    private Optional<List<OrderReturnServiceCharge>> _getReturnServiceCharges() {
        return returnServiceCharges;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("return_tips")
    private Optional<List<OrderReturnTip>> _getReturnTips() {
        return returnTips;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderReturn && equalTo((OrderReturn) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderReturn other) {
        return uid.equals(other.uid)
                && sourceOrderId.equals(other.sourceOrderId)
                && returnLineItems.equals(other.returnLineItems)
                && returnServiceCharges.equals(other.returnServiceCharges)
                && returnTaxes.equals(other.returnTaxes)
                && returnDiscounts.equals(other.returnDiscounts)
                && returnTips.equals(other.returnTips)
                && roundingAdjustment.equals(other.roundingAdjustment)
                && returnAmounts.equals(other.returnAmounts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.sourceOrderId,
                this.returnLineItems,
                this.returnServiceCharges,
                this.returnTaxes,
                this.returnDiscounts,
                this.returnTips,
                this.roundingAdjustment,
                this.returnAmounts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> sourceOrderId = Optional.empty();

        private Optional<List<OrderReturnLineItem>> returnLineItems = Optional.empty();

        private Optional<List<OrderReturnServiceCharge>> returnServiceCharges = Optional.empty();

        private Optional<List<OrderReturnTax>> returnTaxes = Optional.empty();

        private Optional<List<OrderReturnDiscount>> returnDiscounts = Optional.empty();

        private Optional<List<OrderReturnTip>> returnTips = Optional.empty();

        private Optional<OrderRoundingAdjustment> roundingAdjustment = Optional.empty();

        private Optional<OrderMoneyAmounts> returnAmounts = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderReturn other) {
            uid(other.getUid());
            sourceOrderId(other.getSourceOrderId());
            returnLineItems(other.getReturnLineItems());
            returnServiceCharges(other.getReturnServiceCharges());
            returnTaxes(other.getReturnTaxes());
            returnDiscounts(other.getReturnDiscounts());
            returnTips(other.getReturnTips());
            roundingAdjustment(other.getRoundingAdjustment());
            returnAmounts(other.getReturnAmounts());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        @JsonSetter(value = "source_order_id", nulls = Nulls.SKIP)
        public Builder sourceOrderId(Optional<String> sourceOrderId) {
            this.sourceOrderId = sourceOrderId;
            return this;
        }

        public Builder sourceOrderId(String sourceOrderId) {
            this.sourceOrderId = Optional.ofNullable(sourceOrderId);
            return this;
        }

        public Builder sourceOrderId(Nullable<String> sourceOrderId) {
            if (sourceOrderId.isNull()) {
                this.sourceOrderId = null;
            } else if (sourceOrderId.isEmpty()) {
                this.sourceOrderId = Optional.empty();
            } else {
                this.sourceOrderId = Optional.of(sourceOrderId.get());
            }
            return this;
        }

        @JsonSetter(value = "return_line_items", nulls = Nulls.SKIP)
        public Builder returnLineItems(Optional<List<OrderReturnLineItem>> returnLineItems) {
            this.returnLineItems = returnLineItems;
            return this;
        }

        public Builder returnLineItems(List<OrderReturnLineItem> returnLineItems) {
            this.returnLineItems = Optional.ofNullable(returnLineItems);
            return this;
        }

        public Builder returnLineItems(Nullable<List<OrderReturnLineItem>> returnLineItems) {
            if (returnLineItems.isNull()) {
                this.returnLineItems = null;
            } else if (returnLineItems.isEmpty()) {
                this.returnLineItems = Optional.empty();
            } else {
                this.returnLineItems = Optional.of(returnLineItems.get());
            }
            return this;
        }

        @JsonSetter(value = "return_service_charges", nulls = Nulls.SKIP)
        public Builder returnServiceCharges(Optional<List<OrderReturnServiceCharge>> returnServiceCharges) {
            this.returnServiceCharges = returnServiceCharges;
            return this;
        }

        public Builder returnServiceCharges(List<OrderReturnServiceCharge> returnServiceCharges) {
            this.returnServiceCharges = Optional.ofNullable(returnServiceCharges);
            return this;
        }

        public Builder returnServiceCharges(Nullable<List<OrderReturnServiceCharge>> returnServiceCharges) {
            if (returnServiceCharges.isNull()) {
                this.returnServiceCharges = null;
            } else if (returnServiceCharges.isEmpty()) {
                this.returnServiceCharges = Optional.empty();
            } else {
                this.returnServiceCharges = Optional.of(returnServiceCharges.get());
            }
            return this;
        }

        @JsonSetter(value = "return_taxes", nulls = Nulls.SKIP)
        public Builder returnTaxes(Optional<List<OrderReturnTax>> returnTaxes) {
            this.returnTaxes = returnTaxes;
            return this;
        }

        public Builder returnTaxes(List<OrderReturnTax> returnTaxes) {
            this.returnTaxes = Optional.ofNullable(returnTaxes);
            return this;
        }

        @JsonSetter(value = "return_discounts", nulls = Nulls.SKIP)
        public Builder returnDiscounts(Optional<List<OrderReturnDiscount>> returnDiscounts) {
            this.returnDiscounts = returnDiscounts;
            return this;
        }

        public Builder returnDiscounts(List<OrderReturnDiscount> returnDiscounts) {
            this.returnDiscounts = Optional.ofNullable(returnDiscounts);
            return this;
        }

        @JsonSetter(value = "return_tips", nulls = Nulls.SKIP)
        public Builder returnTips(Optional<List<OrderReturnTip>> returnTips) {
            this.returnTips = returnTips;
            return this;
        }

        public Builder returnTips(List<OrderReturnTip> returnTips) {
            this.returnTips = Optional.ofNullable(returnTips);
            return this;
        }

        public Builder returnTips(Nullable<List<OrderReturnTip>> returnTips) {
            if (returnTips.isNull()) {
                this.returnTips = null;
            } else if (returnTips.isEmpty()) {
                this.returnTips = Optional.empty();
            } else {
                this.returnTips = Optional.of(returnTips.get());
            }
            return this;
        }

        @JsonSetter(value = "rounding_adjustment", nulls = Nulls.SKIP)
        public Builder roundingAdjustment(Optional<OrderRoundingAdjustment> roundingAdjustment) {
            this.roundingAdjustment = roundingAdjustment;
            return this;
        }

        public Builder roundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
            this.roundingAdjustment = Optional.ofNullable(roundingAdjustment);
            return this;
        }

        @JsonSetter(value = "return_amounts", nulls = Nulls.SKIP)
        public Builder returnAmounts(Optional<OrderMoneyAmounts> returnAmounts) {
            this.returnAmounts = returnAmounts;
            return this;
        }

        public Builder returnAmounts(OrderMoneyAmounts returnAmounts) {
            this.returnAmounts = Optional.ofNullable(returnAmounts);
            return this;
        }

        public OrderReturn build() {
            return new OrderReturn(
                    uid,
                    sourceOrderId,
                    returnLineItems,
                    returnServiceCharges,
                    returnTaxes,
                    returnDiscounts,
                    returnTips,
                    roundingAdjustment,
                    returnAmounts,
                    additionalProperties);
        }
    }
}
