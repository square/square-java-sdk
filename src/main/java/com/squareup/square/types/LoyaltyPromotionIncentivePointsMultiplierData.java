/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyPromotionIncentivePointsMultiplierData.Builder.class)
public final class LoyaltyPromotionIncentivePointsMultiplierData {
    private final Optional<Integer> pointsMultiplier;

    private final Optional<String> multiplier;

    private final Map<String, Object> additionalProperties;

    private LoyaltyPromotionIncentivePointsMultiplierData(
            Optional<Integer> pointsMultiplier, Optional<String> multiplier, Map<String, Object> additionalProperties) {
        this.pointsMultiplier = pointsMultiplier;
        this.multiplier = multiplier;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The multiplier used to calculate the number of points earned each time the promotion
     * is triggered. For example, suppose a purchase qualifies for 5 points from the base loyalty program.
     * If the purchase also qualifies for a <code>POINTS_MULTIPLIER</code> promotion incentive with a <code>points_multiplier</code>
     * of 3, the buyer earns a total of 15 points (5 program points x 3 promotion multiplier = 15 points).
     * <p>DEPRECATED at version 2023-08-16. Replaced by the <code>multiplier</code> field.</p>
     * <p>One of the following is required when specifying a points multiplier:</p>
     * <ul>
     * <li>(Recommended) The <code>multiplier</code> field.</li>
     * <li>This deprecated <code>points_multiplier</code> field. If provided in the request, Square also returns <code>multiplier</code>
     * with the equivalent value.</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<Integer> getPointsMultiplier() {
        if (pointsMultiplier == null) {
            return Optional.empty();
        }
        return pointsMultiplier;
    }

    /**
     * @return The multiplier used to calculate the number of points earned each time the promotion is triggered,
     * specified as a string representation of a decimal. Square supports multipliers up to 10x, with three
     * point precision for decimal multipliers. For example, suppose a purchase qualifies for 4 points from the
     * base loyalty program. If the purchase also qualifies for a <code>POINTS_MULTIPLIER</code> promotion incentive with a
     * <code>multiplier</code> of &quot;1.5&quot;, the buyer earns a total of 6 points (4 program points x 1.5 promotion multiplier = 6 points).
     * Fractional points are dropped.
     * <p>One of the following is required when specifying a points multiplier:</p>
     * <ul>
     * <li>(Recommended) This <code>multiplier</code> field.</li>
     * <li>The deprecated <code>points_multiplier</code> field. If provided in the request, Square also returns <code>multiplier</code>
     * with the equivalent value.</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<String> getMultiplier() {
        if (multiplier == null) {
            return Optional.empty();
        }
        return multiplier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("points_multiplier")
    private Optional<Integer> _getPointsMultiplier() {
        return pointsMultiplier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("multiplier")
    private Optional<String> _getMultiplier() {
        return multiplier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyPromotionIncentivePointsMultiplierData
                && equalTo((LoyaltyPromotionIncentivePointsMultiplierData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyPromotionIncentivePointsMultiplierData other) {
        return pointsMultiplier.equals(other.pointsMultiplier) && multiplier.equals(other.multiplier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pointsMultiplier, this.multiplier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> pointsMultiplier = Optional.empty();

        private Optional<String> multiplier = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoyaltyPromotionIncentivePointsMultiplierData other) {
            pointsMultiplier(other.getPointsMultiplier());
            multiplier(other.getMultiplier());
            return this;
        }

        @JsonSetter(value = "points_multiplier", nulls = Nulls.SKIP)
        public Builder pointsMultiplier(Optional<Integer> pointsMultiplier) {
            this.pointsMultiplier = pointsMultiplier;
            return this;
        }

        public Builder pointsMultiplier(Integer pointsMultiplier) {
            this.pointsMultiplier = Optional.ofNullable(pointsMultiplier);
            return this;
        }

        public Builder pointsMultiplier(Nullable<Integer> pointsMultiplier) {
            if (pointsMultiplier.isNull()) {
                this.pointsMultiplier = null;
            } else if (pointsMultiplier.isEmpty()) {
                this.pointsMultiplier = Optional.empty();
            } else {
                this.pointsMultiplier = Optional.of(pointsMultiplier.get());
            }
            return this;
        }

        @JsonSetter(value = "multiplier", nulls = Nulls.SKIP)
        public Builder multiplier(Optional<String> multiplier) {
            this.multiplier = multiplier;
            return this;
        }

        public Builder multiplier(String multiplier) {
            this.multiplier = Optional.ofNullable(multiplier);
            return this;
        }

        public Builder multiplier(Nullable<String> multiplier) {
            if (multiplier.isNull()) {
                this.multiplier = null;
            } else if (multiplier.isEmpty()) {
                this.multiplier = Optional.empty();
            } else {
                this.multiplier = Optional.of(multiplier.get());
            }
            return this;
        }

        public LoyaltyPromotionIncentivePointsMultiplierData build() {
            return new LoyaltyPromotionIncentivePointsMultiplierData(
                    pointsMultiplier, multiplier, additionalProperties);
        }
    }
}
