/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class InvoicePaymentReminderStatus {
    public static final InvoicePaymentReminderStatus NOT_APPLICABLE =
            new InvoicePaymentReminderStatus(Value.NOT_APPLICABLE, "NOT_APPLICABLE");

    public static final InvoicePaymentReminderStatus SENT = new InvoicePaymentReminderStatus(Value.SENT, "SENT");

    public static final InvoicePaymentReminderStatus PENDING =
            new InvoicePaymentReminderStatus(Value.PENDING, "PENDING");

    private final Value value;

    private final String string;

    InvoicePaymentReminderStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof InvoicePaymentReminderStatus
                        && this.string.equals(((InvoicePaymentReminderStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case NOT_APPLICABLE:
                return visitor.visitNotApplicable();
            case SENT:
                return visitor.visitSent();
            case PENDING:
                return visitor.visitPending();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static InvoicePaymentReminderStatus valueOf(String value) {
        switch (value) {
            case "NOT_APPLICABLE":
                return NOT_APPLICABLE;
            case "SENT":
                return SENT;
            case "PENDING":
                return PENDING;
            default:
                return new InvoicePaymentReminderStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        PENDING,

        NOT_APPLICABLE,

        SENT,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitPending();

        T visitNotApplicable();

        T visitSent();

        T visitUnknown(String unknownType);
    }
}
