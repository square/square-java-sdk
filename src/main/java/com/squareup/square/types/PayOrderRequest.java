/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayOrderRequest.Builder.class)
public final class PayOrderRequest {
    private final String orderId;

    private final String idempotencyKey;

    private final Optional<Integer> orderVersion;

    private final Optional<List<String>> paymentIds;

    private final Map<String, Object> additionalProperties;

    private PayOrderRequest(
            String orderId,
            String idempotencyKey,
            Optional<Integer> orderVersion,
            Optional<List<String>> paymentIds,
            Map<String, Object> additionalProperties) {
        this.orderId = orderId;
        this.idempotencyKey = idempotencyKey;
        this.orderVersion = orderVersion;
        this.paymentIds = paymentIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the order being paid.
     */
    @JsonProperty("order_id")
    public String getOrderId() {
        return orderId;
    }

    /**
     * @return A value you specify that uniquely identifies this request among requests you have sent. If
     * you are unsure whether a particular payment request was completed successfully, you can reattempt
     * it with the same idempotency key without worrying about duplicate payments.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The version of the order being paid. If not supplied, the latest version will be paid.
     */
    @JsonIgnore
    public Optional<Integer> getOrderVersion() {
        if (orderVersion == null) {
            return Optional.empty();
        }
        return orderVersion;
    }

    /**
     * @return The IDs of the <a href="entity:Payment">payments</a> to collect.
     * The payment total must match the order total.
     */
    @JsonIgnore
    public Optional<List<String>> getPaymentIds() {
        if (paymentIds == null) {
            return Optional.empty();
        }
        return paymentIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_version")
    private Optional<Integer> _getOrderVersion() {
        return orderVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_ids")
    private Optional<List<String>> _getPaymentIds() {
        return paymentIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayOrderRequest && equalTo((PayOrderRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayOrderRequest other) {
        return orderId.equals(other.orderId)
                && idempotencyKey.equals(other.idempotencyKey)
                && orderVersion.equals(other.orderVersion)
                && paymentIds.equals(other.paymentIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orderId, this.idempotencyKey, this.orderVersion, this.paymentIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderIdStage builder() {
        return new Builder();
    }

    public interface OrderIdStage {
        IdempotencyKeyStage orderId(@NotNull String orderId);

        Builder from(PayOrderRequest other);
    }

    public interface IdempotencyKeyStage {
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface _FinalStage {
        PayOrderRequest build();

        _FinalStage orderVersion(Optional<Integer> orderVersion);

        _FinalStage orderVersion(Integer orderVersion);

        _FinalStage orderVersion(Nullable<Integer> orderVersion);

        _FinalStage paymentIds(Optional<List<String>> paymentIds);

        _FinalStage paymentIds(List<String> paymentIds);

        _FinalStage paymentIds(Nullable<List<String>> paymentIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrderIdStage, IdempotencyKeyStage, _FinalStage {
        private String orderId;

        private String idempotencyKey;

        private Optional<List<String>> paymentIds = Optional.empty();

        private Optional<Integer> orderVersion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PayOrderRequest other) {
            orderId(other.getOrderId());
            idempotencyKey(other.getIdempotencyKey());
            orderVersion(other.getOrderVersion());
            paymentIds(other.getPaymentIds());
            return this;
        }

        /**
         * <p>The ID of the order being paid.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order_id")
        public IdempotencyKeyStage orderId(@NotNull String orderId) {
            this.orderId = Objects.requireNonNull(orderId, "orderId must not be null");
            return this;
        }

        /**
         * <p>A value you specify that uniquely identifies this request among requests you have sent. If
         * you are unsure whether a particular payment request was completed successfully, you can reattempt
         * it with the same idempotency key without worrying about duplicate payments.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The IDs of the <a href="entity:Payment">payments</a> to collect.
         * The payment total must match the order total.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentIds(Nullable<List<String>> paymentIds) {
            if (paymentIds.isNull()) {
                this.paymentIds = null;
            } else if (paymentIds.isEmpty()) {
                this.paymentIds = Optional.empty();
            } else {
                this.paymentIds = Optional.of(paymentIds.get());
            }
            return this;
        }

        /**
         * <p>The IDs of the <a href="entity:Payment">payments</a> to collect.
         * The payment total must match the order total.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentIds(List<String> paymentIds) {
            this.paymentIds = Optional.ofNullable(paymentIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payment_ids", nulls = Nulls.SKIP)
        public _FinalStage paymentIds(Optional<List<String>> paymentIds) {
            this.paymentIds = paymentIds;
            return this;
        }

        /**
         * <p>The version of the order being paid. If not supplied, the latest version will be paid.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderVersion(Nullable<Integer> orderVersion) {
            if (orderVersion.isNull()) {
                this.orderVersion = null;
            } else if (orderVersion.isEmpty()) {
                this.orderVersion = Optional.empty();
            } else {
                this.orderVersion = Optional.of(orderVersion.get());
            }
            return this;
        }

        /**
         * <p>The version of the order being paid. If not supplied, the latest version will be paid.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderVersion(Integer orderVersion) {
            this.orderVersion = Optional.ofNullable(orderVersion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "order_version", nulls = Nulls.SKIP)
        public _FinalStage orderVersion(Optional<Integer> orderVersion) {
            this.orderVersion = orderVersion;
            return this;
        }

        @java.lang.Override
        public PayOrderRequest build() {
            return new PayOrderRequest(orderId, idempotencyKey, orderVersion, paymentIds, additionalProperties);
        }
    }
}
