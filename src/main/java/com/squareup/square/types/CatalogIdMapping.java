/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogIdMapping.Builder.class)
public final class CatalogIdMapping {
    private final Optional<String> clientObjectId;

    private final Optional<String> objectId;

    private final Map<String, Object> additionalProperties;

    private CatalogIdMapping(
            Optional<String> clientObjectId, Optional<String> objectId, Map<String, Object> additionalProperties) {
        this.clientObjectId = clientObjectId;
        this.objectId = objectId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The client-supplied temporary <code>#</code>-prefixed ID for a new <code>CatalogObject</code>.
     */
    @JsonIgnore
    public Optional<String> getClientObjectId() {
        if (clientObjectId == null) {
            return Optional.empty();
        }
        return clientObjectId;
    }

    /**
     * @return The permanent ID for the CatalogObject created by the server.
     */
    @JsonIgnore
    public Optional<String> getObjectId() {
        if (objectId == null) {
            return Optional.empty();
        }
        return objectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("client_object_id")
    private Optional<String> _getClientObjectId() {
        return clientObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("object_id")
    private Optional<String> _getObjectId() {
        return objectId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogIdMapping && equalTo((CatalogIdMapping) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogIdMapping other) {
        return clientObjectId.equals(other.clientObjectId) && objectId.equals(other.objectId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.clientObjectId, this.objectId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> clientObjectId = Optional.empty();

        private Optional<String> objectId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogIdMapping other) {
            clientObjectId(other.getClientObjectId());
            objectId(other.getObjectId());
            return this;
        }

        /**
         * <p>The client-supplied temporary <code>#</code>-prefixed ID for a new <code>CatalogObject</code>.</p>
         */
        @JsonSetter(value = "client_object_id", nulls = Nulls.SKIP)
        public Builder clientObjectId(Optional<String> clientObjectId) {
            this.clientObjectId = clientObjectId;
            return this;
        }

        public Builder clientObjectId(String clientObjectId) {
            this.clientObjectId = Optional.ofNullable(clientObjectId);
            return this;
        }

        public Builder clientObjectId(Nullable<String> clientObjectId) {
            if (clientObjectId.isNull()) {
                this.clientObjectId = null;
            } else if (clientObjectId.isEmpty()) {
                this.clientObjectId = Optional.empty();
            } else {
                this.clientObjectId = Optional.of(clientObjectId.get());
            }
            return this;
        }

        /**
         * <p>The permanent ID for the CatalogObject created by the server.</p>
         */
        @JsonSetter(value = "object_id", nulls = Nulls.SKIP)
        public Builder objectId(Optional<String> objectId) {
            this.objectId = objectId;
            return this;
        }

        public Builder objectId(String objectId) {
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        public Builder objectId(Nullable<String> objectId) {
            if (objectId.isNull()) {
                this.objectId = null;
            } else if (objectId.isEmpty()) {
                this.objectId = Optional.empty();
            } else {
                this.objectId = Optional.of(objectId.get());
            }
            return this;
        }

        public CatalogIdMapping build() {
            return new CatalogIdMapping(clientObjectId, objectId, additionalProperties);
        }
    }
}
