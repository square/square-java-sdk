/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CashPaymentDetails.Builder.class)
public final class CashPaymentDetails {
    private final Money buyerSuppliedMoney;

    private final Optional<Money> changeBackMoney;

    private final Map<String, Object> additionalProperties;

    private CashPaymentDetails(
            Money buyerSuppliedMoney, Optional<Money> changeBackMoney, Map<String, Object> additionalProperties) {
        this.buyerSuppliedMoney = buyerSuppliedMoney;
        this.changeBackMoney = changeBackMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount and currency of the money supplied by the buyer.
     */
    @JsonProperty("buyer_supplied_money")
    public Money getBuyerSuppliedMoney() {
        return buyerSuppliedMoney;
    }

    /**
     * @return The amount of change due back to the buyer.
     * This read-only field is calculated
     * from the <code>amount_money</code> and <code>buyer_supplied_money</code> fields.
     */
    @JsonProperty("change_back_money")
    public Optional<Money> getChangeBackMoney() {
        return changeBackMoney;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CashPaymentDetails && equalTo((CashPaymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CashPaymentDetails other) {
        return buyerSuppliedMoney.equals(other.buyerSuppliedMoney) && changeBackMoney.equals(other.changeBackMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.buyerSuppliedMoney, this.changeBackMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BuyerSuppliedMoneyStage builder() {
        return new Builder();
    }

    public interface BuyerSuppliedMoneyStage {
        /**
         * <p>The amount and currency of the money supplied by the buyer.</p>
         */
        _FinalStage buyerSuppliedMoney(@NotNull Money buyerSuppliedMoney);

        Builder from(CashPaymentDetails other);
    }

    public interface _FinalStage {
        CashPaymentDetails build();

        /**
         * <p>The amount of change due back to the buyer.
         * This read-only field is calculated
         * from the <code>amount_money</code> and <code>buyer_supplied_money</code> fields.</p>
         */
        _FinalStage changeBackMoney(Optional<Money> changeBackMoney);

        _FinalStage changeBackMoney(Money changeBackMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BuyerSuppliedMoneyStage, _FinalStage {
        private Money buyerSuppliedMoney;

        private Optional<Money> changeBackMoney = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CashPaymentDetails other) {
            buyerSuppliedMoney(other.getBuyerSuppliedMoney());
            changeBackMoney(other.getChangeBackMoney());
            return this;
        }

        /**
         * <p>The amount and currency of the money supplied by the buyer.</p>
         * <p>The amount and currency of the money supplied by the buyer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("buyer_supplied_money")
        public _FinalStage buyerSuppliedMoney(@NotNull Money buyerSuppliedMoney) {
            this.buyerSuppliedMoney = Objects.requireNonNull(buyerSuppliedMoney, "buyerSuppliedMoney must not be null");
            return this;
        }

        /**
         * <p>The amount of change due back to the buyer.
         * This read-only field is calculated
         * from the <code>amount_money</code> and <code>buyer_supplied_money</code> fields.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage changeBackMoney(Money changeBackMoney) {
            this.changeBackMoney = Optional.ofNullable(changeBackMoney);
            return this;
        }

        /**
         * <p>The amount of change due back to the buyer.
         * This read-only field is calculated
         * from the <code>amount_money</code> and <code>buyer_supplied_money</code> fields.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "change_back_money", nulls = Nulls.SKIP)
        public _FinalStage changeBackMoney(Optional<Money> changeBackMoney) {
            this.changeBackMoney = changeBackMoney;
            return this;
        }

        @java.lang.Override
        public CashPaymentDetails build() {
            return new CashPaymentDetails(buyerSuppliedMoney, changeBackMoney, additionalProperties);
        }
    }
}
