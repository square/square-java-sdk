/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LocationBookingProfile.Builder.class)
public final class LocationBookingProfile {
    private final Optional<String> locationId;

    private final Optional<String> bookingSiteUrl;

    private final Optional<Boolean> onlineBookingEnabled;

    private final Map<String, Object> additionalProperties;

    private LocationBookingProfile(
            Optional<String> locationId,
            Optional<String> bookingSiteUrl,
            Optional<Boolean> onlineBookingEnabled,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.bookingSiteUrl = bookingSiteUrl;
        this.onlineBookingEnabled = onlineBookingEnabled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:Location">location</a>.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return Url for the online booking site for this location.
     */
    @JsonIgnore
    public Optional<String> getBookingSiteUrl() {
        if (bookingSiteUrl == null) {
            return Optional.empty();
        }
        return bookingSiteUrl;
    }

    /**
     * @return Indicates whether the location is enabled for online booking.
     */
    @JsonIgnore
    public Optional<Boolean> getOnlineBookingEnabled() {
        if (onlineBookingEnabled == null) {
            return Optional.empty();
        }
        return onlineBookingEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("booking_site_url")
    private Optional<String> _getBookingSiteUrl() {
        return bookingSiteUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("online_booking_enabled")
    private Optional<Boolean> _getOnlineBookingEnabled() {
        return onlineBookingEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LocationBookingProfile && equalTo((LocationBookingProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LocationBookingProfile other) {
        return locationId.equals(other.locationId)
                && bookingSiteUrl.equals(other.bookingSiteUrl)
                && onlineBookingEnabled.equals(other.onlineBookingEnabled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.bookingSiteUrl, this.onlineBookingEnabled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> locationId = Optional.empty();

        private Optional<String> bookingSiteUrl = Optional.empty();

        private Optional<Boolean> onlineBookingEnabled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LocationBookingProfile other) {
            locationId(other.getLocationId());
            bookingSiteUrl(other.getBookingSiteUrl());
            onlineBookingEnabled(other.getOnlineBookingEnabled());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Location">location</a>.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>Url for the online booking site for this location.</p>
         */
        @JsonSetter(value = "booking_site_url", nulls = Nulls.SKIP)
        public Builder bookingSiteUrl(Optional<String> bookingSiteUrl) {
            this.bookingSiteUrl = bookingSiteUrl;
            return this;
        }

        public Builder bookingSiteUrl(String bookingSiteUrl) {
            this.bookingSiteUrl = Optional.ofNullable(bookingSiteUrl);
            return this;
        }

        public Builder bookingSiteUrl(Nullable<String> bookingSiteUrl) {
            if (bookingSiteUrl.isNull()) {
                this.bookingSiteUrl = null;
            } else if (bookingSiteUrl.isEmpty()) {
                this.bookingSiteUrl = Optional.empty();
            } else {
                this.bookingSiteUrl = Optional.of(bookingSiteUrl.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether the location is enabled for online booking.</p>
         */
        @JsonSetter(value = "online_booking_enabled", nulls = Nulls.SKIP)
        public Builder onlineBookingEnabled(Optional<Boolean> onlineBookingEnabled) {
            this.onlineBookingEnabled = onlineBookingEnabled;
            return this;
        }

        public Builder onlineBookingEnabled(Boolean onlineBookingEnabled) {
            this.onlineBookingEnabled = Optional.ofNullable(onlineBookingEnabled);
            return this;
        }

        public Builder onlineBookingEnabled(Nullable<Boolean> onlineBookingEnabled) {
            if (onlineBookingEnabled.isNull()) {
                this.onlineBookingEnabled = null;
            } else if (onlineBookingEnabled.isEmpty()) {
                this.onlineBookingEnabled = Optional.empty();
            } else {
                this.onlineBookingEnabled = Optional.of(onlineBookingEnabled.get());
            }
            return this;
        }

        public LocationBookingProfile build() {
            return new LocationBookingProfile(locationId, bookingSiteUrl, onlineBookingEnabled, additionalProperties);
        }
    }
}
