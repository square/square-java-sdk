/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogStockConversion.Builder.class)
public final class CatalogStockConversion {
    private final String stockableItemVariationId;

    private final String stockableQuantity;

    private final String nonstockableQuantity;

    private final Map<String, Object> additionalProperties;

    private CatalogStockConversion(
            String stockableItemVariationId,
            String stockableQuantity,
            String nonstockableQuantity,
            Map<String, Object> additionalProperties) {
        this.stockableItemVariationId = stockableItemVariationId;
        this.stockableQuantity = stockableQuantity;
        this.nonstockableQuantity = nonstockableQuantity;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return References to the stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
     * for this stock conversion. Selling, receiving or recounting the non-stockable <code>CatalogItemVariation</code>
     * defined with a stock conversion results in adjustments of this stockable <code>CatalogItemVariation</code>.
     * This immutable field must reference a stockable <code>CatalogItemVariation</code>
     * that shares the parent <a href="entity:CatalogItem">CatalogItem</a> of the converted <code>CatalogItemVariation.</code>
     */
    @JsonProperty("stockable_item_variation_id")
    public String getStockableItemVariationId() {
        return stockableItemVariationId;
    }

    /**
     * @return The quantity of the stockable item variation (as identified by <code>stockable_item_variation_id</code>)
     * equivalent to the non-stockable item variation quantity (as specified in <code>nonstockable_quantity</code>)
     * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
     * up to 10 digits before the decimal point and up to 5 digits after the decimal point.
     */
    @JsonProperty("stockable_quantity")
    public String getStockableQuantity() {
        return stockableQuantity;
    }

    /**
     * @return The converted equivalent quantity of the non-stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
     * in its measurement unit. The <code>stockable_quantity</code> value and this <code>nonstockable_quantity</code> value together
     * define the conversion ratio between stockable item variation and the non-stockable item variation.
     * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
     * and up to 5 digits after the decimal point.
     */
    @JsonProperty("nonstockable_quantity")
    public String getNonstockableQuantity() {
        return nonstockableQuantity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogStockConversion && equalTo((CatalogStockConversion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogStockConversion other) {
        return stockableItemVariationId.equals(other.stockableItemVariationId)
                && stockableQuantity.equals(other.stockableQuantity)
                && nonstockableQuantity.equals(other.nonstockableQuantity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.stockableItemVariationId, this.stockableQuantity, this.nonstockableQuantity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StockableItemVariationIdStage builder() {
        return new Builder();
    }

    public interface StockableItemVariationIdStage {
        /**
         * <p>References to the stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * for this stock conversion. Selling, receiving or recounting the non-stockable <code>CatalogItemVariation</code>
         * defined with a stock conversion results in adjustments of this stockable <code>CatalogItemVariation</code>.
         * This immutable field must reference a stockable <code>CatalogItemVariation</code>
         * that shares the parent <a href="entity:CatalogItem">CatalogItem</a> of the converted <code>CatalogItemVariation.</code></p>
         */
        StockableQuantityStage stockableItemVariationId(@NotNull String stockableItemVariationId);

        Builder from(CatalogStockConversion other);
    }

    public interface StockableQuantityStage {
        /**
         * <p>The quantity of the stockable item variation (as identified by <code>stockable_item_variation_id</code>)
         * equivalent to the non-stockable item variation quantity (as specified in <code>nonstockable_quantity</code>)
         * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
         * up to 10 digits before the decimal point and up to 5 digits after the decimal point.</p>
         */
        NonstockableQuantityStage stockableQuantity(@NotNull String stockableQuantity);
    }

    public interface NonstockableQuantityStage {
        /**
         * <p>The converted equivalent quantity of the non-stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * in its measurement unit. The <code>stockable_quantity</code> value and this <code>nonstockable_quantity</code> value together
         * define the conversion ratio between stockable item variation and the non-stockable item variation.
         * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
         * and up to 5 digits after the decimal point.</p>
         */
        _FinalStage nonstockableQuantity(@NotNull String nonstockableQuantity);
    }

    public interface _FinalStage {
        CatalogStockConversion build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StockableItemVariationIdStage, StockableQuantityStage, NonstockableQuantityStage, _FinalStage {
        private String stockableItemVariationId;

        private String stockableQuantity;

        private String nonstockableQuantity;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogStockConversion other) {
            stockableItemVariationId(other.getStockableItemVariationId());
            stockableQuantity(other.getStockableQuantity());
            nonstockableQuantity(other.getNonstockableQuantity());
            return this;
        }

        /**
         * <p>References to the stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * for this stock conversion. Selling, receiving or recounting the non-stockable <code>CatalogItemVariation</code>
         * defined with a stock conversion results in adjustments of this stockable <code>CatalogItemVariation</code>.
         * This immutable field must reference a stockable <code>CatalogItemVariation</code>
         * that shares the parent <a href="entity:CatalogItem">CatalogItem</a> of the converted <code>CatalogItemVariation.</code></p>
         * <p>References to the stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * for this stock conversion. Selling, receiving or recounting the non-stockable <code>CatalogItemVariation</code>
         * defined with a stock conversion results in adjustments of this stockable <code>CatalogItemVariation</code>.
         * This immutable field must reference a stockable <code>CatalogItemVariation</code>
         * that shares the parent <a href="entity:CatalogItem">CatalogItem</a> of the converted <code>CatalogItemVariation.</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("stockable_item_variation_id")
        public StockableQuantityStage stockableItemVariationId(@NotNull String stockableItemVariationId) {
            this.stockableItemVariationId =
                    Objects.requireNonNull(stockableItemVariationId, "stockableItemVariationId must not be null");
            return this;
        }

        /**
         * <p>The quantity of the stockable item variation (as identified by <code>stockable_item_variation_id</code>)
         * equivalent to the non-stockable item variation quantity (as specified in <code>nonstockable_quantity</code>)
         * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
         * up to 10 digits before the decimal point and up to 5 digits after the decimal point.</p>
         * <p>The quantity of the stockable item variation (as identified by <code>stockable_item_variation_id</code>)
         * equivalent to the non-stockable item variation quantity (as specified in <code>nonstockable_quantity</code>)
         * as defined by this stock conversion.  It accepts a decimal number in a string format that can take
         * up to 10 digits before the decimal point and up to 5 digits after the decimal point.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("stockable_quantity")
        public NonstockableQuantityStage stockableQuantity(@NotNull String stockableQuantity) {
            this.stockableQuantity = Objects.requireNonNull(stockableQuantity, "stockableQuantity must not be null");
            return this;
        }

        /**
         * <p>The converted equivalent quantity of the non-stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * in its measurement unit. The <code>stockable_quantity</code> value and this <code>nonstockable_quantity</code> value together
         * define the conversion ratio between stockable item variation and the non-stockable item variation.
         * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
         * and up to 5 digits after the decimal point.</p>
         * <p>The converted equivalent quantity of the non-stockable <a href="entity:CatalogItemVariation">CatalogItemVariation</a>
         * in its measurement unit. The <code>stockable_quantity</code> value and this <code>nonstockable_quantity</code> value together
         * define the conversion ratio between stockable item variation and the non-stockable item variation.
         * It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
         * and up to 5 digits after the decimal point.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("nonstockable_quantity")
        public _FinalStage nonstockableQuantity(@NotNull String nonstockableQuantity) {
            this.nonstockableQuantity =
                    Objects.requireNonNull(nonstockableQuantity, "nonstockableQuantity must not be null");
            return this;
        }

        @java.lang.Override
        public CatalogStockConversion build() {
            return new CatalogStockConversion(
                    stockableItemVariationId, stockableQuantity, nonstockableQuantity, additionalProperties);
        }
    }
}
