/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderQuantityUnit.Builder.class)
public final class OrderQuantityUnit {
    private final Optional<MeasurementUnit> measurementUnit;

    private final Optional<Integer> precision;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Map<String, Object> additionalProperties;

    private OrderQuantityUnit(
            Optional<MeasurementUnit> measurementUnit,
            Optional<Integer> precision,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Map<String, Object> additionalProperties) {
        this.measurementUnit = measurementUnit;
        this.precision = precision;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A <a href="entity:MeasurementUnit">MeasurementUnit</a> that represents the
     * unit of measure for the quantity.
     */
    @JsonProperty("measurement_unit")
    public Optional<MeasurementUnit> getMeasurementUnit() {
        return measurementUnit;
    }

    /**
     * @return For non-integer quantities, represents the number of digits after the decimal point that are
     * recorded for this quantity.
     * <p>For example, a precision of 1 allows quantities such as <code>&quot;1.0&quot;</code> and <code>&quot;1.1&quot;</code>, but not <code>&quot;1.01&quot;</code>.</p>
     * <p>Min: 0. Max: 5.</p>
     */
    @JsonIgnore
    public Optional<Integer> getPrecision() {
        if (precision == null) {
            return Optional.empty();
        }
        return precision;
    }

    /**
     * @return The catalog object ID referencing the
     * <a href="entity:CatalogMeasurementUnit">CatalogMeasurementUnit</a>.
     * <p>This field is set when this is a catalog-backed measurement unit.</p>
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this measurement unit references.
     * <p>This field is set when this is a catalog-backed measurement unit.</p>
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("precision")
    private Optional<Integer> _getPrecision() {
        return precision;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderQuantityUnit && equalTo((OrderQuantityUnit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderQuantityUnit other) {
        return measurementUnit.equals(other.measurementUnit)
                && precision.equals(other.precision)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.measurementUnit, this.precision, this.catalogObjectId, this.catalogVersion);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MeasurementUnit> measurementUnit = Optional.empty();

        private Optional<Integer> precision = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderQuantityUnit other) {
            measurementUnit(other.getMeasurementUnit());
            precision(other.getPrecision());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            return this;
        }

        /**
         * <p>A <a href="entity:MeasurementUnit">MeasurementUnit</a> that represents the
         * unit of measure for the quantity.</p>
         */
        @JsonSetter(value = "measurement_unit", nulls = Nulls.SKIP)
        public Builder measurementUnit(Optional<MeasurementUnit> measurementUnit) {
            this.measurementUnit = measurementUnit;
            return this;
        }

        public Builder measurementUnit(MeasurementUnit measurementUnit) {
            this.measurementUnit = Optional.ofNullable(measurementUnit);
            return this;
        }

        /**
         * <p>For non-integer quantities, represents the number of digits after the decimal point that are
         * recorded for this quantity.</p>
         * <p>For example, a precision of 1 allows quantities such as <code>&quot;1.0&quot;</code> and <code>&quot;1.1&quot;</code>, but not <code>&quot;1.01&quot;</code>.</p>
         * <p>Min: 0. Max: 5.</p>
         */
        @JsonSetter(value = "precision", nulls = Nulls.SKIP)
        public Builder precision(Optional<Integer> precision) {
            this.precision = precision;
            return this;
        }

        public Builder precision(Integer precision) {
            this.precision = Optional.ofNullable(precision);
            return this;
        }

        public Builder precision(Nullable<Integer> precision) {
            if (precision.isNull()) {
                this.precision = null;
            } else if (precision.isEmpty()) {
                this.precision = Optional.empty();
            } else {
                this.precision = Optional.of(precision.get());
            }
            return this;
        }

        /**
         * <p>The catalog object ID referencing the
         * <a href="entity:CatalogMeasurementUnit">CatalogMeasurementUnit</a>.</p>
         * <p>This field is set when this is a catalog-backed measurement unit.</p>
         */
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The version of the catalog object that this measurement unit references.</p>
         * <p>This field is set when this is a catalog-backed measurement unit.</p>
         */
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public Builder catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        public Builder catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        public Builder catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        public OrderQuantityUnit build() {
            return new OrderQuantityUnit(
                    measurementUnit, precision, catalogObjectId, catalogVersion, additionalProperties);
        }
    }
}
