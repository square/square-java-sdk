/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyProgram.Builder.class)
public final class LoyaltyProgram {
    private final Optional<String> id;

    private final Optional<LoyaltyProgramStatus> status;

    private final Optional<List<LoyaltyProgramRewardTier>> rewardTiers;

    private final Optional<LoyaltyProgramExpirationPolicy> expirationPolicy;

    private final Optional<LoyaltyProgramTerminology> terminology;

    private final Optional<List<String>> locationIds;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<List<LoyaltyProgramAccrualRule>> accrualRules;

    private final Map<String, Object> additionalProperties;

    private LoyaltyProgram(
            Optional<String> id,
            Optional<LoyaltyProgramStatus> status,
            Optional<List<LoyaltyProgramRewardTier>> rewardTiers,
            Optional<LoyaltyProgramExpirationPolicy> expirationPolicy,
            Optional<LoyaltyProgramTerminology> terminology,
            Optional<List<String>> locationIds,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<List<LoyaltyProgramAccrualRule>> accrualRules,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.rewardTiers = rewardTiers;
        this.expirationPolicy = expirationPolicy;
        this.terminology = terminology;
        this.locationIds = locationIds;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.accrualRules = accrualRules;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the loyalty program. Updates to
     * the loyalty program do not modify the identifier.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return Whether the program is currently active.
     * See <a href="#type-loyaltyprogramstatus">LoyaltyProgramStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<LoyaltyProgramStatus> getStatus() {
        return status;
    }

    /**
     * @return The list of rewards for buyers, sorted by ascending points.
     */
    @JsonIgnore
    public Optional<List<LoyaltyProgramRewardTier>> getRewardTiers() {
        if (rewardTiers == null) {
            return Optional.empty();
        }
        return rewardTiers;
    }

    /**
     * @return If present, details for how points expire.
     */
    @JsonProperty("expiration_policy")
    public Optional<LoyaltyProgramExpirationPolicy> getExpirationPolicy() {
        return expirationPolicy;
    }

    /**
     * @return A cosmetic name for the “points” currency.
     */
    @JsonProperty("terminology")
    public Optional<LoyaltyProgramTerminology> getTerminology() {
        return terminology;
    }

    /**
     * @return The <a href="entity:Location">locations</a> at which the program is active.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return The timestamp when the program was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the reward was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Defines how buyers can earn loyalty points from the base loyalty program.
     * To check for associated <a href="entity:LoyaltyPromotion">loyalty promotions</a> that enable
     * buyers to earn extra points, call <a href="api-endpoint:Loyalty-ListLoyaltyPromotions">ListLoyaltyPromotions</a>.
     */
    @JsonIgnore
    public Optional<List<LoyaltyProgramAccrualRule>> getAccrualRules() {
        if (accrualRules == null) {
            return Optional.empty();
        }
        return accrualRules;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reward_tiers")
    private Optional<List<LoyaltyProgramRewardTier>> _getRewardTiers() {
        return rewardTiers;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("accrual_rules")
    private Optional<List<LoyaltyProgramAccrualRule>> _getAccrualRules() {
        return accrualRules;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyProgram && equalTo((LoyaltyProgram) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyProgram other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && rewardTiers.equals(other.rewardTiers)
                && expirationPolicy.equals(other.expirationPolicy)
                && terminology.equals(other.terminology)
                && locationIds.equals(other.locationIds)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && accrualRules.equals(other.accrualRules);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.status,
                this.rewardTiers,
                this.expirationPolicy,
                this.terminology,
                this.locationIds,
                this.createdAt,
                this.updatedAt,
                this.accrualRules);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<LoyaltyProgramStatus> status = Optional.empty();

        private Optional<List<LoyaltyProgramRewardTier>> rewardTiers = Optional.empty();

        private Optional<LoyaltyProgramExpirationPolicy> expirationPolicy = Optional.empty();

        private Optional<LoyaltyProgramTerminology> terminology = Optional.empty();

        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<List<LoyaltyProgramAccrualRule>> accrualRules = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoyaltyProgram other) {
            id(other.getId());
            status(other.getStatus());
            rewardTiers(other.getRewardTiers());
            expirationPolicy(other.getExpirationPolicy());
            terminology(other.getTerminology());
            locationIds(other.getLocationIds());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            accrualRules(other.getAccrualRules());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<LoyaltyProgramStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(LoyaltyProgramStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "reward_tiers", nulls = Nulls.SKIP)
        public Builder rewardTiers(Optional<List<LoyaltyProgramRewardTier>> rewardTiers) {
            this.rewardTiers = rewardTiers;
            return this;
        }

        public Builder rewardTiers(List<LoyaltyProgramRewardTier> rewardTiers) {
            this.rewardTiers = Optional.ofNullable(rewardTiers);
            return this;
        }

        public Builder rewardTiers(Nullable<List<LoyaltyProgramRewardTier>> rewardTiers) {
            if (rewardTiers.isNull()) {
                this.rewardTiers = null;
            } else if (rewardTiers.isEmpty()) {
                this.rewardTiers = Optional.empty();
            } else {
                this.rewardTiers = Optional.of(rewardTiers.get());
            }
            return this;
        }

        @JsonSetter(value = "expiration_policy", nulls = Nulls.SKIP)
        public Builder expirationPolicy(Optional<LoyaltyProgramExpirationPolicy> expirationPolicy) {
            this.expirationPolicy = expirationPolicy;
            return this;
        }

        public Builder expirationPolicy(LoyaltyProgramExpirationPolicy expirationPolicy) {
            this.expirationPolicy = Optional.ofNullable(expirationPolicy);
            return this;
        }

        @JsonSetter(value = "terminology", nulls = Nulls.SKIP)
        public Builder terminology(Optional<LoyaltyProgramTerminology> terminology) {
            this.terminology = terminology;
            return this;
        }

        public Builder terminology(LoyaltyProgramTerminology terminology) {
            this.terminology = Optional.ofNullable(terminology);
            return this;
        }

        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "accrual_rules", nulls = Nulls.SKIP)
        public Builder accrualRules(Optional<List<LoyaltyProgramAccrualRule>> accrualRules) {
            this.accrualRules = accrualRules;
            return this;
        }

        public Builder accrualRules(List<LoyaltyProgramAccrualRule> accrualRules) {
            this.accrualRules = Optional.ofNullable(accrualRules);
            return this;
        }

        public Builder accrualRules(Nullable<List<LoyaltyProgramAccrualRule>> accrualRules) {
            if (accrualRules.isNull()) {
                this.accrualRules = null;
            } else if (accrualRules.isEmpty()) {
                this.accrualRules = Optional.empty();
            } else {
                this.accrualRules = Optional.of(accrualRules.get());
            }
            return this;
        }

        public LoyaltyProgram build() {
            return new LoyaltyProgram(
                    id,
                    status,
                    rewardTiers,
                    expirationPolicy,
                    terminology,
                    locationIds,
                    createdAt,
                    updatedAt,
                    accrualRules,
                    additionalProperties);
        }
    }
}
