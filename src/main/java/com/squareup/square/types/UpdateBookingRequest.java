/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateBookingRequest.Builder.class)
public final class UpdateBookingRequest {
    private final String bookingId;

    private final Optional<String> idempotencyKey;

    private final Booking booking;

    private final Map<String, Object> additionalProperties;

    private UpdateBookingRequest(
            String bookingId,
            Optional<String> idempotencyKey,
            Booking booking,
            Map<String, Object> additionalProperties) {
        this.bookingId = bookingId;
        this.idempotencyKey = idempotencyKey;
        this.booking = booking;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-updated booking.
     */
    @JsonProperty("booking_id")
    public String getBookingId() {
        return bookingId;
    }

    /**
     * @return A unique key to make this request an idempotent operation.
     */
    @JsonIgnore
    public Optional<String> getIdempotencyKey() {
        if (idempotencyKey == null) {
            return Optional.empty();
        }
        return idempotencyKey;
    }

    /**
     * @return The booking to be updated. Individual attributes explicitly specified here override the corresponding values of the existing booking.
     */
    @JsonProperty("booking")
    public Booking getBooking() {
        return booking;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("idempotency_key")
    private Optional<String> _getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateBookingRequest && equalTo((UpdateBookingRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateBookingRequest other) {
        return bookingId.equals(other.bookingId)
                && idempotencyKey.equals(other.idempotencyKey)
                && booking.equals(other.booking);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bookingId, this.idempotencyKey, this.booking);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BookingIdStage builder() {
        return new Builder();
    }

    public interface BookingIdStage {
        /**
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-updated booking.</p>
         */
        BookingStage bookingId(@NotNull String bookingId);

        Builder from(UpdateBookingRequest other);
    }

    public interface BookingStage {
        /**
         * <p>The booking to be updated. Individual attributes explicitly specified here override the corresponding values of the existing booking.</p>
         */
        _FinalStage booking(@NotNull Booking booking);
    }

    public interface _FinalStage {
        UpdateBookingRequest build();

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         */
        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        _FinalStage idempotencyKey(Nullable<String> idempotencyKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BookingIdStage, BookingStage, _FinalStage {
        private String bookingId;

        private Booking booking;

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateBookingRequest other) {
            bookingId(other.getBookingId());
            idempotencyKey(other.getIdempotencyKey());
            booking(other.getBooking());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-updated booking.</p>
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-updated booking.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("booking_id")
        public BookingStage bookingId(@NotNull String bookingId) {
            this.bookingId = Objects.requireNonNull(bookingId, "bookingId must not be null");
            return this;
        }

        /**
         * <p>The booking to be updated. Individual attributes explicitly specified here override the corresponding values of the existing booking.</p>
         * <p>The booking to be updated. Individual attributes explicitly specified here override the corresponding values of the existing booking.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("booking")
        public _FinalStage booking(@NotNull Booking booking) {
            this.booking = Objects.requireNonNull(booking, "booking must not be null");
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(Nullable<String> idempotencyKey) {
            if (idempotencyKey.isNull()) {
                this.idempotencyKey = null;
            } else if (idempotencyKey.isEmpty()) {
                this.idempotencyKey = Optional.empty();
            } else {
                this.idempotencyKey = Optional.of(idempotencyKey.get());
            }
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public UpdateBookingRequest build() {
            return new UpdateBookingRequest(bookingId, idempotencyKey, booking, additionalProperties);
        }
    }
}
