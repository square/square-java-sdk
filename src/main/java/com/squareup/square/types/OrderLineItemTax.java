/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItemTax.Builder.class)
public final class OrderLineItemTax {
    private final Optional<String> uid;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Optional<String> name;

    private final Optional<OrderLineItemTaxType> type;

    private final Optional<String> percentage;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<Money> appliedMoney;

    private final Optional<OrderLineItemTaxScope> scope;

    private final Optional<Boolean> autoApplied;

    private final Map<String, Object> additionalProperties;

    private OrderLineItemTax(
            Optional<String> uid,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Optional<String> name,
            Optional<OrderLineItemTaxType> type,
            Optional<String> percentage,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<Money> appliedMoney,
            Optional<OrderLineItemTaxScope> scope,
            Optional<Boolean> autoApplied,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.name = name;
        this.type = type;
        this.percentage = percentage;
        this.metadata = metadata;
        this.appliedMoney = appliedMoney;
        this.scope = scope;
        this.autoApplied = autoApplied;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the tax only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The catalog object ID referencing <a href="entity:CatalogTax">CatalogTax</a>.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this tax references.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    /**
     * @return The tax's name.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Indicates the calculation method used to apply the tax.
     * See <a href="#type-orderlineitemtaxtype">OrderLineItemTaxType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<OrderLineItemTaxType> getType() {
        return type;
    }

    /**
     * @return The percentage of the tax, as a string representation of a decimal
     * number. For example, a value of <code>&quot;7.25&quot;</code> corresponds to a percentage of
     * 7.25%.
     */
    @JsonIgnore
    public Optional<String> getPercentage() {
        if (percentage == null) {
            return Optional.empty();
        }
        return percentage;
    }

    /**
     * @return Application-defined data attached to this tax. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * <p>Keys written by applications must be 60 characters or less and must be in the character set
     * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.</p>
     * <p>Values have a maximum length of 255 characters.</p>
     * <p>An application can have up to 10 entries per metadata field.</p>
     * <p>Entries written by applications are private and can only be read or modified by the same
     * application.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
     */
    @JsonIgnore
    public Optional<Map<String, Optional<String>>> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    /**
     * @return The amount of money applied to the order by the tax.
     * <ul>
     * <li>For percentage-based taxes, <code>applied_money</code> is the money
     * calculated using the percentage.</li>
     * </ul>
     */
    @JsonProperty("applied_money")
    public Optional<Money> getAppliedMoney() {
        return appliedMoney;
    }

    /**
     * @return Indicates the level at which the tax applies. For <code>ORDER</code> scoped taxes,
     * Square generates references in <code>applied_taxes</code> on all order line items that do
     * not have them. For <code>LINE_ITEM</code> scoped taxes, the tax only applies to line items
     * with references in their <code>applied_taxes</code> field.
     * <p>This field is immutable. To change the scope, you must delete the tax and
     * re-add it as a new tax.
     * See <a href="#type-orderlineitemtaxscope">OrderLineItemTaxScope</a> for possible values</p>
     */
    @JsonProperty("scope")
    public Optional<OrderLineItemTaxScope> getScope() {
        return scope;
    }

    /**
     * @return Determines whether the tax was automatically applied to the order based on
     * the catalog configuration. For an example, see
     * <a href="https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes">Automatically Apply Taxes to an Order</a>.
     */
    @JsonProperty("auto_applied")
    public Optional<Boolean> getAutoApplied() {
        return autoApplied;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("percentage")
    private Optional<String> _getPercentage() {
        return percentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Map<String, Optional<String>>> _getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItemTax && equalTo((OrderLineItemTax) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItemTax other) {
        return uid.equals(other.uid)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion)
                && name.equals(other.name)
                && type.equals(other.type)
                && percentage.equals(other.percentage)
                && metadata.equals(other.metadata)
                && appliedMoney.equals(other.appliedMoney)
                && scope.equals(other.scope)
                && autoApplied.equals(other.autoApplied);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.catalogObjectId,
                this.catalogVersion,
                this.name,
                this.type,
                this.percentage,
                this.metadata,
                this.appliedMoney,
                this.scope,
                this.autoApplied);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<OrderLineItemTaxType> type = Optional.empty();

        private Optional<String> percentage = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<Money> appliedMoney = Optional.empty();

        private Optional<OrderLineItemTaxScope> scope = Optional.empty();

        private Optional<Boolean> autoApplied = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineItemTax other) {
            uid(other.getUid());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            name(other.getName());
            type(other.getType());
            percentage(other.getPercentage());
            metadata(other.getMetadata());
            appliedMoney(other.getAppliedMoney());
            scope(other.getScope());
            autoApplied(other.getAutoApplied());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public Builder catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        public Builder catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        public Builder catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<OrderLineItemTaxType> type) {
            this.type = type;
            return this;
        }

        public Builder type(OrderLineItemTaxType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "percentage", nulls = Nulls.SKIP)
        public Builder percentage(Optional<String> percentage) {
            this.percentage = percentage;
            return this;
        }

        public Builder percentage(String percentage) {
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        public Builder percentage(Nullable<String> percentage) {
            if (percentage.isNull()) {
                this.percentage = null;
            } else if (percentage.isEmpty()) {
                this.percentage = Optional.empty();
            } else {
                this.percentage = Optional.of(percentage.get());
            }
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Nullable<Map<String, Optional<String>>> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        @JsonSetter(value = "applied_money", nulls = Nulls.SKIP)
        public Builder appliedMoney(Optional<Money> appliedMoney) {
            this.appliedMoney = appliedMoney;
            return this;
        }

        public Builder appliedMoney(Money appliedMoney) {
            this.appliedMoney = Optional.ofNullable(appliedMoney);
            return this;
        }

        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public Builder scope(Optional<OrderLineItemTaxScope> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(OrderLineItemTaxScope scope) {
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        @JsonSetter(value = "auto_applied", nulls = Nulls.SKIP)
        public Builder autoApplied(Optional<Boolean> autoApplied) {
            this.autoApplied = autoApplied;
            return this;
        }

        public Builder autoApplied(Boolean autoApplied) {
            this.autoApplied = Optional.ofNullable(autoApplied);
            return this;
        }

        public OrderLineItemTax build() {
            return new OrderLineItemTax(
                    uid,
                    catalogObjectId,
                    catalogVersion,
                    name,
                    type,
                    percentage,
                    metadata,
                    appliedMoney,
                    scope,
                    autoApplied,
                    additionalProperties);
        }
    }
}
