/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceAcceptedPaymentMethods.Builder.class)
public final class InvoiceAcceptedPaymentMethods {
    private final Optional<Boolean> card;

    private final Optional<Boolean> squareGiftCard;

    private final Optional<Boolean> bankAccount;

    private final Optional<Boolean> buyNowPayLater;

    private final Optional<Boolean> cashAppPay;

    private final Map<String, Object> additionalProperties;

    private InvoiceAcceptedPaymentMethods(
            Optional<Boolean> card,
            Optional<Boolean> squareGiftCard,
            Optional<Boolean> bankAccount,
            Optional<Boolean> buyNowPayLater,
            Optional<Boolean> cashAppPay,
            Map<String, Object> additionalProperties) {
        this.card = card;
        this.squareGiftCard = squareGiftCard;
        this.bankAccount = bankAccount;
        this.buyNowPayLater = buyNowPayLater;
        this.cashAppPay = cashAppPay;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether credit card or debit card payments are accepted. The default value is <code>false</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getCard() {
        if (card == null) {
            return Optional.empty();
        }
        return card;
    }

    /**
     * @return Indicates whether Square gift card payments are accepted. The default value is <code>false</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getSquareGiftCard() {
        if (squareGiftCard == null) {
            return Optional.empty();
        }
        return squareGiftCard;
    }

    /**
     * @return Indicates whether ACH bank transfer payments are accepted. The default value is <code>false</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getBankAccount() {
        if (bankAccount == null) {
            return Optional.empty();
        }
        return bankAccount;
    }

    /**
     * @return Indicates whether Afterpay (also known as Clearpay) payments are accepted. The default value is <code>false</code>.
     * <p>This option is allowed only for invoices that have a single payment request of the <code>BALANCE</code> type. This payment method is
     * supported if the seller account accepts Afterpay payments and the seller location is in a country where Afterpay
     * invoice payments are supported. As a best practice, consider enabling an additional payment method when allowing
     * <code>buy_now_pay_later</code> payments. For more information, including detailed requirements and processing limits, see
     * <a href="https://developer.squareup.com/docs/invoices-api/overview#buy-now-pay-later">Buy Now Pay Later payments with Afterpay</a>.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getBuyNowPayLater() {
        if (buyNowPayLater == null) {
            return Optional.empty();
        }
        return buyNowPayLater;
    }

    /**
     * @return Indicates whether Cash App payments are accepted. The default value is <code>false</code>.
     * <p>This payment method is supported only for seller <a href="entity:Location">locations</a> in the United States.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getCashAppPay() {
        if (cashAppPay == null) {
            return Optional.empty();
        }
        return cashAppPay;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("card")
    private Optional<Boolean> _getCard() {
        return card;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("square_gift_card")
    private Optional<Boolean> _getSquareGiftCard() {
        return squareGiftCard;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bank_account")
    private Optional<Boolean> _getBankAccount() {
        return bankAccount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("buy_now_pay_later")
    private Optional<Boolean> _getBuyNowPayLater() {
        return buyNowPayLater;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cash_app_pay")
    private Optional<Boolean> _getCashAppPay() {
        return cashAppPay;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceAcceptedPaymentMethods && equalTo((InvoiceAcceptedPaymentMethods) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceAcceptedPaymentMethods other) {
        return card.equals(other.card)
                && squareGiftCard.equals(other.squareGiftCard)
                && bankAccount.equals(other.bankAccount)
                && buyNowPayLater.equals(other.buyNowPayLater)
                && cashAppPay.equals(other.cashAppPay);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.card, this.squareGiftCard, this.bankAccount, this.buyNowPayLater, this.cashAppPay);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> card = Optional.empty();

        private Optional<Boolean> squareGiftCard = Optional.empty();

        private Optional<Boolean> bankAccount = Optional.empty();

        private Optional<Boolean> buyNowPayLater = Optional.empty();

        private Optional<Boolean> cashAppPay = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceAcceptedPaymentMethods other) {
            card(other.getCard());
            squareGiftCard(other.getSquareGiftCard());
            bankAccount(other.getBankAccount());
            buyNowPayLater(other.getBuyNowPayLater());
            cashAppPay(other.getCashAppPay());
            return this;
        }

        /**
         * <p>Indicates whether credit card or debit card payments are accepted. The default value is <code>false</code>.</p>
         */
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Boolean> card) {
            this.card = card;
            return this;
        }

        public Builder card(Boolean card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        public Builder card(Nullable<Boolean> card) {
            if (card.isNull()) {
                this.card = null;
            } else if (card.isEmpty()) {
                this.card = Optional.empty();
            } else {
                this.card = Optional.of(card.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether Square gift card payments are accepted. The default value is <code>false</code>.</p>
         */
        @JsonSetter(value = "square_gift_card", nulls = Nulls.SKIP)
        public Builder squareGiftCard(Optional<Boolean> squareGiftCard) {
            this.squareGiftCard = squareGiftCard;
            return this;
        }

        public Builder squareGiftCard(Boolean squareGiftCard) {
            this.squareGiftCard = Optional.ofNullable(squareGiftCard);
            return this;
        }

        public Builder squareGiftCard(Nullable<Boolean> squareGiftCard) {
            if (squareGiftCard.isNull()) {
                this.squareGiftCard = null;
            } else if (squareGiftCard.isEmpty()) {
                this.squareGiftCard = Optional.empty();
            } else {
                this.squareGiftCard = Optional.of(squareGiftCard.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether ACH bank transfer payments are accepted. The default value is <code>false</code>.</p>
         */
        @JsonSetter(value = "bank_account", nulls = Nulls.SKIP)
        public Builder bankAccount(Optional<Boolean> bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        public Builder bankAccount(Boolean bankAccount) {
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        public Builder bankAccount(Nullable<Boolean> bankAccount) {
            if (bankAccount.isNull()) {
                this.bankAccount = null;
            } else if (bankAccount.isEmpty()) {
                this.bankAccount = Optional.empty();
            } else {
                this.bankAccount = Optional.of(bankAccount.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether Afterpay (also known as Clearpay) payments are accepted. The default value is <code>false</code>.</p>
         * <p>This option is allowed only for invoices that have a single payment request of the <code>BALANCE</code> type. This payment method is
         * supported if the seller account accepts Afterpay payments and the seller location is in a country where Afterpay
         * invoice payments are supported. As a best practice, consider enabling an additional payment method when allowing
         * <code>buy_now_pay_later</code> payments. For more information, including detailed requirements and processing limits, see
         * <a href="https://developer.squareup.com/docs/invoices-api/overview#buy-now-pay-later">Buy Now Pay Later payments with Afterpay</a>.</p>
         */
        @JsonSetter(value = "buy_now_pay_later", nulls = Nulls.SKIP)
        public Builder buyNowPayLater(Optional<Boolean> buyNowPayLater) {
            this.buyNowPayLater = buyNowPayLater;
            return this;
        }

        public Builder buyNowPayLater(Boolean buyNowPayLater) {
            this.buyNowPayLater = Optional.ofNullable(buyNowPayLater);
            return this;
        }

        public Builder buyNowPayLater(Nullable<Boolean> buyNowPayLater) {
            if (buyNowPayLater.isNull()) {
                this.buyNowPayLater = null;
            } else if (buyNowPayLater.isEmpty()) {
                this.buyNowPayLater = Optional.empty();
            } else {
                this.buyNowPayLater = Optional.of(buyNowPayLater.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether Cash App payments are accepted. The default value is <code>false</code>.</p>
         * <p>This payment method is supported only for seller <a href="entity:Location">locations</a> in the United States.</p>
         */
        @JsonSetter(value = "cash_app_pay", nulls = Nulls.SKIP)
        public Builder cashAppPay(Optional<Boolean> cashAppPay) {
            this.cashAppPay = cashAppPay;
            return this;
        }

        public Builder cashAppPay(Boolean cashAppPay) {
            this.cashAppPay = Optional.ofNullable(cashAppPay);
            return this;
        }

        public Builder cashAppPay(Nullable<Boolean> cashAppPay) {
            if (cashAppPay.isNull()) {
                this.cashAppPay = null;
            } else if (cashAppPay.isEmpty()) {
                this.cashAppPay = Optional.empty();
            } else {
                this.cashAppPay = Optional.of(cashAppPay.get());
            }
            return this;
        }

        public InvoiceAcceptedPaymentMethods build() {
            return new InvoiceAcceptedPaymentMethods(
                    card, squareGiftCard, bankAccount, buyNowPayLater, cashAppPay, additionalProperties);
        }
    }
}
