/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InventoryChange.Builder.class)
public final class InventoryChange {
    private final Optional<InventoryChangeType> type;

    private final Optional<InventoryPhysicalCount> physicalCount;

    private final Optional<InventoryAdjustment> adjustment;

    private final Optional<InventoryTransfer> transfer;

    private final Optional<CatalogMeasurementUnit> measurementUnit;

    private final Optional<String> measurementUnitId;

    private final Map<String, Object> additionalProperties;

    private InventoryChange(
            Optional<InventoryChangeType> type,
            Optional<InventoryPhysicalCount> physicalCount,
            Optional<InventoryAdjustment> adjustment,
            Optional<InventoryTransfer> transfer,
            Optional<CatalogMeasurementUnit> measurementUnit,
            Optional<String> measurementUnitId,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.physicalCount = physicalCount;
        this.adjustment = adjustment;
        this.transfer = transfer;
        this.measurementUnit = measurementUnit;
        this.measurementUnitId = measurementUnitId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates how the inventory change is applied. See
     * <a href="entity:InventoryChangeType">InventoryChangeType</a> for all possible values.
     * See <a href="#type-inventorychangetype">InventoryChangeType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<InventoryChangeType> getType() {
        return type;
    }

    /**
     * @return Contains details about the physical count when <code>type</code> is
     * <code>PHYSICAL_COUNT</code>, and is unset for all other change types.
     */
    @JsonProperty("physical_count")
    public Optional<InventoryPhysicalCount> getPhysicalCount() {
        return physicalCount;
    }

    /**
     * @return Contains details about the inventory adjustment when <code>type</code> is
     * <code>ADJUSTMENT</code>, and is unset for all other change types.
     */
    @JsonProperty("adjustment")
    public Optional<InventoryAdjustment> getAdjustment() {
        return adjustment;
    }

    /**
     * @return Contains details about the inventory transfer when <code>type</code> is
     * <code>TRANSFER</code>, and is unset for all other change types.
     * <p><em>Note:</em> An <a href="entity:InventoryTransfer">InventoryTransfer</a> object can only be set in the input to the
     * <a href="api-endpoint:Inventory-BatchChangeInventory">BatchChangeInventory</a> endpoint when the seller has an active Retail Plus subscription.</p>
     */
    @JsonProperty("transfer")
    public Optional<InventoryTransfer> getTransfer() {
        return transfer;
    }

    /**
     * @return The <a href="entity:CatalogMeasurementUnit">CatalogMeasurementUnit</a> object representing the catalog measurement unit associated with the inventory change.
     */
    @JsonProperty("measurement_unit")
    public Optional<CatalogMeasurementUnit> getMeasurementUnit() {
        return measurementUnit;
    }

    /**
     * @return The ID of the <a href="entity:CatalogMeasurementUnit">CatalogMeasurementUnit</a> object representing the catalog measurement unit associated with the inventory change.
     */
    @JsonProperty("measurement_unit_id")
    public Optional<String> getMeasurementUnitId() {
        return measurementUnitId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InventoryChange && equalTo((InventoryChange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InventoryChange other) {
        return type.equals(other.type)
                && physicalCount.equals(other.physicalCount)
                && adjustment.equals(other.adjustment)
                && transfer.equals(other.transfer)
                && measurementUnit.equals(other.measurementUnit)
                && measurementUnitId.equals(other.measurementUnitId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.physicalCount,
                this.adjustment,
                this.transfer,
                this.measurementUnit,
                this.measurementUnitId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<InventoryChangeType> type = Optional.empty();

        private Optional<InventoryPhysicalCount> physicalCount = Optional.empty();

        private Optional<InventoryAdjustment> adjustment = Optional.empty();

        private Optional<InventoryTransfer> transfer = Optional.empty();

        private Optional<CatalogMeasurementUnit> measurementUnit = Optional.empty();

        private Optional<String> measurementUnitId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InventoryChange other) {
            type(other.getType());
            physicalCount(other.getPhysicalCount());
            adjustment(other.getAdjustment());
            transfer(other.getTransfer());
            measurementUnit(other.getMeasurementUnit());
            measurementUnitId(other.getMeasurementUnitId());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<InventoryChangeType> type) {
            this.type = type;
            return this;
        }

        public Builder type(InventoryChangeType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "physical_count", nulls = Nulls.SKIP)
        public Builder physicalCount(Optional<InventoryPhysicalCount> physicalCount) {
            this.physicalCount = physicalCount;
            return this;
        }

        public Builder physicalCount(InventoryPhysicalCount physicalCount) {
            this.physicalCount = Optional.ofNullable(physicalCount);
            return this;
        }

        @JsonSetter(value = "adjustment", nulls = Nulls.SKIP)
        public Builder adjustment(Optional<InventoryAdjustment> adjustment) {
            this.adjustment = adjustment;
            return this;
        }

        public Builder adjustment(InventoryAdjustment adjustment) {
            this.adjustment = Optional.ofNullable(adjustment);
            return this;
        }

        @JsonSetter(value = "transfer", nulls = Nulls.SKIP)
        public Builder transfer(Optional<InventoryTransfer> transfer) {
            this.transfer = transfer;
            return this;
        }

        public Builder transfer(InventoryTransfer transfer) {
            this.transfer = Optional.ofNullable(transfer);
            return this;
        }

        @JsonSetter(value = "measurement_unit", nulls = Nulls.SKIP)
        public Builder measurementUnit(Optional<CatalogMeasurementUnit> measurementUnit) {
            this.measurementUnit = measurementUnit;
            return this;
        }

        public Builder measurementUnit(CatalogMeasurementUnit measurementUnit) {
            this.measurementUnit = Optional.ofNullable(measurementUnit);
            return this;
        }

        @JsonSetter(value = "measurement_unit_id", nulls = Nulls.SKIP)
        public Builder measurementUnitId(Optional<String> measurementUnitId) {
            this.measurementUnitId = measurementUnitId;
            return this;
        }

        public Builder measurementUnitId(String measurementUnitId) {
            this.measurementUnitId = Optional.ofNullable(measurementUnitId);
            return this;
        }

        public InventoryChange build() {
            return new InventoryChange(
                    type,
                    physicalCount,
                    adjustment,
                    transfer,
                    measurementUnit,
                    measurementUnitId,
                    additionalProperties);
        }
    }
}
