/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentLinkRelatedResources.Builder.class)
public final class PaymentLinkRelatedResources {
    private final Optional<List<Order>> orders;

    private final Optional<List<CatalogObject>> subscriptionPlans;

    private final Map<String, Object> additionalProperties;

    private PaymentLinkRelatedResources(
            Optional<List<Order>> orders,
            Optional<List<CatalogObject>> subscriptionPlans,
            Map<String, Object> additionalProperties) {
        this.orders = orders;
        this.subscriptionPlans = subscriptionPlans;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order associated with the payment link.
     */
    @JsonIgnore
    public Optional<List<Order>> getOrders() {
        if (orders == null) {
            return Optional.empty();
        }
        return orders;
    }

    /**
     * @return The subscription plan associated with the payment link.
     */
    @JsonIgnore
    public Optional<List<CatalogObject>> getSubscriptionPlans() {
        if (subscriptionPlans == null) {
            return Optional.empty();
        }
        return subscriptionPlans;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("orders")
    private Optional<List<Order>> _getOrders() {
        return orders;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("subscription_plans")
    private Optional<List<CatalogObject>> _getSubscriptionPlans() {
        return subscriptionPlans;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentLinkRelatedResources && equalTo((PaymentLinkRelatedResources) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentLinkRelatedResources other) {
        return orders.equals(other.orders) && subscriptionPlans.equals(other.subscriptionPlans);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orders, this.subscriptionPlans);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Order>> orders = Optional.empty();

        private Optional<List<CatalogObject>> subscriptionPlans = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaymentLinkRelatedResources other) {
            orders(other.getOrders());
            subscriptionPlans(other.getSubscriptionPlans());
            return this;
        }

        /**
         * <p>The order associated with the payment link.</p>
         */
        @JsonSetter(value = "orders", nulls = Nulls.SKIP)
        public Builder orders(Optional<List<Order>> orders) {
            this.orders = orders;
            return this;
        }

        public Builder orders(List<Order> orders) {
            this.orders = Optional.ofNullable(orders);
            return this;
        }

        public Builder orders(Nullable<List<Order>> orders) {
            if (orders.isNull()) {
                this.orders = null;
            } else if (orders.isEmpty()) {
                this.orders = Optional.empty();
            } else {
                this.orders = Optional.of(orders.get());
            }
            return this;
        }

        /**
         * <p>The subscription plan associated with the payment link.</p>
         */
        @JsonSetter(value = "subscription_plans", nulls = Nulls.SKIP)
        public Builder subscriptionPlans(Optional<List<CatalogObject>> subscriptionPlans) {
            this.subscriptionPlans = subscriptionPlans;
            return this;
        }

        public Builder subscriptionPlans(List<CatalogObject> subscriptionPlans) {
            this.subscriptionPlans = Optional.ofNullable(subscriptionPlans);
            return this;
        }

        public Builder subscriptionPlans(Nullable<List<CatalogObject>> subscriptionPlans) {
            if (subscriptionPlans.isNull()) {
                this.subscriptionPlans = null;
            } else if (subscriptionPlans.isEmpty()) {
                this.subscriptionPlans = Optional.empty();
            } else {
                this.subscriptionPlans = Optional.of(subscriptionPlans.get());
            }
            return this;
        }

        public PaymentLinkRelatedResources build() {
            return new PaymentLinkRelatedResources(orders, subscriptionPlans, additionalProperties);
        }
    }
}
