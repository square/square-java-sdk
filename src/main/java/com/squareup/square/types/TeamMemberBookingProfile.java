/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TeamMemberBookingProfile.Builder.class)
public final class TeamMemberBookingProfile {
    private final Optional<String> teamMemberId;

    private final Optional<String> description;

    private final Optional<String> displayName;

    private final Optional<Boolean> isBookable;

    private final Optional<String> profileImageUrl;

    private final Map<String, Object> additionalProperties;

    private TeamMemberBookingProfile(
            Optional<String> teamMemberId,
            Optional<String> description,
            Optional<String> displayName,
            Optional<Boolean> isBookable,
            Optional<String> profileImageUrl,
            Map<String, Object> additionalProperties) {
        this.teamMemberId = teamMemberId;
        this.description = description;
        this.displayName = displayName;
        this.isBookable = isBookable;
        this.profileImageUrl = profileImageUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:TeamMember">TeamMember</a> object for the team member associated with the booking profile.
     */
    @JsonProperty("team_member_id")
    public Optional<String> getTeamMemberId() {
        return teamMemberId;
    }

    /**
     * @return The description of the team member.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The display name of the team member.
     */
    @JsonProperty("display_name")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    /**
     * @return Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getIsBookable() {
        if (isBookable == null) {
            return Optional.empty();
        }
        return isBookable;
    }

    /**
     * @return The URL of the team member's image for the bookings profile.
     */
    @JsonProperty("profile_image_url")
    public Optional<String> getProfileImageUrl() {
        return profileImageUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_bookable")
    private Optional<Boolean> _getIsBookable() {
        return isBookable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TeamMemberBookingProfile && equalTo((TeamMemberBookingProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TeamMemberBookingProfile other) {
        return teamMemberId.equals(other.teamMemberId)
                && description.equals(other.description)
                && displayName.equals(other.displayName)
                && isBookable.equals(other.isBookable)
                && profileImageUrl.equals(other.profileImageUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.teamMemberId, this.description, this.displayName, this.isBookable, this.profileImageUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<Boolean> isBookable = Optional.empty();

        private Optional<String> profileImageUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TeamMemberBookingProfile other) {
            teamMemberId(other.getTeamMemberId());
            description(other.getDescription());
            displayName(other.getDisplayName());
            isBookable(other.getIsBookable());
            profileImageUrl(other.getProfileImageUrl());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:TeamMember">TeamMember</a> object for the team member associated with the booking profile.</p>
         */
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        /**
         * <p>The description of the team member.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The display name of the team member.</p>
         */
        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * <p>Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (<code>true</code>) or not (<code>false</code>).</p>
         */
        @JsonSetter(value = "is_bookable", nulls = Nulls.SKIP)
        public Builder isBookable(Optional<Boolean> isBookable) {
            this.isBookable = isBookable;
            return this;
        }

        public Builder isBookable(Boolean isBookable) {
            this.isBookable = Optional.ofNullable(isBookable);
            return this;
        }

        public Builder isBookable(Nullable<Boolean> isBookable) {
            if (isBookable.isNull()) {
                this.isBookable = null;
            } else if (isBookable.isEmpty()) {
                this.isBookable = Optional.empty();
            } else {
                this.isBookable = Optional.of(isBookable.get());
            }
            return this;
        }

        /**
         * <p>The URL of the team member's image for the bookings profile.</p>
         */
        @JsonSetter(value = "profile_image_url", nulls = Nulls.SKIP)
        public Builder profileImageUrl(Optional<String> profileImageUrl) {
            this.profileImageUrl = profileImageUrl;
            return this;
        }

        public Builder profileImageUrl(String profileImageUrl) {
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        public TeamMemberBookingProfile build() {
            return new TeamMemberBookingProfile(
                    teamMemberId, description, displayName, isBookable, profileImageUrl, additionalProperties);
        }
    }
}
