/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RefundPaymentRequest.Builder.class)
public final class RefundPaymentRequest {
    private final String idempotencyKey;

    private final Money amountMoney;

    private final Optional<Money> appFeeMoney;

    private final Optional<String> paymentId;

    private final Optional<String> destinationId;

    private final Optional<Boolean> unlinked;

    private final Optional<String> locationId;

    private final Optional<String> customerId;

    private final Optional<String> reason;

    private final Optional<String> paymentVersionToken;

    private final Optional<String> teamMemberId;

    private final Optional<DestinationDetailsCashRefundDetails> cashDetails;

    private final Optional<DestinationDetailsExternalRefundDetails> externalDetails;

    private final Map<String, Object> additionalProperties;

    private RefundPaymentRequest(
            String idempotencyKey,
            Money amountMoney,
            Optional<Money> appFeeMoney,
            Optional<String> paymentId,
            Optional<String> destinationId,
            Optional<Boolean> unlinked,
            Optional<String> locationId,
            Optional<String> customerId,
            Optional<String> reason,
            Optional<String> paymentVersionToken,
            Optional<String> teamMemberId,
            Optional<DestinationDetailsCashRefundDetails> cashDetails,
            Optional<DestinationDetailsExternalRefundDetails> externalDetails,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.amountMoney = amountMoney;
        this.appFeeMoney = appFeeMoney;
        this.paymentId = paymentId;
        this.destinationId = destinationId;
        this.unlinked = unlinked;
        this.locationId = locationId;
        this.customerId = customerId;
        this.reason = reason;
        this.paymentVersionToken = paymentVersionToken;
        this.teamMemberId = teamMemberId;
        this.cashDetails = cashDetails;
        this.externalDetails = externalDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string that identifies this <code>RefundPayment</code> request. The key can be any valid string
     * but must be unique for every <code>RefundPayment</code> request.
     * <p>Keys are limited to a max of 45 characters - however, the number of allowed characters might be
     * less than 45, if multi-byte characters are used.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The amount of money to refund.
     * <p>This amount cannot be more than the <code>total_money</code> value of the payment minus the total
     * amount of all previously completed refunds for this payment.</p>
     * <p>This amount must be specified in the smallest denomination of the applicable currency
     * (for example, US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The currency code must match the currency associated with the business
     * that is charging the card.</p>
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The amount of money the developer contributes to help cover the refunded amount.
     * This amount is specified in the smallest denomination of the applicable currency (for example,
     * US dollar amounts are specified in cents).
     * <p>The value cannot be more than the <code>amount_money</code>.</p>
     * <p>You can specify this parameter in a refund request only if the same parameter was also included
     * when taking the payment. This is part of the application fee scenario the API supports. For more
     * information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
     * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
     * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
     */
    @JsonProperty("app_fee_money")
    public Optional<Money> getAppFeeMoney() {
        return appFeeMoney;
    }

    /**
     * @return The unique ID of the payment being refunded.
     * Required when unlinked=false, otherwise must not be set.
     */
    @JsonIgnore
    public Optional<String> getPaymentId() {
        if (paymentId == null) {
            return Optional.empty();
        }
        return paymentId;
    }

    /**
     * @return The ID indicating where funds will be refunded to. Required for unlinked refunds. For more
     * information, see <a href="https://developer.squareup.com/docs/refunds-api/unlinked-refunds">Process an Unlinked Refund</a>.
     * <p>For refunds linked to Square payments, <code>destination_id</code> is usually omitted; in this case, funds
     * will be returned to the original payment source. The field may be specified in order to request
     * a cross-method refund to a gift card. For more information,
     * see <a href="https://developer.squareup.com/docs/payments-api/refund-payments#cross-method-refunds-to-gift-cards">Cross-method refunds to gift cards</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getDestinationId() {
        if (destinationId == null) {
            return Optional.empty();
        }
        return destinationId;
    }

    /**
     * @return Indicates that the refund is not linked to a Square payment.
     * If set to true, <code>destination_id</code> and <code>location_id</code> must be supplied while <code>payment_id</code> must not
     * be provided.
     */
    @JsonIgnore
    public Optional<Boolean> getUnlinked() {
        if (unlinked == null) {
            return Optional.empty();
        }
        return unlinked;
    }

    /**
     * @return The location ID associated with the unlinked refund.
     * Required for requests specifying <code>unlinked=true</code>.
     * Otherwise, if included when <code>unlinked=false</code>, will throw an error.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The <a href="entity:Customer">Customer</a> ID of the customer associated with the refund.
     * This is required if the <code>destination_id</code> refers to a card on file created using the Cards
     * API. Only allowed when <code>unlinked=true</code>.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return A description of the reason for the refund.
     */
    @JsonIgnore
    public Optional<String> getReason() {
        if (reason == null) {
            return Optional.empty();
        }
        return reason;
    }

    /**
     * @return Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
     * version that the caller expects. If the server has a different version of the Payment,
     * the update fails and a response with a VERSION_MISMATCH error is returned.
     * If the versions match, or the field is not provided, the refund proceeds as normal.
     */
    @JsonIgnore
    public Optional<String> getPaymentVersionToken() {
        if (paymentVersionToken == null) {
            return Optional.empty();
        }
        return paymentVersionToken;
    }

    /**
     * @return An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with this refund.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return Additional details required when recording an unlinked cash refund (<code>destination_id</code> is CASH).
     */
    @JsonProperty("cash_details")
    public Optional<DestinationDetailsCashRefundDetails> getCashDetails() {
        return cashDetails;
    }

    /**
     * @return Additional details required when recording an unlinked external refund
     * (<code>destination_id</code> is EXTERNAL).
     */
    @JsonProperty("external_details")
    public Optional<DestinationDetailsExternalRefundDetails> getExternalDetails() {
        return externalDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_id")
    private Optional<String> _getPaymentId() {
        return paymentId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("destination_id")
    private Optional<String> _getDestinationId() {
        return destinationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("unlinked")
    private Optional<Boolean> _getUnlinked() {
        return unlinked;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reason")
    private Optional<String> _getReason() {
        return reason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_version_token")
    private Optional<String> _getPaymentVersionToken() {
        return paymentVersionToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RefundPaymentRequest && equalTo((RefundPaymentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RefundPaymentRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && amountMoney.equals(other.amountMoney)
                && appFeeMoney.equals(other.appFeeMoney)
                && paymentId.equals(other.paymentId)
                && destinationId.equals(other.destinationId)
                && unlinked.equals(other.unlinked)
                && locationId.equals(other.locationId)
                && customerId.equals(other.customerId)
                && reason.equals(other.reason)
                && paymentVersionToken.equals(other.paymentVersionToken)
                && teamMemberId.equals(other.teamMemberId)
                && cashDetails.equals(other.cashDetails)
                && externalDetails.equals(other.externalDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.amountMoney,
                this.appFeeMoney,
                this.paymentId,
                this.destinationId,
                this.unlinked,
                this.locationId,
                this.customerId,
                this.reason,
                this.paymentVersionToken,
                this.teamMemberId,
                this.cashDetails,
                this.externalDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        AmountMoneyStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(RefundPaymentRequest other);
    }

    public interface AmountMoneyStage {
        _FinalStage amountMoney(@NotNull Money amountMoney);
    }

    public interface _FinalStage {
        RefundPaymentRequest build();

        _FinalStage appFeeMoney(Optional<Money> appFeeMoney);

        _FinalStage appFeeMoney(Money appFeeMoney);

        _FinalStage paymentId(Optional<String> paymentId);

        _FinalStage paymentId(String paymentId);

        _FinalStage paymentId(Nullable<String> paymentId);

        _FinalStage destinationId(Optional<String> destinationId);

        _FinalStage destinationId(String destinationId);

        _FinalStage destinationId(Nullable<String> destinationId);

        _FinalStage unlinked(Optional<Boolean> unlinked);

        _FinalStage unlinked(Boolean unlinked);

        _FinalStage unlinked(Nullable<Boolean> unlinked);

        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        _FinalStage locationId(Nullable<String> locationId);

        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerId(Nullable<String> customerId);

        _FinalStage reason(Optional<String> reason);

        _FinalStage reason(String reason);

        _FinalStage reason(Nullable<String> reason);

        _FinalStage paymentVersionToken(Optional<String> paymentVersionToken);

        _FinalStage paymentVersionToken(String paymentVersionToken);

        _FinalStage paymentVersionToken(Nullable<String> paymentVersionToken);

        _FinalStage teamMemberId(Optional<String> teamMemberId);

        _FinalStage teamMemberId(String teamMemberId);

        _FinalStage teamMemberId(Nullable<String> teamMemberId);

        _FinalStage cashDetails(Optional<DestinationDetailsCashRefundDetails> cashDetails);

        _FinalStage cashDetails(DestinationDetailsCashRefundDetails cashDetails);

        _FinalStage externalDetails(Optional<DestinationDetailsExternalRefundDetails> externalDetails);

        _FinalStage externalDetails(DestinationDetailsExternalRefundDetails externalDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, AmountMoneyStage, _FinalStage {
        private String idempotencyKey;

        private Money amountMoney;

        private Optional<DestinationDetailsExternalRefundDetails> externalDetails = Optional.empty();

        private Optional<DestinationDetailsCashRefundDetails> cashDetails = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> paymentVersionToken = Optional.empty();

        private Optional<String> reason = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<Boolean> unlinked = Optional.empty();

        private Optional<String> destinationId = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<Money> appFeeMoney = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RefundPaymentRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            amountMoney(other.getAmountMoney());
            appFeeMoney(other.getAppFeeMoney());
            paymentId(other.getPaymentId());
            destinationId(other.getDestinationId());
            unlinked(other.getUnlinked());
            locationId(other.getLocationId());
            customerId(other.getCustomerId());
            reason(other.getReason());
            paymentVersionToken(other.getPaymentVersionToken());
            teamMemberId(other.getTeamMemberId());
            cashDetails(other.getCashDetails());
            externalDetails(other.getExternalDetails());
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>RefundPayment</code> request. The key can be any valid string
         * but must be unique for every <code>RefundPayment</code> request.</p>
         * <p>Keys are limited to a max of 45 characters - however, the number of allowed characters might be
         * less than 45, if multi-byte characters are used.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public AmountMoneyStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The amount of money to refund.</p>
         * <p>This amount cannot be more than the <code>total_money</code> value of the payment minus the total
         * amount of all previously completed refunds for this payment.</p>
         * <p>This amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is charging the card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public _FinalStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>Additional details required when recording an unlinked external refund
         * (<code>destination_id</code> is EXTERNAL).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalDetails(DestinationDetailsExternalRefundDetails externalDetails) {
            this.externalDetails = Optional.ofNullable(externalDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "external_details", nulls = Nulls.SKIP)
        public _FinalStage externalDetails(Optional<DestinationDetailsExternalRefundDetails> externalDetails) {
            this.externalDetails = externalDetails;
            return this;
        }

        /**
         * <p>Additional details required when recording an unlinked cash refund (<code>destination_id</code> is CASH).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cashDetails(DestinationDetailsCashRefundDetails cashDetails) {
            this.cashDetails = Optional.ofNullable(cashDetails);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cash_details", nulls = Nulls.SKIP)
        public _FinalStage cashDetails(Optional<DestinationDetailsCashRefundDetails> cashDetails) {
            this.cashDetails = cashDetails;
            return this;
        }

        /**
         * <p>An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with this refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        /**
         * <p>An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with this refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public _FinalStage teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        /**
         * <p>Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
         * version that the caller expects. If the server has a different version of the Payment,
         * the update fails and a response with a VERSION_MISMATCH error is returned.
         * If the versions match, or the field is not provided, the refund proceeds as normal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentVersionToken(Nullable<String> paymentVersionToken) {
            if (paymentVersionToken.isNull()) {
                this.paymentVersionToken = null;
            } else if (paymentVersionToken.isEmpty()) {
                this.paymentVersionToken = Optional.empty();
            } else {
                this.paymentVersionToken = Optional.of(paymentVersionToken.get());
            }
            return this;
        }

        /**
         * <p>Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
         * version that the caller expects. If the server has a different version of the Payment,
         * the update fails and a response with a VERSION_MISMATCH error is returned.
         * If the versions match, or the field is not provided, the refund proceeds as normal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentVersionToken(String paymentVersionToken) {
            this.paymentVersionToken = Optional.ofNullable(paymentVersionToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payment_version_token", nulls = Nulls.SKIP)
        public _FinalStage paymentVersionToken(Optional<String> paymentVersionToken) {
            this.paymentVersionToken = paymentVersionToken;
            return this;
        }

        /**
         * <p>A description of the reason for the refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reason(Nullable<String> reason) {
            if (reason.isNull()) {
                this.reason = null;
            } else if (reason.isEmpty()) {
                this.reason = Optional.empty();
            } else {
                this.reason = Optional.of(reason.get());
            }
            return this;
        }

        /**
         * <p>A description of the reason for the refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reason(String reason) {
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reason", nulls = Nulls.SKIP)
        public _FinalStage reason(Optional<String> reason) {
            this.reason = reason;
            return this;
        }

        /**
         * <p>The <a href="entity:Customer">Customer</a> ID of the customer associated with the refund.
         * This is required if the <code>destination_id</code> refers to a card on file created using the Cards
         * API. Only allowed when <code>unlinked=true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:Customer">Customer</a> ID of the customer associated with the refund.
         * This is required if the <code>destination_id</code> refers to a card on file created using the Cards
         * API. Only allowed when <code>unlinked=true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>The location ID associated with the unlinked refund.
         * Required for requests specifying <code>unlinked=true</code>.
         * Otherwise, if included when <code>unlinked=false</code>, will throw an error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The location ID associated with the unlinked refund.
         * Required for requests specifying <code>unlinked=true</code>.
         * Otherwise, if included when <code>unlinked=false</code>, will throw an error.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>Indicates that the refund is not linked to a Square payment.
         * If set to true, <code>destination_id</code> and <code>location_id</code> must be supplied while <code>payment_id</code> must not
         * be provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage unlinked(Nullable<Boolean> unlinked) {
            if (unlinked.isNull()) {
                this.unlinked = null;
            } else if (unlinked.isEmpty()) {
                this.unlinked = Optional.empty();
            } else {
                this.unlinked = Optional.of(unlinked.get());
            }
            return this;
        }

        /**
         * <p>Indicates that the refund is not linked to a Square payment.
         * If set to true, <code>destination_id</code> and <code>location_id</code> must be supplied while <code>payment_id</code> must not
         * be provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage unlinked(Boolean unlinked) {
            this.unlinked = Optional.ofNullable(unlinked);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "unlinked", nulls = Nulls.SKIP)
        public _FinalStage unlinked(Optional<Boolean> unlinked) {
            this.unlinked = unlinked;
            return this;
        }

        /**
         * <p>The ID indicating where funds will be refunded to. Required for unlinked refunds. For more
         * information, see <a href="https://developer.squareup.com/docs/refunds-api/unlinked-refunds">Process an Unlinked Refund</a>.</p>
         * <p>For refunds linked to Square payments, <code>destination_id</code> is usually omitted; in this case, funds
         * will be returned to the original payment source. The field may be specified in order to request
         * a cross-method refund to a gift card. For more information,
         * see <a href="https://developer.squareup.com/docs/payments-api/refund-payments#cross-method-refunds-to-gift-cards">Cross-method refunds to gift cards</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destinationId(Nullable<String> destinationId) {
            if (destinationId.isNull()) {
                this.destinationId = null;
            } else if (destinationId.isEmpty()) {
                this.destinationId = Optional.empty();
            } else {
                this.destinationId = Optional.of(destinationId.get());
            }
            return this;
        }

        /**
         * <p>The ID indicating where funds will be refunded to. Required for unlinked refunds. For more
         * information, see <a href="https://developer.squareup.com/docs/refunds-api/unlinked-refunds">Process an Unlinked Refund</a>.</p>
         * <p>For refunds linked to Square payments, <code>destination_id</code> is usually omitted; in this case, funds
         * will be returned to the original payment source. The field may be specified in order to request
         * a cross-method refund to a gift card. For more information,
         * see <a href="https://developer.squareup.com/docs/payments-api/refund-payments#cross-method-refunds-to-gift-cards">Cross-method refunds to gift cards</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destinationId(String destinationId) {
            this.destinationId = Optional.ofNullable(destinationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "destination_id", nulls = Nulls.SKIP)
        public _FinalStage destinationId(Optional<String> destinationId) {
            this.destinationId = destinationId;
            return this;
        }

        /**
         * <p>The unique ID of the payment being refunded.
         * Required when unlinked=false, otherwise must not be set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(Nullable<String> paymentId) {
            if (paymentId.isNull()) {
                this.paymentId = null;
            } else if (paymentId.isEmpty()) {
                this.paymentId = Optional.empty();
            } else {
                this.paymentId = Optional.of(paymentId.get());
            }
            return this;
        }

        /**
         * <p>The unique ID of the payment being refunded.
         * Required when unlinked=false, otherwise must not be set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payment_id", nulls = Nulls.SKIP)
        public _FinalStage paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        /**
         * <p>The amount of money the developer contributes to help cover the refunded amount.
         * This amount is specified in the smallest denomination of the applicable currency (for example,
         * US dollar amounts are specified in cents).</p>
         * <p>The value cannot be more than the <code>amount_money</code>.</p>
         * <p>You can specify this parameter in a refund request only if the same parameter was also included
         * when taking the payment. This is part of the application fee scenario the API supports. For more
         * information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
         * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appFeeMoney(Money appFeeMoney) {
            this.appFeeMoney = Optional.ofNullable(appFeeMoney);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "app_fee_money", nulls = Nulls.SKIP)
        public _FinalStage appFeeMoney(Optional<Money> appFeeMoney) {
            this.appFeeMoney = appFeeMoney;
            return this;
        }

        @java.lang.Override
        public RefundPaymentRequest build() {
            return new RefundPaymentRequest(
                    idempotencyKey,
                    amountMoney,
                    appFeeMoney,
                    paymentId,
                    destinationId,
                    unlinked,
                    locationId,
                    customerId,
                    reason,
                    paymentVersionToken,
                    teamMemberId,
                    cashDetails,
                    externalDetails,
                    additionalProperties);
        }
    }
}
