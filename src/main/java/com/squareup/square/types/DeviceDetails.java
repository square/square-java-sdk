/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceDetails.Builder.class)
public final class DeviceDetails {
    private final Optional<String> deviceId;

    private final Optional<String> deviceInstallationId;

    private final Optional<String> deviceName;

    private final Map<String, Object> additionalProperties;

    private DeviceDetails(
            Optional<String> deviceId,
            Optional<String> deviceInstallationId,
            Optional<String> deviceName,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.deviceInstallationId = deviceInstallationId;
        this.deviceName = deviceName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-issued ID of the device.
     */
    @JsonIgnore
    public Optional<String> getDeviceId() {
        if (deviceId == null) {
            return Optional.empty();
        }
        return deviceId;
    }

    /**
     * @return The Square-issued installation ID for the device.
     */
    @JsonIgnore
    public Optional<String> getDeviceInstallationId() {
        if (deviceInstallationId == null) {
            return Optional.empty();
        }
        return deviceInstallationId;
    }

    /**
     * @return The name of the device set by the seller.
     */
    @JsonIgnore
    public Optional<String> getDeviceName() {
        if (deviceName == null) {
            return Optional.empty();
        }
        return deviceName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("device_id")
    private Optional<String> _getDeviceId() {
        return deviceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("device_installation_id")
    private Optional<String> _getDeviceInstallationId() {
        return deviceInstallationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("device_name")
    private Optional<String> _getDeviceName() {
        return deviceName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceDetails && equalTo((DeviceDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceDetails other) {
        return deviceId.equals(other.deviceId)
                && deviceInstallationId.equals(other.deviceInstallationId)
                && deviceName.equals(other.deviceName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.deviceId, this.deviceInstallationId, this.deviceName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> deviceId = Optional.empty();

        private Optional<String> deviceInstallationId = Optional.empty();

        private Optional<String> deviceName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceDetails other) {
            deviceId(other.getDeviceId());
            deviceInstallationId(other.getDeviceInstallationId());
            deviceName(other.getDeviceName());
            return this;
        }

        /**
         * <p>The Square-issued ID of the device.</p>
         */
        @JsonSetter(value = "device_id", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        public Builder deviceId(Nullable<String> deviceId) {
            if (deviceId.isNull()) {
                this.deviceId = null;
            } else if (deviceId.isEmpty()) {
                this.deviceId = Optional.empty();
            } else {
                this.deviceId = Optional.of(deviceId.get());
            }
            return this;
        }

        /**
         * <p>The Square-issued installation ID for the device.</p>
         */
        @JsonSetter(value = "device_installation_id", nulls = Nulls.SKIP)
        public Builder deviceInstallationId(Optional<String> deviceInstallationId) {
            this.deviceInstallationId = deviceInstallationId;
            return this;
        }

        public Builder deviceInstallationId(String deviceInstallationId) {
            this.deviceInstallationId = Optional.ofNullable(deviceInstallationId);
            return this;
        }

        public Builder deviceInstallationId(Nullable<String> deviceInstallationId) {
            if (deviceInstallationId.isNull()) {
                this.deviceInstallationId = null;
            } else if (deviceInstallationId.isEmpty()) {
                this.deviceInstallationId = Optional.empty();
            } else {
                this.deviceInstallationId = Optional.of(deviceInstallationId.get());
            }
            return this;
        }

        /**
         * <p>The name of the device set by the seller.</p>
         */
        @JsonSetter(value = "device_name", nulls = Nulls.SKIP)
        public Builder deviceName(Optional<String> deviceName) {
            this.deviceName = deviceName;
            return this;
        }

        public Builder deviceName(String deviceName) {
            this.deviceName = Optional.ofNullable(deviceName);
            return this;
        }

        public Builder deviceName(Nullable<String> deviceName) {
            if (deviceName.isNull()) {
                this.deviceName = null;
            } else if (deviceName.isEmpty()) {
                this.deviceName = Optional.empty();
            } else {
                this.deviceName = Optional.of(deviceName.get());
            }
            return this;
        }

        public DeviceDetails build() {
            return new DeviceDetails(deviceId, deviceInstallationId, deviceName, additionalProperties);
        }
    }
}
