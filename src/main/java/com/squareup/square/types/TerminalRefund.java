/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalRefund.Builder.class)
public final class TerminalRefund {
    private final Optional<String> id;

    private final Optional<String> refundId;

    private final String paymentId;

    private final Optional<String> orderId;

    private final Money amountMoney;

    private final String reason;

    private final String deviceId;

    private final Optional<String> deadlineDuration;

    private final Optional<String> status;

    private final Optional<ActionCancelReason> cancelReason;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> appId;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private TerminalRefund(
            Optional<String> id,
            Optional<String> refundId,
            String paymentId,
            Optional<String> orderId,
            Money amountMoney,
            String reason,
            String deviceId,
            Optional<String> deadlineDuration,
            Optional<String> status,
            Optional<ActionCancelReason> cancelReason,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> appId,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.refundId = refundId;
        this.paymentId = paymentId;
        this.orderId = orderId;
        this.amountMoney = amountMoney;
        this.reason = reason;
        this.deviceId = deviceId;
        this.deadlineDuration = deadlineDuration;
        this.status = status;
        this.cancelReason = cancelReason;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.appId = appId;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID for this <code>TerminalRefund</code>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The reference to the payment refund created by completing this <code>TerminalRefund</code>.
     */
    @JsonProperty("refund_id")
    public Optional<String> getRefundId() {
        return refundId;
    }

    /**
     * @return The unique ID of the payment being refunded.
     */
    @JsonProperty("payment_id")
    public String getPaymentId() {
        return paymentId;
    }

    /**
     * @return The reference to the Square order ID for the payment identified by the <code>payment_id</code>.
     */
    @JsonProperty("order_id")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return The amount of money, inclusive of <code>tax_money</code>, that the <code>TerminalRefund</code> should return.
     * This value is limited to the amount taken in the original payment minus any completed or
     * pending refunds.
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return A description of the reason for the refund.
     */
    @JsonProperty("reason")
    public String getReason() {
        return reason;
    }

    /**
     * @return The unique ID of the device intended for this <code>TerminalRefund</code>.
     * The Id can be retrieved from /v2/devices api.
     */
    @JsonProperty("device_id")
    public String getDeviceId() {
        return deviceId;
    }

    /**
     * @return The RFC 3339 duration, after which the refund is automatically canceled.
     * A <code>TerminalRefund</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
     * of <code>TIMED_OUT</code>.
     * <p>Default: 5 minutes from creation.</p>
     * <p>Maximum: 5 minutes</p>
     */
    @JsonIgnore
    public Optional<String> getDeadlineDuration() {
        if (deadlineDuration == null) {
            return Optional.empty();
        }
        return deadlineDuration;
    }

    /**
     * @return The status of the <code>TerminalRefund</code>.
     * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, or <code>COMPLETED</code>.
     */
    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    /**
     * @return Present if the status is <code>CANCELED</code>.
     * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values
     */
    @JsonProperty("cancel_reason")
    public Optional<ActionCancelReason> getCancelReason() {
        return cancelReason;
    }

    /**
     * @return The time when the <code>TerminalRefund</code> was created, as an RFC 3339 timestamp.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The time when the <code>TerminalRefund</code> was last updated, as an RFC 3339 timestamp.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the application that created the refund.
     */
    @JsonProperty("app_id")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return The location of the device where the <code>TerminalRefund</code> was directed.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("deadline_duration")
    private Optional<String> _getDeadlineDuration() {
        return deadlineDuration;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalRefund && equalTo((TerminalRefund) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalRefund other) {
        return id.equals(other.id)
                && refundId.equals(other.refundId)
                && paymentId.equals(other.paymentId)
                && orderId.equals(other.orderId)
                && amountMoney.equals(other.amountMoney)
                && reason.equals(other.reason)
                && deviceId.equals(other.deviceId)
                && deadlineDuration.equals(other.deadlineDuration)
                && status.equals(other.status)
                && cancelReason.equals(other.cancelReason)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && appId.equals(other.appId)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.refundId,
                this.paymentId,
                this.orderId,
                this.amountMoney,
                this.reason,
                this.deviceId,
                this.deadlineDuration,
                this.status,
                this.cancelReason,
                this.createdAt,
                this.updatedAt,
                this.appId,
                this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaymentIdStage builder() {
        return new Builder();
    }

    public interface PaymentIdStage {
        /**
         * <p>The unique ID of the payment being refunded.</p>
         */
        AmountMoneyStage paymentId(@NotNull String paymentId);

        Builder from(TerminalRefund other);
    }

    public interface AmountMoneyStage {
        /**
         * <p>The amount of money, inclusive of <code>tax_money</code>, that the <code>TerminalRefund</code> should return.
         * This value is limited to the amount taken in the original payment minus any completed or
         * pending refunds.</p>
         */
        ReasonStage amountMoney(@NotNull Money amountMoney);
    }

    public interface ReasonStage {
        /**
         * <p>A description of the reason for the refund.</p>
         */
        DeviceIdStage reason(@NotNull String reason);
    }

    public interface DeviceIdStage {
        /**
         * <p>The unique ID of the device intended for this <code>TerminalRefund</code>.
         * The Id can be retrieved from /v2/devices api.</p>
         */
        _FinalStage deviceId(@NotNull String deviceId);
    }

    public interface _FinalStage {
        TerminalRefund build();

        /**
         * <p>A unique ID for this <code>TerminalRefund</code>.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>The reference to the payment refund created by completing this <code>TerminalRefund</code>.</p>
         */
        _FinalStage refundId(Optional<String> refundId);

        _FinalStage refundId(String refundId);

        /**
         * <p>The reference to the Square order ID for the payment identified by the <code>payment_id</code>.</p>
         */
        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        /**
         * <p>The RFC 3339 duration, after which the refund is automatically canceled.
         * A <code>TerminalRefund</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation.</p>
         * <p>Maximum: 5 minutes</p>
         */
        _FinalStage deadlineDuration(Optional<String> deadlineDuration);

        _FinalStage deadlineDuration(String deadlineDuration);

        _FinalStage deadlineDuration(Nullable<String> deadlineDuration);

        /**
         * <p>The status of the <code>TerminalRefund</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, or <code>COMPLETED</code>.</p>
         */
        _FinalStage status(Optional<String> status);

        _FinalStage status(String status);

        /**
         * <p>Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         */
        _FinalStage cancelReason(Optional<ActionCancelReason> cancelReason);

        _FinalStage cancelReason(ActionCancelReason cancelReason);

        /**
         * <p>The time when the <code>TerminalRefund</code> was created, as an RFC 3339 timestamp.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The time when the <code>TerminalRefund</code> was last updated, as an RFC 3339 timestamp.</p>
         */
        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        /**
         * <p>The ID of the application that created the refund.</p>
         */
        _FinalStage appId(Optional<String> appId);

        _FinalStage appId(String appId);

        /**
         * <p>The location of the device where the <code>TerminalRefund</code> was directed.</p>
         */
        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements PaymentIdStage, AmountMoneyStage, ReasonStage, DeviceIdStage, _FinalStage {
        private String paymentId;

        private Money amountMoney;

        private String reason;

        private String deviceId;

        private Optional<String> locationId = Optional.empty();

        private Optional<String> appId = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<ActionCancelReason> cancelReason = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<String> deadlineDuration = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> refundId = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TerminalRefund other) {
            id(other.getId());
            refundId(other.getRefundId());
            paymentId(other.getPaymentId());
            orderId(other.getOrderId());
            amountMoney(other.getAmountMoney());
            reason(other.getReason());
            deviceId(other.getDeviceId());
            deadlineDuration(other.getDeadlineDuration());
            status(other.getStatus());
            cancelReason(other.getCancelReason());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            appId(other.getAppId());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The unique ID of the payment being refunded.</p>
         * <p>The unique ID of the payment being refunded.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payment_id")
        public AmountMoneyStage paymentId(@NotNull String paymentId) {
            this.paymentId = Objects.requireNonNull(paymentId, "paymentId must not be null");
            return this;
        }

        /**
         * <p>The amount of money, inclusive of <code>tax_money</code>, that the <code>TerminalRefund</code> should return.
         * This value is limited to the amount taken in the original payment minus any completed or
         * pending refunds.</p>
         * <p>The amount of money, inclusive of <code>tax_money</code>, that the <code>TerminalRefund</code> should return.
         * This value is limited to the amount taken in the original payment minus any completed or
         * pending refunds.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public ReasonStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>A description of the reason for the refund.</p>
         * <p>A description of the reason for the refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("reason")
        public DeviceIdStage reason(@NotNull String reason) {
            this.reason = Objects.requireNonNull(reason, "reason must not be null");
            return this;
        }

        /**
         * <p>The unique ID of the device intended for this <code>TerminalRefund</code>.
         * The Id can be retrieved from /v2/devices api.</p>
         * <p>The unique ID of the device intended for this <code>TerminalRefund</code>.
         * The Id can be retrieved from /v2/devices api.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("device_id")
        public _FinalStage deviceId(@NotNull String deviceId) {
            this.deviceId = Objects.requireNonNull(deviceId, "deviceId must not be null");
            return this;
        }

        /**
         * <p>The location of the device where the <code>TerminalRefund</code> was directed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The location of the device where the <code>TerminalRefund</code> was directed.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>The ID of the application that created the refund.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>The ID of the application that created the refund.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "app_id", nulls = Nulls.SKIP)
        public _FinalStage appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * <p>The time when the <code>TerminalRefund</code> was last updated, as an RFC 3339 timestamp.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The time when the <code>TerminalRefund</code> was last updated, as an RFC 3339 timestamp.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The time when the <code>TerminalRefund</code> was created, as an RFC 3339 timestamp.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The time when the <code>TerminalRefund</code> was created, as an RFC 3339 timestamp.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cancelReason(ActionCancelReason cancelReason) {
            this.cancelReason = Optional.ofNullable(cancelReason);
            return this;
        }

        /**
         * <p>Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cancel_reason", nulls = Nulls.SKIP)
        public _FinalStage cancelReason(Optional<ActionCancelReason> cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        /**
         * <p>The status of the <code>TerminalRefund</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, or <code>COMPLETED</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The status of the <code>TerminalRefund</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, or <code>COMPLETED</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<String> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The RFC 3339 duration, after which the refund is automatically canceled.
         * A <code>TerminalRefund</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation.</p>
         * <p>Maximum: 5 minutes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deadlineDuration(Nullable<String> deadlineDuration) {
            if (deadlineDuration.isNull()) {
                this.deadlineDuration = null;
            } else if (deadlineDuration.isEmpty()) {
                this.deadlineDuration = Optional.empty();
            } else {
                this.deadlineDuration = Optional.of(deadlineDuration.get());
            }
            return this;
        }

        /**
         * <p>The RFC 3339 duration, after which the refund is automatically canceled.
         * A <code>TerminalRefund</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation.</p>
         * <p>Maximum: 5 minutes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deadlineDuration(String deadlineDuration) {
            this.deadlineDuration = Optional.ofNullable(deadlineDuration);
            return this;
        }

        /**
         * <p>The RFC 3339 duration, after which the refund is automatically canceled.
         * A <code>TerminalRefund</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation.</p>
         * <p>Maximum: 5 minutes</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deadline_duration", nulls = Nulls.SKIP)
        public _FinalStage deadlineDuration(Optional<String> deadlineDuration) {
            this.deadlineDuration = deadlineDuration;
            return this;
        }

        /**
         * <p>The reference to the Square order ID for the payment identified by the <code>payment_id</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>The reference to the Square order ID for the payment identified by the <code>payment_id</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>The reference to the payment refund created by completing this <code>TerminalRefund</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refundId(String refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        /**
         * <p>The reference to the payment refund created by completing this <code>TerminalRefund</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "refund_id", nulls = Nulls.SKIP)
        public _FinalStage refundId(Optional<String> refundId) {
            this.refundId = refundId;
            return this;
        }

        /**
         * <p>A unique ID for this <code>TerminalRefund</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>A unique ID for this <code>TerminalRefund</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public TerminalRefund build() {
            return new TerminalRefund(
                    id,
                    refundId,
                    paymentId,
                    orderId,
                    amountMoney,
                    reason,
                    deviceId,
                    deadlineDuration,
                    status,
                    cancelReason,
                    createdAt,
                    updatedAt,
                    appId,
                    locationId,
                    additionalProperties);
        }
    }
}
