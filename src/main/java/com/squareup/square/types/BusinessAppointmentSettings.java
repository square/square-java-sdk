/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BusinessAppointmentSettings.Builder.class)
public final class BusinessAppointmentSettings {
    private final Optional<List<BusinessAppointmentSettingsBookingLocationType>> locationTypes;

    private final Optional<BusinessAppointmentSettingsAlignmentTime> alignmentTime;

    private final Optional<Integer> minBookingLeadTimeSeconds;

    private final Optional<Integer> maxBookingLeadTimeSeconds;

    private final Optional<Boolean> anyTeamMemberBookingEnabled;

    private final Optional<Boolean> multipleServiceBookingEnabled;

    private final Optional<BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType> maxAppointmentsPerDayLimitType;

    private final Optional<Integer> maxAppointmentsPerDayLimit;

    private final Optional<Integer> cancellationWindowSeconds;

    private final Optional<Money> cancellationFeeMoney;

    private final Optional<BusinessAppointmentSettingsCancellationPolicy> cancellationPolicy;

    private final Optional<String> cancellationPolicyText;

    private final Optional<Boolean> skipBookingFlowStaffSelection;

    private final Map<String, Object> additionalProperties;

    private BusinessAppointmentSettings(
            Optional<List<BusinessAppointmentSettingsBookingLocationType>> locationTypes,
            Optional<BusinessAppointmentSettingsAlignmentTime> alignmentTime,
            Optional<Integer> minBookingLeadTimeSeconds,
            Optional<Integer> maxBookingLeadTimeSeconds,
            Optional<Boolean> anyTeamMemberBookingEnabled,
            Optional<Boolean> multipleServiceBookingEnabled,
            Optional<BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType> maxAppointmentsPerDayLimitType,
            Optional<Integer> maxAppointmentsPerDayLimit,
            Optional<Integer> cancellationWindowSeconds,
            Optional<Money> cancellationFeeMoney,
            Optional<BusinessAppointmentSettingsCancellationPolicy> cancellationPolicy,
            Optional<String> cancellationPolicyText,
            Optional<Boolean> skipBookingFlowStaffSelection,
            Map<String, Object> additionalProperties) {
        this.locationTypes = locationTypes;
        this.alignmentTime = alignmentTime;
        this.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds;
        this.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds;
        this.anyTeamMemberBookingEnabled = anyTeamMemberBookingEnabled;
        this.multipleServiceBookingEnabled = multipleServiceBookingEnabled;
        this.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType;
        this.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit;
        this.cancellationWindowSeconds = cancellationWindowSeconds;
        this.cancellationFeeMoney = cancellationFeeMoney;
        this.cancellationPolicy = cancellationPolicy;
        this.cancellationPolicyText = cancellationPolicyText;
        this.skipBookingFlowStaffSelection = skipBookingFlowStaffSelection;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Types of the location allowed for bookings.
     * See <a href="#type-businessappointmentsettingsbookinglocationtype">BusinessAppointmentSettingsBookingLocationType</a> for possible values
     */
    @JsonIgnore
    public Optional<List<BusinessAppointmentSettingsBookingLocationType>> getLocationTypes() {
        if (locationTypes == null) {
            return Optional.empty();
        }
        return locationTypes;
    }

    /**
     * @return The time unit of the service duration for bookings.
     * See <a href="#type-businessappointmentsettingsalignmenttime">BusinessAppointmentSettingsAlignmentTime</a> for possible values
     */
    @JsonProperty("alignment_time")
    public Optional<BusinessAppointmentSettingsAlignmentTime> getAlignmentTime() {
        return alignmentTime;
    }

    /**
     * @return The minimum lead time in seconds before a service can be booked. A booking must be created at least this amount of time before its starting time.
     */
    @JsonIgnore
    public Optional<Integer> getMinBookingLeadTimeSeconds() {
        if (minBookingLeadTimeSeconds == null) {
            return Optional.empty();
        }
        return minBookingLeadTimeSeconds;
    }

    /**
     * @return The maximum lead time in seconds before a service can be booked. A booking must be created at most this amount of time before its starting time.
     */
    @JsonIgnore
    public Optional<Integer> getMaxBookingLeadTimeSeconds() {
        if (maxBookingLeadTimeSeconds == null) {
            return Optional.empty();
        }
        return maxBookingLeadTimeSeconds;
    }

    /**
     * @return Indicates whether a customer can choose from all available time slots and have a staff member assigned
     * automatically (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getAnyTeamMemberBookingEnabled() {
        if (anyTeamMemberBookingEnabled == null) {
            return Optional.empty();
        }
        return anyTeamMemberBookingEnabled;
    }

    /**
     * @return Indicates whether a customer can book multiple services in a single online booking.
     */
    @JsonIgnore
    public Optional<Boolean> getMultipleServiceBookingEnabled() {
        if (multipleServiceBookingEnabled == null) {
            return Optional.empty();
        }
        return multipleServiceBookingEnabled;
    }

    /**
     * @return Indicates whether the daily appointment limit applies to team members or to
     * business locations.
     * See <a href="#type-businessappointmentsettingsmaxappointmentsperdaylimittype">BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType</a> for possible values
     */
    @JsonProperty("max_appointments_per_day_limit_type")
    public Optional<BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType> getMaxAppointmentsPerDayLimitType() {
        return maxAppointmentsPerDayLimitType;
    }

    /**
     * @return The maximum number of daily appointments per team member or per location.
     */
    @JsonIgnore
    public Optional<Integer> getMaxAppointmentsPerDayLimit() {
        if (maxAppointmentsPerDayLimit == null) {
            return Optional.empty();
        }
        return maxAppointmentsPerDayLimit;
    }

    /**
     * @return The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
     */
    @JsonIgnore
    public Optional<Integer> getCancellationWindowSeconds() {
        if (cancellationWindowSeconds == null) {
            return Optional.empty();
        }
        return cancellationWindowSeconds;
    }

    /**
     * @return The flat-fee amount charged for a no-show booking.
     */
    @JsonProperty("cancellation_fee_money")
    public Optional<Money> getCancellationFeeMoney() {
        return cancellationFeeMoney;
    }

    /**
     * @return The cancellation policy adopted by the seller.
     * See <a href="#type-businessappointmentsettingscancellationpolicy">BusinessAppointmentSettingsCancellationPolicy</a> for possible values
     */
    @JsonProperty("cancellation_policy")
    public Optional<BusinessAppointmentSettingsCancellationPolicy> getCancellationPolicy() {
        return cancellationPolicy;
    }

    /**
     * @return The free-form text of the seller's cancellation policy.
     */
    @JsonIgnore
    public Optional<String> getCancellationPolicyText() {
        if (cancellationPolicyText == null) {
            return Optional.empty();
        }
        return cancellationPolicyText;
    }

    /**
     * @return Indicates whether customers has an assigned staff member (<code>true</code>) or can select s staff member of their choice (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getSkipBookingFlowStaffSelection() {
        if (skipBookingFlowStaffSelection == null) {
            return Optional.empty();
        }
        return skipBookingFlowStaffSelection;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_types")
    private Optional<List<BusinessAppointmentSettingsBookingLocationType>> _getLocationTypes() {
        return locationTypes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("min_booking_lead_time_seconds")
    private Optional<Integer> _getMinBookingLeadTimeSeconds() {
        return minBookingLeadTimeSeconds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("max_booking_lead_time_seconds")
    private Optional<Integer> _getMaxBookingLeadTimeSeconds() {
        return maxBookingLeadTimeSeconds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("any_team_member_booking_enabled")
    private Optional<Boolean> _getAnyTeamMemberBookingEnabled() {
        return anyTeamMemberBookingEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("multiple_service_booking_enabled")
    private Optional<Boolean> _getMultipleServiceBookingEnabled() {
        return multipleServiceBookingEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("max_appointments_per_day_limit")
    private Optional<Integer> _getMaxAppointmentsPerDayLimit() {
        return maxAppointmentsPerDayLimit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cancellation_window_seconds")
    private Optional<Integer> _getCancellationWindowSeconds() {
        return cancellationWindowSeconds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cancellation_policy_text")
    private Optional<String> _getCancellationPolicyText() {
        return cancellationPolicyText;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("skip_booking_flow_staff_selection")
    private Optional<Boolean> _getSkipBookingFlowStaffSelection() {
        return skipBookingFlowStaffSelection;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BusinessAppointmentSettings && equalTo((BusinessAppointmentSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BusinessAppointmentSettings other) {
        return locationTypes.equals(other.locationTypes)
                && alignmentTime.equals(other.alignmentTime)
                && minBookingLeadTimeSeconds.equals(other.minBookingLeadTimeSeconds)
                && maxBookingLeadTimeSeconds.equals(other.maxBookingLeadTimeSeconds)
                && anyTeamMemberBookingEnabled.equals(other.anyTeamMemberBookingEnabled)
                && multipleServiceBookingEnabled.equals(other.multipleServiceBookingEnabled)
                && maxAppointmentsPerDayLimitType.equals(other.maxAppointmentsPerDayLimitType)
                && maxAppointmentsPerDayLimit.equals(other.maxAppointmentsPerDayLimit)
                && cancellationWindowSeconds.equals(other.cancellationWindowSeconds)
                && cancellationFeeMoney.equals(other.cancellationFeeMoney)
                && cancellationPolicy.equals(other.cancellationPolicy)
                && cancellationPolicyText.equals(other.cancellationPolicyText)
                && skipBookingFlowStaffSelection.equals(other.skipBookingFlowStaffSelection);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.locationTypes,
                this.alignmentTime,
                this.minBookingLeadTimeSeconds,
                this.maxBookingLeadTimeSeconds,
                this.anyTeamMemberBookingEnabled,
                this.multipleServiceBookingEnabled,
                this.maxAppointmentsPerDayLimitType,
                this.maxAppointmentsPerDayLimit,
                this.cancellationWindowSeconds,
                this.cancellationFeeMoney,
                this.cancellationPolicy,
                this.cancellationPolicyText,
                this.skipBookingFlowStaffSelection);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<BusinessAppointmentSettingsBookingLocationType>> locationTypes = Optional.empty();

        private Optional<BusinessAppointmentSettingsAlignmentTime> alignmentTime = Optional.empty();

        private Optional<Integer> minBookingLeadTimeSeconds = Optional.empty();

        private Optional<Integer> maxBookingLeadTimeSeconds = Optional.empty();

        private Optional<Boolean> anyTeamMemberBookingEnabled = Optional.empty();

        private Optional<Boolean> multipleServiceBookingEnabled = Optional.empty();

        private Optional<BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType> maxAppointmentsPerDayLimitType =
                Optional.empty();

        private Optional<Integer> maxAppointmentsPerDayLimit = Optional.empty();

        private Optional<Integer> cancellationWindowSeconds = Optional.empty();

        private Optional<Money> cancellationFeeMoney = Optional.empty();

        private Optional<BusinessAppointmentSettingsCancellationPolicy> cancellationPolicy = Optional.empty();

        private Optional<String> cancellationPolicyText = Optional.empty();

        private Optional<Boolean> skipBookingFlowStaffSelection = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BusinessAppointmentSettings other) {
            locationTypes(other.getLocationTypes());
            alignmentTime(other.getAlignmentTime());
            minBookingLeadTimeSeconds(other.getMinBookingLeadTimeSeconds());
            maxBookingLeadTimeSeconds(other.getMaxBookingLeadTimeSeconds());
            anyTeamMemberBookingEnabled(other.getAnyTeamMemberBookingEnabled());
            multipleServiceBookingEnabled(other.getMultipleServiceBookingEnabled());
            maxAppointmentsPerDayLimitType(other.getMaxAppointmentsPerDayLimitType());
            maxAppointmentsPerDayLimit(other.getMaxAppointmentsPerDayLimit());
            cancellationWindowSeconds(other.getCancellationWindowSeconds());
            cancellationFeeMoney(other.getCancellationFeeMoney());
            cancellationPolicy(other.getCancellationPolicy());
            cancellationPolicyText(other.getCancellationPolicyText());
            skipBookingFlowStaffSelection(other.getSkipBookingFlowStaffSelection());
            return this;
        }

        @JsonSetter(value = "location_types", nulls = Nulls.SKIP)
        public Builder locationTypes(Optional<List<BusinessAppointmentSettingsBookingLocationType>> locationTypes) {
            this.locationTypes = locationTypes;
            return this;
        }

        public Builder locationTypes(List<BusinessAppointmentSettingsBookingLocationType> locationTypes) {
            this.locationTypes = Optional.ofNullable(locationTypes);
            return this;
        }

        public Builder locationTypes(Nullable<List<BusinessAppointmentSettingsBookingLocationType>> locationTypes) {
            if (locationTypes.isNull()) {
                this.locationTypes = null;
            } else if (locationTypes.isEmpty()) {
                this.locationTypes = Optional.empty();
            } else {
                this.locationTypes = Optional.of(locationTypes.get());
            }
            return this;
        }

        @JsonSetter(value = "alignment_time", nulls = Nulls.SKIP)
        public Builder alignmentTime(Optional<BusinessAppointmentSettingsAlignmentTime> alignmentTime) {
            this.alignmentTime = alignmentTime;
            return this;
        }

        public Builder alignmentTime(BusinessAppointmentSettingsAlignmentTime alignmentTime) {
            this.alignmentTime = Optional.ofNullable(alignmentTime);
            return this;
        }

        @JsonSetter(value = "min_booking_lead_time_seconds", nulls = Nulls.SKIP)
        public Builder minBookingLeadTimeSeconds(Optional<Integer> minBookingLeadTimeSeconds) {
            this.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds;
            return this;
        }

        public Builder minBookingLeadTimeSeconds(Integer minBookingLeadTimeSeconds) {
            this.minBookingLeadTimeSeconds = Optional.ofNullable(minBookingLeadTimeSeconds);
            return this;
        }

        public Builder minBookingLeadTimeSeconds(Nullable<Integer> minBookingLeadTimeSeconds) {
            if (minBookingLeadTimeSeconds.isNull()) {
                this.minBookingLeadTimeSeconds = null;
            } else if (minBookingLeadTimeSeconds.isEmpty()) {
                this.minBookingLeadTimeSeconds = Optional.empty();
            } else {
                this.minBookingLeadTimeSeconds = Optional.of(minBookingLeadTimeSeconds.get());
            }
            return this;
        }

        @JsonSetter(value = "max_booking_lead_time_seconds", nulls = Nulls.SKIP)
        public Builder maxBookingLeadTimeSeconds(Optional<Integer> maxBookingLeadTimeSeconds) {
            this.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds;
            return this;
        }

        public Builder maxBookingLeadTimeSeconds(Integer maxBookingLeadTimeSeconds) {
            this.maxBookingLeadTimeSeconds = Optional.ofNullable(maxBookingLeadTimeSeconds);
            return this;
        }

        public Builder maxBookingLeadTimeSeconds(Nullable<Integer> maxBookingLeadTimeSeconds) {
            if (maxBookingLeadTimeSeconds.isNull()) {
                this.maxBookingLeadTimeSeconds = null;
            } else if (maxBookingLeadTimeSeconds.isEmpty()) {
                this.maxBookingLeadTimeSeconds = Optional.empty();
            } else {
                this.maxBookingLeadTimeSeconds = Optional.of(maxBookingLeadTimeSeconds.get());
            }
            return this;
        }

        @JsonSetter(value = "any_team_member_booking_enabled", nulls = Nulls.SKIP)
        public Builder anyTeamMemberBookingEnabled(Optional<Boolean> anyTeamMemberBookingEnabled) {
            this.anyTeamMemberBookingEnabled = anyTeamMemberBookingEnabled;
            return this;
        }

        public Builder anyTeamMemberBookingEnabled(Boolean anyTeamMemberBookingEnabled) {
            this.anyTeamMemberBookingEnabled = Optional.ofNullable(anyTeamMemberBookingEnabled);
            return this;
        }

        public Builder anyTeamMemberBookingEnabled(Nullable<Boolean> anyTeamMemberBookingEnabled) {
            if (anyTeamMemberBookingEnabled.isNull()) {
                this.anyTeamMemberBookingEnabled = null;
            } else if (anyTeamMemberBookingEnabled.isEmpty()) {
                this.anyTeamMemberBookingEnabled = Optional.empty();
            } else {
                this.anyTeamMemberBookingEnabled = Optional.of(anyTeamMemberBookingEnabled.get());
            }
            return this;
        }

        @JsonSetter(value = "multiple_service_booking_enabled", nulls = Nulls.SKIP)
        public Builder multipleServiceBookingEnabled(Optional<Boolean> multipleServiceBookingEnabled) {
            this.multipleServiceBookingEnabled = multipleServiceBookingEnabled;
            return this;
        }

        public Builder multipleServiceBookingEnabled(Boolean multipleServiceBookingEnabled) {
            this.multipleServiceBookingEnabled = Optional.ofNullable(multipleServiceBookingEnabled);
            return this;
        }

        public Builder multipleServiceBookingEnabled(Nullable<Boolean> multipleServiceBookingEnabled) {
            if (multipleServiceBookingEnabled.isNull()) {
                this.multipleServiceBookingEnabled = null;
            } else if (multipleServiceBookingEnabled.isEmpty()) {
                this.multipleServiceBookingEnabled = Optional.empty();
            } else {
                this.multipleServiceBookingEnabled = Optional.of(multipleServiceBookingEnabled.get());
            }
            return this;
        }

        @JsonSetter(value = "max_appointments_per_day_limit_type", nulls = Nulls.SKIP)
        public Builder maxAppointmentsPerDayLimitType(
                Optional<BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType> maxAppointmentsPerDayLimitType) {
            this.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType;
            return this;
        }

        public Builder maxAppointmentsPerDayLimitType(
                BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType maxAppointmentsPerDayLimitType) {
            this.maxAppointmentsPerDayLimitType = Optional.ofNullable(maxAppointmentsPerDayLimitType);
            return this;
        }

        @JsonSetter(value = "max_appointments_per_day_limit", nulls = Nulls.SKIP)
        public Builder maxAppointmentsPerDayLimit(Optional<Integer> maxAppointmentsPerDayLimit) {
            this.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit;
            return this;
        }

        public Builder maxAppointmentsPerDayLimit(Integer maxAppointmentsPerDayLimit) {
            this.maxAppointmentsPerDayLimit = Optional.ofNullable(maxAppointmentsPerDayLimit);
            return this;
        }

        public Builder maxAppointmentsPerDayLimit(Nullable<Integer> maxAppointmentsPerDayLimit) {
            if (maxAppointmentsPerDayLimit.isNull()) {
                this.maxAppointmentsPerDayLimit = null;
            } else if (maxAppointmentsPerDayLimit.isEmpty()) {
                this.maxAppointmentsPerDayLimit = Optional.empty();
            } else {
                this.maxAppointmentsPerDayLimit = Optional.of(maxAppointmentsPerDayLimit.get());
            }
            return this;
        }

        @JsonSetter(value = "cancellation_window_seconds", nulls = Nulls.SKIP)
        public Builder cancellationWindowSeconds(Optional<Integer> cancellationWindowSeconds) {
            this.cancellationWindowSeconds = cancellationWindowSeconds;
            return this;
        }

        public Builder cancellationWindowSeconds(Integer cancellationWindowSeconds) {
            this.cancellationWindowSeconds = Optional.ofNullable(cancellationWindowSeconds);
            return this;
        }

        public Builder cancellationWindowSeconds(Nullable<Integer> cancellationWindowSeconds) {
            if (cancellationWindowSeconds.isNull()) {
                this.cancellationWindowSeconds = null;
            } else if (cancellationWindowSeconds.isEmpty()) {
                this.cancellationWindowSeconds = Optional.empty();
            } else {
                this.cancellationWindowSeconds = Optional.of(cancellationWindowSeconds.get());
            }
            return this;
        }

        @JsonSetter(value = "cancellation_fee_money", nulls = Nulls.SKIP)
        public Builder cancellationFeeMoney(Optional<Money> cancellationFeeMoney) {
            this.cancellationFeeMoney = cancellationFeeMoney;
            return this;
        }

        public Builder cancellationFeeMoney(Money cancellationFeeMoney) {
            this.cancellationFeeMoney = Optional.ofNullable(cancellationFeeMoney);
            return this;
        }

        @JsonSetter(value = "cancellation_policy", nulls = Nulls.SKIP)
        public Builder cancellationPolicy(Optional<BusinessAppointmentSettingsCancellationPolicy> cancellationPolicy) {
            this.cancellationPolicy = cancellationPolicy;
            return this;
        }

        public Builder cancellationPolicy(BusinessAppointmentSettingsCancellationPolicy cancellationPolicy) {
            this.cancellationPolicy = Optional.ofNullable(cancellationPolicy);
            return this;
        }

        @JsonSetter(value = "cancellation_policy_text", nulls = Nulls.SKIP)
        public Builder cancellationPolicyText(Optional<String> cancellationPolicyText) {
            this.cancellationPolicyText = cancellationPolicyText;
            return this;
        }

        public Builder cancellationPolicyText(String cancellationPolicyText) {
            this.cancellationPolicyText = Optional.ofNullable(cancellationPolicyText);
            return this;
        }

        public Builder cancellationPolicyText(Nullable<String> cancellationPolicyText) {
            if (cancellationPolicyText.isNull()) {
                this.cancellationPolicyText = null;
            } else if (cancellationPolicyText.isEmpty()) {
                this.cancellationPolicyText = Optional.empty();
            } else {
                this.cancellationPolicyText = Optional.of(cancellationPolicyText.get());
            }
            return this;
        }

        @JsonSetter(value = "skip_booking_flow_staff_selection", nulls = Nulls.SKIP)
        public Builder skipBookingFlowStaffSelection(Optional<Boolean> skipBookingFlowStaffSelection) {
            this.skipBookingFlowStaffSelection = skipBookingFlowStaffSelection;
            return this;
        }

        public Builder skipBookingFlowStaffSelection(Boolean skipBookingFlowStaffSelection) {
            this.skipBookingFlowStaffSelection = Optional.ofNullable(skipBookingFlowStaffSelection);
            return this;
        }

        public Builder skipBookingFlowStaffSelection(Nullable<Boolean> skipBookingFlowStaffSelection) {
            if (skipBookingFlowStaffSelection.isNull()) {
                this.skipBookingFlowStaffSelection = null;
            } else if (skipBookingFlowStaffSelection.isEmpty()) {
                this.skipBookingFlowStaffSelection = Optional.empty();
            } else {
                this.skipBookingFlowStaffSelection = Optional.of(skipBookingFlowStaffSelection.get());
            }
            return this;
        }

        public BusinessAppointmentSettings build() {
            return new BusinessAppointmentSettings(
                    locationTypes,
                    alignmentTime,
                    minBookingLeadTimeSeconds,
                    maxBookingLeadTimeSeconds,
                    anyTeamMemberBookingEnabled,
                    multipleServiceBookingEnabled,
                    maxAppointmentsPerDayLimitType,
                    maxAppointmentsPerDayLimit,
                    cancellationWindowSeconds,
                    cancellationFeeMoney,
                    cancellationPolicy,
                    cancellationPolicyText,
                    skipBookingFlowStaffSelection,
                    additionalProperties);
        }
    }
}
