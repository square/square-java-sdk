/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class MeasurementUnitLength {
    public static final MeasurementUnitLength IMPERIAL_MILE =
            new MeasurementUnitLength(Value.IMPERIAL_MILE, "IMPERIAL_MILE");

    public static final MeasurementUnitLength IMPERIAL_INCH =
            new MeasurementUnitLength(Value.IMPERIAL_INCH, "IMPERIAL_INCH");

    public static final MeasurementUnitLength METRIC_CENTIMETER =
            new MeasurementUnitLength(Value.METRIC_CENTIMETER, "METRIC_CENTIMETER");

    public static final MeasurementUnitLength IMPERIAL_FOOT =
            new MeasurementUnitLength(Value.IMPERIAL_FOOT, "IMPERIAL_FOOT");

    public static final MeasurementUnitLength METRIC_METER =
            new MeasurementUnitLength(Value.METRIC_METER, "METRIC_METER");

    public static final MeasurementUnitLength METRIC_KILOMETER =
            new MeasurementUnitLength(Value.METRIC_KILOMETER, "METRIC_KILOMETER");

    public static final MeasurementUnitLength IMPERIAL_YARD =
            new MeasurementUnitLength(Value.IMPERIAL_YARD, "IMPERIAL_YARD");

    public static final MeasurementUnitLength METRIC_MILLIMETER =
            new MeasurementUnitLength(Value.METRIC_MILLIMETER, "METRIC_MILLIMETER");

    private final Value value;

    private final String string;

    MeasurementUnitLength(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof MeasurementUnitLength
                        && this.string.equals(((MeasurementUnitLength) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case IMPERIAL_MILE:
                return visitor.visitImperialMile();
            case IMPERIAL_INCH:
                return visitor.visitImperialInch();
            case METRIC_CENTIMETER:
                return visitor.visitMetricCentimeter();
            case IMPERIAL_FOOT:
                return visitor.visitImperialFoot();
            case METRIC_METER:
                return visitor.visitMetricMeter();
            case METRIC_KILOMETER:
                return visitor.visitMetricKilometer();
            case IMPERIAL_YARD:
                return visitor.visitImperialYard();
            case METRIC_MILLIMETER:
                return visitor.visitMetricMillimeter();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static MeasurementUnitLength valueOf(String value) {
        switch (value) {
            case "IMPERIAL_MILE":
                return IMPERIAL_MILE;
            case "IMPERIAL_INCH":
                return IMPERIAL_INCH;
            case "METRIC_CENTIMETER":
                return METRIC_CENTIMETER;
            case "IMPERIAL_FOOT":
                return IMPERIAL_FOOT;
            case "METRIC_METER":
                return METRIC_METER;
            case "METRIC_KILOMETER":
                return METRIC_KILOMETER;
            case "IMPERIAL_YARD":
                return IMPERIAL_YARD;
            case "METRIC_MILLIMETER":
                return METRIC_MILLIMETER;
            default:
                return new MeasurementUnitLength(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        IMPERIAL_INCH,

        IMPERIAL_FOOT,

        IMPERIAL_YARD,

        IMPERIAL_MILE,

        METRIC_MILLIMETER,

        METRIC_CENTIMETER,

        METRIC_METER,

        METRIC_KILOMETER,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitImperialInch();

        T visitImperialFoot();

        T visitImperialYard();

        T visitImperialMile();

        T visitMetricMillimeter();

        T visitMetricCentimeter();

        T visitMetricMeter();

        T visitMetricKilometer();

        T visitUnknown(String unknownType);
    }
}
