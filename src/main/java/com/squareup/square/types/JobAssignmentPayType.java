/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class JobAssignmentPayType {
    public static final JobAssignmentPayType HOURLY = new JobAssignmentPayType(Value.HOURLY, "HOURLY");

    public static final JobAssignmentPayType SALARY = new JobAssignmentPayType(Value.SALARY, "SALARY");

    public static final JobAssignmentPayType NONE = new JobAssignmentPayType(Value.NONE, "NONE");

    private final Value value;

    private final String string;

    JobAssignmentPayType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof JobAssignmentPayType && this.string.equals(((JobAssignmentPayType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case HOURLY:
                return visitor.visitHourly();
            case SALARY:
                return visitor.visitSalary();
            case NONE:
                return visitor.visitNone();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static JobAssignmentPayType valueOf(String value) {
        switch (value) {
            case "HOURLY":
                return HOURLY;
            case "SALARY":
                return SALARY;
            case "NONE":
                return NONE;
            default:
                return new JobAssignmentPayType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        NONE,

        HOURLY,

        SALARY,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitNone();

        T visitHourly();

        T visitSalary();

        T visitUnknown(String unknownType);
    }
}
