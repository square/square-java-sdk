/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GiftCardCreatedEventObject.Builder.class)
public final class GiftCardCreatedEventObject {
    private final Optional<GiftCard> giftCard;

    private final Map<String, Object> additionalProperties;

    private GiftCardCreatedEventObject(Optional<GiftCard> giftCard, Map<String, Object> additionalProperties) {
        this.giftCard = giftCard;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The new gift card.
     */
    @JsonProperty("gift_card")
    public Optional<GiftCard> getGiftCard() {
        return giftCard;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GiftCardCreatedEventObject && equalTo((GiftCardCreatedEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GiftCardCreatedEventObject other) {
        return giftCard.equals(other.giftCard);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.giftCard);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<GiftCard> giftCard = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GiftCardCreatedEventObject other) {
            giftCard(other.getGiftCard());
            return this;
        }

        @JsonSetter(value = "gift_card", nulls = Nulls.SKIP)
        public Builder giftCard(Optional<GiftCard> giftCard) {
            this.giftCard = giftCard;
            return this;
        }

        public Builder giftCard(GiftCard giftCard) {
            this.giftCard = Optional.ofNullable(giftCard);
            return this;
        }

        public GiftCardCreatedEventObject build() {
            return new GiftCardCreatedEventObject(giftCard, additionalProperties);
        }
    }
}
