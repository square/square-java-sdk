/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyPromotionAvailableTimeData.Builder.class)
public final class LoyaltyPromotionAvailableTimeData {
    private final Optional<String> startDate;

    private final Optional<String> endDate;

    private final List<String> timePeriods;

    private final Map<String, Object> additionalProperties;

    private LoyaltyPromotionAvailableTimeData(
            Optional<String> startDate,
            Optional<String> endDate,
            List<String> timePeriods,
            Map<String, Object> additionalProperties) {
        this.startDate = startDate;
        this.endDate = endDate;
        this.timePeriods = timePeriods;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The date that the promotion starts, in <code>YYYY-MM-DD</code> format. Square populates this field
     * based on the provided <code>time_periods</code>.
     */
    @JsonProperty("start_date")
    public Optional<String> getStartDate() {
        return startDate;
    }

    /**
     * @return The date that the promotion ends, in <code>YYYY-MM-DD</code> format. Square populates this field
     * based on the provided <code>time_periods</code>. If an end date is not specified, an <code>ACTIVE</code> promotion
     * remains available until it is canceled.
     */
    @JsonProperty("end_date")
    public Optional<String> getEndDate() {
        return endDate;
    }

    /**
     * @return A list of <a href="https://tools.ietf.org/html/rfc5545#section-3.6.1">iCalendar (RFC 5545) events</a>
     * (<code>VEVENT</code>). Each event represents an available time period per day or days of the week.
     * A day can have a maximum of one available time period.
     * <p>Only <code>DTSTART</code>, <code>DURATION</code>, and <code>RRULE</code> are supported. <code>DTSTART</code> and <code>DURATION</code> are required and
     * timestamps must be in local (unzoned) time format. Include <code>RRULE</code> to specify recurring promotions,
     * an end date (using the <code>UNTIL</code> keyword), or both. For more information, see
     * <a href="https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#available-time">Available time</a>.</p>
     * <p>Note that <code>BEGIN:VEVENT</code> and <code>END:VEVENT</code> are optional in a <code>CreateLoyaltyPromotion</code> request
     * but are always included in the response.</p>
     */
    @JsonProperty("time_periods")
    public List<String> getTimePeriods() {
        return timePeriods;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyPromotionAvailableTimeData && equalTo((LoyaltyPromotionAvailableTimeData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyPromotionAvailableTimeData other) {
        return startDate.equals(other.startDate)
                && endDate.equals(other.endDate)
                && timePeriods.equals(other.timePeriods);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startDate, this.endDate, this.timePeriods);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private List<String> timePeriods = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoyaltyPromotionAvailableTimeData other) {
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            timePeriods(other.getTimePeriods());
            return this;
        }

        @JsonSetter(value = "start_date", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        @JsonSetter(value = "end_date", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        @JsonSetter(value = "time_periods", nulls = Nulls.SKIP)
        public Builder timePeriods(List<String> timePeriods) {
            this.timePeriods.clear();
            this.timePeriods.addAll(timePeriods);
            return this;
        }

        public Builder addTimePeriods(String timePeriods) {
            this.timePeriods.add(timePeriods);
            return this;
        }

        public Builder addAllTimePeriods(List<String> timePeriods) {
            this.timePeriods.addAll(timePeriods);
            return this;
        }

        public LoyaltyPromotionAvailableTimeData build() {
            return new LoyaltyPromotionAvailableTimeData(startDate, endDate, timePeriods, additionalProperties);
        }
    }
}
