/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DateRange.Builder.class)
public final class DateRange {
    private final Optional<String> startDate;

    private final Optional<String> endDate;

    private final Map<String, Object> additionalProperties;

    private DateRange(Optional<String> startDate, Optional<String> endDate, Map<String, Object> additionalProperties) {
        this.startDate = startDate;
        this.endDate = endDate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A string in <code>YYYY-MM-DD</code> format, such as <code>2017-10-31</code>, per the ISO 8601
     * extended format for calendar dates.
     * The beginning of a date range (inclusive).
     */
    @JsonIgnore
    public Optional<String> getStartDate() {
        if (startDate == null) {
            return Optional.empty();
        }
        return startDate;
    }

    /**
     * @return A string in <code>YYYY-MM-DD</code> format, such as <code>2017-10-31</code>, per the ISO 8601
     * extended format for calendar dates.
     * The end of a date range (inclusive).
     */
    @JsonIgnore
    public Optional<String> getEndDate() {
        if (endDate == null) {
            return Optional.empty();
        }
        return endDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_date")
    private Optional<String> _getStartDate() {
        return startDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_date")
    private Optional<String> _getEndDate() {
        return endDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DateRange && equalTo((DateRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DateRange other) {
        return startDate.equals(other.startDate) && endDate.equals(other.endDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startDate, this.endDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DateRange other) {
            startDate(other.getStartDate());
            endDate(other.getEndDate());
            return this;
        }

        @JsonSetter(value = "start_date", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Nullable<String> startDate) {
            if (startDate.isNull()) {
                this.startDate = null;
            } else if (startDate.isEmpty()) {
                this.startDate = Optional.empty();
            } else {
                this.startDate = Optional.of(startDate.get());
            }
            return this;
        }

        @JsonSetter(value = "end_date", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        public Builder endDate(Nullable<String> endDate) {
            if (endDate.isNull()) {
                this.endDate = null;
            } else if (endDate.isEmpty()) {
                this.endDate = Optional.empty();
            } else {
                this.endDate = Optional.of(endDate.get());
            }
            return this;
        }

        public DateRange build() {
            return new DateRange(startDate, endDate, additionalProperties);
        }
    }
}
