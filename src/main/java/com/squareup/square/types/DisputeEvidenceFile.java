/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DisputeEvidenceFile.Builder.class)
public final class DisputeEvidenceFile {
    private final Optional<String> filename;

    private final Optional<String> filetype;

    private final Map<String, Object> additionalProperties;

    private DisputeEvidenceFile(
            Optional<String> filename, Optional<String> filetype, Map<String, Object> additionalProperties) {
        this.filename = filename;
        this.filetype = filetype;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The file name including the file extension. For example: &quot;receipt.tiff&quot;.
     */
    @JsonIgnore
    public Optional<String> getFilename() {
        if (filename == null) {
            return Optional.empty();
        }
        return filename;
    }

    /**
     * @return Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
     */
    @JsonIgnore
    public Optional<String> getFiletype() {
        if (filetype == null) {
            return Optional.empty();
        }
        return filetype;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("filename")
    private Optional<String> _getFilename() {
        return filename;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("filetype")
    private Optional<String> _getFiletype() {
        return filetype;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DisputeEvidenceFile && equalTo((DisputeEvidenceFile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DisputeEvidenceFile other) {
        return filename.equals(other.filename) && filetype.equals(other.filetype);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filename, this.filetype);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> filename = Optional.empty();

        private Optional<String> filetype = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DisputeEvidenceFile other) {
            filename(other.getFilename());
            filetype(other.getFiletype());
            return this;
        }

        @JsonSetter(value = "filename", nulls = Nulls.SKIP)
        public Builder filename(Optional<String> filename) {
            this.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        public Builder filename(Nullable<String> filename) {
            if (filename.isNull()) {
                this.filename = null;
            } else if (filename.isEmpty()) {
                this.filename = Optional.empty();
            } else {
                this.filename = Optional.of(filename.get());
            }
            return this;
        }

        @JsonSetter(value = "filetype", nulls = Nulls.SKIP)
        public Builder filetype(Optional<String> filetype) {
            this.filetype = filetype;
            return this;
        }

        public Builder filetype(String filetype) {
            this.filetype = Optional.ofNullable(filetype);
            return this;
        }

        public Builder filetype(Nullable<String> filetype) {
            if (filetype.isNull()) {
                this.filetype = null;
            } else if (filetype.isEmpty()) {
                this.filetype = Optional.empty();
            } else {
                this.filetype = Optional.of(filetype.get());
            }
            return this;
        }

        public DisputeEvidenceFile build() {
            return new DisputeEvidenceFile(filename, filetype, additionalProperties);
        }
    }
}
