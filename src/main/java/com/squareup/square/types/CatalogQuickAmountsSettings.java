/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQuickAmountsSettings.Builder.class)
public final class CatalogQuickAmountsSettings {
    private final CatalogQuickAmountsSettingsOption option;

    private final Optional<Boolean> eligibleForAutoAmounts;

    private final Optional<List<CatalogQuickAmount>> amounts;

    private final Map<String, Object> additionalProperties;

    private CatalogQuickAmountsSettings(
            CatalogQuickAmountsSettingsOption option,
            Optional<Boolean> eligibleForAutoAmounts,
            Optional<List<CatalogQuickAmount>> amounts,
            Map<String, Object> additionalProperties) {
        this.option = option;
        this.eligibleForAutoAmounts = eligibleForAutoAmounts;
        this.amounts = amounts;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Represents the option seller currently uses on Quick Amounts.
     * See <a href="#type-catalogquickamountssettingsoption">CatalogQuickAmountsSettingsOption</a> for possible values
     */
    @JsonProperty("option")
    public CatalogQuickAmountsSettingsOption getOption() {
        return option;
    }

    /**
     * @return Represents location's eligibility for auto amounts
     * The boolean should be consistent with whether there are AUTO amounts in the <code>amounts</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getEligibleForAutoAmounts() {
        if (eligibleForAutoAmounts == null) {
            return Optional.empty();
        }
        return eligibleForAutoAmounts;
    }

    /**
     * @return Represents a set of Quick Amounts at this location.
     */
    @JsonIgnore
    public Optional<List<CatalogQuickAmount>> getAmounts() {
        if (amounts == null) {
            return Optional.empty();
        }
        return amounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("eligible_for_auto_amounts")
    private Optional<Boolean> _getEligibleForAutoAmounts() {
        return eligibleForAutoAmounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("amounts")
    private Optional<List<CatalogQuickAmount>> _getAmounts() {
        return amounts;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQuickAmountsSettings && equalTo((CatalogQuickAmountsSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQuickAmountsSettings other) {
        return option.equals(other.option)
                && eligibleForAutoAmounts.equals(other.eligibleForAutoAmounts)
                && amounts.equals(other.amounts);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.option, this.eligibleForAutoAmounts, this.amounts);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OptionStage builder() {
        return new Builder();
    }

    public interface OptionStage {
        _FinalStage option(@NotNull CatalogQuickAmountsSettingsOption option);

        Builder from(CatalogQuickAmountsSettings other);
    }

    public interface _FinalStage {
        CatalogQuickAmountsSettings build();

        _FinalStage eligibleForAutoAmounts(Optional<Boolean> eligibleForAutoAmounts);

        _FinalStage eligibleForAutoAmounts(Boolean eligibleForAutoAmounts);

        _FinalStage eligibleForAutoAmounts(Nullable<Boolean> eligibleForAutoAmounts);

        _FinalStage amounts(Optional<List<CatalogQuickAmount>> amounts);

        _FinalStage amounts(List<CatalogQuickAmount> amounts);

        _FinalStage amounts(Nullable<List<CatalogQuickAmount>> amounts);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OptionStage, _FinalStage {
        private CatalogQuickAmountsSettingsOption option;

        private Optional<List<CatalogQuickAmount>> amounts = Optional.empty();

        private Optional<Boolean> eligibleForAutoAmounts = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogQuickAmountsSettings other) {
            option(other.getOption());
            eligibleForAutoAmounts(other.getEligibleForAutoAmounts());
            amounts(other.getAmounts());
            return this;
        }

        /**
         * <p>Represents the option seller currently uses on Quick Amounts.
         * See <a href="#type-catalogquickamountssettingsoption">CatalogQuickAmountsSettingsOption</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("option")
        public _FinalStage option(@NotNull CatalogQuickAmountsSettingsOption option) {
            this.option = Objects.requireNonNull(option, "option must not be null");
            return this;
        }

        /**
         * <p>Represents a set of Quick Amounts at this location.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amounts(Nullable<List<CatalogQuickAmount>> amounts) {
            if (amounts.isNull()) {
                this.amounts = null;
            } else if (amounts.isEmpty()) {
                this.amounts = Optional.empty();
            } else {
                this.amounts = Optional.of(amounts.get());
            }
            return this;
        }

        /**
         * <p>Represents a set of Quick Amounts at this location.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amounts(List<CatalogQuickAmount> amounts) {
            this.amounts = Optional.ofNullable(amounts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "amounts", nulls = Nulls.SKIP)
        public _FinalStage amounts(Optional<List<CatalogQuickAmount>> amounts) {
            this.amounts = amounts;
            return this;
        }

        /**
         * <p>Represents location's eligibility for auto amounts
         * The boolean should be consistent with whether there are AUTO amounts in the <code>amounts</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleForAutoAmounts(Nullable<Boolean> eligibleForAutoAmounts) {
            if (eligibleForAutoAmounts.isNull()) {
                this.eligibleForAutoAmounts = null;
            } else if (eligibleForAutoAmounts.isEmpty()) {
                this.eligibleForAutoAmounts = Optional.empty();
            } else {
                this.eligibleForAutoAmounts = Optional.of(eligibleForAutoAmounts.get());
            }
            return this;
        }

        /**
         * <p>Represents location's eligibility for auto amounts
         * The boolean should be consistent with whether there are AUTO amounts in the <code>amounts</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleForAutoAmounts(Boolean eligibleForAutoAmounts) {
            this.eligibleForAutoAmounts = Optional.ofNullable(eligibleForAutoAmounts);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eligible_for_auto_amounts", nulls = Nulls.SKIP)
        public _FinalStage eligibleForAutoAmounts(Optional<Boolean> eligibleForAutoAmounts) {
            this.eligibleForAutoAmounts = eligibleForAutoAmounts;
            return this;
        }

        @java.lang.Override
        public CatalogQuickAmountsSettings build() {
            return new CatalogQuickAmountsSettings(option, eligibleForAutoAmounts, amounts, additionalProperties);
        }
    }
}
