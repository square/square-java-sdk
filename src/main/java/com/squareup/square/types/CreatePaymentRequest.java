/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreatePaymentRequest.Builder.class)
public final class CreatePaymentRequest {
    private final String sourceId;

    private final String idempotencyKey;

    private final Optional<Money> amountMoney;

    private final Optional<Money> tipMoney;

    private final Optional<Money> appFeeMoney;

    private final Optional<String> delayDuration;

    private final Optional<String> delayAction;

    private final Optional<Boolean> autocomplete;

    private final Optional<String> orderId;

    private final Optional<String> customerId;

    private final Optional<String> locationId;

    private final Optional<String> teamMemberId;

    private final Optional<String> referenceId;

    private final Optional<String> verificationToken;

    private final Optional<Boolean> acceptPartialAuthorization;

    private final Optional<String> buyerEmailAddress;

    private final Optional<String> buyerPhoneNumber;

    private final Optional<Address> billingAddress;

    private final Optional<Address> shippingAddress;

    private final Optional<String> note;

    private final Optional<String> statementDescriptionIdentifier;

    private final Optional<CashPaymentDetails> cashDetails;

    private final Optional<ExternalPaymentDetails> externalDetails;

    private final Optional<CustomerDetails> customerDetails;

    private final Optional<OfflinePaymentDetails> offlinePaymentDetails;

    private final Map<String, Object> additionalProperties;

    private CreatePaymentRequest(
            String sourceId,
            String idempotencyKey,
            Optional<Money> amountMoney,
            Optional<Money> tipMoney,
            Optional<Money> appFeeMoney,
            Optional<String> delayDuration,
            Optional<String> delayAction,
            Optional<Boolean> autocomplete,
            Optional<String> orderId,
            Optional<String> customerId,
            Optional<String> locationId,
            Optional<String> teamMemberId,
            Optional<String> referenceId,
            Optional<String> verificationToken,
            Optional<Boolean> acceptPartialAuthorization,
            Optional<String> buyerEmailAddress,
            Optional<String> buyerPhoneNumber,
            Optional<Address> billingAddress,
            Optional<Address> shippingAddress,
            Optional<String> note,
            Optional<String> statementDescriptionIdentifier,
            Optional<CashPaymentDetails> cashDetails,
            Optional<ExternalPaymentDetails> externalDetails,
            Optional<CustomerDetails> customerDetails,
            Optional<OfflinePaymentDetails> offlinePaymentDetails,
            Map<String, Object> additionalProperties) {
        this.sourceId = sourceId;
        this.idempotencyKey = idempotencyKey;
        this.amountMoney = amountMoney;
        this.tipMoney = tipMoney;
        this.appFeeMoney = appFeeMoney;
        this.delayDuration = delayDuration;
        this.delayAction = delayAction;
        this.autocomplete = autocomplete;
        this.orderId = orderId;
        this.customerId = customerId;
        this.locationId = locationId;
        this.teamMemberId = teamMemberId;
        this.referenceId = referenceId;
        this.verificationToken = verificationToken;
        this.acceptPartialAuthorization = acceptPartialAuthorization;
        this.buyerEmailAddress = buyerEmailAddress;
        this.buyerPhoneNumber = buyerPhoneNumber;
        this.billingAddress = billingAddress;
        this.shippingAddress = shippingAddress;
        this.note = note;
        this.statementDescriptionIdentifier = statementDescriptionIdentifier;
        this.cashDetails = cashDetails;
        this.externalDetails = externalDetails;
        this.customerDetails = customerDetails;
        this.offlinePaymentDetails = offlinePaymentDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID for the source of funds for this payment.
     * This could be a payment token generated by the Web Payments SDK for any of its
     * <a href="https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods">supported methods</a>,
     * including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment
     * that the seller received outside of Square, specify either &quot;CASH&quot; or &quot;EXTERNAL&quot;.
     * For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.
     */
    @JsonProperty("source_id")
    public String getSourceId() {
        return sourceId;
    }

    /**
     * @return A unique string that identifies this <code>CreatePayment</code> request. Keys can be any valid string
     * but must be unique for every <code>CreatePayment</code> request.
     * <p>Note: The number of allowed characters might be less than the stated maximum, if multi-byte
     * characters are used.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The amount of money to accept for this payment, not including <code>tip_money</code>.
     * <p>The amount must be specified in the smallest denomination of the applicable currency
     * (for example, US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The currency code must match the currency associated with the business
     * that is accepting the payment.</p>
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The amount designated as a tip, in addition to <code>amount_money</code>.
     * <p>The amount must be specified in the smallest denomination of the applicable currency
     * (for example, US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The currency code must match the currency associated with the business
     * that is accepting the payment.</p>
     */
    @JsonProperty("tip_money")
    public Optional<Money> getTipMoney() {
        return tipMoney;
    }

    /**
     * @return The amount of money that the developer is taking as a fee
     * for facilitating the payment on behalf of the seller.
     * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
     * <p>The amount must be specified in the smallest denomination of the applicable currency
     * (for example, US dollar amounts are specified in cents). For more information, see
     * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The fee currency code must match the currency associated with the seller
     * that is accepting the payment. The application must be from a developer
     * account in the same country and using the same currency code as the seller.</p>
     * <p>For more information about the application fee scenario, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
     * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
     * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
     */
    @JsonProperty("app_fee_money")
    public Optional<Money> getAppFeeMoney() {
        return appFeeMoney;
    }

    /**
     * @return The duration of time after the payment's creation when Square automatically
     * either completes or cancels the payment depending on the <code>delay_action</code> field value.
     * For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time threshold</a>.
     * <p>This parameter should be specified as a time duration, in RFC 3339 format.</p>
     * <p>Note: This feature is only supported for card payments. This parameter can only be set for a delayed
     * capture payment (<code>autocomplete=false</code>).</p>
     * <p>Default:</p>
     * <ul>
     * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
     * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
     * </ul>
     */
    @JsonProperty("delay_duration")
    public Optional<String> getDelayDuration() {
        return delayDuration;
    }

    /**
     * @return The action to be applied to the payment when the <code>delay_duration</code> has elapsed. The action must be
     * CANCEL or COMPLETE. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time Threshold</a>.
     * <p>Default: CANCEL</p>
     */
    @JsonProperty("delay_action")
    public Optional<String> getDelayAction() {
        return delayAction;
    }

    /**
     * @return If set to <code>true</code>, this payment will be completed when possible. If
     * set to <code>false</code>, this payment is held in an approved state until either
     * explicitly completed (captured) or canceled (voided). For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment">Delayed capture</a>.
     * <p>Default: true</p>
     */
    @JsonProperty("autocomplete")
    public Optional<Boolean> getAutocomplete() {
        return autocomplete;
    }

    /**
     * @return Associates a previously created order with this payment.
     */
    @JsonProperty("order_id")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return The <a href="entity:Customer">Customer</a> ID of the customer associated with the payment.
     * <p>This is required if the <code>source_id</code> refers to a card on file created using the Cards API.</p>
     */
    @JsonProperty("customer_id")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    /**
     * @return The location ID to associate with the payment. If not specified, the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a> is
     * used.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    /**
     * @return An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with
     * this payment.
     */
    @JsonProperty("team_member_id")
    public Optional<String> getTeamMemberId() {
        return teamMemberId;
    }

    /**
     * @return A user-defined ID to associate with the payment.
     * <p>You can use this field to associate the payment to an entity in an external system
     * (for example, you might specify an order ID that is generated by a third-party shopping cart).</p>
     */
    @JsonProperty("reference_id")
    public Optional<String> getReferenceId() {
        return referenceId;
    }

    /**
     * @return An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">payments.verifyBuyer()</a>.
     * Verification tokens encapsulate customer device information and 3-D Secure
     * challenge results to indicate that Square has verified the buyer identity.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
     */
    @JsonProperty("verification_token")
    public Optional<String> getVerificationToken() {
        return verificationToken;
    }

    /**
     * @return If set to <code>true</code> and charging a Square Gift Card, a payment might be returned with
     * <code>amount_money</code> equal to less than what was requested. For example, a request for $20 when charging
     * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
     * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
     * payment. This field cannot be <code>true</code> when <code>autocomplete = true</code>.
     * <p>For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card">Partial amount with Square Gift Cards</a>.</p>
     * <p>Default: false</p>
     */
    @JsonProperty("accept_partial_authorization")
    public Optional<Boolean> getAcceptPartialAuthorization() {
        return acceptPartialAuthorization;
    }

    /**
     * @return The buyer's email address.
     */
    @JsonProperty("buyer_email_address")
    public Optional<String> getBuyerEmailAddress() {
        return buyerEmailAddress;
    }

    /**
     * @return The buyer's phone number.
     * Must follow the following format:
     * <ol>
     * <li>A leading + symbol (followed by a country code)</li>
     * <li>The phone number can contain spaces and the special characters <code>(</code> , <code>)</code> , <code>-</code> , and <code>.</code>.
     * Alphabetical characters aren't allowed.</li>
     * <li>The phone number must contain between 9 and 16 digits.</li>
     * </ol>
     */
    @JsonProperty("buyer_phone_number")
    public Optional<String> getBuyerPhoneNumber() {
        return buyerPhoneNumber;
    }

    /**
     * @return The buyer's billing address.
     */
    @JsonProperty("billing_address")
    public Optional<Address> getBillingAddress() {
        return billingAddress;
    }

    /**
     * @return The buyer's shipping address.
     */
    @JsonProperty("shipping_address")
    public Optional<Address> getShippingAddress() {
        return shippingAddress;
    }

    /**
     * @return An optional note to be entered by the developer when creating a payment.
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    /**
     * @return Optional additional payment information to include on the customer's card statement
     * as part of the statement description. This can be, for example, an invoice number, ticket number,
     * or short description that uniquely identifies the purchase.
     * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
     * to fit the required information including the Square identifier (SQ *) and name of the
     * seller taking the payment.</p>
     */
    @JsonProperty("statement_description_identifier")
    public Optional<String> getStatementDescriptionIdentifier() {
        return statementDescriptionIdentifier;
    }

    /**
     * @return Additional details required when recording a cash payment (<code>source_id</code> is CASH).
     */
    @JsonProperty("cash_details")
    public Optional<CashPaymentDetails> getCashDetails() {
        return cashDetails;
    }

    /**
     * @return Additional details required when recording an external payment (<code>source_id</code> is EXTERNAL).
     */
    @JsonProperty("external_details")
    public Optional<ExternalPaymentDetails> getExternalDetails() {
        return externalDetails;
    }

    /**
     * @return Details about the customer making the payment.
     */
    @JsonProperty("customer_details")
    public Optional<CustomerDetails> getCustomerDetails() {
        return customerDetails;
    }

    /**
     * @return An optional field for specifying the offline payment details. This is intended for
     * internal 1st-party callers only.
     */
    @JsonProperty("offline_payment_details")
    public Optional<OfflinePaymentDetails> getOfflinePaymentDetails() {
        return offlinePaymentDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreatePaymentRequest && equalTo((CreatePaymentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreatePaymentRequest other) {
        return sourceId.equals(other.sourceId)
                && idempotencyKey.equals(other.idempotencyKey)
                && amountMoney.equals(other.amountMoney)
                && tipMoney.equals(other.tipMoney)
                && appFeeMoney.equals(other.appFeeMoney)
                && delayDuration.equals(other.delayDuration)
                && delayAction.equals(other.delayAction)
                && autocomplete.equals(other.autocomplete)
                && orderId.equals(other.orderId)
                && customerId.equals(other.customerId)
                && locationId.equals(other.locationId)
                && teamMemberId.equals(other.teamMemberId)
                && referenceId.equals(other.referenceId)
                && verificationToken.equals(other.verificationToken)
                && acceptPartialAuthorization.equals(other.acceptPartialAuthorization)
                && buyerEmailAddress.equals(other.buyerEmailAddress)
                && buyerPhoneNumber.equals(other.buyerPhoneNumber)
                && billingAddress.equals(other.billingAddress)
                && shippingAddress.equals(other.shippingAddress)
                && note.equals(other.note)
                && statementDescriptionIdentifier.equals(other.statementDescriptionIdentifier)
                && cashDetails.equals(other.cashDetails)
                && externalDetails.equals(other.externalDetails)
                && customerDetails.equals(other.customerDetails)
                && offlinePaymentDetails.equals(other.offlinePaymentDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sourceId,
                this.idempotencyKey,
                this.amountMoney,
                this.tipMoney,
                this.appFeeMoney,
                this.delayDuration,
                this.delayAction,
                this.autocomplete,
                this.orderId,
                this.customerId,
                this.locationId,
                this.teamMemberId,
                this.referenceId,
                this.verificationToken,
                this.acceptPartialAuthorization,
                this.buyerEmailAddress,
                this.buyerPhoneNumber,
                this.billingAddress,
                this.shippingAddress,
                this.note,
                this.statementDescriptionIdentifier,
                this.cashDetails,
                this.externalDetails,
                this.customerDetails,
                this.offlinePaymentDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SourceIdStage builder() {
        return new Builder();
    }

    public interface SourceIdStage {
        /**
         * <p>The ID for the source of funds for this payment.
         * This could be a payment token generated by the Web Payments SDK for any of its
         * <a href="https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods">supported methods</a>,
         * including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment
         * that the seller received outside of Square, specify either &quot;CASH&quot; or &quot;EXTERNAL&quot;.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
         */
        IdempotencyKeyStage sourceId(@NotNull String sourceId);

        Builder from(CreatePaymentRequest other);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies this <code>CreatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>CreatePayment</code> request.</p>
         * <p>Note: The number of allowed characters might be less than the stated maximum, if multi-byte
         * characters are used.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         */
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface _FinalStage {
        CreatePaymentRequest build();

        /**
         * <p>The amount of money to accept for this payment, not including <code>tip_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         */
        _FinalStage amountMoney(Optional<Money> amountMoney);

        _FinalStage amountMoney(Money amountMoney);

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         */
        _FinalStage tipMoney(Optional<Money> tipMoney);

        _FinalStage tipMoney(Money tipMoney);

        /**
         * <p>The amount of money that the developer is taking as a fee
         * for facilitating the payment on behalf of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller
         * that is accepting the payment. The application must be from a developer
         * account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
         * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         */
        _FinalStage appFeeMoney(Optional<Money> appFeeMoney);

        _FinalStage appFeeMoney(Money appFeeMoney);

        /**
         * <p>The duration of time after the payment's creation when Square automatically
         * either completes or cancels the payment depending on the <code>delay_action</code> field value.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time threshold</a>.</p>
         * <p>This parameter should be specified as a time duration, in RFC 3339 format.</p>
         * <p>Note: This feature is only supported for card payments. This parameter can only be set for a delayed
         * capture payment (<code>autocomplete=false</code>).</p>
         * <p>Default:</p>
         * <ul>
         * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
         * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
         * </ul>
         */
        _FinalStage delayDuration(Optional<String> delayDuration);

        _FinalStage delayDuration(String delayDuration);

        /**
         * <p>The action to be applied to the payment when the <code>delay_duration</code> has elapsed. The action must be
         * CANCEL or COMPLETE. For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time Threshold</a>.</p>
         * <p>Default: CANCEL</p>
         */
        _FinalStage delayAction(Optional<String> delayAction);

        _FinalStage delayAction(String delayAction);

        /**
         * <p>If set to <code>true</code>, this payment will be completed when possible. If
         * set to <code>false</code>, this payment is held in an approved state until either
         * explicitly completed (captured) or canceled (voided). For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment">Delayed capture</a>.</p>
         * <p>Default: true</p>
         */
        _FinalStage autocomplete(Optional<Boolean> autocomplete);

        _FinalStage autocomplete(Boolean autocomplete);

        /**
         * <p>Associates a previously created order with this payment.</p>
         */
        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        /**
         * <p>The <a href="entity:Customer">Customer</a> ID of the customer associated with the payment.</p>
         * <p>This is required if the <code>source_id</code> refers to a card on file created using the Cards API.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        /**
         * <p>The location ID to associate with the payment. If not specified, the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a> is
         * used.</p>
         */
        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        /**
         * <p>An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with
         * this payment.</p>
         */
        _FinalStage teamMemberId(Optional<String> teamMemberId);

        _FinalStage teamMemberId(String teamMemberId);

        /**
         * <p>A user-defined ID to associate with the payment.</p>
         * <p>You can use this field to associate the payment to an entity in an external system
         * (for example, you might specify an order ID that is generated by a third-party shopping cart).</p>
         */
        _FinalStage referenceId(Optional<String> referenceId);

        _FinalStage referenceId(String referenceId);

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
         */
        _FinalStage verificationToken(Optional<String> verificationToken);

        _FinalStage verificationToken(String verificationToken);

        /**
         * <p>If set to <code>true</code> and charging a Square Gift Card, a payment might be returned with
         * <code>amount_money</code> equal to less than what was requested. For example, a request for $20 when charging
         * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
         * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
         * payment. This field cannot be <code>true</code> when <code>autocomplete = true</code>.</p>
         * <p>For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card">Partial amount with Square Gift Cards</a>.</p>
         * <p>Default: false</p>
         */
        _FinalStage acceptPartialAuthorization(Optional<Boolean> acceptPartialAuthorization);

        _FinalStage acceptPartialAuthorization(Boolean acceptPartialAuthorization);

        /**
         * <p>The buyer's email address.</p>
         */
        _FinalStage buyerEmailAddress(Optional<String> buyerEmailAddress);

        _FinalStage buyerEmailAddress(String buyerEmailAddress);

        /**
         * <p>The buyer's phone number.
         * Must follow the following format:</p>
         * <ol>
         * <li>A leading + symbol (followed by a country code)</li>
         * <li>The phone number can contain spaces and the special characters <code>(</code> , <code>)</code> , <code>-</code> , and <code>.</code>.
         * Alphabetical characters aren't allowed.</li>
         * <li>The phone number must contain between 9 and 16 digits.</li>
         * </ol>
         */
        _FinalStage buyerPhoneNumber(Optional<String> buyerPhoneNumber);

        _FinalStage buyerPhoneNumber(String buyerPhoneNumber);

        /**
         * <p>The buyer's billing address.</p>
         */
        _FinalStage billingAddress(Optional<Address> billingAddress);

        _FinalStage billingAddress(Address billingAddress);

        /**
         * <p>The buyer's shipping address.</p>
         */
        _FinalStage shippingAddress(Optional<Address> shippingAddress);

        _FinalStage shippingAddress(Address shippingAddress);

        /**
         * <p>An optional note to be entered by the developer when creating a payment.</p>
         */
        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        /**
         * <p>Optional additional payment information to include on the customer's card statement
         * as part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
         * to fit the required information including the Square identifier (SQ *) and name of the
         * seller taking the payment.</p>
         */
        _FinalStage statementDescriptionIdentifier(Optional<String> statementDescriptionIdentifier);

        _FinalStage statementDescriptionIdentifier(String statementDescriptionIdentifier);

        /**
         * <p>Additional details required when recording a cash payment (<code>source_id</code> is CASH).</p>
         */
        _FinalStage cashDetails(Optional<CashPaymentDetails> cashDetails);

        _FinalStage cashDetails(CashPaymentDetails cashDetails);

        /**
         * <p>Additional details required when recording an external payment (<code>source_id</code> is EXTERNAL).</p>
         */
        _FinalStage externalDetails(Optional<ExternalPaymentDetails> externalDetails);

        _FinalStage externalDetails(ExternalPaymentDetails externalDetails);

        /**
         * <p>Details about the customer making the payment.</p>
         */
        _FinalStage customerDetails(Optional<CustomerDetails> customerDetails);

        _FinalStage customerDetails(CustomerDetails customerDetails);

        /**
         * <p>An optional field for specifying the offline payment details. This is intended for
         * internal 1st-party callers only.</p>
         */
        _FinalStage offlinePaymentDetails(Optional<OfflinePaymentDetails> offlinePaymentDetails);

        _FinalStage offlinePaymentDetails(OfflinePaymentDetails offlinePaymentDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SourceIdStage, IdempotencyKeyStage, _FinalStage {
        private String sourceId;

        private String idempotencyKey;

        private Optional<OfflinePaymentDetails> offlinePaymentDetails = Optional.empty();

        private Optional<CustomerDetails> customerDetails = Optional.empty();

        private Optional<ExternalPaymentDetails> externalDetails = Optional.empty();

        private Optional<CashPaymentDetails> cashDetails = Optional.empty();

        private Optional<String> statementDescriptionIdentifier = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<Address> shippingAddress = Optional.empty();

        private Optional<Address> billingAddress = Optional.empty();

        private Optional<String> buyerPhoneNumber = Optional.empty();

        private Optional<String> buyerEmailAddress = Optional.empty();

        private Optional<Boolean> acceptPartialAuthorization = Optional.empty();

        private Optional<String> verificationToken = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<Boolean> autocomplete = Optional.empty();

        private Optional<String> delayAction = Optional.empty();

        private Optional<String> delayDuration = Optional.empty();

        private Optional<Money> appFeeMoney = Optional.empty();

        private Optional<Money> tipMoney = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreatePaymentRequest other) {
            sourceId(other.getSourceId());
            idempotencyKey(other.getIdempotencyKey());
            amountMoney(other.getAmountMoney());
            tipMoney(other.getTipMoney());
            appFeeMoney(other.getAppFeeMoney());
            delayDuration(other.getDelayDuration());
            delayAction(other.getDelayAction());
            autocomplete(other.getAutocomplete());
            orderId(other.getOrderId());
            customerId(other.getCustomerId());
            locationId(other.getLocationId());
            teamMemberId(other.getTeamMemberId());
            referenceId(other.getReferenceId());
            verificationToken(other.getVerificationToken());
            acceptPartialAuthorization(other.getAcceptPartialAuthorization());
            buyerEmailAddress(other.getBuyerEmailAddress());
            buyerPhoneNumber(other.getBuyerPhoneNumber());
            billingAddress(other.getBillingAddress());
            shippingAddress(other.getShippingAddress());
            note(other.getNote());
            statementDescriptionIdentifier(other.getStatementDescriptionIdentifier());
            cashDetails(other.getCashDetails());
            externalDetails(other.getExternalDetails());
            customerDetails(other.getCustomerDetails());
            offlinePaymentDetails(other.getOfflinePaymentDetails());
            return this;
        }

        /**
         * <p>The ID for the source of funds for this payment.
         * This could be a payment token generated by the Web Payments SDK for any of its
         * <a href="https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods">supported methods</a>,
         * including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment
         * that the seller received outside of Square, specify either &quot;CASH&quot; or &quot;EXTERNAL&quot;.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
         * <p>The ID for the source of funds for this payment.
         * This could be a payment token generated by the Web Payments SDK for any of its
         * <a href="https://developer.squareup.com/docs/web-payments/overview#explore-payment-methods">supported methods</a>,
         * including cards, bank transfers, Afterpay or Cash App Pay. If recording a payment
         * that the seller received outside of Square, specify either &quot;CASH&quot; or &quot;EXTERNAL&quot;.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source_id")
        public IdempotencyKeyStage sourceId(@NotNull String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId, "sourceId must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>CreatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>CreatePayment</code> request.</p>
         * <p>Note: The number of allowed characters might be less than the stated maximum, if multi-byte
         * characters are used.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * <p>A unique string that identifies this <code>CreatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>CreatePayment</code> request.</p>
         * <p>Note: The number of allowed characters might be less than the stated maximum, if multi-byte
         * characters are used.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>An optional field for specifying the offline payment details. This is intended for
         * internal 1st-party callers only.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage offlinePaymentDetails(OfflinePaymentDetails offlinePaymentDetails) {
            this.offlinePaymentDetails = Optional.ofNullable(offlinePaymentDetails);
            return this;
        }

        /**
         * <p>An optional field for specifying the offline payment details. This is intended for
         * internal 1st-party callers only.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "offline_payment_details", nulls = Nulls.SKIP)
        public _FinalStage offlinePaymentDetails(Optional<OfflinePaymentDetails> offlinePaymentDetails) {
            this.offlinePaymentDetails = offlinePaymentDetails;
            return this;
        }

        /**
         * <p>Details about the customer making the payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerDetails(CustomerDetails customerDetails) {
            this.customerDetails = Optional.ofNullable(customerDetails);
            return this;
        }

        /**
         * <p>Details about the customer making the payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer_details", nulls = Nulls.SKIP)
        public _FinalStage customerDetails(Optional<CustomerDetails> customerDetails) {
            this.customerDetails = customerDetails;
            return this;
        }

        /**
         * <p>Additional details required when recording an external payment (<code>source_id</code> is EXTERNAL).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalDetails(ExternalPaymentDetails externalDetails) {
            this.externalDetails = Optional.ofNullable(externalDetails);
            return this;
        }

        /**
         * <p>Additional details required when recording an external payment (<code>source_id</code> is EXTERNAL).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "external_details", nulls = Nulls.SKIP)
        public _FinalStage externalDetails(Optional<ExternalPaymentDetails> externalDetails) {
            this.externalDetails = externalDetails;
            return this;
        }

        /**
         * <p>Additional details required when recording a cash payment (<code>source_id</code> is CASH).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cashDetails(CashPaymentDetails cashDetails) {
            this.cashDetails = Optional.ofNullable(cashDetails);
            return this;
        }

        /**
         * <p>Additional details required when recording a cash payment (<code>source_id</code> is CASH).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cash_details", nulls = Nulls.SKIP)
        public _FinalStage cashDetails(Optional<CashPaymentDetails> cashDetails) {
            this.cashDetails = cashDetails;
            return this;
        }

        /**
         * <p>Optional additional payment information to include on the customer's card statement
         * as part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
         * to fit the required information including the Square identifier (SQ *) and name of the
         * seller taking the payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage statementDescriptionIdentifier(String statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = Optional.ofNullable(statementDescriptionIdentifier);
            return this;
        }

        /**
         * <p>Optional additional payment information to include on the customer's card statement
         * as part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         * <p>Note that the <code>statement_description_identifier</code> might get truncated on the statement description
         * to fit the required information including the Square identifier (SQ *) and name of the
         * seller taking the payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "statement_description_identifier", nulls = Nulls.SKIP)
        public _FinalStage statementDescriptionIdentifier(Optional<String> statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = statementDescriptionIdentifier;
            return this;
        }

        /**
         * <p>An optional note to be entered by the developer when creating a payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>An optional note to be entered by the developer when creating a payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>The buyer's shipping address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shippingAddress(Address shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        /**
         * <p>The buyer's shipping address.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "shipping_address", nulls = Nulls.SKIP)
        public _FinalStage shippingAddress(Optional<Address> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        /**
         * <p>The buyer's billing address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingAddress(Address billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * <p>The buyer's billing address.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "billing_address", nulls = Nulls.SKIP)
        public _FinalStage billingAddress(Optional<Address> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * <p>The buyer's phone number.
         * Must follow the following format:</p>
         * <ol>
         * <li>A leading + symbol (followed by a country code)</li>
         * <li>The phone number can contain spaces and the special characters <code>(</code> , <code>)</code> , <code>-</code> , and <code>.</code>.
         * Alphabetical characters aren't allowed.</li>
         * <li>The phone number must contain between 9 and 16 digits.</li>
         * </ol>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage buyerPhoneNumber(String buyerPhoneNumber) {
            this.buyerPhoneNumber = Optional.ofNullable(buyerPhoneNumber);
            return this;
        }

        /**
         * <p>The buyer's phone number.
         * Must follow the following format:</p>
         * <ol>
         * <li>A leading + symbol (followed by a country code)</li>
         * <li>The phone number can contain spaces and the special characters <code>(</code> , <code>)</code> , <code>-</code> , and <code>.</code>.
         * Alphabetical characters aren't allowed.</li>
         * <li>The phone number must contain between 9 and 16 digits.</li>
         * </ol>
         */
        @java.lang.Override
        @JsonSetter(value = "buyer_phone_number", nulls = Nulls.SKIP)
        public _FinalStage buyerPhoneNumber(Optional<String> buyerPhoneNumber) {
            this.buyerPhoneNumber = buyerPhoneNumber;
            return this;
        }

        /**
         * <p>The buyer's email address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage buyerEmailAddress(String buyerEmailAddress) {
            this.buyerEmailAddress = Optional.ofNullable(buyerEmailAddress);
            return this;
        }

        /**
         * <p>The buyer's email address.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "buyer_email_address", nulls = Nulls.SKIP)
        public _FinalStage buyerEmailAddress(Optional<String> buyerEmailAddress) {
            this.buyerEmailAddress = buyerEmailAddress;
            return this;
        }

        /**
         * <p>If set to <code>true</code> and charging a Square Gift Card, a payment might be returned with
         * <code>amount_money</code> equal to less than what was requested. For example, a request for $20 when charging
         * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
         * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
         * payment. This field cannot be <code>true</code> when <code>autocomplete = true</code>.</p>
         * <p>For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card">Partial amount with Square Gift Cards</a>.</p>
         * <p>Default: false</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage acceptPartialAuthorization(Boolean acceptPartialAuthorization) {
            this.acceptPartialAuthorization = Optional.ofNullable(acceptPartialAuthorization);
            return this;
        }

        /**
         * <p>If set to <code>true</code> and charging a Square Gift Card, a payment might be returned with
         * <code>amount_money</code> equal to less than what was requested. For example, a request for $20 when charging
         * a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
         * to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
         * payment. This field cannot be <code>true</code> when <code>autocomplete = true</code>.</p>
         * <p>For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card">Partial amount with Square Gift Cards</a>.</p>
         * <p>Default: false</p>
         */
        @java.lang.Override
        @JsonSetter(value = "accept_partial_authorization", nulls = Nulls.SKIP)
        public _FinalStage acceptPartialAuthorization(Optional<Boolean> acceptPartialAuthorization) {
            this.acceptPartialAuthorization = acceptPartialAuthorization;
            return this;
        }

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage verificationToken(String verificationToken) {
            this.verificationToken = Optional.ofNullable(verificationToken);
            return this;
        }

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "verification_token", nulls = Nulls.SKIP)
        public _FinalStage verificationToken(Optional<String> verificationToken) {
            this.verificationToken = verificationToken;
            return this;
        }

        /**
         * <p>A user-defined ID to associate with the payment.</p>
         * <p>You can use this field to associate the payment to an entity in an external system
         * (for example, you might specify an order ID that is generated by a third-party shopping cart).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        /**
         * <p>A user-defined ID to associate with the payment.</p>
         * <p>You can use this field to associate the payment to an entity in an external system
         * (for example, you might specify an order ID that is generated by a third-party shopping cart).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public _FinalStage referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * <p>An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with
         * this payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        /**
         * <p>An optional <a href="entity:TeamMember">TeamMember</a> ID to associate with
         * this payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public _FinalStage teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        /**
         * <p>The location ID to associate with the payment. If not specified, the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a> is
         * used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The location ID to associate with the payment. If not specified, the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a> is
         * used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>The <a href="entity:Customer">Customer</a> ID of the customer associated with the payment.</p>
         * <p>This is required if the <code>source_id</code> refers to a card on file created using the Cards API.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>The <a href="entity:Customer">Customer</a> ID of the customer associated with the payment.</p>
         * <p>This is required if the <code>source_id</code> refers to a card on file created using the Cards API.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>Associates a previously created order with this payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>Associates a previously created order with this payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>If set to <code>true</code>, this payment will be completed when possible. If
         * set to <code>false</code>, this payment is held in an approved state until either
         * explicitly completed (captured) or canceled (voided). For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment">Delayed capture</a>.</p>
         * <p>Default: true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage autocomplete(Boolean autocomplete) {
            this.autocomplete = Optional.ofNullable(autocomplete);
            return this;
        }

        /**
         * <p>If set to <code>true</code>, this payment will be completed when possible. If
         * set to <code>false</code>, this payment is held in an approved state until either
         * explicitly completed (captured) or canceled (voided). For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment">Delayed capture</a>.</p>
         * <p>Default: true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "autocomplete", nulls = Nulls.SKIP)
        public _FinalStage autocomplete(Optional<Boolean> autocomplete) {
            this.autocomplete = autocomplete;
            return this;
        }

        /**
         * <p>The action to be applied to the payment when the <code>delay_duration</code> has elapsed. The action must be
         * CANCEL or COMPLETE. For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time Threshold</a>.</p>
         * <p>Default: CANCEL</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage delayAction(String delayAction) {
            this.delayAction = Optional.ofNullable(delayAction);
            return this;
        }

        /**
         * <p>The action to be applied to the payment when the <code>delay_duration</code> has elapsed. The action must be
         * CANCEL or COMPLETE. For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time Threshold</a>.</p>
         * <p>Default: CANCEL</p>
         */
        @java.lang.Override
        @JsonSetter(value = "delay_action", nulls = Nulls.SKIP)
        public _FinalStage delayAction(Optional<String> delayAction) {
            this.delayAction = delayAction;
            return this;
        }

        /**
         * <p>The duration of time after the payment's creation when Square automatically
         * either completes or cancels the payment depending on the <code>delay_action</code> field value.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time threshold</a>.</p>
         * <p>This parameter should be specified as a time duration, in RFC 3339 format.</p>
         * <p>Note: This feature is only supported for card payments. This parameter can only be set for a delayed
         * capture payment (<code>autocomplete=false</code>).</p>
         * <p>Default:</p>
         * <ul>
         * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
         * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage delayDuration(String delayDuration) {
            this.delayDuration = Optional.ofNullable(delayDuration);
            return this;
        }

        /**
         * <p>The duration of time after the payment's creation when Square automatically
         * either completes or cancels the payment depending on the <code>delay_action</code> field value.
         * For more information, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold">Time threshold</a>.</p>
         * <p>This parameter should be specified as a time duration, in RFC 3339 format.</p>
         * <p>Note: This feature is only supported for card payments. This parameter can only be set for a delayed
         * capture payment (<code>autocomplete=false</code>).</p>
         * <p>Default:</p>
         * <ul>
         * <li>Card-present payments: &quot;PT36H&quot; (36 hours) from the creation time.</li>
         * <li>Card-not-present payments: &quot;P7D&quot; (7 days) from the creation time.</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "delay_duration", nulls = Nulls.SKIP)
        public _FinalStage delayDuration(Optional<String> delayDuration) {
            this.delayDuration = delayDuration;
            return this;
        }

        /**
         * <p>The amount of money that the developer is taking as a fee
         * for facilitating the payment on behalf of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller
         * that is accepting the payment. The application must be from a developer
         * account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
         * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appFeeMoney(Money appFeeMoney) {
            this.appFeeMoney = Optional.ofNullable(appFeeMoney);
            return this;
        }

        /**
         * <p>The amount of money that the developer is taking as a fee
         * for facilitating the payment on behalf of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller
         * that is accepting the payment. The application must be from a developer
         * account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required.
         * For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "app_fee_money", nulls = Nulls.SKIP)
        public _FinalStage appFeeMoney(Optional<Money> appFeeMoney) {
            this.appFeeMoney = appFeeMoney;
            return this;
        }

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tipMoney(Money tipMoney) {
            this.tipMoney = Optional.ofNullable(tipMoney);
            return this;
        }

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tip_money", nulls = Nulls.SKIP)
        public _FinalStage tipMoney(Optional<Money> tipMoney) {
            this.tipMoney = tipMoney;
            return this;
        }

        /**
         * <p>The amount of money to accept for this payment, not including <code>tip_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The amount of money to accept for this payment, not including <code>tip_money</code>.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency
         * (for example, US dollar amounts are specified in cents). For more information, see
         * <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The currency code must match the currency associated with the business
         * that is accepting the payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public _FinalStage amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        @java.lang.Override
        public CreatePaymentRequest build() {
            return new CreatePaymentRequest(
                    sourceId,
                    idempotencyKey,
                    amountMoney,
                    tipMoney,
                    appFeeMoney,
                    delayDuration,
                    delayAction,
                    autocomplete,
                    orderId,
                    customerId,
                    locationId,
                    teamMemberId,
                    referenceId,
                    verificationToken,
                    acceptPartialAuthorization,
                    buyerEmailAddress,
                    buyerPhoneNumber,
                    billingAddress,
                    shippingAddress,
                    note,
                    statementDescriptionIdentifier,
                    cashDetails,
                    externalDetails,
                    customerDetails,
                    offlinePaymentDetails,
                    additionalProperties);
        }
    }
}
