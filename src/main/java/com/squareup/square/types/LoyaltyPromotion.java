/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyPromotion.Builder.class)
public final class LoyaltyPromotion {
    private final Optional<String> id;

    private final String name;

    private final LoyaltyPromotionIncentive incentive;

    private final LoyaltyPromotionAvailableTimeData availableTime;

    private final Optional<LoyaltyPromotionTriggerLimit> triggerLimit;

    private final Optional<LoyaltyPromotionStatus> status;

    private final Optional<String> createdAt;

    private final Optional<String> canceledAt;

    private final Optional<String> updatedAt;

    private final Optional<String> loyaltyProgramId;

    private final Optional<Money> minimumSpendAmountMoney;

    private final Optional<List<String>> qualifyingItemVariationIds;

    private final Optional<List<String>> qualifyingCategoryIds;

    private final Map<String, Object> additionalProperties;

    private LoyaltyPromotion(
            Optional<String> id,
            String name,
            LoyaltyPromotionIncentive incentive,
            LoyaltyPromotionAvailableTimeData availableTime,
            Optional<LoyaltyPromotionTriggerLimit> triggerLimit,
            Optional<LoyaltyPromotionStatus> status,
            Optional<String> createdAt,
            Optional<String> canceledAt,
            Optional<String> updatedAt,
            Optional<String> loyaltyProgramId,
            Optional<Money> minimumSpendAmountMoney,
            Optional<List<String>> qualifyingItemVariationIds,
            Optional<List<String>> qualifyingCategoryIds,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.incentive = incentive;
        this.availableTime = availableTime;
        this.triggerLimit = triggerLimit;
        this.status = status;
        this.createdAt = createdAt;
        this.canceledAt = canceledAt;
        this.updatedAt = updatedAt;
        this.loyaltyProgramId = loyaltyProgramId;
        this.minimumSpendAmountMoney = minimumSpendAmountMoney;
        this.qualifyingItemVariationIds = qualifyingItemVariationIds;
        this.qualifyingCategoryIds = qualifyingCategoryIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the promotion.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The name of the promotion.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The points incentive for the promotion. This field defines whether promotion points
     * are earned by multiplying base program points or by adding a specified number of points.
     */
    @JsonProperty("incentive")
    public LoyaltyPromotionIncentive getIncentive() {
        return incentive;
    }

    /**
     * @return The scheduling information that defines when purchases can qualify to earn points from an <code>ACTIVE</code> promotion.
     */
    @JsonProperty("available_time")
    public LoyaltyPromotionAvailableTimeData getAvailableTime() {
        return availableTime;
    }

    /**
     * @return The number of times a buyer can earn promotion points during a specified interval.
     * If not specified, buyers can trigger the promotion an unlimited number of times.
     */
    @JsonProperty("trigger_limit")
    public Optional<LoyaltyPromotionTriggerLimit> getTriggerLimit() {
        return triggerLimit;
    }

    /**
     * @return The current status of the promotion.
     * See <a href="#type-loyaltypromotionstatus">LoyaltyPromotionStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<LoyaltyPromotionStatus> getStatus() {
        return status;
    }

    /**
     * @return The timestamp of when the promotion was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the promotion was canceled, in RFC 3339 format.
     */
    @JsonProperty("canceled_at")
    public Optional<String> getCanceledAt() {
        return canceledAt;
    }

    /**
     * @return The timestamp when the promotion was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the <a href="entity:LoyaltyProgram">loyalty program</a> associated with the promotion.
     */
    @JsonProperty("loyalty_program_id")
    public Optional<String> getLoyaltyProgramId() {
        return loyaltyProgramId;
    }

    /**
     * @return The minimum purchase amount required to earn promotion points. If specified, this amount is positive.
     */
    @JsonProperty("minimum_spend_amount_money")
    public Optional<Money> getMinimumSpendAmountMoney() {
        return minimumSpendAmountMoney;
    }

    /**
     * @return The IDs of any qualifying <code>ITEM_VARIATION</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
     * the purchase must include at least one of these items to qualify for the promotion.
     * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
     * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
     * <p>You can specify <code>qualifying_item_variation_ids</code> or <code>qualifying_category_ids</code> for a given promotion, but not both.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getQualifyingItemVariationIds() {
        if (qualifyingItemVariationIds == null) {
            return Optional.empty();
        }
        return qualifyingItemVariationIds;
    }

    /**
     * @return The IDs of any qualifying <code>CATEGORY</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
     * the purchase must include at least one item from one of these categories to qualify for the promotion.
     * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
     * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
     * <p>You can specify <code>qualifying_category_ids</code> or <code>qualifying_item_variation_ids</code> for a promotion, but not both.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getQualifyingCategoryIds() {
        if (qualifyingCategoryIds == null) {
            return Optional.empty();
        }
        return qualifyingCategoryIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("qualifying_item_variation_ids")
    private Optional<List<String>> _getQualifyingItemVariationIds() {
        return qualifyingItemVariationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("qualifying_category_ids")
    private Optional<List<String>> _getQualifyingCategoryIds() {
        return qualifyingCategoryIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyPromotion && equalTo((LoyaltyPromotion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyPromotion other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && incentive.equals(other.incentive)
                && availableTime.equals(other.availableTime)
                && triggerLimit.equals(other.triggerLimit)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && canceledAt.equals(other.canceledAt)
                && updatedAt.equals(other.updatedAt)
                && loyaltyProgramId.equals(other.loyaltyProgramId)
                && minimumSpendAmountMoney.equals(other.minimumSpendAmountMoney)
                && qualifyingItemVariationIds.equals(other.qualifyingItemVariationIds)
                && qualifyingCategoryIds.equals(other.qualifyingCategoryIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.incentive,
                this.availableTime,
                this.triggerLimit,
                this.status,
                this.createdAt,
                this.canceledAt,
                this.updatedAt,
                this.loyaltyProgramId,
                this.minimumSpendAmountMoney,
                this.qualifyingItemVariationIds,
                this.qualifyingCategoryIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the promotion.</p>
         */
        IncentiveStage name(@NotNull String name);

        Builder from(LoyaltyPromotion other);
    }

    public interface IncentiveStage {
        /**
         * <p>The points incentive for the promotion. This field defines whether promotion points
         * are earned by multiplying base program points or by adding a specified number of points.</p>
         */
        AvailableTimeStage incentive(@NotNull LoyaltyPromotionIncentive incentive);
    }

    public interface AvailableTimeStage {
        /**
         * <p>The scheduling information that defines when purchases can qualify to earn points from an <code>ACTIVE</code> promotion.</p>
         */
        _FinalStage availableTime(@NotNull LoyaltyPromotionAvailableTimeData availableTime);
    }

    public interface _FinalStage {
        LoyaltyPromotion build();

        /**
         * <p>The Square-assigned ID of the promotion.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>The number of times a buyer can earn promotion points during a specified interval.
         * If not specified, buyers can trigger the promotion an unlimited number of times.</p>
         */
        _FinalStage triggerLimit(Optional<LoyaltyPromotionTriggerLimit> triggerLimit);

        _FinalStage triggerLimit(LoyaltyPromotionTriggerLimit triggerLimit);

        /**
         * <p>The current status of the promotion.
         * See <a href="#type-loyaltypromotionstatus">LoyaltyPromotionStatus</a> for possible values</p>
         */
        _FinalStage status(Optional<LoyaltyPromotionStatus> status);

        _FinalStage status(LoyaltyPromotionStatus status);

        /**
         * <p>The timestamp of when the promotion was created, in RFC 3339 format.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The timestamp of when the promotion was canceled, in RFC 3339 format.</p>
         */
        _FinalStage canceledAt(Optional<String> canceledAt);

        _FinalStage canceledAt(String canceledAt);

        /**
         * <p>The timestamp when the promotion was last updated, in RFC 3339 format.</p>
         */
        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        /**
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a> associated with the promotion.</p>
         */
        _FinalStage loyaltyProgramId(Optional<String> loyaltyProgramId);

        _FinalStage loyaltyProgramId(String loyaltyProgramId);

        /**
         * <p>The minimum purchase amount required to earn promotion points. If specified, this amount is positive.</p>
         */
        _FinalStage minimumSpendAmountMoney(Optional<Money> minimumSpendAmountMoney);

        _FinalStage minimumSpendAmountMoney(Money minimumSpendAmountMoney);

        /**
         * <p>The IDs of any qualifying <code>ITEM_VARIATION</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one of these items to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_item_variation_ids</code> or <code>qualifying_category_ids</code> for a given promotion, but not both.</p>
         */
        _FinalStage qualifyingItemVariationIds(Optional<List<String>> qualifyingItemVariationIds);

        _FinalStage qualifyingItemVariationIds(List<String> qualifyingItemVariationIds);

        _FinalStage qualifyingItemVariationIds(Nullable<List<String>> qualifyingItemVariationIds);

        /**
         * <p>The IDs of any qualifying <code>CATEGORY</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one item from one of these categories to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_category_ids</code> or <code>qualifying_item_variation_ids</code> for a promotion, but not both.</p>
         */
        _FinalStage qualifyingCategoryIds(Optional<List<String>> qualifyingCategoryIds);

        _FinalStage qualifyingCategoryIds(List<String> qualifyingCategoryIds);

        _FinalStage qualifyingCategoryIds(Nullable<List<String>> qualifyingCategoryIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, IncentiveStage, AvailableTimeStage, _FinalStage {
        private String name;

        private LoyaltyPromotionIncentive incentive;

        private LoyaltyPromotionAvailableTimeData availableTime;

        private Optional<List<String>> qualifyingCategoryIds = Optional.empty();

        private Optional<List<String>> qualifyingItemVariationIds = Optional.empty();

        private Optional<Money> minimumSpendAmountMoney = Optional.empty();

        private Optional<String> loyaltyProgramId = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> canceledAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<LoyaltyPromotionStatus> status = Optional.empty();

        private Optional<LoyaltyPromotionTriggerLimit> triggerLimit = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LoyaltyPromotion other) {
            id(other.getId());
            name(other.getName());
            incentive(other.getIncentive());
            availableTime(other.getAvailableTime());
            triggerLimit(other.getTriggerLimit());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            canceledAt(other.getCanceledAt());
            updatedAt(other.getUpdatedAt());
            loyaltyProgramId(other.getLoyaltyProgramId());
            minimumSpendAmountMoney(other.getMinimumSpendAmountMoney());
            qualifyingItemVariationIds(other.getQualifyingItemVariationIds());
            qualifyingCategoryIds(other.getQualifyingCategoryIds());
            return this;
        }

        /**
         * <p>The name of the promotion.</p>
         * <p>The name of the promotion.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public IncentiveStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The points incentive for the promotion. This field defines whether promotion points
         * are earned by multiplying base program points or by adding a specified number of points.</p>
         * <p>The points incentive for the promotion. This field defines whether promotion points
         * are earned by multiplying base program points or by adding a specified number of points.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("incentive")
        public AvailableTimeStage incentive(@NotNull LoyaltyPromotionIncentive incentive) {
            this.incentive = Objects.requireNonNull(incentive, "incentive must not be null");
            return this;
        }

        /**
         * <p>The scheduling information that defines when purchases can qualify to earn points from an <code>ACTIVE</code> promotion.</p>
         * <p>The scheduling information that defines when purchases can qualify to earn points from an <code>ACTIVE</code> promotion.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("available_time")
        public _FinalStage availableTime(@NotNull LoyaltyPromotionAvailableTimeData availableTime) {
            this.availableTime = Objects.requireNonNull(availableTime, "availableTime must not be null");
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>CATEGORY</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one item from one of these categories to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_category_ids</code> or <code>qualifying_item_variation_ids</code> for a promotion, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage qualifyingCategoryIds(Nullable<List<String>> qualifyingCategoryIds) {
            if (qualifyingCategoryIds.isNull()) {
                this.qualifyingCategoryIds = null;
            } else if (qualifyingCategoryIds.isEmpty()) {
                this.qualifyingCategoryIds = Optional.empty();
            } else {
                this.qualifyingCategoryIds = Optional.of(qualifyingCategoryIds.get());
            }
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>CATEGORY</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one item from one of these categories to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_category_ids</code> or <code>qualifying_item_variation_ids</code> for a promotion, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage qualifyingCategoryIds(List<String> qualifyingCategoryIds) {
            this.qualifyingCategoryIds = Optional.ofNullable(qualifyingCategoryIds);
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>CATEGORY</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one item from one of these categories to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_category_ids</code> or <code>qualifying_item_variation_ids</code> for a promotion, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "qualifying_category_ids", nulls = Nulls.SKIP)
        public _FinalStage qualifyingCategoryIds(Optional<List<String>> qualifyingCategoryIds) {
            this.qualifyingCategoryIds = qualifyingCategoryIds;
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>ITEM_VARIATION</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one of these items to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_item_variation_ids</code> or <code>qualifying_category_ids</code> for a given promotion, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage qualifyingItemVariationIds(Nullable<List<String>> qualifyingItemVariationIds) {
            if (qualifyingItemVariationIds.isNull()) {
                this.qualifyingItemVariationIds = null;
            } else if (qualifyingItemVariationIds.isEmpty()) {
                this.qualifyingItemVariationIds = Optional.empty();
            } else {
                this.qualifyingItemVariationIds = Optional.of(qualifyingItemVariationIds.get());
            }
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>ITEM_VARIATION</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one of these items to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_item_variation_ids</code> or <code>qualifying_category_ids</code> for a given promotion, but not both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage qualifyingItemVariationIds(List<String> qualifyingItemVariationIds) {
            this.qualifyingItemVariationIds = Optional.ofNullable(qualifyingItemVariationIds);
            return this;
        }

        /**
         * <p>The IDs of any qualifying <code>ITEM_VARIATION</code> <a href="entity:CatalogObject">catalog objects</a>. If specified,
         * the purchase must include at least one of these items to qualify for the promotion.</p>
         * <p>This option is valid only if the base loyalty program uses a <code>VISIT</code> or <code>SPEND</code> accrual rule.
         * With <code>SPEND</code> accrual rules, make sure that qualifying promotional items are not excluded.</p>
         * <p>You can specify <code>qualifying_item_variation_ids</code> or <code>qualifying_category_ids</code> for a given promotion, but not both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "qualifying_item_variation_ids", nulls = Nulls.SKIP)
        public _FinalStage qualifyingItemVariationIds(Optional<List<String>> qualifyingItemVariationIds) {
            this.qualifyingItemVariationIds = qualifyingItemVariationIds;
            return this;
        }

        /**
         * <p>The minimum purchase amount required to earn promotion points. If specified, this amount is positive.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage minimumSpendAmountMoney(Money minimumSpendAmountMoney) {
            this.minimumSpendAmountMoney = Optional.ofNullable(minimumSpendAmountMoney);
            return this;
        }

        /**
         * <p>The minimum purchase amount required to earn promotion points. If specified, this amount is positive.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "minimum_spend_amount_money", nulls = Nulls.SKIP)
        public _FinalStage minimumSpendAmountMoney(Optional<Money> minimumSpendAmountMoney) {
            this.minimumSpendAmountMoney = minimumSpendAmountMoney;
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a> associated with the promotion.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage loyaltyProgramId(String loyaltyProgramId) {
            this.loyaltyProgramId = Optional.ofNullable(loyaltyProgramId);
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:LoyaltyProgram">loyalty program</a> associated with the promotion.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "loyalty_program_id", nulls = Nulls.SKIP)
        public _FinalStage loyaltyProgramId(Optional<String> loyaltyProgramId) {
            this.loyaltyProgramId = loyaltyProgramId;
            return this;
        }

        /**
         * <p>The timestamp when the promotion was last updated, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The timestamp when the promotion was last updated, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The timestamp of when the promotion was canceled, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage canceledAt(String canceledAt) {
            this.canceledAt = Optional.ofNullable(canceledAt);
            return this;
        }

        /**
         * <p>The timestamp of when the promotion was canceled, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "canceled_at", nulls = Nulls.SKIP)
        public _FinalStage canceledAt(Optional<String> canceledAt) {
            this.canceledAt = canceledAt;
            return this;
        }

        /**
         * <p>The timestamp of when the promotion was created, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp of when the promotion was created, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The current status of the promotion.
         * See <a href="#type-loyaltypromotionstatus">LoyaltyPromotionStatus</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(LoyaltyPromotionStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The current status of the promotion.
         * See <a href="#type-loyaltypromotionstatus">LoyaltyPromotionStatus</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<LoyaltyPromotionStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The number of times a buyer can earn promotion points during a specified interval.
         * If not specified, buyers can trigger the promotion an unlimited number of times.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage triggerLimit(LoyaltyPromotionTriggerLimit triggerLimit) {
            this.triggerLimit = Optional.ofNullable(triggerLimit);
            return this;
        }

        /**
         * <p>The number of times a buyer can earn promotion points during a specified interval.
         * If not specified, buyers can trigger the promotion an unlimited number of times.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "trigger_limit", nulls = Nulls.SKIP)
        public _FinalStage triggerLimit(Optional<LoyaltyPromotionTriggerLimit> triggerLimit) {
            this.triggerLimit = triggerLimit;
            return this;
        }

        /**
         * <p>The Square-assigned ID of the promotion.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The Square-assigned ID of the promotion.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public LoyaltyPromotion build() {
            return new LoyaltyPromotion(
                    id,
                    name,
                    incentive,
                    availableTime,
                    triggerLimit,
                    status,
                    createdAt,
                    canceledAt,
                    updatedAt,
                    loyaltyProgramId,
                    minimumSpendAmountMoney,
                    qualifyingItemVariationIds,
                    qualifyingCategoryIds,
                    additionalProperties);
        }
    }
}
