/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderCreatedObject.Builder.class)
public final class OrderCreatedObject {
    private final Optional<OrderCreated> orderCreated;

    private final Map<String, Object> additionalProperties;

    private OrderCreatedObject(Optional<OrderCreated> orderCreated, Map<String, Object> additionalProperties) {
        this.orderCreated = orderCreated;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information about the created order.
     */
    @JsonProperty("order_created")
    public Optional<OrderCreated> getOrderCreated() {
        return orderCreated;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderCreatedObject && equalTo((OrderCreatedObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderCreatedObject other) {
        return orderCreated.equals(other.orderCreated);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orderCreated);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OrderCreated> orderCreated = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderCreatedObject other) {
            orderCreated(other.getOrderCreated());
            return this;
        }

        /**
         * <p>Information about the created order.</p>
         */
        @JsonSetter(value = "order_created", nulls = Nulls.SKIP)
        public Builder orderCreated(Optional<OrderCreated> orderCreated) {
            this.orderCreated = orderCreated;
            return this;
        }

        public Builder orderCreated(OrderCreated orderCreated) {
            this.orderCreated = Optional.ofNullable(orderCreated);
            return this;
        }

        public OrderCreatedObject build() {
            return new OrderCreatedObject(orderCreated, additionalProperties);
        }
    }
}
