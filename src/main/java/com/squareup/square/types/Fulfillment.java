/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Fulfillment.Builder.class)
public final class Fulfillment {
    private final Optional<String> uid;

    private final Optional<FulfillmentType> type;

    private final Optional<FulfillmentState> state;

    private final Optional<FulfillmentFulfillmentLineItemApplication> lineItemApplication;

    private final Optional<List<FulfillmentFulfillmentEntry>> entries;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<FulfillmentPickupDetails> pickupDetails;

    private final Optional<FulfillmentShipmentDetails> shipmentDetails;

    private final Optional<FulfillmentDeliveryDetails> deliveryDetails;

    private final Map<String, Object> additionalProperties;

    private Fulfillment(
            Optional<String> uid,
            Optional<FulfillmentType> type,
            Optional<FulfillmentState> state,
            Optional<FulfillmentFulfillmentLineItemApplication> lineItemApplication,
            Optional<List<FulfillmentFulfillmentEntry>> entries,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<FulfillmentPickupDetails> pickupDetails,
            Optional<FulfillmentShipmentDetails> shipmentDetails,
            Optional<FulfillmentDeliveryDetails> deliveryDetails,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.type = type;
        this.state = state;
        this.lineItemApplication = lineItemApplication;
        this.entries = entries;
        this.metadata = metadata;
        this.pickupDetails = pickupDetails;
        this.shipmentDetails = shipmentDetails;
        this.deliveryDetails = deliveryDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the fulfillment only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The type of the fulfillment.
     * See <a href="#type-fulfillmenttype">FulfillmentType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<FulfillmentType> getType() {
        return type;
    }

    /**
     * @return The state of the fulfillment.
     * See <a href="#type-fulfillmentstate">FulfillmentState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<FulfillmentState> getState() {
        return state;
    }

    /**
     * @return Describes what order line items this fulfillment applies to.
     * It can be <code>ALL</code> or <code>ENTRY_LIST</code> with a supplied list of fulfillment entries.
     * See <a href="#type-fulfillmentfulfillmentlineitemapplication">FulfillmentFulfillmentLineItemApplication</a> for possible values
     */
    @JsonProperty("line_item_application")
    public Optional<FulfillmentFulfillmentLineItemApplication> getLineItemApplication() {
        return lineItemApplication;
    }

    /**
     * @return A list of entries pertaining to the fulfillment of an order. Each entry must reference
     * a valid <code>uid</code> for an order line item in the <code>line_item_uid</code> field, as well as a <code>quantity</code> to
     * fulfill.
     * <p>Multiple entries can reference the same line item <code>uid</code>, as long as the total quantity among
     * all fulfillment entries referencing a single line item does not exceed the quantity of the
     * order's line item itself.</p>
     * <p>An order cannot be marked as <code>COMPLETED</code> before all fulfillments are <code>COMPLETED</code>,
     * <code>CANCELED</code>, or <code>FAILED</code>. Fulfillments can be created and completed independently
     * before order completion.</p>
     */
    @JsonProperty("entries")
    public Optional<List<FulfillmentFulfillmentEntry>> getEntries() {
        return entries;
    }

    /**
     * @return Application-defined data attached to this fulfillment. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * <p>Keys written by applications must be 60 characters or less and must be in the character set
     * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.</p>
     * <p>Values have a maximum length of 255 characters.</p>
     * <p>An application can have up to 10 entries per metadata field.</p>
     * <p>Entries written by applications are private and can only be read or modified by the same
     * application.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
     */
    @JsonIgnore
    public Optional<Map<String, Optional<String>>> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    /**
     * @return Contains details for a pickup fulfillment. These details are required when the fulfillment
     * type is <code>PICKUP</code>.
     */
    @JsonProperty("pickup_details")
    public Optional<FulfillmentPickupDetails> getPickupDetails() {
        return pickupDetails;
    }

    /**
     * @return Contains details for a shipment fulfillment. These details are required when the fulfillment type
     * is <code>SHIPMENT</code>.
     * <p>A shipment fulfillment's relationship to fulfillment <code>state</code>:
     * <code>PROPOSED</code>: A shipment is requested.
     * <code>RESERVED</code>: Fulfillment in progress. Shipment processing.
     * <code>PREPARED</code>: Shipment packaged. Shipping label created.
     * <code>COMPLETED</code>: Package has been shipped.
     * <code>CANCELED</code>: Shipment has been canceled.
     * <code>FAILED</code>: Shipment has failed.</p>
     */
    @JsonProperty("shipment_details")
    public Optional<FulfillmentShipmentDetails> getShipmentDetails() {
        return shipmentDetails;
    }

    /**
     * @return Describes delivery details of an order fulfillment.
     */
    @JsonProperty("delivery_details")
    public Optional<FulfillmentDeliveryDetails> getDeliveryDetails() {
        return deliveryDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Map<String, Optional<String>>> _getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Fulfillment && equalTo((Fulfillment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Fulfillment other) {
        return uid.equals(other.uid)
                && type.equals(other.type)
                && state.equals(other.state)
                && lineItemApplication.equals(other.lineItemApplication)
                && entries.equals(other.entries)
                && metadata.equals(other.metadata)
                && pickupDetails.equals(other.pickupDetails)
                && shipmentDetails.equals(other.shipmentDetails)
                && deliveryDetails.equals(other.deliveryDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.type,
                this.state,
                this.lineItemApplication,
                this.entries,
                this.metadata,
                this.pickupDetails,
                this.shipmentDetails,
                this.deliveryDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<FulfillmentType> type = Optional.empty();

        private Optional<FulfillmentState> state = Optional.empty();

        private Optional<FulfillmentFulfillmentLineItemApplication> lineItemApplication = Optional.empty();

        private Optional<List<FulfillmentFulfillmentEntry>> entries = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<FulfillmentPickupDetails> pickupDetails = Optional.empty();

        private Optional<FulfillmentShipmentDetails> shipmentDetails = Optional.empty();

        private Optional<FulfillmentDeliveryDetails> deliveryDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Fulfillment other) {
            uid(other.getUid());
            type(other.getType());
            state(other.getState());
            lineItemApplication(other.getLineItemApplication());
            entries(other.getEntries());
            metadata(other.getMetadata());
            pickupDetails(other.getPickupDetails());
            shipmentDetails(other.getShipmentDetails());
            deliveryDetails(other.getDeliveryDetails());
            return this;
        }

        /**
         * <p>A unique ID that identifies the fulfillment only within this order.</p>
         */
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>The type of the fulfillment.
         * See <a href="#type-fulfillmenttype">FulfillmentType</a> for possible values</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<FulfillmentType> type) {
            this.type = type;
            return this;
        }

        public Builder type(FulfillmentType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The state of the fulfillment.
         * See <a href="#type-fulfillmentstate">FulfillmentState</a> for possible values</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<FulfillmentState> state) {
            this.state = state;
            return this;
        }

        public Builder state(FulfillmentState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>Describes what order line items this fulfillment applies to.
         * It can be <code>ALL</code> or <code>ENTRY_LIST</code> with a supplied list of fulfillment entries.
         * See <a href="#type-fulfillmentfulfillmentlineitemapplication">FulfillmentFulfillmentLineItemApplication</a> for possible values</p>
         */
        @JsonSetter(value = "line_item_application", nulls = Nulls.SKIP)
        public Builder lineItemApplication(Optional<FulfillmentFulfillmentLineItemApplication> lineItemApplication) {
            this.lineItemApplication = lineItemApplication;
            return this;
        }

        public Builder lineItemApplication(FulfillmentFulfillmentLineItemApplication lineItemApplication) {
            this.lineItemApplication = Optional.ofNullable(lineItemApplication);
            return this;
        }

        /**
         * <p>A list of entries pertaining to the fulfillment of an order. Each entry must reference
         * a valid <code>uid</code> for an order line item in the <code>line_item_uid</code> field, as well as a <code>quantity</code> to
         * fulfill.</p>
         * <p>Multiple entries can reference the same line item <code>uid</code>, as long as the total quantity among
         * all fulfillment entries referencing a single line item does not exceed the quantity of the
         * order's line item itself.</p>
         * <p>An order cannot be marked as <code>COMPLETED</code> before all fulfillments are <code>COMPLETED</code>,
         * <code>CANCELED</code>, or <code>FAILED</code>. Fulfillments can be created and completed independently
         * before order completion.</p>
         */
        @JsonSetter(value = "entries", nulls = Nulls.SKIP)
        public Builder entries(Optional<List<FulfillmentFulfillmentEntry>> entries) {
            this.entries = entries;
            return this;
        }

        public Builder entries(List<FulfillmentFulfillmentEntry> entries) {
            this.entries = Optional.ofNullable(entries);
            return this;
        }

        /**
         * <p>Application-defined data attached to this fulfillment. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Nullable<Map<String, Optional<String>>> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        /**
         * <p>Contains details for a pickup fulfillment. These details are required when the fulfillment
         * type is <code>PICKUP</code>.</p>
         */
        @JsonSetter(value = "pickup_details", nulls = Nulls.SKIP)
        public Builder pickupDetails(Optional<FulfillmentPickupDetails> pickupDetails) {
            this.pickupDetails = pickupDetails;
            return this;
        }

        public Builder pickupDetails(FulfillmentPickupDetails pickupDetails) {
            this.pickupDetails = Optional.ofNullable(pickupDetails);
            return this;
        }

        /**
         * <p>Contains details for a shipment fulfillment. These details are required when the fulfillment type
         * is <code>SHIPMENT</code>.</p>
         * <p>A shipment fulfillment's relationship to fulfillment <code>state</code>:
         * <code>PROPOSED</code>: A shipment is requested.
         * <code>RESERVED</code>: Fulfillment in progress. Shipment processing.
         * <code>PREPARED</code>: Shipment packaged. Shipping label created.
         * <code>COMPLETED</code>: Package has been shipped.
         * <code>CANCELED</code>: Shipment has been canceled.
         * <code>FAILED</code>: Shipment has failed.</p>
         */
        @JsonSetter(value = "shipment_details", nulls = Nulls.SKIP)
        public Builder shipmentDetails(Optional<FulfillmentShipmentDetails> shipmentDetails) {
            this.shipmentDetails = shipmentDetails;
            return this;
        }

        public Builder shipmentDetails(FulfillmentShipmentDetails shipmentDetails) {
            this.shipmentDetails = Optional.ofNullable(shipmentDetails);
            return this;
        }

        /**
         * <p>Describes delivery details of an order fulfillment.</p>
         */
        @JsonSetter(value = "delivery_details", nulls = Nulls.SKIP)
        public Builder deliveryDetails(Optional<FulfillmentDeliveryDetails> deliveryDetails) {
            this.deliveryDetails = deliveryDetails;
            return this;
        }

        public Builder deliveryDetails(FulfillmentDeliveryDetails deliveryDetails) {
            this.deliveryDetails = Optional.ofNullable(deliveryDetails);
            return this;
        }

        public Fulfillment build() {
            return new Fulfillment(
                    uid,
                    type,
                    state,
                    lineItemApplication,
                    entries,
                    metadata,
                    pickupDetails,
                    shipmentDetails,
                    deliveryDetails,
                    additionalProperties);
        }
    }
}
