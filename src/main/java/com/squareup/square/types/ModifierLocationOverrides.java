/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ModifierLocationOverrides.Builder.class)
public final class ModifierLocationOverrides {
    private final Optional<String> locationId;

    private final Optional<Money> priceMoney;

    private final Optional<Boolean> soldOut;

    private final Map<String, Object> additionalProperties;

    private ModifierLocationOverrides(
            Optional<String> locationId,
            Optional<Money> priceMoney,
            Optional<Boolean> soldOut,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.priceMoney = priceMoney;
        this.soldOut = soldOut;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <code>Location</code> object representing the location. This can include a deactivated location.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The overridden price at the specified location. If this is unspecified, the modifier price is not overridden.
     * The modifier becomes free of charge at the specified location, when this <code>price_money</code> field is set to 0.
     */
    @JsonProperty("price_money")
    public Optional<Money> getPriceMoney() {
        return priceMoney;
    }

    /**
     * @return Indicates whether the modifier is sold out at the specified location or not. As an example, for cheese (modifier) burger (item), when the modifier is sold out, it is the cheese, but not the burger, that is sold out.
     * The seller can manually set this sold out status. Attempts by an application to set this attribute are ignored.
     */
    @JsonProperty("sold_out")
    public Optional<Boolean> getSoldOut() {
        return soldOut;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModifierLocationOverrides && equalTo((ModifierLocationOverrides) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModifierLocationOverrides other) {
        return locationId.equals(other.locationId)
                && priceMoney.equals(other.priceMoney)
                && soldOut.equals(other.soldOut);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.priceMoney, this.soldOut);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> locationId = Optional.empty();

        private Optional<Money> priceMoney = Optional.empty();

        private Optional<Boolean> soldOut = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ModifierLocationOverrides other) {
            locationId(other.getLocationId());
            priceMoney(other.getPriceMoney());
            soldOut(other.getSoldOut());
            return this;
        }

        /**
         * <p>The ID of the <code>Location</code> object representing the location. This can include a deactivated location.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The overridden price at the specified location. If this is unspecified, the modifier price is not overridden.
         * The modifier becomes free of charge at the specified location, when this <code>price_money</code> field is set to 0.</p>
         */
        @JsonSetter(value = "price_money", nulls = Nulls.SKIP)
        public Builder priceMoney(Optional<Money> priceMoney) {
            this.priceMoney = priceMoney;
            return this;
        }

        public Builder priceMoney(Money priceMoney) {
            this.priceMoney = Optional.ofNullable(priceMoney);
            return this;
        }

        /**
         * <p>Indicates whether the modifier is sold out at the specified location or not. As an example, for cheese (modifier) burger (item), when the modifier is sold out, it is the cheese, but not the burger, that is sold out.
         * The seller can manually set this sold out status. Attempts by an application to set this attribute are ignored.</p>
         */
        @JsonSetter(value = "sold_out", nulls = Nulls.SKIP)
        public Builder soldOut(Optional<Boolean> soldOut) {
            this.soldOut = soldOut;
            return this;
        }

        public Builder soldOut(Boolean soldOut) {
            this.soldOut = Optional.ofNullable(soldOut);
            return this;
        }

        public ModifierLocationOverrides build() {
            return new ModifierLocationOverrides(locationId, priceMoney, soldOut, additionalProperties);
        }
    }
}
