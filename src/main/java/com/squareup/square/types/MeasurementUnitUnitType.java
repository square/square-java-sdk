/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class MeasurementUnitUnitType {
    public static final MeasurementUnitUnitType TYPE_AREA = new MeasurementUnitUnitType(Value.TYPE_AREA, "TYPE_AREA");

    public static final MeasurementUnitUnitType TYPE_VOLUME =
            new MeasurementUnitUnitType(Value.TYPE_VOLUME, "TYPE_VOLUME");

    public static final MeasurementUnitUnitType TYPE_GENERIC =
            new MeasurementUnitUnitType(Value.TYPE_GENERIC, "TYPE_GENERIC");

    public static final MeasurementUnitUnitType TYPE_WEIGHT =
            new MeasurementUnitUnitType(Value.TYPE_WEIGHT, "TYPE_WEIGHT");

    public static final MeasurementUnitUnitType TYPE_CUSTOM =
            new MeasurementUnitUnitType(Value.TYPE_CUSTOM, "TYPE_CUSTOM");

    public static final MeasurementUnitUnitType TYPE_LENGTH =
            new MeasurementUnitUnitType(Value.TYPE_LENGTH, "TYPE_LENGTH");

    private final Value value;

    private final String string;

    MeasurementUnitUnitType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof MeasurementUnitUnitType
                        && this.string.equals(((MeasurementUnitUnitType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case TYPE_AREA:
                return visitor.visitTypeArea();
            case TYPE_VOLUME:
                return visitor.visitTypeVolume();
            case TYPE_GENERIC:
                return visitor.visitTypeGeneric();
            case TYPE_WEIGHT:
                return visitor.visitTypeWeight();
            case TYPE_CUSTOM:
                return visitor.visitTypeCustom();
            case TYPE_LENGTH:
                return visitor.visitTypeLength();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static MeasurementUnitUnitType valueOf(String value) {
        switch (value) {
            case "TYPE_AREA":
                return TYPE_AREA;
            case "TYPE_VOLUME":
                return TYPE_VOLUME;
            case "TYPE_GENERIC":
                return TYPE_GENERIC;
            case "TYPE_WEIGHT":
                return TYPE_WEIGHT;
            case "TYPE_CUSTOM":
                return TYPE_CUSTOM;
            case "TYPE_LENGTH":
                return TYPE_LENGTH;
            default:
                return new MeasurementUnitUnitType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        TYPE_CUSTOM,

        TYPE_AREA,

        TYPE_LENGTH,

        TYPE_VOLUME,

        TYPE_WEIGHT,

        TYPE_GENERIC,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitTypeCustom();

        T visitTypeArea();

        T visitTypeLength();

        T visitTypeVolume();

        T visitTypeWeight();

        T visitTypeGeneric();

        T visitUnknown(String unknownType);
    }
}
