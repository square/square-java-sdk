/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchVendorsRequestFilter.Builder.class)
public final class SearchVendorsRequestFilter {
    private final Optional<List<String>> name;

    private final Optional<List<VendorStatus>> status;

    private final Map<String, Object> additionalProperties;

    private SearchVendorsRequestFilter(
            Optional<List<String>> name,
            Optional<List<VendorStatus>> status,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The names of the <a href="entity:Vendor">Vendor</a> objects to retrieve.
     */
    @JsonIgnore
    public Optional<List<String>> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The statuses of the <a href="entity:Vendor">Vendor</a> objects to retrieve.
     * See <a href="#type-vendorstatus">VendorStatus</a> for possible values
     */
    @JsonIgnore
    public Optional<List<VendorStatus>> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<List<String>> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status")
    private Optional<List<VendorStatus>> _getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchVendorsRequestFilter && equalTo((SearchVendorsRequestFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchVendorsRequestFilter other) {
        return name.equals(other.name) && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> name = Optional.empty();

        private Optional<List<VendorStatus>> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchVendorsRequestFilter other) {
            name(other.getName());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The names of the <a href="entity:Vendor">Vendor</a> objects to retrieve.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<List<String>> name) {
            this.name = name;
            return this;
        }

        public Builder name(List<String> name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<List<String>> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The statuses of the <a href="entity:Vendor">Vendor</a> objects to retrieve.
         * See <a href="#type-vendorstatus">VendorStatus</a> for possible values</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<List<VendorStatus>> status) {
            this.status = status;
            return this;
        }

        public Builder status(List<VendorStatus> status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<List<VendorStatus>> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        public SearchVendorsRequestFilter build() {
            return new SearchVendorsRequestFilter(name, status, additionalProperties);
        }
    }
}
