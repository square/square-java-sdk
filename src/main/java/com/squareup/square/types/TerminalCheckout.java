/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalCheckout.Builder.class)
public final class TerminalCheckout {
    private final Optional<String> id;

    private final Money amountMoney;

    private final Optional<String> referenceId;

    private final Optional<String> note;

    private final Optional<String> orderId;

    private final Optional<PaymentOptions> paymentOptions;

    private final DeviceCheckoutOptions deviceOptions;

    private final Optional<String> deadlineDuration;

    private final Optional<String> status;

    private final Optional<ActionCancelReason> cancelReason;

    private final Optional<List<String>> paymentIds;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> appId;

    private final Optional<String> locationId;

    private final Optional<CheckoutOptionsPaymentType> paymentType;

    private final Optional<String> teamMemberId;

    private final Optional<String> customerId;

    private final Optional<Money> appFeeMoney;

    private final Optional<String> statementDescriptionIdentifier;

    private final Optional<Money> tipMoney;

    private final Map<String, Object> additionalProperties;

    private TerminalCheckout(
            Optional<String> id,
            Money amountMoney,
            Optional<String> referenceId,
            Optional<String> note,
            Optional<String> orderId,
            Optional<PaymentOptions> paymentOptions,
            DeviceCheckoutOptions deviceOptions,
            Optional<String> deadlineDuration,
            Optional<String> status,
            Optional<ActionCancelReason> cancelReason,
            Optional<List<String>> paymentIds,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> appId,
            Optional<String> locationId,
            Optional<CheckoutOptionsPaymentType> paymentType,
            Optional<String> teamMemberId,
            Optional<String> customerId,
            Optional<Money> appFeeMoney,
            Optional<String> statementDescriptionIdentifier,
            Optional<Money> tipMoney,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.amountMoney = amountMoney;
        this.referenceId = referenceId;
        this.note = note;
        this.orderId = orderId;
        this.paymentOptions = paymentOptions;
        this.deviceOptions = deviceOptions;
        this.deadlineDuration = deadlineDuration;
        this.status = status;
        this.cancelReason = cancelReason;
        this.paymentIds = paymentIds;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.appId = appId;
        this.locationId = locationId;
        this.paymentType = paymentType;
        this.teamMemberId = teamMemberId;
        this.customerId = customerId;
        this.appFeeMoney = appFeeMoney;
        this.statementDescriptionIdentifier = statementDescriptionIdentifier;
        this.tipMoney = tipMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID for this <code>TerminalCheckout</code>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The amount of money (including the tax amount) that the Square Terminal device should try to collect.
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return An optional user-defined reference ID that can be used to associate
     * this <code>TerminalCheckout</code> to another entity in an external system. For example, an order
     * ID generated by a third-party shopping cart. The ID is also associated with any payments
     * used to complete the checkout.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
     * Note: maximum 500 characters
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The reference to the Square order ID for the checkout request.
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return Payment-specific options for the checkout request.
     */
    @JsonProperty("payment_options")
    public Optional<PaymentOptions> getPaymentOptions() {
        return paymentOptions;
    }

    /**
     * @return Options to control the display and behavior of the Square Terminal device.
     */
    @JsonProperty("device_options")
    public DeviceCheckoutOptions getDeviceOptions() {
        return deviceOptions;
    }

    /**
     * @return An RFC 3339 duration, after which the checkout is automatically canceled.
     * A <code>TerminalCheckout</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
     * of <code>TIMED_OUT</code>.
     * <p>Default: 5 minutes from creation</p>
     * <p>Maximum: 5 minutes</p>
     */
    @JsonIgnore
    public Optional<String> getDeadlineDuration() {
        if (deadlineDuration == null) {
            return Optional.empty();
        }
        return deadlineDuration;
    }

    /**
     * @return The status of the <code>TerminalCheckout</code>.
     * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, <code>COMPLETED</code>
     */
    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    /**
     * @return The reason why <code>TerminalCheckout</code> is canceled. Present if the status is <code>CANCELED</code>.
     * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values
     */
    @JsonProperty("cancel_reason")
    public Optional<ActionCancelReason> getCancelReason() {
        return cancelReason;
    }

    /**
     * @return A list of IDs for payments created by this <code>TerminalCheckout</code>.
     */
    @JsonProperty("payment_ids")
    public Optional<List<String>> getPaymentIds() {
        return paymentIds;
    }

    /**
     * @return The time when the <code>TerminalCheckout</code> was created, as an RFC 3339 timestamp.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The time when the <code>TerminalCheckout</code> was last updated, as an RFC 3339 timestamp.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the application that created the checkout.
     */
    @JsonProperty("app_id")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return The location of the device where the <code>TerminalCheckout</code> was directed.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    /**
     * @return The type of payment the terminal should attempt to capture from. Defaults to <code>CARD_PRESENT</code>.
     * See <a href="#type-checkoutoptionspaymenttype">CheckoutOptionsPaymentType</a> for possible values
     */
    @JsonProperty("payment_type")
    public Optional<CheckoutOptionsPaymentType> getPaymentType() {
        return paymentType;
    }

    /**
     * @return An optional ID of the team member associated with creating the checkout.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return An optional ID of the customer associated with the checkout.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The amount the developer is taking as a fee for facilitating the payment on behalf
     * of the seller.
     * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
     * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller.</p>
     * <p>For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
     * <p>To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
     */
    @JsonProperty("app_fee_money")
    public Optional<Money> getAppFeeMoney() {
        return appFeeMoney;
    }

    /**
     * @return Optional additional payment information to include on the customer's card statement as
     * part of the statement description. This can be, for example, an invoice number, ticket number,
     * or short description that uniquely identifies the purchase.
     */
    @JsonIgnore
    public Optional<String> getStatementDescriptionIdentifier() {
        if (statementDescriptionIdentifier == null) {
            return Optional.empty();
        }
        return statementDescriptionIdentifier;
    }

    /**
     * @return The amount designated as a tip, in addition to <code>amount_money</code>. This may only be set for a
     * checkout that has tipping disabled (<code>tip_settings.allow_tipping</code> is <code>false</code>).
     */
    @JsonProperty("tip_money")
    public Optional<Money> getTipMoney() {
        return tipMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("deadline_duration")
    private Optional<String> _getDeadlineDuration() {
        return deadlineDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("statement_description_identifier")
    private Optional<String> _getStatementDescriptionIdentifier() {
        return statementDescriptionIdentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalCheckout && equalTo((TerminalCheckout) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalCheckout other) {
        return id.equals(other.id)
                && amountMoney.equals(other.amountMoney)
                && referenceId.equals(other.referenceId)
                && note.equals(other.note)
                && orderId.equals(other.orderId)
                && paymentOptions.equals(other.paymentOptions)
                && deviceOptions.equals(other.deviceOptions)
                && deadlineDuration.equals(other.deadlineDuration)
                && status.equals(other.status)
                && cancelReason.equals(other.cancelReason)
                && paymentIds.equals(other.paymentIds)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && appId.equals(other.appId)
                && locationId.equals(other.locationId)
                && paymentType.equals(other.paymentType)
                && teamMemberId.equals(other.teamMemberId)
                && customerId.equals(other.customerId)
                && appFeeMoney.equals(other.appFeeMoney)
                && statementDescriptionIdentifier.equals(other.statementDescriptionIdentifier)
                && tipMoney.equals(other.tipMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.amountMoney,
                this.referenceId,
                this.note,
                this.orderId,
                this.paymentOptions,
                this.deviceOptions,
                this.deadlineDuration,
                this.status,
                this.cancelReason,
                this.paymentIds,
                this.createdAt,
                this.updatedAt,
                this.appId,
                this.locationId,
                this.paymentType,
                this.teamMemberId,
                this.customerId,
                this.appFeeMoney,
                this.statementDescriptionIdentifier,
                this.tipMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountMoneyStage builder() {
        return new Builder();
    }

    public interface AmountMoneyStage {
        /**
         * <p>The amount of money (including the tax amount) that the Square Terminal device should try to collect.</p>
         */
        DeviceOptionsStage amountMoney(@NotNull Money amountMoney);

        Builder from(TerminalCheckout other);
    }

    public interface DeviceOptionsStage {
        /**
         * <p>Options to control the display and behavior of the Square Terminal device.</p>
         */
        _FinalStage deviceOptions(@NotNull DeviceCheckoutOptions deviceOptions);
    }

    public interface _FinalStage {
        TerminalCheckout build();

        /**
         * <p>A unique ID for this <code>TerminalCheckout</code>.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>An optional user-defined reference ID that can be used to associate
         * this <code>TerminalCheckout</code> to another entity in an external system. For example, an order
         * ID generated by a third-party shopping cart. The ID is also associated with any payments
         * used to complete the checkout.</p>
         */
        _FinalStage referenceId(Optional<String> referenceId);

        _FinalStage referenceId(String referenceId);

        _FinalStage referenceId(Nullable<String> referenceId);

        /**
         * <p>An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
         * Note: maximum 500 characters</p>
         */
        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage note(Nullable<String> note);

        /**
         * <p>The reference to the Square order ID for the checkout request.</p>
         */
        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage orderId(Nullable<String> orderId);

        /**
         * <p>Payment-specific options for the checkout request.</p>
         */
        _FinalStage paymentOptions(Optional<PaymentOptions> paymentOptions);

        _FinalStage paymentOptions(PaymentOptions paymentOptions);

        /**
         * <p>An RFC 3339 duration, after which the checkout is automatically canceled.
         * A <code>TerminalCheckout</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation</p>
         * <p>Maximum: 5 minutes</p>
         */
        _FinalStage deadlineDuration(Optional<String> deadlineDuration);

        _FinalStage deadlineDuration(String deadlineDuration);

        _FinalStage deadlineDuration(Nullable<String> deadlineDuration);

        /**
         * <p>The status of the <code>TerminalCheckout</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, <code>COMPLETED</code></p>
         */
        _FinalStage status(Optional<String> status);

        _FinalStage status(String status);

        /**
         * <p>The reason why <code>TerminalCheckout</code> is canceled. Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         */
        _FinalStage cancelReason(Optional<ActionCancelReason> cancelReason);

        _FinalStage cancelReason(ActionCancelReason cancelReason);

        /**
         * <p>A list of IDs for payments created by this <code>TerminalCheckout</code>.</p>
         */
        _FinalStage paymentIds(Optional<List<String>> paymentIds);

        _FinalStage paymentIds(List<String> paymentIds);

        /**
         * <p>The time when the <code>TerminalCheckout</code> was created, as an RFC 3339 timestamp.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The time when the <code>TerminalCheckout</code> was last updated, as an RFC 3339 timestamp.</p>
         */
        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        /**
         * <p>The ID of the application that created the checkout.</p>
         */
        _FinalStage appId(Optional<String> appId);

        _FinalStage appId(String appId);

        /**
         * <p>The location of the device where the <code>TerminalCheckout</code> was directed.</p>
         */
        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        /**
         * <p>The type of payment the terminal should attempt to capture from. Defaults to <code>CARD_PRESENT</code>.
         * See <a href="#type-checkoutoptionspaymenttype">CheckoutOptionsPaymentType</a> for possible values</p>
         */
        _FinalStage paymentType(Optional<CheckoutOptionsPaymentType> paymentType);

        _FinalStage paymentType(CheckoutOptionsPaymentType paymentType);

        /**
         * <p>An optional ID of the team member associated with creating the checkout.</p>
         */
        _FinalStage teamMemberId(Optional<String> teamMemberId);

        _FinalStage teamMemberId(String teamMemberId);

        _FinalStage teamMemberId(Nullable<String> teamMemberId);

        /**
         * <p>An optional ID of the customer associated with the checkout.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerId(Nullable<String> customerId);

        /**
         * <p>The amount the developer is taking as a fee for facilitating the payment on behalf
         * of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         */
        _FinalStage appFeeMoney(Optional<Money> appFeeMoney);

        _FinalStage appFeeMoney(Money appFeeMoney);

        /**
         * <p>Optional additional payment information to include on the customer's card statement as
         * part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         */
        _FinalStage statementDescriptionIdentifier(Optional<String> statementDescriptionIdentifier);

        _FinalStage statementDescriptionIdentifier(String statementDescriptionIdentifier);

        _FinalStage statementDescriptionIdentifier(Nullable<String> statementDescriptionIdentifier);

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>. This may only be set for a
         * checkout that has tipping disabled (<code>tip_settings.allow_tipping</code> is <code>false</code>).</p>
         */
        _FinalStage tipMoney(Optional<Money> tipMoney);

        _FinalStage tipMoney(Money tipMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountMoneyStage, DeviceOptionsStage, _FinalStage {
        private Money amountMoney;

        private DeviceCheckoutOptions deviceOptions;

        private Optional<Money> tipMoney = Optional.empty();

        private Optional<String> statementDescriptionIdentifier = Optional.empty();

        private Optional<Money> appFeeMoney = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<CheckoutOptionsPaymentType> paymentType = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> appId = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<List<String>> paymentIds = Optional.empty();

        private Optional<ActionCancelReason> cancelReason = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<String> deadlineDuration = Optional.empty();

        private Optional<PaymentOptions> paymentOptions = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TerminalCheckout other) {
            id(other.getId());
            amountMoney(other.getAmountMoney());
            referenceId(other.getReferenceId());
            note(other.getNote());
            orderId(other.getOrderId());
            paymentOptions(other.getPaymentOptions());
            deviceOptions(other.getDeviceOptions());
            deadlineDuration(other.getDeadlineDuration());
            status(other.getStatus());
            cancelReason(other.getCancelReason());
            paymentIds(other.getPaymentIds());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            appId(other.getAppId());
            locationId(other.getLocationId());
            paymentType(other.getPaymentType());
            teamMemberId(other.getTeamMemberId());
            customerId(other.getCustomerId());
            appFeeMoney(other.getAppFeeMoney());
            statementDescriptionIdentifier(other.getStatementDescriptionIdentifier());
            tipMoney(other.getTipMoney());
            return this;
        }

        /**
         * <p>The amount of money (including the tax amount) that the Square Terminal device should try to collect.</p>
         * <p>The amount of money (including the tax amount) that the Square Terminal device should try to collect.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public DeviceOptionsStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>Options to control the display and behavior of the Square Terminal device.</p>
         * <p>Options to control the display and behavior of the Square Terminal device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("device_options")
        public _FinalStage deviceOptions(@NotNull DeviceCheckoutOptions deviceOptions) {
            this.deviceOptions = Objects.requireNonNull(deviceOptions, "deviceOptions must not be null");
            return this;
        }

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>. This may only be set for a
         * checkout that has tipping disabled (<code>tip_settings.allow_tipping</code> is <code>false</code>).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tipMoney(Money tipMoney) {
            this.tipMoney = Optional.ofNullable(tipMoney);
            return this;
        }

        /**
         * <p>The amount designated as a tip, in addition to <code>amount_money</code>. This may only be set for a
         * checkout that has tipping disabled (<code>tip_settings.allow_tipping</code> is <code>false</code>).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tip_money", nulls = Nulls.SKIP)
        public _FinalStage tipMoney(Optional<Money> tipMoney) {
            this.tipMoney = tipMoney;
            return this;
        }

        /**
         * <p>Optional additional payment information to include on the customer's card statement as
         * part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage statementDescriptionIdentifier(Nullable<String> statementDescriptionIdentifier) {
            if (statementDescriptionIdentifier.isNull()) {
                this.statementDescriptionIdentifier = null;
            } else if (statementDescriptionIdentifier.isEmpty()) {
                this.statementDescriptionIdentifier = Optional.empty();
            } else {
                this.statementDescriptionIdentifier = Optional.of(statementDescriptionIdentifier.get());
            }
            return this;
        }

        /**
         * <p>Optional additional payment information to include on the customer's card statement as
         * part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage statementDescriptionIdentifier(String statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = Optional.ofNullable(statementDescriptionIdentifier);
            return this;
        }

        /**
         * <p>Optional additional payment information to include on the customer's card statement as
         * part of the statement description. This can be, for example, an invoice number, ticket number,
         * or short description that uniquely identifies the purchase.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "statement_description_identifier", nulls = Nulls.SKIP)
        public _FinalStage statementDescriptionIdentifier(Optional<String> statementDescriptionIdentifier) {
            this.statementDescriptionIdentifier = statementDescriptionIdentifier;
            return this;
        }

        /**
         * <p>The amount the developer is taking as a fee for facilitating the payment on behalf
         * of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appFeeMoney(Money appFeeMoney) {
            this.appFeeMoney = Optional.ofNullable(appFeeMoney);
            return this;
        }

        /**
         * <p>The amount the developer is taking as a fee for facilitating the payment on behalf
         * of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller.</p>
         * <p>For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions">Permissions</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "app_fee_money", nulls = Nulls.SKIP)
        public _FinalStage appFeeMoney(Optional<Money> appFeeMoney) {
            this.appFeeMoney = appFeeMoney;
            return this;
        }

        /**
         * <p>An optional ID of the customer associated with the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>An optional ID of the customer associated with the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>An optional ID of the customer associated with the checkout.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>An optional ID of the team member associated with creating the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        /**
         * <p>An optional ID of the team member associated with creating the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        /**
         * <p>An optional ID of the team member associated with creating the checkout.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public _FinalStage teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        /**
         * <p>The type of payment the terminal should attempt to capture from. Defaults to <code>CARD_PRESENT</code>.
         * See <a href="#type-checkoutoptionspaymenttype">CheckoutOptionsPaymentType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentType(CheckoutOptionsPaymentType paymentType) {
            this.paymentType = Optional.ofNullable(paymentType);
            return this;
        }

        /**
         * <p>The type of payment the terminal should attempt to capture from. Defaults to <code>CARD_PRESENT</code>.
         * See <a href="#type-checkoutoptionspaymenttype">CheckoutOptionsPaymentType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payment_type", nulls = Nulls.SKIP)
        public _FinalStage paymentType(Optional<CheckoutOptionsPaymentType> paymentType) {
            this.paymentType = paymentType;
            return this;
        }

        /**
         * <p>The location of the device where the <code>TerminalCheckout</code> was directed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The location of the device where the <code>TerminalCheckout</code> was directed.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>The ID of the application that created the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        /**
         * <p>The ID of the application that created the checkout.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "app_id", nulls = Nulls.SKIP)
        public _FinalStage appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * <p>The time when the <code>TerminalCheckout</code> was last updated, as an RFC 3339 timestamp.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The time when the <code>TerminalCheckout</code> was last updated, as an RFC 3339 timestamp.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The time when the <code>TerminalCheckout</code> was created, as an RFC 3339 timestamp.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The time when the <code>TerminalCheckout</code> was created, as an RFC 3339 timestamp.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>A list of IDs for payments created by this <code>TerminalCheckout</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentIds(List<String> paymentIds) {
            this.paymentIds = Optional.ofNullable(paymentIds);
            return this;
        }

        /**
         * <p>A list of IDs for payments created by this <code>TerminalCheckout</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payment_ids", nulls = Nulls.SKIP)
        public _FinalStage paymentIds(Optional<List<String>> paymentIds) {
            this.paymentIds = paymentIds;
            return this;
        }

        /**
         * <p>The reason why <code>TerminalCheckout</code> is canceled. Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cancelReason(ActionCancelReason cancelReason) {
            this.cancelReason = Optional.ofNullable(cancelReason);
            return this;
        }

        /**
         * <p>The reason why <code>TerminalCheckout</code> is canceled. Present if the status is <code>CANCELED</code>.
         * See <a href="#type-actioncancelreason">ActionCancelReason</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cancel_reason", nulls = Nulls.SKIP)
        public _FinalStage cancelReason(Optional<ActionCancelReason> cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        /**
         * <p>The status of the <code>TerminalCheckout</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, <code>COMPLETED</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The status of the <code>TerminalCheckout</code>.
         * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, <code>COMPLETED</code></p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<String> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>An RFC 3339 duration, after which the checkout is automatically canceled.
         * A <code>TerminalCheckout</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation</p>
         * <p>Maximum: 5 minutes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deadlineDuration(Nullable<String> deadlineDuration) {
            if (deadlineDuration.isNull()) {
                this.deadlineDuration = null;
            } else if (deadlineDuration.isEmpty()) {
                this.deadlineDuration = Optional.empty();
            } else {
                this.deadlineDuration = Optional.of(deadlineDuration.get());
            }
            return this;
        }

        /**
         * <p>An RFC 3339 duration, after which the checkout is automatically canceled.
         * A <code>TerminalCheckout</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation</p>
         * <p>Maximum: 5 minutes</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deadlineDuration(String deadlineDuration) {
            this.deadlineDuration = Optional.ofNullable(deadlineDuration);
            return this;
        }

        /**
         * <p>An RFC 3339 duration, after which the checkout is automatically canceled.
         * A <code>TerminalCheckout</code> that is <code>PENDING</code> is automatically <code>CANCELED</code> and has a cancellation reason
         * of <code>TIMED_OUT</code>.</p>
         * <p>Default: 5 minutes from creation</p>
         * <p>Maximum: 5 minutes</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deadline_duration", nulls = Nulls.SKIP)
        public _FinalStage deadlineDuration(Optional<String> deadlineDuration) {
            this.deadlineDuration = deadlineDuration;
            return this;
        }

        /**
         * <p>Payment-specific options for the checkout request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentOptions(PaymentOptions paymentOptions) {
            this.paymentOptions = Optional.ofNullable(paymentOptions);
            return this;
        }

        /**
         * <p>Payment-specific options for the checkout request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payment_options", nulls = Nulls.SKIP)
        public _FinalStage paymentOptions(Optional<PaymentOptions> paymentOptions) {
            this.paymentOptions = paymentOptions;
            return this;
        }

        /**
         * <p>The reference to the Square order ID for the checkout request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        /**
         * <p>The reference to the Square order ID for the checkout request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>The reference to the Square order ID for the checkout request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
         * Note: maximum 500 characters</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
         * Note: maximum 500 characters</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
         * Note: maximum 500 characters</p>
         */
        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>An optional user-defined reference ID that can be used to associate
         * this <code>TerminalCheckout</code> to another entity in an external system. For example, an order
         * ID generated by a third-party shopping cart. The ID is also associated with any payments
         * used to complete the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>An optional user-defined reference ID that can be used to associate
         * this <code>TerminalCheckout</code> to another entity in an external system. For example, an order
         * ID generated by a third-party shopping cart. The ID is also associated with any payments
         * used to complete the checkout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        /**
         * <p>An optional user-defined reference ID that can be used to associate
         * this <code>TerminalCheckout</code> to another entity in an external system. For example, an order
         * ID generated by a third-party shopping cart. The ID is also associated with any payments
         * used to complete the checkout.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public _FinalStage referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * <p>A unique ID for this <code>TerminalCheckout</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>A unique ID for this <code>TerminalCheckout</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public TerminalCheckout build() {
            return new TerminalCheckout(
                    id,
                    amountMoney,
                    referenceId,
                    note,
                    orderId,
                    paymentOptions,
                    deviceOptions,
                    deadlineDuration,
                    status,
                    cancelReason,
                    paymentIds,
                    createdAt,
                    updatedAt,
                    appId,
                    locationId,
                    paymentType,
                    teamMemberId,
                    customerId,
                    appFeeMoney,
                    statementDescriptionIdentifier,
                    tipMoney,
                    additionalProperties);
        }
    }
}
