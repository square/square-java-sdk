/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCheckoutRequest.Builder.class)
public final class CreateCheckoutRequest {
    private final String locationId;

    private final String idempotencyKey;

    private final CreateOrderRequest order;

    private final Optional<Boolean> askForShippingAddress;

    private final Optional<String> merchantSupportEmail;

    private final Optional<String> prePopulateBuyerEmail;

    private final Optional<Address> prePopulateShippingAddress;

    private final Optional<String> redirectUrl;

    private final Optional<List<ChargeRequestAdditionalRecipient>> additionalRecipients;

    private final Optional<String> note;

    private final Map<String, Object> additionalProperties;

    private CreateCheckoutRequest(
            String locationId,
            String idempotencyKey,
            CreateOrderRequest order,
            Optional<Boolean> askForShippingAddress,
            Optional<String> merchantSupportEmail,
            Optional<String> prePopulateBuyerEmail,
            Optional<Address> prePopulateShippingAddress,
            Optional<String> redirectUrl,
            Optional<List<ChargeRequestAdditionalRecipient>> additionalRecipients,
            Optional<String> note,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.idempotencyKey = idempotencyKey;
        this.order = order;
        this.askForShippingAddress = askForShippingAddress;
        this.merchantSupportEmail = merchantSupportEmail;
        this.prePopulateBuyerEmail = prePopulateBuyerEmail;
        this.prePopulateShippingAddress = prePopulateShippingAddress;
        this.redirectUrl = redirectUrl;
        this.additionalRecipients = additionalRecipients;
        this.note = note;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the business location to associate the checkout with.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return A unique string that identifies this checkout among others you have created. It can be
     * any valid string but must be unique for every order sent to Square Checkout for a given location ID.
     * <p>The idempotency key is used to avoid processing the same order more than once. If you are
     * unsure whether a particular checkout was created successfully, you can attempt it again with
     * the same idempotency key and all the same other parameters without worrying about creating duplicates.</p>
     * <p>You should use a random number/string generator native to the language
     * you are working in to generate strings for your idempotency keys.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The order including line items to be checked out.
     */
    @JsonProperty("order")
    public CreateOrderRequest getOrder() {
        return order;
    }

    /**
     * @return If <code>true</code>, Square Checkout collects shipping information on your behalf and stores
     * that information with the transaction information in the Square Seller Dashboard.
     * <p>Default: <code>false</code>.</p>
     */
    @JsonProperty("ask_for_shipping_address")
    public Optional<Boolean> getAskForShippingAddress() {
        return askForShippingAddress;
    }

    /**
     * @return The email address to display on the Square Checkout confirmation page
     * and confirmation email that the buyer can use to contact the seller.
     * <p>If this value is not set, the confirmation page and email display the
     * primary email address associated with the seller's Square account.</p>
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonProperty("merchant_support_email")
    public Optional<String> getMerchantSupportEmail() {
        return merchantSupportEmail;
    }

    /**
     * @return If provided, the buyer's email is prepopulated on the checkout page
     * as an editable text field.
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonProperty("pre_populate_buyer_email")
    public Optional<String> getPrePopulateBuyerEmail() {
        return prePopulateBuyerEmail;
    }

    /**
     * @return If provided, the buyer's shipping information is prepopulated on the
     * checkout page as editable text fields.
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonProperty("pre_populate_shipping_address")
    public Optional<Address> getPrePopulateShippingAddress() {
        return prePopulateShippingAddress;
    }

    /**
     * @return The URL to redirect to after the checkout is completed with <code>checkoutId</code>,
     * <code>transactionId</code>, and <code>referenceId</code> appended as URL parameters. For example,
     * if the provided redirect URL is <code>http://www.example.com/order-complete</code>, a
     * successful transaction redirects the customer to:
     * <p><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;amp;referenceId=xxxxxx&amp;amp;transactionId=xxxxxx</code></p>
     * <p>If you do not provide a redirect URL, Square Checkout displays an order
     * confirmation page on your behalf; however, it is strongly recommended that
     * you provide a redirect URL so you can verify the transaction results and
     * finalize the order through your existing/normal confirmation workflow.</p>
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonProperty("redirect_url")
    public Optional<String> getRedirectUrl() {
        return redirectUrl;
    }

    /**
     * @return The basic primitive of a multi-party transaction. The value is optional.
     * The transaction facilitated by you can be split from here.
     * <p>If you provide this value, the <code>amount_money</code> value in your <code>additional_recipients</code> field
     * cannot be more than 90% of the <code>total_money</code> calculated by Square for your order.
     * The <code>location_id</code> must be a valid seller location where the checkout is occurring.</p>
     * <p>This field requires <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission.</p>
     * <p>This field is currently not supported in the Square Sandbox.</p>
     */
    @JsonProperty("additional_recipients")
    public Optional<List<ChargeRequestAdditionalRecipient>> getAdditionalRecipients() {
        return additionalRecipients;
    }

    /**
     * @return An optional note to associate with the <code>checkout</code> object.
     * <p>This value cannot exceed 60 characters.</p>
     */
    @JsonProperty("note")
    public Optional<String> getNote() {
        return note;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCheckoutRequest && equalTo((CreateCheckoutRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCheckoutRequest other) {
        return locationId.equals(other.locationId)
                && idempotencyKey.equals(other.idempotencyKey)
                && order.equals(other.order)
                && askForShippingAddress.equals(other.askForShippingAddress)
                && merchantSupportEmail.equals(other.merchantSupportEmail)
                && prePopulateBuyerEmail.equals(other.prePopulateBuyerEmail)
                && prePopulateShippingAddress.equals(other.prePopulateShippingAddress)
                && redirectUrl.equals(other.redirectUrl)
                && additionalRecipients.equals(other.additionalRecipients)
                && note.equals(other.note);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.locationId,
                this.idempotencyKey,
                this.order,
                this.askForShippingAddress,
                this.merchantSupportEmail,
                this.prePopulateBuyerEmail,
                this.prePopulateShippingAddress,
                this.redirectUrl,
                this.additionalRecipients,
                this.note);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        IdempotencyKeyStage locationId(@NotNull String locationId);

        Builder from(CreateCheckoutRequest other);
    }

    public interface IdempotencyKeyStage {
        OrderStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface OrderStage {
        _FinalStage order(@NotNull CreateOrderRequest order);
    }

    public interface _FinalStage {
        CreateCheckoutRequest build();

        _FinalStage askForShippingAddress(Optional<Boolean> askForShippingAddress);

        _FinalStage askForShippingAddress(Boolean askForShippingAddress);

        _FinalStage merchantSupportEmail(Optional<String> merchantSupportEmail);

        _FinalStage merchantSupportEmail(String merchantSupportEmail);

        _FinalStage prePopulateBuyerEmail(Optional<String> prePopulateBuyerEmail);

        _FinalStage prePopulateBuyerEmail(String prePopulateBuyerEmail);

        _FinalStage prePopulateShippingAddress(Optional<Address> prePopulateShippingAddress);

        _FinalStage prePopulateShippingAddress(Address prePopulateShippingAddress);

        _FinalStage redirectUrl(Optional<String> redirectUrl);

        _FinalStage redirectUrl(String redirectUrl);

        _FinalStage additionalRecipients(Optional<List<ChargeRequestAdditionalRecipient>> additionalRecipients);

        _FinalStage additionalRecipients(List<ChargeRequestAdditionalRecipient> additionalRecipients);

        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LocationIdStage, IdempotencyKeyStage, OrderStage, _FinalStage {
        private String locationId;

        private String idempotencyKey;

        private CreateOrderRequest order;

        private Optional<String> note = Optional.empty();

        private Optional<List<ChargeRequestAdditionalRecipient>> additionalRecipients = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Optional<Address> prePopulateShippingAddress = Optional.empty();

        private Optional<String> prePopulateBuyerEmail = Optional.empty();

        private Optional<String> merchantSupportEmail = Optional.empty();

        private Optional<Boolean> askForShippingAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateCheckoutRequest other) {
            locationId(other.getLocationId());
            idempotencyKey(other.getIdempotencyKey());
            order(other.getOrder());
            askForShippingAddress(other.getAskForShippingAddress());
            merchantSupportEmail(other.getMerchantSupportEmail());
            prePopulateBuyerEmail(other.getPrePopulateBuyerEmail());
            prePopulateShippingAddress(other.getPrePopulateShippingAddress());
            redirectUrl(other.getRedirectUrl());
            additionalRecipients(other.getAdditionalRecipients());
            note(other.getNote());
            return this;
        }

        /**
         * <p>The ID of the business location to associate the checkout with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public IdempotencyKeyStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies this checkout among others you have created. It can be
         * any valid string but must be unique for every order sent to Square Checkout for a given location ID.</p>
         * <p>The idempotency key is used to avoid processing the same order more than once. If you are
         * unsure whether a particular checkout was created successfully, you can attempt it again with
         * the same idempotency key and all the same other parameters without worrying about creating duplicates.</p>
         * <p>You should use a random number/string generator native to the language
         * you are working in to generate strings for your idempotency keys.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public OrderStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The order including line items to be checked out.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order")
        public _FinalStage order(@NotNull CreateOrderRequest order) {
            this.order = Objects.requireNonNull(order, "order must not be null");
            return this;
        }

        /**
         * <p>An optional note to associate with the <code>checkout</code> object.</p>
         * <p>This value cannot exceed 60 characters.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>The basic primitive of a multi-party transaction. The value is optional.
         * The transaction facilitated by you can be split from here.</p>
         * <p>If you provide this value, the <code>amount_money</code> value in your <code>additional_recipients</code> field
         * cannot be more than 90% of the <code>total_money</code> calculated by Square for your order.
         * The <code>location_id</code> must be a valid seller location where the checkout is occurring.</p>
         * <p>This field requires <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission.</p>
         * <p>This field is currently not supported in the Square Sandbox.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalRecipients(List<ChargeRequestAdditionalRecipient> additionalRecipients) {
            this.additionalRecipients = Optional.ofNullable(additionalRecipients);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additional_recipients", nulls = Nulls.SKIP)
        public _FinalStage additionalRecipients(Optional<List<ChargeRequestAdditionalRecipient>> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }

        /**
         * <p>The URL to redirect to after the checkout is completed with <code>checkoutId</code>,
         * <code>transactionId</code>, and <code>referenceId</code> appended as URL parameters. For example,
         * if the provided redirect URL is <code>http://www.example.com/order-complete</code>, a
         * successful transaction redirects the customer to:</p>
         * <p><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;amp;referenceId=xxxxxx&amp;amp;transactionId=xxxxxx</code></p>
         * <p>If you do not provide a redirect URL, Square Checkout displays an order
         * confirmation page on your behalf; however, it is strongly recommended that
         * you provide a redirect URL so you can verify the transaction results and
         * finalize the order through your existing/normal confirmation workflow.</p>
         * <p>Default: none; only exists if explicitly set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "redirect_url", nulls = Nulls.SKIP)
        public _FinalStage redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * <p>If provided, the buyer's shipping information is prepopulated on the
         * checkout page as editable text fields.</p>
         * <p>Default: none; only exists if explicitly set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage prePopulateShippingAddress(Address prePopulateShippingAddress) {
            this.prePopulateShippingAddress = Optional.ofNullable(prePopulateShippingAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pre_populate_shipping_address", nulls = Nulls.SKIP)
        public _FinalStage prePopulateShippingAddress(Optional<Address> prePopulateShippingAddress) {
            this.prePopulateShippingAddress = prePopulateShippingAddress;
            return this;
        }

        /**
         * <p>If provided, the buyer's email is prepopulated on the checkout page
         * as an editable text field.</p>
         * <p>Default: none; only exists if explicitly set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage prePopulateBuyerEmail(String prePopulateBuyerEmail) {
            this.prePopulateBuyerEmail = Optional.ofNullable(prePopulateBuyerEmail);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pre_populate_buyer_email", nulls = Nulls.SKIP)
        public _FinalStage prePopulateBuyerEmail(Optional<String> prePopulateBuyerEmail) {
            this.prePopulateBuyerEmail = prePopulateBuyerEmail;
            return this;
        }

        /**
         * <p>The email address to display on the Square Checkout confirmation page
         * and confirmation email that the buyer can use to contact the seller.</p>
         * <p>If this value is not set, the confirmation page and email display the
         * primary email address associated with the seller's Square account.</p>
         * <p>Default: none; only exists if explicitly set.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage merchantSupportEmail(String merchantSupportEmail) {
            this.merchantSupportEmail = Optional.ofNullable(merchantSupportEmail);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "merchant_support_email", nulls = Nulls.SKIP)
        public _FinalStage merchantSupportEmail(Optional<String> merchantSupportEmail) {
            this.merchantSupportEmail = merchantSupportEmail;
            return this;
        }

        /**
         * <p>If <code>true</code>, Square Checkout collects shipping information on your behalf and stores
         * that information with the transaction information in the Square Seller Dashboard.</p>
         * <p>Default: <code>false</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage askForShippingAddress(Boolean askForShippingAddress) {
            this.askForShippingAddress = Optional.ofNullable(askForShippingAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ask_for_shipping_address", nulls = Nulls.SKIP)
        public _FinalStage askForShippingAddress(Optional<Boolean> askForShippingAddress) {
            this.askForShippingAddress = askForShippingAddress;
            return this;
        }

        @java.lang.Override
        public CreateCheckoutRequest build() {
            return new CreateCheckoutRequest(
                    locationId,
                    idempotencyKey,
                    order,
                    askForShippingAddress,
                    merchantSupportEmail,
                    prePopulateBuyerEmail,
                    prePopulateShippingAddress,
                    redirectUrl,
                    additionalRecipients,
                    note,
                    additionalProperties);
        }
    }
}
