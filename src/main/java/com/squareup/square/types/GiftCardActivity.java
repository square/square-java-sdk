/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GiftCardActivity.Builder.class)
public final class GiftCardActivity {
    private final Optional<String> id;

    private final GiftCardActivityType type;

    private final String locationId;

    private final Optional<String> createdAt;

    private final Optional<String> giftCardId;

    private final Optional<String> giftCardGan;

    private final Optional<Money> giftCardBalanceMoney;

    private final Optional<GiftCardActivityLoad> loadActivityDetails;

    private final Optional<GiftCardActivityActivate> activateActivityDetails;

    private final Optional<GiftCardActivityRedeem> redeemActivityDetails;

    private final Optional<GiftCardActivityClearBalance> clearBalanceActivityDetails;

    private final Optional<GiftCardActivityDeactivate> deactivateActivityDetails;

    private final Optional<GiftCardActivityAdjustIncrement> adjustIncrementActivityDetails;

    private final Optional<GiftCardActivityAdjustDecrement> adjustDecrementActivityDetails;

    private final Optional<GiftCardActivityRefund> refundActivityDetails;

    private final Optional<GiftCardActivityUnlinkedActivityRefund> unlinkedActivityRefundActivityDetails;

    private final Optional<GiftCardActivityImport> importActivityDetails;

    private final Optional<GiftCardActivityBlock> blockActivityDetails;

    private final Optional<GiftCardActivityUnblock> unblockActivityDetails;

    private final Optional<GiftCardActivityImportReversal> importReversalActivityDetails;

    private final Optional<GiftCardActivityTransferBalanceTo> transferBalanceToActivityDetails;

    private final Optional<GiftCardActivityTransferBalanceFrom> transferBalanceFromActivityDetails;

    private final Map<String, Object> additionalProperties;

    private GiftCardActivity(
            Optional<String> id,
            GiftCardActivityType type,
            String locationId,
            Optional<String> createdAt,
            Optional<String> giftCardId,
            Optional<String> giftCardGan,
            Optional<Money> giftCardBalanceMoney,
            Optional<GiftCardActivityLoad> loadActivityDetails,
            Optional<GiftCardActivityActivate> activateActivityDetails,
            Optional<GiftCardActivityRedeem> redeemActivityDetails,
            Optional<GiftCardActivityClearBalance> clearBalanceActivityDetails,
            Optional<GiftCardActivityDeactivate> deactivateActivityDetails,
            Optional<GiftCardActivityAdjustIncrement> adjustIncrementActivityDetails,
            Optional<GiftCardActivityAdjustDecrement> adjustDecrementActivityDetails,
            Optional<GiftCardActivityRefund> refundActivityDetails,
            Optional<GiftCardActivityUnlinkedActivityRefund> unlinkedActivityRefundActivityDetails,
            Optional<GiftCardActivityImport> importActivityDetails,
            Optional<GiftCardActivityBlock> blockActivityDetails,
            Optional<GiftCardActivityUnblock> unblockActivityDetails,
            Optional<GiftCardActivityImportReversal> importReversalActivityDetails,
            Optional<GiftCardActivityTransferBalanceTo> transferBalanceToActivityDetails,
            Optional<GiftCardActivityTransferBalanceFrom> transferBalanceFromActivityDetails,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.locationId = locationId;
        this.createdAt = createdAt;
        this.giftCardId = giftCardId;
        this.giftCardGan = giftCardGan;
        this.giftCardBalanceMoney = giftCardBalanceMoney;
        this.loadActivityDetails = loadActivityDetails;
        this.activateActivityDetails = activateActivityDetails;
        this.redeemActivityDetails = redeemActivityDetails;
        this.clearBalanceActivityDetails = clearBalanceActivityDetails;
        this.deactivateActivityDetails = deactivateActivityDetails;
        this.adjustIncrementActivityDetails = adjustIncrementActivityDetails;
        this.adjustDecrementActivityDetails = adjustDecrementActivityDetails;
        this.refundActivityDetails = refundActivityDetails;
        this.unlinkedActivityRefundActivityDetails = unlinkedActivityRefundActivityDetails;
        this.importActivityDetails = importActivityDetails;
        this.blockActivityDetails = blockActivityDetails;
        this.unblockActivityDetails = unblockActivityDetails;
        this.importReversalActivityDetails = importReversalActivityDetails;
        this.transferBalanceToActivityDetails = transferBalanceToActivityDetails;
        this.transferBalanceFromActivityDetails = transferBalanceFromActivityDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the gift card activity.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The type of gift card activity.
     * See <a href="#type-type">Type</a> for possible values
     */
    @JsonProperty("type")
    public GiftCardActivityType getType() {
        return type;
    }

    /**
     * @return The ID of the <a href="entity:Location">business location</a> where the activity occurred.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The timestamp when the gift card activity was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The gift card ID. When creating a gift card activity, <code>gift_card_id</code> is not required if
     * <code>gift_card_gan</code> is specified.
     */
    @JsonIgnore
    public Optional<String> getGiftCardId() {
        if (giftCardId == null) {
            return Optional.empty();
        }
        return giftCardId;
    }

    /**
     * @return The gift card account number (GAN). When creating a gift card activity, <code>gift_card_gan</code>
     * is not required if <code>gift_card_id</code> is specified.
     */
    @JsonIgnore
    public Optional<String> getGiftCardGan() {
        if (giftCardGan == null) {
            return Optional.empty();
        }
        return giftCardGan;
    }

    /**
     * @return The final balance on the gift card after the action is completed.
     */
    @JsonProperty("gift_card_balance_money")
    public Optional<Money> getGiftCardBalanceMoney() {
        return giftCardBalanceMoney;
    }

    /**
     * @return Additional details about a <code>LOAD</code> activity, which is used to reload money onto a gift card.
     */
    @JsonProperty("load_activity_details")
    public Optional<GiftCardActivityLoad> getLoadActivityDetails() {
        return loadActivityDetails;
    }

    /**
     * @return Additional details about an <code>ACTIVATE</code> activity, which is used to activate a gift card with
     * an initial balance.
     */
    @JsonProperty("activate_activity_details")
    public Optional<GiftCardActivityActivate> getActivateActivityDetails() {
        return activateActivityDetails;
    }

    /**
     * @return Additional details about a <code>REDEEM</code> activity, which is used to redeem a gift card for a purchase.
     * <p>For applications that process payments using the Square Payments API, Square creates a <code>REDEEM</code> activity that
     * updates the gift card balance after the corresponding <a href="api-endpoint:Payments-CreatePayment">CreatePayment</a>
     * request is completed. Applications that use a custom payment processing system must call
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REDEEM</code> activity.</p>
     */
    @JsonProperty("redeem_activity_details")
    public Optional<GiftCardActivityRedeem> getRedeemActivityDetails() {
        return redeemActivityDetails;
    }

    /**
     * @return Additional details about a <code>CLEAR_BALANCE</code> activity, which is used to set the balance of a gift card to zero.
     */
    @JsonProperty("clear_balance_activity_details")
    public Optional<GiftCardActivityClearBalance> getClearBalanceActivityDetails() {
        return clearBalanceActivityDetails;
    }

    /**
     * @return Additional details about a <code>DEACTIVATE</code> activity, which is used to deactivate a gift card.
     */
    @JsonProperty("deactivate_activity_details")
    public Optional<GiftCardActivityDeactivate> getDeactivateActivityDetails() {
        return deactivateActivityDetails;
    }

    /**
     * @return Additional details about an <code>ADJUST_INCREMENT</code> activity, which is used to add money to a gift card
     * outside of a typical <code>ACTIVATE</code>, <code>LOAD</code>, or <code>REFUND</code> activity flow.
     */
    @JsonProperty("adjust_increment_activity_details")
    public Optional<GiftCardActivityAdjustIncrement> getAdjustIncrementActivityDetails() {
        return adjustIncrementActivityDetails;
    }

    /**
     * @return Additional details about an <code>ADJUST_DECREMENT</code> activity, which is used to deduct money from a gift
     * card outside of a typical <code>REDEEM</code> activity flow.
     */
    @JsonProperty("adjust_decrement_activity_details")
    public Optional<GiftCardActivityAdjustDecrement> getAdjustDecrementActivityDetails() {
        return adjustDecrementActivityDetails;
    }

    /**
     * @return Additional details about a <code>REFUND</code> activity, which is used to add money to a gift card when
     * refunding a payment.
     * <p>For applications that refund payments to a gift card using the Square Refunds API, Square automatically
     * creates a <code>REFUND</code> activity that updates the gift card balance after a <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
     * request is completed. Applications that use a custom processing system must call
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REFUND</code> activity.</p>
     */
    @JsonProperty("refund_activity_details")
    public Optional<GiftCardActivityRefund> getRefundActivityDetails() {
        return refundActivityDetails;
    }

    /**
     * @return Additional details about an <code>UNLINKED_ACTIVITY_REFUND</code> activity. This activity is used to add money
     * to a gift card when refunding a payment that was processed using a custom payment processing system
     * and not linked to the gift card.
     */
    @JsonProperty("unlinked_activity_refund_activity_details")
    public Optional<GiftCardActivityUnlinkedActivityRefund> getUnlinkedActivityRefundActivityDetails() {
        return unlinkedActivityRefundActivityDetails;
    }

    /**
     * @return Additional details about an <code>IMPORT</code> activity, which Square uses to import a third-party
     * gift card with a balance.
     */
    @JsonProperty("import_activity_details")
    public Optional<GiftCardActivityImport> getImportActivityDetails() {
        return importActivityDetails;
    }

    /**
     * @return Additional details about a <code>BLOCK</code> activity, which Square uses to temporarily block a gift card.
     */
    @JsonProperty("block_activity_details")
    public Optional<GiftCardActivityBlock> getBlockActivityDetails() {
        return blockActivityDetails;
    }

    /**
     * @return Additional details about an <code>UNBLOCK</code> activity, which Square uses to unblock a gift card.
     */
    @JsonProperty("unblock_activity_details")
    public Optional<GiftCardActivityUnblock> getUnblockActivityDetails() {
        return unblockActivityDetails;
    }

    /**
     * @return Additional details about an <code>IMPORT_REVERSAL</code> activity, which Square uses to reverse the
     * import of a third-party gift card.
     */
    @JsonProperty("import_reversal_activity_details")
    public Optional<GiftCardActivityImportReversal> getImportReversalActivityDetails() {
        return importReversalActivityDetails;
    }

    /**
     * @return Additional details about a <code>TRANSFER_BALANCE_TO</code> activity, which Square uses to add money to
     * a gift card as the result of a transfer from another gift card.
     */
    @JsonProperty("transfer_balance_to_activity_details")
    public Optional<GiftCardActivityTransferBalanceTo> getTransferBalanceToActivityDetails() {
        return transferBalanceToActivityDetails;
    }

    /**
     * @return Additional details about a <code>TRANSFER_BALANCE_FROM</code> activity, which Square uses to deduct money from
     * a gift as the result of a transfer to another gift card.
     */
    @JsonProperty("transfer_balance_from_activity_details")
    public Optional<GiftCardActivityTransferBalanceFrom> getTransferBalanceFromActivityDetails() {
        return transferBalanceFromActivityDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("gift_card_id")
    private Optional<String> _getGiftCardId() {
        return giftCardId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("gift_card_gan")
    private Optional<String> _getGiftCardGan() {
        return giftCardGan;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GiftCardActivity && equalTo((GiftCardActivity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GiftCardActivity other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && locationId.equals(other.locationId)
                && createdAt.equals(other.createdAt)
                && giftCardId.equals(other.giftCardId)
                && giftCardGan.equals(other.giftCardGan)
                && giftCardBalanceMoney.equals(other.giftCardBalanceMoney)
                && loadActivityDetails.equals(other.loadActivityDetails)
                && activateActivityDetails.equals(other.activateActivityDetails)
                && redeemActivityDetails.equals(other.redeemActivityDetails)
                && clearBalanceActivityDetails.equals(other.clearBalanceActivityDetails)
                && deactivateActivityDetails.equals(other.deactivateActivityDetails)
                && adjustIncrementActivityDetails.equals(other.adjustIncrementActivityDetails)
                && adjustDecrementActivityDetails.equals(other.adjustDecrementActivityDetails)
                && refundActivityDetails.equals(other.refundActivityDetails)
                && unlinkedActivityRefundActivityDetails.equals(other.unlinkedActivityRefundActivityDetails)
                && importActivityDetails.equals(other.importActivityDetails)
                && blockActivityDetails.equals(other.blockActivityDetails)
                && unblockActivityDetails.equals(other.unblockActivityDetails)
                && importReversalActivityDetails.equals(other.importReversalActivityDetails)
                && transferBalanceToActivityDetails.equals(other.transferBalanceToActivityDetails)
                && transferBalanceFromActivityDetails.equals(other.transferBalanceFromActivityDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.type,
                this.locationId,
                this.createdAt,
                this.giftCardId,
                this.giftCardGan,
                this.giftCardBalanceMoney,
                this.loadActivityDetails,
                this.activateActivityDetails,
                this.redeemActivityDetails,
                this.clearBalanceActivityDetails,
                this.deactivateActivityDetails,
                this.adjustIncrementActivityDetails,
                this.adjustDecrementActivityDetails,
                this.refundActivityDetails,
                this.unlinkedActivityRefundActivityDetails,
                this.importActivityDetails,
                this.blockActivityDetails,
                this.unblockActivityDetails,
                this.importReversalActivityDetails,
                this.transferBalanceToActivityDetails,
                this.transferBalanceFromActivityDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of gift card activity.
         * See <a href="#type-type">Type</a> for possible values</p>
         */
        LocationIdStage type(@NotNull GiftCardActivityType type);

        Builder from(GiftCardActivity other);
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the <a href="entity:Location">business location</a> where the activity occurred.</p>
         */
        _FinalStage locationId(@NotNull String locationId);
    }

    public interface _FinalStage {
        GiftCardActivity build();

        /**
         * <p>The Square-assigned ID of the gift card activity.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>The timestamp when the gift card activity was created, in RFC 3339 format.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The gift card ID. When creating a gift card activity, <code>gift_card_id</code> is not required if
         * <code>gift_card_gan</code> is specified.</p>
         */
        _FinalStage giftCardId(Optional<String> giftCardId);

        _FinalStage giftCardId(String giftCardId);

        _FinalStage giftCardId(Nullable<String> giftCardId);

        /**
         * <p>The gift card account number (GAN). When creating a gift card activity, <code>gift_card_gan</code>
         * is not required if <code>gift_card_id</code> is specified.</p>
         */
        _FinalStage giftCardGan(Optional<String> giftCardGan);

        _FinalStage giftCardGan(String giftCardGan);

        _FinalStage giftCardGan(Nullable<String> giftCardGan);

        /**
         * <p>The final balance on the gift card after the action is completed.</p>
         */
        _FinalStage giftCardBalanceMoney(Optional<Money> giftCardBalanceMoney);

        _FinalStage giftCardBalanceMoney(Money giftCardBalanceMoney);

        /**
         * <p>Additional details about a <code>LOAD</code> activity, which is used to reload money onto a gift card.</p>
         */
        _FinalStage loadActivityDetails(Optional<GiftCardActivityLoad> loadActivityDetails);

        _FinalStage loadActivityDetails(GiftCardActivityLoad loadActivityDetails);

        /**
         * <p>Additional details about an <code>ACTIVATE</code> activity, which is used to activate a gift card with
         * an initial balance.</p>
         */
        _FinalStage activateActivityDetails(Optional<GiftCardActivityActivate> activateActivityDetails);

        _FinalStage activateActivityDetails(GiftCardActivityActivate activateActivityDetails);

        /**
         * <p>Additional details about a <code>REDEEM</code> activity, which is used to redeem a gift card for a purchase.</p>
         * <p>For applications that process payments using the Square Payments API, Square creates a <code>REDEEM</code> activity that
         * updates the gift card balance after the corresponding <a href="api-endpoint:Payments-CreatePayment">CreatePayment</a>
         * request is completed. Applications that use a custom payment processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REDEEM</code> activity.</p>
         */
        _FinalStage redeemActivityDetails(Optional<GiftCardActivityRedeem> redeemActivityDetails);

        _FinalStage redeemActivityDetails(GiftCardActivityRedeem redeemActivityDetails);

        /**
         * <p>Additional details about a <code>CLEAR_BALANCE</code> activity, which is used to set the balance of a gift card to zero.</p>
         */
        _FinalStage clearBalanceActivityDetails(Optional<GiftCardActivityClearBalance> clearBalanceActivityDetails);

        _FinalStage clearBalanceActivityDetails(GiftCardActivityClearBalance clearBalanceActivityDetails);

        /**
         * <p>Additional details about a <code>DEACTIVATE</code> activity, which is used to deactivate a gift card.</p>
         */
        _FinalStage deactivateActivityDetails(Optional<GiftCardActivityDeactivate> deactivateActivityDetails);

        _FinalStage deactivateActivityDetails(GiftCardActivityDeactivate deactivateActivityDetails);

        /**
         * <p>Additional details about an <code>ADJUST_INCREMENT</code> activity, which is used to add money to a gift card
         * outside of a typical <code>ACTIVATE</code>, <code>LOAD</code>, or <code>REFUND</code> activity flow.</p>
         */
        _FinalStage adjustIncrementActivityDetails(
                Optional<GiftCardActivityAdjustIncrement> adjustIncrementActivityDetails);

        _FinalStage adjustIncrementActivityDetails(GiftCardActivityAdjustIncrement adjustIncrementActivityDetails);

        /**
         * <p>Additional details about an <code>ADJUST_DECREMENT</code> activity, which is used to deduct money from a gift
         * card outside of a typical <code>REDEEM</code> activity flow.</p>
         */
        _FinalStage adjustDecrementActivityDetails(
                Optional<GiftCardActivityAdjustDecrement> adjustDecrementActivityDetails);

        _FinalStage adjustDecrementActivityDetails(GiftCardActivityAdjustDecrement adjustDecrementActivityDetails);

        /**
         * <p>Additional details about a <code>REFUND</code> activity, which is used to add money to a gift card when
         * refunding a payment.</p>
         * <p>For applications that refund payments to a gift card using the Square Refunds API, Square automatically
         * creates a <code>REFUND</code> activity that updates the gift card balance after a <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
         * request is completed. Applications that use a custom processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REFUND</code> activity.</p>
         */
        _FinalStage refundActivityDetails(Optional<GiftCardActivityRefund> refundActivityDetails);

        _FinalStage refundActivityDetails(GiftCardActivityRefund refundActivityDetails);

        /**
         * <p>Additional details about an <code>UNLINKED_ACTIVITY_REFUND</code> activity. This activity is used to add money
         * to a gift card when refunding a payment that was processed using a custom payment processing system
         * and not linked to the gift card.</p>
         */
        _FinalStage unlinkedActivityRefundActivityDetails(
                Optional<GiftCardActivityUnlinkedActivityRefund> unlinkedActivityRefundActivityDetails);

        _FinalStage unlinkedActivityRefundActivityDetails(
                GiftCardActivityUnlinkedActivityRefund unlinkedActivityRefundActivityDetails);

        /**
         * <p>Additional details about an <code>IMPORT</code> activity, which Square uses to import a third-party
         * gift card with a balance.</p>
         */
        _FinalStage importActivityDetails(Optional<GiftCardActivityImport> importActivityDetails);

        _FinalStage importActivityDetails(GiftCardActivityImport importActivityDetails);

        /**
         * <p>Additional details about a <code>BLOCK</code> activity, which Square uses to temporarily block a gift card.</p>
         */
        _FinalStage blockActivityDetails(Optional<GiftCardActivityBlock> blockActivityDetails);

        _FinalStage blockActivityDetails(GiftCardActivityBlock blockActivityDetails);

        /**
         * <p>Additional details about an <code>UNBLOCK</code> activity, which Square uses to unblock a gift card.</p>
         */
        _FinalStage unblockActivityDetails(Optional<GiftCardActivityUnblock> unblockActivityDetails);

        _FinalStage unblockActivityDetails(GiftCardActivityUnblock unblockActivityDetails);

        /**
         * <p>Additional details about an <code>IMPORT_REVERSAL</code> activity, which Square uses to reverse the
         * import of a third-party gift card.</p>
         */
        _FinalStage importReversalActivityDetails(
                Optional<GiftCardActivityImportReversal> importReversalActivityDetails);

        _FinalStage importReversalActivityDetails(GiftCardActivityImportReversal importReversalActivityDetails);

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_TO</code> activity, which Square uses to add money to
         * a gift card as the result of a transfer from another gift card.</p>
         */
        _FinalStage transferBalanceToActivityDetails(
                Optional<GiftCardActivityTransferBalanceTo> transferBalanceToActivityDetails);

        _FinalStage transferBalanceToActivityDetails(
                GiftCardActivityTransferBalanceTo transferBalanceToActivityDetails);

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_FROM</code> activity, which Square uses to deduct money from
         * a gift as the result of a transfer to another gift card.</p>
         */
        _FinalStage transferBalanceFromActivityDetails(
                Optional<GiftCardActivityTransferBalanceFrom> transferBalanceFromActivityDetails);

        _FinalStage transferBalanceFromActivityDetails(
                GiftCardActivityTransferBalanceFrom transferBalanceFromActivityDetails);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, LocationIdStage, _FinalStage {
        private GiftCardActivityType type;

        private String locationId;

        private Optional<GiftCardActivityTransferBalanceFrom> transferBalanceFromActivityDetails = Optional.empty();

        private Optional<GiftCardActivityTransferBalanceTo> transferBalanceToActivityDetails = Optional.empty();

        private Optional<GiftCardActivityImportReversal> importReversalActivityDetails = Optional.empty();

        private Optional<GiftCardActivityUnblock> unblockActivityDetails = Optional.empty();

        private Optional<GiftCardActivityBlock> blockActivityDetails = Optional.empty();

        private Optional<GiftCardActivityImport> importActivityDetails = Optional.empty();

        private Optional<GiftCardActivityUnlinkedActivityRefund> unlinkedActivityRefundActivityDetails =
                Optional.empty();

        private Optional<GiftCardActivityRefund> refundActivityDetails = Optional.empty();

        private Optional<GiftCardActivityAdjustDecrement> adjustDecrementActivityDetails = Optional.empty();

        private Optional<GiftCardActivityAdjustIncrement> adjustIncrementActivityDetails = Optional.empty();

        private Optional<GiftCardActivityDeactivate> deactivateActivityDetails = Optional.empty();

        private Optional<GiftCardActivityClearBalance> clearBalanceActivityDetails = Optional.empty();

        private Optional<GiftCardActivityRedeem> redeemActivityDetails = Optional.empty();

        private Optional<GiftCardActivityActivate> activateActivityDetails = Optional.empty();

        private Optional<GiftCardActivityLoad> loadActivityDetails = Optional.empty();

        private Optional<Money> giftCardBalanceMoney = Optional.empty();

        private Optional<String> giftCardGan = Optional.empty();

        private Optional<String> giftCardId = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GiftCardActivity other) {
            id(other.getId());
            type(other.getType());
            locationId(other.getLocationId());
            createdAt(other.getCreatedAt());
            giftCardId(other.getGiftCardId());
            giftCardGan(other.getGiftCardGan());
            giftCardBalanceMoney(other.getGiftCardBalanceMoney());
            loadActivityDetails(other.getLoadActivityDetails());
            activateActivityDetails(other.getActivateActivityDetails());
            redeemActivityDetails(other.getRedeemActivityDetails());
            clearBalanceActivityDetails(other.getClearBalanceActivityDetails());
            deactivateActivityDetails(other.getDeactivateActivityDetails());
            adjustIncrementActivityDetails(other.getAdjustIncrementActivityDetails());
            adjustDecrementActivityDetails(other.getAdjustDecrementActivityDetails());
            refundActivityDetails(other.getRefundActivityDetails());
            unlinkedActivityRefundActivityDetails(other.getUnlinkedActivityRefundActivityDetails());
            importActivityDetails(other.getImportActivityDetails());
            blockActivityDetails(other.getBlockActivityDetails());
            unblockActivityDetails(other.getUnblockActivityDetails());
            importReversalActivityDetails(other.getImportReversalActivityDetails());
            transferBalanceToActivityDetails(other.getTransferBalanceToActivityDetails());
            transferBalanceFromActivityDetails(other.getTransferBalanceFromActivityDetails());
            return this;
        }

        /**
         * <p>The type of gift card activity.
         * See <a href="#type-type">Type</a> for possible values</p>
         * <p>The type of gift card activity.
         * See <a href="#type-type">Type</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public LocationIdStage type(@NotNull GiftCardActivityType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Location">business location</a> where the activity occurred.</p>
         * <p>The ID of the <a href="entity:Location">business location</a> where the activity occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_FROM</code> activity, which Square uses to deduct money from
         * a gift as the result of a transfer to another gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transferBalanceFromActivityDetails(
                GiftCardActivityTransferBalanceFrom transferBalanceFromActivityDetails) {
            this.transferBalanceFromActivityDetails = Optional.ofNullable(transferBalanceFromActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_FROM</code> activity, which Square uses to deduct money from
         * a gift as the result of a transfer to another gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transfer_balance_from_activity_details", nulls = Nulls.SKIP)
        public _FinalStage transferBalanceFromActivityDetails(
                Optional<GiftCardActivityTransferBalanceFrom> transferBalanceFromActivityDetails) {
            this.transferBalanceFromActivityDetails = transferBalanceFromActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_TO</code> activity, which Square uses to add money to
         * a gift card as the result of a transfer from another gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transferBalanceToActivityDetails(
                GiftCardActivityTransferBalanceTo transferBalanceToActivityDetails) {
            this.transferBalanceToActivityDetails = Optional.ofNullable(transferBalanceToActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>TRANSFER_BALANCE_TO</code> activity, which Square uses to add money to
         * a gift card as the result of a transfer from another gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transfer_balance_to_activity_details", nulls = Nulls.SKIP)
        public _FinalStage transferBalanceToActivityDetails(
                Optional<GiftCardActivityTransferBalanceTo> transferBalanceToActivityDetails) {
            this.transferBalanceToActivityDetails = transferBalanceToActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>IMPORT_REVERSAL</code> activity, which Square uses to reverse the
         * import of a third-party gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage importReversalActivityDetails(GiftCardActivityImportReversal importReversalActivityDetails) {
            this.importReversalActivityDetails = Optional.ofNullable(importReversalActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>IMPORT_REVERSAL</code> activity, which Square uses to reverse the
         * import of a third-party gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "import_reversal_activity_details", nulls = Nulls.SKIP)
        public _FinalStage importReversalActivityDetails(
                Optional<GiftCardActivityImportReversal> importReversalActivityDetails) {
            this.importReversalActivityDetails = importReversalActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>UNBLOCK</code> activity, which Square uses to unblock a gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage unblockActivityDetails(GiftCardActivityUnblock unblockActivityDetails) {
            this.unblockActivityDetails = Optional.ofNullable(unblockActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>UNBLOCK</code> activity, which Square uses to unblock a gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "unblock_activity_details", nulls = Nulls.SKIP)
        public _FinalStage unblockActivityDetails(Optional<GiftCardActivityUnblock> unblockActivityDetails) {
            this.unblockActivityDetails = unblockActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>BLOCK</code> activity, which Square uses to temporarily block a gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage blockActivityDetails(GiftCardActivityBlock blockActivityDetails) {
            this.blockActivityDetails = Optional.ofNullable(blockActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>BLOCK</code> activity, which Square uses to temporarily block a gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "block_activity_details", nulls = Nulls.SKIP)
        public _FinalStage blockActivityDetails(Optional<GiftCardActivityBlock> blockActivityDetails) {
            this.blockActivityDetails = blockActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>IMPORT</code> activity, which Square uses to import a third-party
         * gift card with a balance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage importActivityDetails(GiftCardActivityImport importActivityDetails) {
            this.importActivityDetails = Optional.ofNullable(importActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>IMPORT</code> activity, which Square uses to import a third-party
         * gift card with a balance.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "import_activity_details", nulls = Nulls.SKIP)
        public _FinalStage importActivityDetails(Optional<GiftCardActivityImport> importActivityDetails) {
            this.importActivityDetails = importActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>UNLINKED_ACTIVITY_REFUND</code> activity. This activity is used to add money
         * to a gift card when refunding a payment that was processed using a custom payment processing system
         * and not linked to the gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage unlinkedActivityRefundActivityDetails(
                GiftCardActivityUnlinkedActivityRefund unlinkedActivityRefundActivityDetails) {
            this.unlinkedActivityRefundActivityDetails = Optional.ofNullable(unlinkedActivityRefundActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>UNLINKED_ACTIVITY_REFUND</code> activity. This activity is used to add money
         * to a gift card when refunding a payment that was processed using a custom payment processing system
         * and not linked to the gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "unlinked_activity_refund_activity_details", nulls = Nulls.SKIP)
        public _FinalStage unlinkedActivityRefundActivityDetails(
                Optional<GiftCardActivityUnlinkedActivityRefund> unlinkedActivityRefundActivityDetails) {
            this.unlinkedActivityRefundActivityDetails = unlinkedActivityRefundActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>REFUND</code> activity, which is used to add money to a gift card when
         * refunding a payment.</p>
         * <p>For applications that refund payments to a gift card using the Square Refunds API, Square automatically
         * creates a <code>REFUND</code> activity that updates the gift card balance after a <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
         * request is completed. Applications that use a custom processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REFUND</code> activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refundActivityDetails(GiftCardActivityRefund refundActivityDetails) {
            this.refundActivityDetails = Optional.ofNullable(refundActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>REFUND</code> activity, which is used to add money to a gift card when
         * refunding a payment.</p>
         * <p>For applications that refund payments to a gift card using the Square Refunds API, Square automatically
         * creates a <code>REFUND</code> activity that updates the gift card balance after a <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
         * request is completed. Applications that use a custom processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REFUND</code> activity.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "refund_activity_details", nulls = Nulls.SKIP)
        public _FinalStage refundActivityDetails(Optional<GiftCardActivityRefund> refundActivityDetails) {
            this.refundActivityDetails = refundActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>ADJUST_DECREMENT</code> activity, which is used to deduct money from a gift
         * card outside of a typical <code>REDEEM</code> activity flow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage adjustDecrementActivityDetails(
                GiftCardActivityAdjustDecrement adjustDecrementActivityDetails) {
            this.adjustDecrementActivityDetails = Optional.ofNullable(adjustDecrementActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>ADJUST_DECREMENT</code> activity, which is used to deduct money from a gift
         * card outside of a typical <code>REDEEM</code> activity flow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "adjust_decrement_activity_details", nulls = Nulls.SKIP)
        public _FinalStage adjustDecrementActivityDetails(
                Optional<GiftCardActivityAdjustDecrement> adjustDecrementActivityDetails) {
            this.adjustDecrementActivityDetails = adjustDecrementActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>ADJUST_INCREMENT</code> activity, which is used to add money to a gift card
         * outside of a typical <code>ACTIVATE</code>, <code>LOAD</code>, or <code>REFUND</code> activity flow.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage adjustIncrementActivityDetails(
                GiftCardActivityAdjustIncrement adjustIncrementActivityDetails) {
            this.adjustIncrementActivityDetails = Optional.ofNullable(adjustIncrementActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>ADJUST_INCREMENT</code> activity, which is used to add money to a gift card
         * outside of a typical <code>ACTIVATE</code>, <code>LOAD</code>, or <code>REFUND</code> activity flow.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "adjust_increment_activity_details", nulls = Nulls.SKIP)
        public _FinalStage adjustIncrementActivityDetails(
                Optional<GiftCardActivityAdjustIncrement> adjustIncrementActivityDetails) {
            this.adjustIncrementActivityDetails = adjustIncrementActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>DEACTIVATE</code> activity, which is used to deactivate a gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deactivateActivityDetails(GiftCardActivityDeactivate deactivateActivityDetails) {
            this.deactivateActivityDetails = Optional.ofNullable(deactivateActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>DEACTIVATE</code> activity, which is used to deactivate a gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "deactivate_activity_details", nulls = Nulls.SKIP)
        public _FinalStage deactivateActivityDetails(Optional<GiftCardActivityDeactivate> deactivateActivityDetails) {
            this.deactivateActivityDetails = deactivateActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>CLEAR_BALANCE</code> activity, which is used to set the balance of a gift card to zero.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clearBalanceActivityDetails(GiftCardActivityClearBalance clearBalanceActivityDetails) {
            this.clearBalanceActivityDetails = Optional.ofNullable(clearBalanceActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>CLEAR_BALANCE</code> activity, which is used to set the balance of a gift card to zero.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "clear_balance_activity_details", nulls = Nulls.SKIP)
        public _FinalStage clearBalanceActivityDetails(
                Optional<GiftCardActivityClearBalance> clearBalanceActivityDetails) {
            this.clearBalanceActivityDetails = clearBalanceActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>REDEEM</code> activity, which is used to redeem a gift card for a purchase.</p>
         * <p>For applications that process payments using the Square Payments API, Square creates a <code>REDEEM</code> activity that
         * updates the gift card balance after the corresponding <a href="api-endpoint:Payments-CreatePayment">CreatePayment</a>
         * request is completed. Applications that use a custom payment processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REDEEM</code> activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage redeemActivityDetails(GiftCardActivityRedeem redeemActivityDetails) {
            this.redeemActivityDetails = Optional.ofNullable(redeemActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>REDEEM</code> activity, which is used to redeem a gift card for a purchase.</p>
         * <p>For applications that process payments using the Square Payments API, Square creates a <code>REDEEM</code> activity that
         * updates the gift card balance after the corresponding <a href="api-endpoint:Payments-CreatePayment">CreatePayment</a>
         * request is completed. Applications that use a custom payment processing system must call
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> to create the <code>REDEEM</code> activity.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "redeem_activity_details", nulls = Nulls.SKIP)
        public _FinalStage redeemActivityDetails(Optional<GiftCardActivityRedeem> redeemActivityDetails) {
            this.redeemActivityDetails = redeemActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about an <code>ACTIVATE</code> activity, which is used to activate a gift card with
         * an initial balance.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage activateActivityDetails(GiftCardActivityActivate activateActivityDetails) {
            this.activateActivityDetails = Optional.ofNullable(activateActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about an <code>ACTIVATE</code> activity, which is used to activate a gift card with
         * an initial balance.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "activate_activity_details", nulls = Nulls.SKIP)
        public _FinalStage activateActivityDetails(Optional<GiftCardActivityActivate> activateActivityDetails) {
            this.activateActivityDetails = activateActivityDetails;
            return this;
        }

        /**
         * <p>Additional details about a <code>LOAD</code> activity, which is used to reload money onto a gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage loadActivityDetails(GiftCardActivityLoad loadActivityDetails) {
            this.loadActivityDetails = Optional.ofNullable(loadActivityDetails);
            return this;
        }

        /**
         * <p>Additional details about a <code>LOAD</code> activity, which is used to reload money onto a gift card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "load_activity_details", nulls = Nulls.SKIP)
        public _FinalStage loadActivityDetails(Optional<GiftCardActivityLoad> loadActivityDetails) {
            this.loadActivityDetails = loadActivityDetails;
            return this;
        }

        /**
         * <p>The final balance on the gift card after the action is completed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage giftCardBalanceMoney(Money giftCardBalanceMoney) {
            this.giftCardBalanceMoney = Optional.ofNullable(giftCardBalanceMoney);
            return this;
        }

        /**
         * <p>The final balance on the gift card after the action is completed.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gift_card_balance_money", nulls = Nulls.SKIP)
        public _FinalStage giftCardBalanceMoney(Optional<Money> giftCardBalanceMoney) {
            this.giftCardBalanceMoney = giftCardBalanceMoney;
            return this;
        }

        /**
         * <p>The gift card account number (GAN). When creating a gift card activity, <code>gift_card_gan</code>
         * is not required if <code>gift_card_id</code> is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage giftCardGan(Nullable<String> giftCardGan) {
            if (giftCardGan.isNull()) {
                this.giftCardGan = null;
            } else if (giftCardGan.isEmpty()) {
                this.giftCardGan = Optional.empty();
            } else {
                this.giftCardGan = Optional.of(giftCardGan.get());
            }
            return this;
        }

        /**
         * <p>The gift card account number (GAN). When creating a gift card activity, <code>gift_card_gan</code>
         * is not required if <code>gift_card_id</code> is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage giftCardGan(String giftCardGan) {
            this.giftCardGan = Optional.ofNullable(giftCardGan);
            return this;
        }

        /**
         * <p>The gift card account number (GAN). When creating a gift card activity, <code>gift_card_gan</code>
         * is not required if <code>gift_card_id</code> is specified.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gift_card_gan", nulls = Nulls.SKIP)
        public _FinalStage giftCardGan(Optional<String> giftCardGan) {
            this.giftCardGan = giftCardGan;
            return this;
        }

        /**
         * <p>The gift card ID. When creating a gift card activity, <code>gift_card_id</code> is not required if
         * <code>gift_card_gan</code> is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage giftCardId(Nullable<String> giftCardId) {
            if (giftCardId.isNull()) {
                this.giftCardId = null;
            } else if (giftCardId.isEmpty()) {
                this.giftCardId = Optional.empty();
            } else {
                this.giftCardId = Optional.of(giftCardId.get());
            }
            return this;
        }

        /**
         * <p>The gift card ID. When creating a gift card activity, <code>gift_card_id</code> is not required if
         * <code>gift_card_gan</code> is specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage giftCardId(String giftCardId) {
            this.giftCardId = Optional.ofNullable(giftCardId);
            return this;
        }

        /**
         * <p>The gift card ID. When creating a gift card activity, <code>gift_card_id</code> is not required if
         * <code>gift_card_gan</code> is specified.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gift_card_id", nulls = Nulls.SKIP)
        public _FinalStage giftCardId(Optional<String> giftCardId) {
            this.giftCardId = giftCardId;
            return this;
        }

        /**
         * <p>The timestamp when the gift card activity was created, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp when the gift card activity was created, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The Square-assigned ID of the gift card activity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The Square-assigned ID of the gift card activity.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public GiftCardActivity build() {
            return new GiftCardActivity(
                    id,
                    type,
                    locationId,
                    createdAt,
                    giftCardId,
                    giftCardGan,
                    giftCardBalanceMoney,
                    loadActivityDetails,
                    activateActivityDetails,
                    redeemActivityDetails,
                    clearBalanceActivityDetails,
                    deactivateActivityDetails,
                    adjustIncrementActivityDetails,
                    adjustDecrementActivityDetails,
                    refundActivityDetails,
                    unlinkedActivityRefundActivityDetails,
                    importActivityDetails,
                    blockActivityDetails,
                    unblockActivityDetails,
                    importReversalActivityDetails,
                    transferBalanceToActivityDetails,
                    transferBalanceFromActivityDetails,
                    additionalProperties);
        }
    }
}
