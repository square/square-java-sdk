/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListDisputesRequest.Builder.class)
public final class ListDisputesRequest {
    private final Optional<String> cursor;

    private final Optional<DisputeState> states;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private ListDisputesRequest(
            Optional<String> cursor,
            Optional<DisputeState> states,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.states = states;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for the original query.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The dispute states used to filter the result. If not specified, the endpoint returns all disputes.
     */
    @JsonIgnore
    public Optional<DisputeState> getStates() {
        if (states == null) {
            return Optional.empty();
        }
        return states;
    }

    /**
     * @return The ID of the location for which to return a list of disputes.
     * If not specified, the endpoint returns disputes associated with all locations.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("states")
    private Optional<DisputeState> _getStates() {
        return states;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListDisputesRequest && equalTo((ListDisputesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListDisputesRequest other) {
        return cursor.equals(other.cursor) && states.equals(other.states) && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cursor, this.states, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<DisputeState> states = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListDisputesRequest other) {
            cursor(other.getCursor());
            states(other.getStates());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>The dispute states used to filter the result. If not specified, the endpoint returns all disputes.</p>
         */
        @JsonSetter(value = "states", nulls = Nulls.SKIP)
        public Builder states(Optional<DisputeState> states) {
            this.states = states;
            return this;
        }

        public Builder states(DisputeState states) {
            this.states = Optional.ofNullable(states);
            return this;
        }

        public Builder states(Nullable<DisputeState> states) {
            if (states.isNull()) {
                this.states = null;
            } else if (states.isEmpty()) {
                this.states = Optional.empty();
            } else {
                this.states = Optional.of(states.get());
            }
            return this;
        }

        /**
         * <p>The ID of the location for which to return a list of disputes.
         * If not specified, the endpoint returns disputes associated with all locations.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        public ListDisputesRequest build() {
            return new ListDisputesRequest(cursor, states, locationId, additionalProperties);
        }
    }
}
