/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Refund.Builder.class)
public final class Refund {
    private final String id;

    private final String locationId;

    private final Optional<String> transactionId;

    private final String tenderId;

    private final Optional<String> createdAt;

    private final String reason;

    private final Money amountMoney;

    private final RefundStatus status;

    private final Optional<Money> processingFeeMoney;

    private final Optional<List<AdditionalRecipient>> additionalRecipients;

    private final Map<String, Object> additionalProperties;

    private Refund(
            String id,
            String locationId,
            Optional<String> transactionId,
            String tenderId,
            Optional<String> createdAt,
            String reason,
            Money amountMoney,
            RefundStatus status,
            Optional<Money> processingFeeMoney,
            Optional<List<AdditionalRecipient>> additionalRecipients,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.locationId = locationId;
        this.transactionId = transactionId;
        this.tenderId = tenderId;
        this.createdAt = createdAt;
        this.reason = reason;
        this.amountMoney = amountMoney;
        this.status = status;
        this.processingFeeMoney = processingFeeMoney;
        this.additionalRecipients = additionalRecipients;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The refund's unique ID.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The ID of the refund's associated location.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The ID of the transaction that the refunded tender is part of.
     */
    @JsonIgnore
    public Optional<String> getTransactionId() {
        if (transactionId == null) {
            return Optional.empty();
        }
        return transactionId;
    }

    /**
     * @return The ID of the refunded tender.
     */
    @JsonProperty("tender_id")
    public String getTenderId() {
        return tenderId;
    }

    /**
     * @return The timestamp for when the refund was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The reason for the refund being issued.
     */
    @JsonProperty("reason")
    public String getReason() {
        return reason;
    }

    /**
     * @return The amount of money refunded to the buyer.
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The current status of the refund (<code>PENDING</code>, <code>APPROVED</code>, <code>REJECTED</code>,
     * or <code>FAILED</code>).
     * See <a href="#type-refundstatus">RefundStatus</a> for possible values
     */
    @JsonProperty("status")
    public RefundStatus getStatus() {
        return status;
    }

    /**
     * @return The amount of Square processing fee money refunded to the <em>merchant</em>.
     */
    @JsonProperty("processing_fee_money")
    public Optional<Money> getProcessingFeeMoney() {
        return processingFeeMoney;
    }

    /**
     * @return Additional recipients (other than the merchant) receiving a portion of this refund.
     * For example, fees assessed on a refund of a purchase by a third party integration.
     */
    @JsonIgnore
    public Optional<List<AdditionalRecipient>> getAdditionalRecipients() {
        if (additionalRecipients == null) {
            return Optional.empty();
        }
        return additionalRecipients;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transaction_id")
    private Optional<String> _getTransactionId() {
        return transactionId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("additional_recipients")
    private Optional<List<AdditionalRecipient>> _getAdditionalRecipients() {
        return additionalRecipients;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Refund && equalTo((Refund) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Refund other) {
        return id.equals(other.id)
                && locationId.equals(other.locationId)
                && transactionId.equals(other.transactionId)
                && tenderId.equals(other.tenderId)
                && createdAt.equals(other.createdAt)
                && reason.equals(other.reason)
                && amountMoney.equals(other.amountMoney)
                && status.equals(other.status)
                && processingFeeMoney.equals(other.processingFeeMoney)
                && additionalRecipients.equals(other.additionalRecipients);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.locationId,
                this.transactionId,
                this.tenderId,
                this.createdAt,
                this.reason,
                this.amountMoney,
                this.status,
                this.processingFeeMoney,
                this.additionalRecipients);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        LocationIdStage id(@NotNull String id);

        Builder from(Refund other);
    }

    public interface LocationIdStage {
        TenderIdStage locationId(@NotNull String locationId);
    }

    public interface TenderIdStage {
        ReasonStage tenderId(@NotNull String tenderId);
    }

    public interface ReasonStage {
        AmountMoneyStage reason(@NotNull String reason);
    }

    public interface AmountMoneyStage {
        StatusStage amountMoney(@NotNull Money amountMoney);
    }

    public interface StatusStage {
        _FinalStage status(@NotNull RefundStatus status);
    }

    public interface _FinalStage {
        Refund build();

        _FinalStage transactionId(Optional<String> transactionId);

        _FinalStage transactionId(String transactionId);

        _FinalStage transactionId(Nullable<String> transactionId);

        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        _FinalStage processingFeeMoney(Optional<Money> processingFeeMoney);

        _FinalStage processingFeeMoney(Money processingFeeMoney);

        _FinalStage additionalRecipients(Optional<List<AdditionalRecipient>> additionalRecipients);

        _FinalStage additionalRecipients(List<AdditionalRecipient> additionalRecipients);

        _FinalStage additionalRecipients(Nullable<List<AdditionalRecipient>> additionalRecipients);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    LocationIdStage,
                    TenderIdStage,
                    ReasonStage,
                    AmountMoneyStage,
                    StatusStage,
                    _FinalStage {
        private String id;

        private String locationId;

        private String tenderId;

        private String reason;

        private Money amountMoney;

        private RefundStatus status;

        private Optional<List<AdditionalRecipient>> additionalRecipients = Optional.empty();

        private Optional<Money> processingFeeMoney = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Refund other) {
            id(other.getId());
            locationId(other.getLocationId());
            transactionId(other.getTransactionId());
            tenderId(other.getTenderId());
            createdAt(other.getCreatedAt());
            reason(other.getReason());
            amountMoney(other.getAmountMoney());
            status(other.getStatus());
            processingFeeMoney(other.getProcessingFeeMoney());
            additionalRecipients(other.getAdditionalRecipients());
            return this;
        }

        /**
         * <p>The refund's unique ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public LocationIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The ID of the refund's associated location.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public TenderIdStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>The ID of the refunded tender.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("tender_id")
        public ReasonStage tenderId(@NotNull String tenderId) {
            this.tenderId = Objects.requireNonNull(tenderId, "tenderId must not be null");
            return this;
        }

        /**
         * <p>The reason for the refund being issued.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("reason")
        public AmountMoneyStage reason(@NotNull String reason) {
            this.reason = Objects.requireNonNull(reason, "reason must not be null");
            return this;
        }

        /**
         * <p>The amount of money refunded to the buyer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public StatusStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>The current status of the refund (<code>PENDING</code>, <code>APPROVED</code>, <code>REJECTED</code>,
         * or <code>FAILED</code>).
         * See <a href="#type-refundstatus">RefundStatus</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(@NotNull RefundStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this refund.
         * For example, fees assessed on a refund of a purchase by a third party integration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalRecipients(Nullable<List<AdditionalRecipient>> additionalRecipients) {
            if (additionalRecipients.isNull()) {
                this.additionalRecipients = null;
            } else if (additionalRecipients.isEmpty()) {
                this.additionalRecipients = Optional.empty();
            } else {
                this.additionalRecipients = Optional.of(additionalRecipients.get());
            }
            return this;
        }

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this refund.
         * For example, fees assessed on a refund of a purchase by a third party integration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalRecipients(List<AdditionalRecipient> additionalRecipients) {
            this.additionalRecipients = Optional.ofNullable(additionalRecipients);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additional_recipients", nulls = Nulls.SKIP)
        public _FinalStage additionalRecipients(Optional<List<AdditionalRecipient>> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }

        /**
         * <p>The amount of Square processing fee money refunded to the <em>merchant</em>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage processingFeeMoney(Money processingFeeMoney) {
            this.processingFeeMoney = Optional.ofNullable(processingFeeMoney);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "processing_fee_money", nulls = Nulls.SKIP)
        public _FinalStage processingFeeMoney(Optional<Money> processingFeeMoney) {
            this.processingFeeMoney = processingFeeMoney;
            return this;
        }

        /**
         * <p>The timestamp for when the refund was created, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The ID of the transaction that the refunded tender is part of.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionId(Nullable<String> transactionId) {
            if (transactionId.isNull()) {
                this.transactionId = null;
            } else if (transactionId.isEmpty()) {
                this.transactionId = Optional.empty();
            } else {
                this.transactionId = Optional.of(transactionId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the transaction that the refunded tender is part of.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transaction_id", nulls = Nulls.SKIP)
        public _FinalStage transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        @java.lang.Override
        public Refund build() {
            return new Refund(
                    id,
                    locationId,
                    transactionId,
                    tenderId,
                    createdAt,
                    reason,
                    amountMoney,
                    status,
                    processingFeeMoney,
                    additionalRecipients,
                    additionalProperties);
        }
    }
}
