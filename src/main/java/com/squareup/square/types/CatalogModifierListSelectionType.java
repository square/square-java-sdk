/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class CatalogModifierListSelectionType {
    public static final CatalogModifierListSelectionType MULTIPLE =
            new CatalogModifierListSelectionType(Value.MULTIPLE, "MULTIPLE");

    public static final CatalogModifierListSelectionType SINGLE =
            new CatalogModifierListSelectionType(Value.SINGLE, "SINGLE");

    private final Value value;

    private final String string;

    CatalogModifierListSelectionType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof CatalogModifierListSelectionType
                        && this.string.equals(((CatalogModifierListSelectionType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case MULTIPLE:
                return visitor.visitMultiple();
            case SINGLE:
                return visitor.visitSingle();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static CatalogModifierListSelectionType valueOf(String value) {
        switch (value) {
            case "MULTIPLE":
                return MULTIPLE;
            case "SINGLE":
                return SINGLE;
            default:
                return new CatalogModifierListSelectionType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        SINGLE,

        MULTIPLE,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitSingle();

        T visitMultiple();

        T visitUnknown(String unknownType);
    }
}
