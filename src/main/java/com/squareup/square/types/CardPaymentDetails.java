/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardPaymentDetails.Builder.class)
public final class CardPaymentDetails {
    private final Optional<String> status;

    private final Optional<Card> card;

    private final Optional<String> entryMethod;

    private final Optional<String> cvvStatus;

    private final Optional<String> avsStatus;

    private final Optional<String> authResultCode;

    private final Optional<String> applicationIdentifier;

    private final Optional<String> applicationName;

    private final Optional<String> applicationCryptogram;

    private final Optional<String> verificationMethod;

    private final Optional<String> verificationResults;

    private final Optional<String> statementDescription;

    private final Optional<DeviceDetails> deviceDetails;

    private final Optional<CardPaymentTimeline> cardPaymentTimeline;

    private final Optional<Boolean> refundRequiresCardPresence;

    private final Optional<List<Error>> errors;

    private final Map<String, Object> additionalProperties;

    private CardPaymentDetails(
            Optional<String> status,
            Optional<Card> card,
            Optional<String> entryMethod,
            Optional<String> cvvStatus,
            Optional<String> avsStatus,
            Optional<String> authResultCode,
            Optional<String> applicationIdentifier,
            Optional<String> applicationName,
            Optional<String> applicationCryptogram,
            Optional<String> verificationMethod,
            Optional<String> verificationResults,
            Optional<String> statementDescription,
            Optional<DeviceDetails> deviceDetails,
            Optional<CardPaymentTimeline> cardPaymentTimeline,
            Optional<Boolean> refundRequiresCardPresence,
            Optional<List<Error>> errors,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.card = card;
        this.entryMethod = entryMethod;
        this.cvvStatus = cvvStatus;
        this.avsStatus = avsStatus;
        this.authResultCode = authResultCode;
        this.applicationIdentifier = applicationIdentifier;
        this.applicationName = applicationName;
        this.applicationCryptogram = applicationCryptogram;
        this.verificationMethod = verificationMethod;
        this.verificationResults = verificationResults;
        this.statementDescription = statementDescription;
        this.deviceDetails = deviceDetails;
        this.cardPaymentTimeline = cardPaymentTimeline;
        this.refundRequiresCardPresence = refundRequiresCardPresence;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
     * FAILED.
     */
    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    /**
     * @return The credit card's non-confidential details.
     */
    @JsonProperty("card")
    public Optional<Card> getCard() {
        return card;
    }

    /**
     * @return The method used to enter the card's details for the payment. The method can be
     * <code>KEYED</code>, <code>SWIPED</code>, <code>EMV</code>, <code>ON_FILE</code>, or <code>CONTACTLESS</code>.
     */
    @JsonProperty("entry_method")
    public Optional<String> getEntryMethod() {
        return entryMethod;
    }

    /**
     * @return The status code returned from the Card Verification Value (CVV) check. The code can be
     * <code>CVV_ACCEPTED</code>, <code>CVV_REJECTED</code>, or <code>CVV_NOT_CHECKED</code>.
     */
    @JsonProperty("cvv_status")
    public Optional<String> getCvvStatus() {
        return cvvStatus;
    }

    /**
     * @return The status code returned from the Address Verification System (AVS) check. The code can be
     * <code>AVS_ACCEPTED</code>, <code>AVS_REJECTED</code>, or <code>AVS_NOT_CHECKED</code>.
     */
    @JsonProperty("avs_status")
    public Optional<String> getAvsStatus() {
        return avsStatus;
    }

    /**
     * @return The status code returned by the card issuer that describes the payment's
     * authorization status.
     */
    @JsonProperty("auth_result_code")
    public Optional<String> getAuthResultCode() {
        return authResultCode;
    }

    /**
     * @return For EMV payments, the application ID identifies the EMV application used for the payment.
     */
    @JsonProperty("application_identifier")
    public Optional<String> getApplicationIdentifier() {
        return applicationIdentifier;
    }

    /**
     * @return For EMV payments, the human-readable name of the EMV application used for the payment.
     */
    @JsonProperty("application_name")
    public Optional<String> getApplicationName() {
        return applicationName;
    }

    /**
     * @return For EMV payments, the cryptogram generated for the payment.
     */
    @JsonProperty("application_cryptogram")
    public Optional<String> getApplicationCryptogram() {
        return applicationCryptogram;
    }

    /**
     * @return For EMV payments, the method used to verify the cardholder's identity. The method can be
     * <code>PIN</code>, <code>SIGNATURE</code>, <code>PIN_AND_SIGNATURE</code>, <code>ON_DEVICE</code>, or <code>NONE</code>.
     */
    @JsonProperty("verification_method")
    public Optional<String> getVerificationMethod() {
        return verificationMethod;
    }

    /**
     * @return For EMV payments, the results of the cardholder verification. The result can be
     * <code>SUCCESS</code>, <code>FAILURE</code>, or <code>UNKNOWN</code>.
     */
    @JsonProperty("verification_results")
    public Optional<String> getVerificationResults() {
        return verificationResults;
    }

    /**
     * @return The statement description sent to the card networks.
     * <p>Note: The actual statement description varies and is likely to be truncated and appended with
     * additional information on a per issuer basis.</p>
     */
    @JsonProperty("statement_description")
    public Optional<String> getStatementDescription() {
        return statementDescription;
    }

    /**
     * @return <strong>Deprecated</strong>: Use <code>Payment.device_details</code> instead.
     * <p>Details about the device that took the payment.</p>
     */
    @JsonProperty("device_details")
    public Optional<DeviceDetails> getDeviceDetails() {
        return deviceDetails;
    }

    /**
     * @return The timeline for card payments.
     */
    @JsonProperty("card_payment_timeline")
    public Optional<CardPaymentTimeline> getCardPaymentTimeline() {
        return cardPaymentTimeline;
    }

    /**
     * @return Whether the card must be physically present for the payment to
     * be refunded.  If set to <code>true</code>, the card must be present.
     */
    @JsonProperty("refund_requires_card_presence")
    public Optional<Boolean> getRefundRequiresCardPresence() {
        return refundRequiresCardPresence;
    }

    /**
     * @return Information about errors encountered during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardPaymentDetails && equalTo((CardPaymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardPaymentDetails other) {
        return status.equals(other.status)
                && card.equals(other.card)
                && entryMethod.equals(other.entryMethod)
                && cvvStatus.equals(other.cvvStatus)
                && avsStatus.equals(other.avsStatus)
                && authResultCode.equals(other.authResultCode)
                && applicationIdentifier.equals(other.applicationIdentifier)
                && applicationName.equals(other.applicationName)
                && applicationCryptogram.equals(other.applicationCryptogram)
                && verificationMethod.equals(other.verificationMethod)
                && verificationResults.equals(other.verificationResults)
                && statementDescription.equals(other.statementDescription)
                && deviceDetails.equals(other.deviceDetails)
                && cardPaymentTimeline.equals(other.cardPaymentTimeline)
                && refundRequiresCardPresence.equals(other.refundRequiresCardPresence)
                && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.card,
                this.entryMethod,
                this.cvvStatus,
                this.avsStatus,
                this.authResultCode,
                this.applicationIdentifier,
                this.applicationName,
                this.applicationCryptogram,
                this.verificationMethod,
                this.verificationResults,
                this.statementDescription,
                this.deviceDetails,
                this.cardPaymentTimeline,
                this.refundRequiresCardPresence,
                this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> status = Optional.empty();

        private Optional<Card> card = Optional.empty();

        private Optional<String> entryMethod = Optional.empty();

        private Optional<String> cvvStatus = Optional.empty();

        private Optional<String> avsStatus = Optional.empty();

        private Optional<String> authResultCode = Optional.empty();

        private Optional<String> applicationIdentifier = Optional.empty();

        private Optional<String> applicationName = Optional.empty();

        private Optional<String> applicationCryptogram = Optional.empty();

        private Optional<String> verificationMethod = Optional.empty();

        private Optional<String> verificationResults = Optional.empty();

        private Optional<String> statementDescription = Optional.empty();

        private Optional<DeviceDetails> deviceDetails = Optional.empty();

        private Optional<CardPaymentTimeline> cardPaymentTimeline = Optional.empty();

        private Optional<Boolean> refundRequiresCardPresence = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardPaymentDetails other) {
            status(other.getStatus());
            card(other.getCard());
            entryMethod(other.getEntryMethod());
            cvvStatus(other.getCvvStatus());
            avsStatus(other.getAvsStatus());
            authResultCode(other.getAuthResultCode());
            applicationIdentifier(other.getApplicationIdentifier());
            applicationName(other.getApplicationName());
            applicationCryptogram(other.getApplicationCryptogram());
            verificationMethod(other.getVerificationMethod());
            verificationResults(other.getVerificationResults());
            statementDescription(other.getStatementDescription());
            deviceDetails(other.getDeviceDetails());
            cardPaymentTimeline(other.getCardPaymentTimeline());
            refundRequiresCardPresence(other.getRefundRequiresCardPresence());
            errors(other.getErrors());
            return this;
        }

        /**
         * <p>The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
         * FAILED.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The credit card's non-confidential details.</p>
         */
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Card> card) {
            this.card = card;
            return this;
        }

        public Builder card(Card card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        /**
         * <p>The method used to enter the card's details for the payment. The method can be
         * <code>KEYED</code>, <code>SWIPED</code>, <code>EMV</code>, <code>ON_FILE</code>, or <code>CONTACTLESS</code>.</p>
         */
        @JsonSetter(value = "entry_method", nulls = Nulls.SKIP)
        public Builder entryMethod(Optional<String> entryMethod) {
            this.entryMethod = entryMethod;
            return this;
        }

        public Builder entryMethod(String entryMethod) {
            this.entryMethod = Optional.ofNullable(entryMethod);
            return this;
        }

        /**
         * <p>The status code returned from the Card Verification Value (CVV) check. The code can be
         * <code>CVV_ACCEPTED</code>, <code>CVV_REJECTED</code>, or <code>CVV_NOT_CHECKED</code>.</p>
         */
        @JsonSetter(value = "cvv_status", nulls = Nulls.SKIP)
        public Builder cvvStatus(Optional<String> cvvStatus) {
            this.cvvStatus = cvvStatus;
            return this;
        }

        public Builder cvvStatus(String cvvStatus) {
            this.cvvStatus = Optional.ofNullable(cvvStatus);
            return this;
        }

        /**
         * <p>The status code returned from the Address Verification System (AVS) check. The code can be
         * <code>AVS_ACCEPTED</code>, <code>AVS_REJECTED</code>, or <code>AVS_NOT_CHECKED</code>.</p>
         */
        @JsonSetter(value = "avs_status", nulls = Nulls.SKIP)
        public Builder avsStatus(Optional<String> avsStatus) {
            this.avsStatus = avsStatus;
            return this;
        }

        public Builder avsStatus(String avsStatus) {
            this.avsStatus = Optional.ofNullable(avsStatus);
            return this;
        }

        /**
         * <p>The status code returned by the card issuer that describes the payment's
         * authorization status.</p>
         */
        @JsonSetter(value = "auth_result_code", nulls = Nulls.SKIP)
        public Builder authResultCode(Optional<String> authResultCode) {
            this.authResultCode = authResultCode;
            return this;
        }

        public Builder authResultCode(String authResultCode) {
            this.authResultCode = Optional.ofNullable(authResultCode);
            return this;
        }

        /**
         * <p>For EMV payments, the application ID identifies the EMV application used for the payment.</p>
         */
        @JsonSetter(value = "application_identifier", nulls = Nulls.SKIP)
        public Builder applicationIdentifier(Optional<String> applicationIdentifier) {
            this.applicationIdentifier = applicationIdentifier;
            return this;
        }

        public Builder applicationIdentifier(String applicationIdentifier) {
            this.applicationIdentifier = Optional.ofNullable(applicationIdentifier);
            return this;
        }

        /**
         * <p>For EMV payments, the human-readable name of the EMV application used for the payment.</p>
         */
        @JsonSetter(value = "application_name", nulls = Nulls.SKIP)
        public Builder applicationName(Optional<String> applicationName) {
            this.applicationName = applicationName;
            return this;
        }

        public Builder applicationName(String applicationName) {
            this.applicationName = Optional.ofNullable(applicationName);
            return this;
        }

        /**
         * <p>For EMV payments, the cryptogram generated for the payment.</p>
         */
        @JsonSetter(value = "application_cryptogram", nulls = Nulls.SKIP)
        public Builder applicationCryptogram(Optional<String> applicationCryptogram) {
            this.applicationCryptogram = applicationCryptogram;
            return this;
        }

        public Builder applicationCryptogram(String applicationCryptogram) {
            this.applicationCryptogram = Optional.ofNullable(applicationCryptogram);
            return this;
        }

        /**
         * <p>For EMV payments, the method used to verify the cardholder's identity. The method can be
         * <code>PIN</code>, <code>SIGNATURE</code>, <code>PIN_AND_SIGNATURE</code>, <code>ON_DEVICE</code>, or <code>NONE</code>.</p>
         */
        @JsonSetter(value = "verification_method", nulls = Nulls.SKIP)
        public Builder verificationMethod(Optional<String> verificationMethod) {
            this.verificationMethod = verificationMethod;
            return this;
        }

        public Builder verificationMethod(String verificationMethod) {
            this.verificationMethod = Optional.ofNullable(verificationMethod);
            return this;
        }

        /**
         * <p>For EMV payments, the results of the cardholder verification. The result can be
         * <code>SUCCESS</code>, <code>FAILURE</code>, or <code>UNKNOWN</code>.</p>
         */
        @JsonSetter(value = "verification_results", nulls = Nulls.SKIP)
        public Builder verificationResults(Optional<String> verificationResults) {
            this.verificationResults = verificationResults;
            return this;
        }

        public Builder verificationResults(String verificationResults) {
            this.verificationResults = Optional.ofNullable(verificationResults);
            return this;
        }

        /**
         * <p>The statement description sent to the card networks.</p>
         * <p>Note: The actual statement description varies and is likely to be truncated and appended with
         * additional information on a per issuer basis.</p>
         */
        @JsonSetter(value = "statement_description", nulls = Nulls.SKIP)
        public Builder statementDescription(Optional<String> statementDescription) {
            this.statementDescription = statementDescription;
            return this;
        }

        public Builder statementDescription(String statementDescription) {
            this.statementDescription = Optional.ofNullable(statementDescription);
            return this;
        }

        /**
         * <p><strong>Deprecated</strong>: Use <code>Payment.device_details</code> instead.</p>
         * <p>Details about the device that took the payment.</p>
         */
        @JsonSetter(value = "device_details", nulls = Nulls.SKIP)
        public Builder deviceDetails(Optional<DeviceDetails> deviceDetails) {
            this.deviceDetails = deviceDetails;
            return this;
        }

        public Builder deviceDetails(DeviceDetails deviceDetails) {
            this.deviceDetails = Optional.ofNullable(deviceDetails);
            return this;
        }

        /**
         * <p>The timeline for card payments.</p>
         */
        @JsonSetter(value = "card_payment_timeline", nulls = Nulls.SKIP)
        public Builder cardPaymentTimeline(Optional<CardPaymentTimeline> cardPaymentTimeline) {
            this.cardPaymentTimeline = cardPaymentTimeline;
            return this;
        }

        public Builder cardPaymentTimeline(CardPaymentTimeline cardPaymentTimeline) {
            this.cardPaymentTimeline = Optional.ofNullable(cardPaymentTimeline);
            return this;
        }

        /**
         * <p>Whether the card must be physically present for the payment to
         * be refunded.  If set to <code>true</code>, the card must be present.</p>
         */
        @JsonSetter(value = "refund_requires_card_presence", nulls = Nulls.SKIP)
        public Builder refundRequiresCardPresence(Optional<Boolean> refundRequiresCardPresence) {
            this.refundRequiresCardPresence = refundRequiresCardPresence;
            return this;
        }

        public Builder refundRequiresCardPresence(Boolean refundRequiresCardPresence) {
            this.refundRequiresCardPresence = Optional.ofNullable(refundRequiresCardPresence);
            return this;
        }

        /**
         * <p>Information about errors encountered during the request.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public CardPaymentDetails build() {
            return new CardPaymentDetails(
                    status,
                    card,
                    entryMethod,
                    cvvStatus,
                    avsStatus,
                    authResultCode,
                    applicationIdentifier,
                    applicationName,
                    applicationCryptogram,
                    verificationMethod,
                    verificationResults,
                    statementDescription,
                    deviceDetails,
                    cardPaymentTimeline,
                    refundRequiresCardPresence,
                    errors,
                    additionalProperties);
        }
    }
}
