/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FulfillmentShipmentDetails.Builder.class)
public final class FulfillmentShipmentDetails {
    private final Optional<FulfillmentRecipient> recipient;

    private final Optional<String> carrier;

    private final Optional<String> shippingNote;

    private final Optional<String> shippingType;

    private final Optional<String> trackingNumber;

    private final Optional<String> trackingUrl;

    private final Optional<String> placedAt;

    private final Optional<String> inProgressAt;

    private final Optional<String> packagedAt;

    private final Optional<String> expectedShippedAt;

    private final Optional<String> shippedAt;

    private final Optional<String> canceledAt;

    private final Optional<String> cancelReason;

    private final Optional<String> failedAt;

    private final Optional<String> failureReason;

    private final Map<String, Object> additionalProperties;

    private FulfillmentShipmentDetails(
            Optional<FulfillmentRecipient> recipient,
            Optional<String> carrier,
            Optional<String> shippingNote,
            Optional<String> shippingType,
            Optional<String> trackingNumber,
            Optional<String> trackingUrl,
            Optional<String> placedAt,
            Optional<String> inProgressAt,
            Optional<String> packagedAt,
            Optional<String> expectedShippedAt,
            Optional<String> shippedAt,
            Optional<String> canceledAt,
            Optional<String> cancelReason,
            Optional<String> failedAt,
            Optional<String> failureReason,
            Map<String, Object> additionalProperties) {
        this.recipient = recipient;
        this.carrier = carrier;
        this.shippingNote = shippingNote;
        this.shippingType = shippingType;
        this.trackingNumber = trackingNumber;
        this.trackingUrl = trackingUrl;
        this.placedAt = placedAt;
        this.inProgressAt = inProgressAt;
        this.packagedAt = packagedAt;
        this.expectedShippedAt = expectedShippedAt;
        this.shippedAt = shippedAt;
        this.canceledAt = canceledAt;
        this.cancelReason = cancelReason;
        this.failedAt = failedAt;
        this.failureReason = failureReason;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information about the person to receive this shipment fulfillment.
     */
    @JsonProperty("recipient")
    public Optional<FulfillmentRecipient> getRecipient() {
        return recipient;
    }

    /**
     * @return The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).
     */
    @JsonIgnore
    public Optional<String> getCarrier() {
        if (carrier == null) {
            return Optional.empty();
        }
        return carrier;
    }

    /**
     * @return A note with additional information for the shipping carrier.
     */
    @JsonIgnore
    public Optional<String> getShippingNote() {
        if (shippingNote == null) {
            return Optional.empty();
        }
        return shippingNote;
    }

    /**
     * @return A description of the type of shipping product purchased from the carrier
     * (such as First Class, Priority, or Express).
     */
    @JsonIgnore
    public Optional<String> getShippingType() {
        if (shippingType == null) {
            return Optional.empty();
        }
        return shippingType;
    }

    /**
     * @return The reference number provided by the carrier to track the shipment's progress.
     */
    @JsonIgnore
    public Optional<String> getTrackingNumber() {
        if (trackingNumber == null) {
            return Optional.empty();
        }
        return trackingNumber;
    }

    /**
     * @return A link to the tracking webpage on the carrier's website.
     */
    @JsonIgnore
    public Optional<String> getTrackingUrl() {
        if (trackingUrl == null) {
            return Optional.empty();
        }
        return trackingUrl;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the shipment was requested. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("placed_at")
    public Optional<String> getPlacedAt() {
        return placedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when this fulfillment was moved to the <code>RESERVED</code> state, which  indicates that preparation
     * of this shipment has begun. The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("in_progress_at")
    public Optional<String> getInProgressAt() {
        return inProgressAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when this fulfillment was moved to the <code>PREPARED</code> state, which indicates that the
     * fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("packaged_at")
    public Optional<String> getPackagedAt() {
        return packagedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the shipment is expected to be delivered to the shipping carrier.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonIgnore
    public Optional<String> getExpectedShippedAt() {
        if (expectedShippedAt == null) {
            return Optional.empty();
        }
        return expectedShippedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when this fulfillment was moved to the <code>COMPLETED</code> state, which indicates that
     * the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("shipped_at")
    public Optional<String> getShippedAt() {
        return shippedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating the shipment was canceled.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonIgnore
    public Optional<String> getCanceledAt() {
        if (canceledAt == null) {
            return Optional.empty();
        }
        return canceledAt;
    }

    /**
     * @return A description of why the shipment was canceled.
     */
    @JsonIgnore
    public Optional<String> getCancelReason() {
        if (cancelReason == null) {
            return Optional.empty();
        }
        return cancelReason;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("failed_at")
    public Optional<String> getFailedAt() {
        return failedAt;
    }

    /**
     * @return A description of why the shipment failed to be completed.
     */
    @JsonIgnore
    public Optional<String> getFailureReason() {
        if (failureReason == null) {
            return Optional.empty();
        }
        return failureReason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("carrier")
    private Optional<String> _getCarrier() {
        return carrier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("shipping_note")
    private Optional<String> _getShippingNote() {
        return shippingNote;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("shipping_type")
    private Optional<String> _getShippingType() {
        return shippingType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tracking_number")
    private Optional<String> _getTrackingNumber() {
        return trackingNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tracking_url")
    private Optional<String> _getTrackingUrl() {
        return trackingUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("expected_shipped_at")
    private Optional<String> _getExpectedShippedAt() {
        return expectedShippedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("canceled_at")
    private Optional<String> _getCanceledAt() {
        return canceledAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cancel_reason")
    private Optional<String> _getCancelReason() {
        return cancelReason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("failure_reason")
    private Optional<String> _getFailureReason() {
        return failureReason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FulfillmentShipmentDetails && equalTo((FulfillmentShipmentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FulfillmentShipmentDetails other) {
        return recipient.equals(other.recipient)
                && carrier.equals(other.carrier)
                && shippingNote.equals(other.shippingNote)
                && shippingType.equals(other.shippingType)
                && trackingNumber.equals(other.trackingNumber)
                && trackingUrl.equals(other.trackingUrl)
                && placedAt.equals(other.placedAt)
                && inProgressAt.equals(other.inProgressAt)
                && packagedAt.equals(other.packagedAt)
                && expectedShippedAt.equals(other.expectedShippedAt)
                && shippedAt.equals(other.shippedAt)
                && canceledAt.equals(other.canceledAt)
                && cancelReason.equals(other.cancelReason)
                && failedAt.equals(other.failedAt)
                && failureReason.equals(other.failureReason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.recipient,
                this.carrier,
                this.shippingNote,
                this.shippingType,
                this.trackingNumber,
                this.trackingUrl,
                this.placedAt,
                this.inProgressAt,
                this.packagedAt,
                this.expectedShippedAt,
                this.shippedAt,
                this.canceledAt,
                this.cancelReason,
                this.failedAt,
                this.failureReason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FulfillmentRecipient> recipient = Optional.empty();

        private Optional<String> carrier = Optional.empty();

        private Optional<String> shippingNote = Optional.empty();

        private Optional<String> shippingType = Optional.empty();

        private Optional<String> trackingNumber = Optional.empty();

        private Optional<String> trackingUrl = Optional.empty();

        private Optional<String> placedAt = Optional.empty();

        private Optional<String> inProgressAt = Optional.empty();

        private Optional<String> packagedAt = Optional.empty();

        private Optional<String> expectedShippedAt = Optional.empty();

        private Optional<String> shippedAt = Optional.empty();

        private Optional<String> canceledAt = Optional.empty();

        private Optional<String> cancelReason = Optional.empty();

        private Optional<String> failedAt = Optional.empty();

        private Optional<String> failureReason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FulfillmentShipmentDetails other) {
            recipient(other.getRecipient());
            carrier(other.getCarrier());
            shippingNote(other.getShippingNote());
            shippingType(other.getShippingType());
            trackingNumber(other.getTrackingNumber());
            trackingUrl(other.getTrackingUrl());
            placedAt(other.getPlacedAt());
            inProgressAt(other.getInProgressAt());
            packagedAt(other.getPackagedAt());
            expectedShippedAt(other.getExpectedShippedAt());
            shippedAt(other.getShippedAt());
            canceledAt(other.getCanceledAt());
            cancelReason(other.getCancelReason());
            failedAt(other.getFailedAt());
            failureReason(other.getFailureReason());
            return this;
        }

        /**
         * <p>Information about the person to receive this shipment fulfillment.</p>
         */
        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<FulfillmentRecipient> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(FulfillmentRecipient recipient) {
            this.recipient = Optional.ofNullable(recipient);
            return this;
        }

        /**
         * <p>The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).</p>
         */
        @JsonSetter(value = "carrier", nulls = Nulls.SKIP)
        public Builder carrier(Optional<String> carrier) {
            this.carrier = carrier;
            return this;
        }

        public Builder carrier(String carrier) {
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        public Builder carrier(Nullable<String> carrier) {
            if (carrier.isNull()) {
                this.carrier = null;
            } else if (carrier.isEmpty()) {
                this.carrier = Optional.empty();
            } else {
                this.carrier = Optional.of(carrier.get());
            }
            return this;
        }

        /**
         * <p>A note with additional information for the shipping carrier.</p>
         */
        @JsonSetter(value = "shipping_note", nulls = Nulls.SKIP)
        public Builder shippingNote(Optional<String> shippingNote) {
            this.shippingNote = shippingNote;
            return this;
        }

        public Builder shippingNote(String shippingNote) {
            this.shippingNote = Optional.ofNullable(shippingNote);
            return this;
        }

        public Builder shippingNote(Nullable<String> shippingNote) {
            if (shippingNote.isNull()) {
                this.shippingNote = null;
            } else if (shippingNote.isEmpty()) {
                this.shippingNote = Optional.empty();
            } else {
                this.shippingNote = Optional.of(shippingNote.get());
            }
            return this;
        }

        /**
         * <p>A description of the type of shipping product purchased from the carrier
         * (such as First Class, Priority, or Express).</p>
         */
        @JsonSetter(value = "shipping_type", nulls = Nulls.SKIP)
        public Builder shippingType(Optional<String> shippingType) {
            this.shippingType = shippingType;
            return this;
        }

        public Builder shippingType(String shippingType) {
            this.shippingType = Optional.ofNullable(shippingType);
            return this;
        }

        public Builder shippingType(Nullable<String> shippingType) {
            if (shippingType.isNull()) {
                this.shippingType = null;
            } else if (shippingType.isEmpty()) {
                this.shippingType = Optional.empty();
            } else {
                this.shippingType = Optional.of(shippingType.get());
            }
            return this;
        }

        /**
         * <p>The reference number provided by the carrier to track the shipment's progress.</p>
         */
        @JsonSetter(value = "tracking_number", nulls = Nulls.SKIP)
        public Builder trackingNumber(Optional<String> trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }

        public Builder trackingNumber(String trackingNumber) {
            this.trackingNumber = Optional.ofNullable(trackingNumber);
            return this;
        }

        public Builder trackingNumber(Nullable<String> trackingNumber) {
            if (trackingNumber.isNull()) {
                this.trackingNumber = null;
            } else if (trackingNumber.isEmpty()) {
                this.trackingNumber = Optional.empty();
            } else {
                this.trackingNumber = Optional.of(trackingNumber.get());
            }
            return this;
        }

        /**
         * <p>A link to the tracking webpage on the carrier's website.</p>
         */
        @JsonSetter(value = "tracking_url", nulls = Nulls.SKIP)
        public Builder trackingUrl(Optional<String> trackingUrl) {
            this.trackingUrl = trackingUrl;
            return this;
        }

        public Builder trackingUrl(String trackingUrl) {
            this.trackingUrl = Optional.ofNullable(trackingUrl);
            return this;
        }

        public Builder trackingUrl(Nullable<String> trackingUrl) {
            if (trackingUrl.isNull()) {
                this.trackingUrl = null;
            } else if (trackingUrl.isEmpty()) {
                this.trackingUrl = Optional.empty();
            } else {
                this.trackingUrl = Optional.of(trackingUrl.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the shipment was requested. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "placed_at", nulls = Nulls.SKIP)
        public Builder placedAt(Optional<String> placedAt) {
            this.placedAt = placedAt;
            return this;
        }

        public Builder placedAt(String placedAt) {
            this.placedAt = Optional.ofNullable(placedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when this fulfillment was moved to the <code>RESERVED</code> state, which  indicates that preparation
         * of this shipment has begun. The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "in_progress_at", nulls = Nulls.SKIP)
        public Builder inProgressAt(Optional<String> inProgressAt) {
            this.inProgressAt = inProgressAt;
            return this;
        }

        public Builder inProgressAt(String inProgressAt) {
            this.inProgressAt = Optional.ofNullable(inProgressAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when this fulfillment was moved to the <code>PREPARED</code> state, which indicates that the
         * fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "packaged_at", nulls = Nulls.SKIP)
        public Builder packagedAt(Optional<String> packagedAt) {
            this.packagedAt = packagedAt;
            return this;
        }

        public Builder packagedAt(String packagedAt) {
            this.packagedAt = Optional.ofNullable(packagedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the shipment is expected to be delivered to the shipping carrier.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "expected_shipped_at", nulls = Nulls.SKIP)
        public Builder expectedShippedAt(Optional<String> expectedShippedAt) {
            this.expectedShippedAt = expectedShippedAt;
            return this;
        }

        public Builder expectedShippedAt(String expectedShippedAt) {
            this.expectedShippedAt = Optional.ofNullable(expectedShippedAt);
            return this;
        }

        public Builder expectedShippedAt(Nullable<String> expectedShippedAt) {
            if (expectedShippedAt.isNull()) {
                this.expectedShippedAt = null;
            } else if (expectedShippedAt.isEmpty()) {
                this.expectedShippedAt = Optional.empty();
            } else {
                this.expectedShippedAt = Optional.of(expectedShippedAt.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when this fulfillment was moved to the <code>COMPLETED</code> state, which indicates that
         * the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "shipped_at", nulls = Nulls.SKIP)
        public Builder shippedAt(Optional<String> shippedAt) {
            this.shippedAt = shippedAt;
            return this;
        }

        public Builder shippedAt(String shippedAt) {
            this.shippedAt = Optional.ofNullable(shippedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating the shipment was canceled.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "canceled_at", nulls = Nulls.SKIP)
        public Builder canceledAt(Optional<String> canceledAt) {
            this.canceledAt = canceledAt;
            return this;
        }

        public Builder canceledAt(String canceledAt) {
            this.canceledAt = Optional.ofNullable(canceledAt);
            return this;
        }

        public Builder canceledAt(Nullable<String> canceledAt) {
            if (canceledAt.isNull()) {
                this.canceledAt = null;
            } else if (canceledAt.isEmpty()) {
                this.canceledAt = Optional.empty();
            } else {
                this.canceledAt = Optional.of(canceledAt.get());
            }
            return this;
        }

        /**
         * <p>A description of why the shipment was canceled.</p>
         */
        @JsonSetter(value = "cancel_reason", nulls = Nulls.SKIP)
        public Builder cancelReason(Optional<String> cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        public Builder cancelReason(String cancelReason) {
            this.cancelReason = Optional.ofNullable(cancelReason);
            return this;
        }

        public Builder cancelReason(Nullable<String> cancelReason) {
            if (cancelReason.isNull()) {
                this.cancelReason = null;
            } else if (cancelReason.isEmpty()) {
                this.cancelReason = Optional.empty();
            } else {
                this.cancelReason = Optional.of(cancelReason.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "failed_at", nulls = Nulls.SKIP)
        public Builder failedAt(Optional<String> failedAt) {
            this.failedAt = failedAt;
            return this;
        }

        public Builder failedAt(String failedAt) {
            this.failedAt = Optional.ofNullable(failedAt);
            return this;
        }

        /**
         * <p>A description of why the shipment failed to be completed.</p>
         */
        @JsonSetter(value = "failure_reason", nulls = Nulls.SKIP)
        public Builder failureReason(Optional<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }

        public Builder failureReason(String failureReason) {
            this.failureReason = Optional.ofNullable(failureReason);
            return this;
        }

        public Builder failureReason(Nullable<String> failureReason) {
            if (failureReason.isNull()) {
                this.failureReason = null;
            } else if (failureReason.isEmpty()) {
                this.failureReason = Optional.empty();
            } else {
                this.failureReason = Optional.of(failureReason.get());
            }
            return this;
        }

        public FulfillmentShipmentDetails build() {
            return new FulfillmentShipmentDetails(
                    recipient,
                    carrier,
                    shippingNote,
                    shippingType,
                    trackingNumber,
                    trackingUrl,
                    placedAt,
                    inProgressAt,
                    packagedAt,
                    expectedShippedAt,
                    shippedAt,
                    canceledAt,
                    cancelReason,
                    failedAt,
                    failureReason,
                    additionalProperties);
        }
    }
}
