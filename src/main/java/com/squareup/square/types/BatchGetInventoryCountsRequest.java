/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchGetInventoryCountsRequest.Builder.class)
public final class BatchGetInventoryCountsRequest {
    private final Optional<List<String>> catalogObjectIds;

    private final Optional<List<String>> locationIds;

    private final Optional<String> updatedAfter;

    private final Optional<String> cursor;

    private final Optional<List<InventoryState>> states;

    private final Optional<Integer> limit;

    private final Map<String, Object> additionalProperties;

    private BatchGetInventoryCountsRequest(
            Optional<List<String>> catalogObjectIds,
            Optional<List<String>> locationIds,
            Optional<String> updatedAfter,
            Optional<String> cursor,
            Optional<List<InventoryState>> states,
            Optional<Integer> limit,
            Map<String, Object> additionalProperties) {
        this.catalogObjectIds = catalogObjectIds;
        this.locationIds = locationIds;
        this.updatedAfter = updatedAfter;
        this.cursor = cursor;
        this.states = states;
        this.limit = limit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The filter to return results by <code>CatalogObject</code> ID.
     * The filter is applicable only when set.  The default is null.
     */
    @JsonIgnore
    public Optional<List<String>> getCatalogObjectIds() {
        if (catalogObjectIds == null) {
            return Optional.empty();
        }
        return catalogObjectIds;
    }

    /**
     * @return The filter to return results by <code>Location</code> ID.
     * This filter is applicable only when set. The default is null.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return The filter to return results with their <code>calculated_at</code> value
     * after the given time as specified in an RFC 3339 timestamp.
     * The default value is the UNIX epoch of (<code>1970-01-01T00:00:00Z</code>).
     */
    @JsonIgnore
    public Optional<String> getUpdatedAfter() {
        if (updatedAfter == null) {
            return Optional.empty();
        }
        return updatedAfter;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this to retrieve the next set of results for the original query.
     * <p>See the <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Pagination</a> guide for more information.</p>
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The filter to return results by <code>InventoryState</code>. The filter is only applicable when set.
     * Ignored are untracked states of <code>NONE</code>, <code>SOLD</code>, and <code>UNLINKED_RETURN</code>.
     * The default is null.
     */
    @JsonIgnore
    public Optional<List<InventoryState>> getStates() {
        if (states == null) {
            return Optional.empty();
        }
        return states;
    }

    /**
     * @return The number of <a href="entity:InventoryCount">records</a> to return.
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_ids")
    private Optional<List<String>> _getCatalogObjectIds() {
        return catalogObjectIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updated_after")
    private Optional<String> _getUpdatedAfter() {
        return updatedAfter;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("states")
    private Optional<List<InventoryState>> _getStates() {
        return states;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchGetInventoryCountsRequest && equalTo((BatchGetInventoryCountsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchGetInventoryCountsRequest other) {
        return catalogObjectIds.equals(other.catalogObjectIds)
                && locationIds.equals(other.locationIds)
                && updatedAfter.equals(other.updatedAfter)
                && cursor.equals(other.cursor)
                && states.equals(other.states)
                && limit.equals(other.limit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.catalogObjectIds, this.locationIds, this.updatedAfter, this.cursor, this.states, this.limit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> catalogObjectIds = Optional.empty();

        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<String> updatedAfter = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<List<InventoryState>> states = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchGetInventoryCountsRequest other) {
            catalogObjectIds(other.getCatalogObjectIds());
            locationIds(other.getLocationIds());
            updatedAfter(other.getUpdatedAfter());
            cursor(other.getCursor());
            states(other.getStates());
            limit(other.getLimit());
            return this;
        }

        @JsonSetter(value = "catalog_object_ids", nulls = Nulls.SKIP)
        public Builder catalogObjectIds(Optional<List<String>> catalogObjectIds) {
            this.catalogObjectIds = catalogObjectIds;
            return this;
        }

        public Builder catalogObjectIds(List<String> catalogObjectIds) {
            this.catalogObjectIds = Optional.ofNullable(catalogObjectIds);
            return this;
        }

        public Builder catalogObjectIds(Nullable<List<String>> catalogObjectIds) {
            if (catalogObjectIds.isNull()) {
                this.catalogObjectIds = null;
            } else if (catalogObjectIds.isEmpty()) {
                this.catalogObjectIds = Optional.empty();
            } else {
                this.catalogObjectIds = Optional.of(catalogObjectIds.get());
            }
            return this;
        }

        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        @JsonSetter(value = "updated_after", nulls = Nulls.SKIP)
        public Builder updatedAfter(Optional<String> updatedAfter) {
            this.updatedAfter = updatedAfter;
            return this;
        }

        public Builder updatedAfter(String updatedAfter) {
            this.updatedAfter = Optional.ofNullable(updatedAfter);
            return this;
        }

        public Builder updatedAfter(Nullable<String> updatedAfter) {
            if (updatedAfter.isNull()) {
                this.updatedAfter = null;
            } else if (updatedAfter.isEmpty()) {
                this.updatedAfter = Optional.empty();
            } else {
                this.updatedAfter = Optional.of(updatedAfter.get());
            }
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        @JsonSetter(value = "states", nulls = Nulls.SKIP)
        public Builder states(Optional<List<InventoryState>> states) {
            this.states = states;
            return this;
        }

        public Builder states(List<InventoryState> states) {
            this.states = Optional.ofNullable(states);
            return this;
        }

        public Builder states(Nullable<List<InventoryState>> states) {
            if (states.isNull()) {
                this.states = null;
            } else if (states.isEmpty()) {
                this.states = Optional.empty();
            } else {
                this.states = Optional.of(states.get());
            }
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        public BatchGetInventoryCountsRequest build() {
            return new BatchGetInventoryCountsRequest(
                    catalogObjectIds, locationIds, updatedAfter, cursor, states, limit, additionalProperties);
        }
    }
}
