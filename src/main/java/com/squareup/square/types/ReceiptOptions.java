/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReceiptOptions.Builder.class)
public final class ReceiptOptions {
    private final String paymentId;

    private final Optional<Boolean> printOnly;

    private final Optional<Boolean> isDuplicate;

    private final Map<String, Object> additionalProperties;

    private ReceiptOptions(
            String paymentId,
            Optional<Boolean> printOnly,
            Optional<Boolean> isDuplicate,
            Map<String, Object> additionalProperties) {
        this.paymentId = paymentId;
        this.printOnly = printOnly;
        this.isDuplicate = isDuplicate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The reference to the Square payment ID for the receipt.
     */
    @JsonProperty("payment_id")
    public String getPaymentId() {
        return paymentId;
    }

    /**
     * @return Instructs the device to print the receipt without displaying the receipt selection screen.
     * Requires <code>printer_enabled</code> set to true.
     * Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getPrintOnly() {
        if (printOnly == null) {
            return Optional.empty();
        }
        return printOnly;
    }

    /**
     * @return Identify the receipt as a reprint rather than an original receipt.
     * Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getIsDuplicate() {
        if (isDuplicate == null) {
            return Optional.empty();
        }
        return isDuplicate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("print_only")
    private Optional<Boolean> _getPrintOnly() {
        return printOnly;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_duplicate")
    private Optional<Boolean> _getIsDuplicate() {
        return isDuplicate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReceiptOptions && equalTo((ReceiptOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReceiptOptions other) {
        return paymentId.equals(other.paymentId)
                && printOnly.equals(other.printOnly)
                && isDuplicate.equals(other.isDuplicate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentId, this.printOnly, this.isDuplicate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaymentIdStage builder() {
        return new Builder();
    }

    public interface PaymentIdStage {
        _FinalStage paymentId(@NotNull String paymentId);

        Builder from(ReceiptOptions other);
    }

    public interface _FinalStage {
        ReceiptOptions build();

        _FinalStage printOnly(Optional<Boolean> printOnly);

        _FinalStage printOnly(Boolean printOnly);

        _FinalStage printOnly(Nullable<Boolean> printOnly);

        _FinalStage isDuplicate(Optional<Boolean> isDuplicate);

        _FinalStage isDuplicate(Boolean isDuplicate);

        _FinalStage isDuplicate(Nullable<Boolean> isDuplicate);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PaymentIdStage, _FinalStage {
        private String paymentId;

        private Optional<Boolean> isDuplicate = Optional.empty();

        private Optional<Boolean> printOnly = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ReceiptOptions other) {
            paymentId(other.getPaymentId());
            printOnly(other.getPrintOnly());
            isDuplicate(other.getIsDuplicate());
            return this;
        }

        /**
         * <p>The reference to the Square payment ID for the receipt.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payment_id")
        public _FinalStage paymentId(@NotNull String paymentId) {
            this.paymentId = Objects.requireNonNull(paymentId, "paymentId must not be null");
            return this;
        }

        /**
         * <p>Identify the receipt as a reprint rather than an original receipt.
         * Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isDuplicate(Nullable<Boolean> isDuplicate) {
            if (isDuplicate.isNull()) {
                this.isDuplicate = null;
            } else if (isDuplicate.isEmpty()) {
                this.isDuplicate = Optional.empty();
            } else {
                this.isDuplicate = Optional.of(isDuplicate.get());
            }
            return this;
        }

        /**
         * <p>Identify the receipt as a reprint rather than an original receipt.
         * Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isDuplicate(Boolean isDuplicate) {
            this.isDuplicate = Optional.ofNullable(isDuplicate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_duplicate", nulls = Nulls.SKIP)
        public _FinalStage isDuplicate(Optional<Boolean> isDuplicate) {
            this.isDuplicate = isDuplicate;
            return this;
        }

        /**
         * <p>Instructs the device to print the receipt without displaying the receipt selection screen.
         * Requires <code>printer_enabled</code> set to true.
         * Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage printOnly(Nullable<Boolean> printOnly) {
            if (printOnly.isNull()) {
                this.printOnly = null;
            } else if (printOnly.isEmpty()) {
                this.printOnly = Optional.empty();
            } else {
                this.printOnly = Optional.of(printOnly.get());
            }
            return this;
        }

        /**
         * <p>Instructs the device to print the receipt without displaying the receipt selection screen.
         * Requires <code>printer_enabled</code> set to true.
         * Defaults to false.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage printOnly(Boolean printOnly) {
            this.printOnly = Optional.ofNullable(printOnly);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "print_only", nulls = Nulls.SKIP)
        public _FinalStage printOnly(Optional<Boolean> printOnly) {
            this.printOnly = printOnly;
            return this;
        }

        @java.lang.Override
        public ReceiptOptions build() {
            return new ReceiptOptions(paymentId, printOnly, isDuplicate, additionalProperties);
        }
    }
}
