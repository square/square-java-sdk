/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogCustomAttributeDefinitionStringConfig.Builder.class)
public final class CatalogCustomAttributeDefinitionStringConfig {
    private final Optional<Boolean> enforceUniqueness;

    private final Map<String, Object> additionalProperties;

    private CatalogCustomAttributeDefinitionStringConfig(
            Optional<Boolean> enforceUniqueness, Map<String, Object> additionalProperties) {
        this.enforceUniqueness = enforceUniqueness;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If true, each Custom Attribute instance associated with this Custom Attribute
     * Definition must have a unique value within the seller's catalog. For
     * example, this may be used for a value like a SKU that should not be
     * duplicated within a seller's catalog. May not be modified after the
     * definition has been created.
     */
    @JsonIgnore
    public Optional<Boolean> getEnforceUniqueness() {
        if (enforceUniqueness == null) {
            return Optional.empty();
        }
        return enforceUniqueness;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enforce_uniqueness")
    private Optional<Boolean> _getEnforceUniqueness() {
        return enforceUniqueness;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogCustomAttributeDefinitionStringConfig
                && equalTo((CatalogCustomAttributeDefinitionStringConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogCustomAttributeDefinitionStringConfig other) {
        return enforceUniqueness.equals(other.enforceUniqueness);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enforceUniqueness);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enforceUniqueness = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogCustomAttributeDefinitionStringConfig other) {
            enforceUniqueness(other.getEnforceUniqueness());
            return this;
        }

        /**
         * <p>If true, each Custom Attribute instance associated with this Custom Attribute
         * Definition must have a unique value within the seller's catalog. For
         * example, this may be used for a value like a SKU that should not be
         * duplicated within a seller's catalog. May not be modified after the
         * definition has been created.</p>
         */
        @JsonSetter(value = "enforce_uniqueness", nulls = Nulls.SKIP)
        public Builder enforceUniqueness(Optional<Boolean> enforceUniqueness) {
            this.enforceUniqueness = enforceUniqueness;
            return this;
        }

        public Builder enforceUniqueness(Boolean enforceUniqueness) {
            this.enforceUniqueness = Optional.ofNullable(enforceUniqueness);
            return this;
        }

        public Builder enforceUniqueness(Nullable<Boolean> enforceUniqueness) {
            if (enforceUniqueness.isNull()) {
                this.enforceUniqueness = null;
            } else if (enforceUniqueness.isEmpty()) {
                this.enforceUniqueness = Optional.empty();
            } else {
                this.enforceUniqueness = Optional.of(enforceUniqueness.get());
            }
            return this;
        }

        public CatalogCustomAttributeDefinitionStringConfig build() {
            return new CatalogCustomAttributeDefinitionStringConfig(enforceUniqueness, additionalProperties);
        }
    }
}
