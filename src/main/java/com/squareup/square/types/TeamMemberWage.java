/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TeamMemberWage.Builder.class)
public final class TeamMemberWage {
    private final Optional<String> id;

    private final Optional<String> teamMemberId;

    private final Optional<String> title;

    private final Optional<Money> hourlyRate;

    private final Optional<String> jobId;

    private final Optional<Boolean> tipEligible;

    private final Map<String, Object> additionalProperties;

    private TeamMemberWage(
            Optional<String> id,
            Optional<String> teamMemberId,
            Optional<String> title,
            Optional<Money> hourlyRate,
            Optional<String> jobId,
            Optional<Boolean> tipEligible,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.teamMemberId = teamMemberId;
        this.title = title;
        this.hourlyRate = hourlyRate;
        this.jobId = jobId;
        this.tipEligible = tipEligible;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The UUID for this object.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The <code>TeamMember</code> that this wage is assigned to.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return The job title that this wage relates to.
     */
    @JsonIgnore
    public Optional<String> getTitle() {
        if (title == null) {
            return Optional.empty();
        }
        return title;
    }

    /**
     * @return Can be a custom-set hourly wage or the calculated effective hourly
     * wage based on the annual wage and hours worked per week.
     */
    @JsonProperty("hourly_rate")
    public Optional<Money> getHourlyRate() {
        return hourlyRate;
    }

    /**
     * @return An identifier for the job that this wage relates to. This cannot be
     * used to retrieve the job.
     */
    @JsonIgnore
    public Optional<String> getJobId() {
        if (jobId == null) {
            return Optional.empty();
        }
        return jobId;
    }

    /**
     * @return Whether team members are eligible for tips when working this job.
     */
    @JsonIgnore
    public Optional<Boolean> getTipEligible() {
        if (tipEligible == null) {
            return Optional.empty();
        }
        return tipEligible;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("title")
    private Optional<String> _getTitle() {
        return title;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("job_id")
    private Optional<String> _getJobId() {
        return jobId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tip_eligible")
    private Optional<Boolean> _getTipEligible() {
        return tipEligible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TeamMemberWage && equalTo((TeamMemberWage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TeamMemberWage other) {
        return id.equals(other.id)
                && teamMemberId.equals(other.teamMemberId)
                && title.equals(other.title)
                && hourlyRate.equals(other.hourlyRate)
                && jobId.equals(other.jobId)
                && tipEligible.equals(other.tipEligible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.teamMemberId, this.title, this.hourlyRate, this.jobId, this.tipEligible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Optional<Money> hourlyRate = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<Boolean> tipEligible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TeamMemberWage other) {
            id(other.getId());
            teamMemberId(other.getTeamMemberId());
            title(other.getTitle());
            hourlyRate(other.getHourlyRate());
            jobId(other.getJobId());
            tipEligible(other.getTipEligible());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Nullable<String> title) {
            if (title.isNull()) {
                this.title = null;
            } else if (title.isEmpty()) {
                this.title = Optional.empty();
            } else {
                this.title = Optional.of(title.get());
            }
            return this;
        }

        @JsonSetter(value = "hourly_rate", nulls = Nulls.SKIP)
        public Builder hourlyRate(Optional<Money> hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }

        public Builder hourlyRate(Money hourlyRate) {
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        @JsonSetter(value = "job_id", nulls = Nulls.SKIP)
        public Builder jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Nullable<String> jobId) {
            if (jobId.isNull()) {
                this.jobId = null;
            } else if (jobId.isEmpty()) {
                this.jobId = Optional.empty();
            } else {
                this.jobId = Optional.of(jobId.get());
            }
            return this;
        }

        @JsonSetter(value = "tip_eligible", nulls = Nulls.SKIP)
        public Builder tipEligible(Optional<Boolean> tipEligible) {
            this.tipEligible = tipEligible;
            return this;
        }

        public Builder tipEligible(Boolean tipEligible) {
            this.tipEligible = Optional.ofNullable(tipEligible);
            return this;
        }

        public Builder tipEligible(Nullable<Boolean> tipEligible) {
            if (tipEligible.isNull()) {
                this.tipEligible = null;
            } else if (tipEligible.isEmpty()) {
                this.tipEligible = Optional.empty();
            } else {
                this.tipEligible = Optional.of(tipEligible.get());
            }
            return this;
        }

        public TeamMemberWage build() {
            return new TeamMemberWage(id, teamMemberId, title, hourlyRate, jobId, tipEligible, additionalProperties);
        }
    }
}
