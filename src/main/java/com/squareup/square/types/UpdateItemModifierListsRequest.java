/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateItemModifierListsRequest.Builder.class)
public final class UpdateItemModifierListsRequest {
    private final List<String> itemIds;

    private final Optional<List<String>> modifierListsToEnable;

    private final Optional<List<String>> modifierListsToDisable;

    private final Map<String, Object> additionalProperties;

    private UpdateItemModifierListsRequest(
            List<String> itemIds,
            Optional<List<String>> modifierListsToEnable,
            Optional<List<String>> modifierListsToDisable,
            Map<String, Object> additionalProperties) {
        this.itemIds = itemIds;
        this.modifierListsToEnable = modifierListsToEnable;
        this.modifierListsToDisable = modifierListsToDisable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The IDs of the catalog items associated with the CatalogModifierList objects being updated.
     */
    @JsonProperty("item_ids")
    public List<String> getItemIds() {
        return itemIds;
    }

    /**
     * @return The IDs of the CatalogModifierList objects to enable for the CatalogItem.
     * At least one of <code>modifier_lists_to_enable</code> or <code>modifier_lists_to_disable</code> must be specified.
     */
    @JsonIgnore
    public Optional<List<String>> getModifierListsToEnable() {
        if (modifierListsToEnable == null) {
            return Optional.empty();
        }
        return modifierListsToEnable;
    }

    /**
     * @return The IDs of the CatalogModifierList objects to disable for the CatalogItem.
     * At least one of <code>modifier_lists_to_enable</code> or <code>modifier_lists_to_disable</code> must be specified.
     */
    @JsonIgnore
    public Optional<List<String>> getModifierListsToDisable() {
        if (modifierListsToDisable == null) {
            return Optional.empty();
        }
        return modifierListsToDisable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("modifier_lists_to_enable")
    private Optional<List<String>> _getModifierListsToEnable() {
        return modifierListsToEnable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("modifier_lists_to_disable")
    private Optional<List<String>> _getModifierListsToDisable() {
        return modifierListsToDisable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateItemModifierListsRequest && equalTo((UpdateItemModifierListsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateItemModifierListsRequest other) {
        return itemIds.equals(other.itemIds)
                && modifierListsToEnable.equals(other.modifierListsToEnable)
                && modifierListsToDisable.equals(other.modifierListsToDisable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.itemIds, this.modifierListsToEnable, this.modifierListsToDisable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> itemIds = new ArrayList<>();

        private Optional<List<String>> modifierListsToEnable = Optional.empty();

        private Optional<List<String>> modifierListsToDisable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateItemModifierListsRequest other) {
            itemIds(other.getItemIds());
            modifierListsToEnable(other.getModifierListsToEnable());
            modifierListsToDisable(other.getModifierListsToDisable());
            return this;
        }

        @JsonSetter(value = "item_ids", nulls = Nulls.SKIP)
        public Builder itemIds(List<String> itemIds) {
            this.itemIds.clear();
            this.itemIds.addAll(itemIds);
            return this;
        }

        public Builder addItemIds(String itemIds) {
            this.itemIds.add(itemIds);
            return this;
        }

        public Builder addAllItemIds(List<String> itemIds) {
            this.itemIds.addAll(itemIds);
            return this;
        }

        @JsonSetter(value = "modifier_lists_to_enable", nulls = Nulls.SKIP)
        public Builder modifierListsToEnable(Optional<List<String>> modifierListsToEnable) {
            this.modifierListsToEnable = modifierListsToEnable;
            return this;
        }

        public Builder modifierListsToEnable(List<String> modifierListsToEnable) {
            this.modifierListsToEnable = Optional.ofNullable(modifierListsToEnable);
            return this;
        }

        public Builder modifierListsToEnable(Nullable<List<String>> modifierListsToEnable) {
            if (modifierListsToEnable.isNull()) {
                this.modifierListsToEnable = null;
            } else if (modifierListsToEnable.isEmpty()) {
                this.modifierListsToEnable = Optional.empty();
            } else {
                this.modifierListsToEnable = Optional.of(modifierListsToEnable.get());
            }
            return this;
        }

        @JsonSetter(value = "modifier_lists_to_disable", nulls = Nulls.SKIP)
        public Builder modifierListsToDisable(Optional<List<String>> modifierListsToDisable) {
            this.modifierListsToDisable = modifierListsToDisable;
            return this;
        }

        public Builder modifierListsToDisable(List<String> modifierListsToDisable) {
            this.modifierListsToDisable = Optional.ofNullable(modifierListsToDisable);
            return this;
        }

        public Builder modifierListsToDisable(Nullable<List<String>> modifierListsToDisable) {
            if (modifierListsToDisable.isNull()) {
                this.modifierListsToDisable = null;
            } else if (modifierListsToDisable.isEmpty()) {
                this.modifierListsToDisable = Optional.empty();
            } else {
                this.modifierListsToDisable = Optional.of(modifierListsToDisable.get());
            }
            return this;
        }

        public UpdateItemModifierListsRequest build() {
            return new UpdateItemModifierListsRequest(
                    itemIds, modifierListsToEnable, modifierListsToDisable, additionalProperties);
        }
    }
}
