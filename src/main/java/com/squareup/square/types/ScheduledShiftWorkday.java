/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScheduledShiftWorkday.Builder.class)
public final class ScheduledShiftWorkday {
    private final Optional<DateRange> dateRange;

    private final Optional<ScheduledShiftWorkdayMatcher> matchScheduledShiftsBy;

    private final Optional<String> defaultTimezone;

    private final Map<String, Object> additionalProperties;

    private ScheduledShiftWorkday(
            Optional<DateRange> dateRange,
            Optional<ScheduledShiftWorkdayMatcher> matchScheduledShiftsBy,
            Optional<String> defaultTimezone,
            Map<String, Object> additionalProperties) {
        this.dateRange = dateRange;
        this.matchScheduledShiftsBy = matchScheduledShiftsBy;
        this.defaultTimezone = defaultTimezone;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Dates for fetching the scheduled shifts.
     */
    @JsonProperty("date_range")
    public Optional<DateRange> getDateRange() {
        return dateRange;
    }

    /**
     * @return The strategy on which the dates are applied.
     * See <a href="#type-scheduledshiftworkdaymatcher">ScheduledShiftWorkdayMatcher</a> for possible values
     */
    @JsonProperty("match_scheduled_shifts_by")
    public Optional<ScheduledShiftWorkdayMatcher> getMatchScheduledShiftsBy() {
        return matchScheduledShiftsBy;
    }

    /**
     * @return Location-specific timezones convert workdays to datetime filters.
     * Every location included in the query must have a timezone or this field
     * must be provided as a fallback. Format: the IANA timezone database
     * identifier for the relevant timezone.
     */
    @JsonIgnore
    public Optional<String> getDefaultTimezone() {
        if (defaultTimezone == null) {
            return Optional.empty();
        }
        return defaultTimezone;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("default_timezone")
    private Optional<String> _getDefaultTimezone() {
        return defaultTimezone;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScheduledShiftWorkday && equalTo((ScheduledShiftWorkday) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScheduledShiftWorkday other) {
        return dateRange.equals(other.dateRange)
                && matchScheduledShiftsBy.equals(other.matchScheduledShiftsBy)
                && defaultTimezone.equals(other.defaultTimezone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.dateRange, this.matchScheduledShiftsBy, this.defaultTimezone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<DateRange> dateRange = Optional.empty();

        private Optional<ScheduledShiftWorkdayMatcher> matchScheduledShiftsBy = Optional.empty();

        private Optional<String> defaultTimezone = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScheduledShiftWorkday other) {
            dateRange(other.getDateRange());
            matchScheduledShiftsBy(other.getMatchScheduledShiftsBy());
            defaultTimezone(other.getDefaultTimezone());
            return this;
        }

        /**
         * <p>Dates for fetching the scheduled shifts.</p>
         */
        @JsonSetter(value = "date_range", nulls = Nulls.SKIP)
        public Builder dateRange(Optional<DateRange> dateRange) {
            this.dateRange = dateRange;
            return this;
        }

        public Builder dateRange(DateRange dateRange) {
            this.dateRange = Optional.ofNullable(dateRange);
            return this;
        }

        /**
         * <p>The strategy on which the dates are applied.
         * See <a href="#type-scheduledshiftworkdaymatcher">ScheduledShiftWorkdayMatcher</a> for possible values</p>
         */
        @JsonSetter(value = "match_scheduled_shifts_by", nulls = Nulls.SKIP)
        public Builder matchScheduledShiftsBy(Optional<ScheduledShiftWorkdayMatcher> matchScheduledShiftsBy) {
            this.matchScheduledShiftsBy = matchScheduledShiftsBy;
            return this;
        }

        public Builder matchScheduledShiftsBy(ScheduledShiftWorkdayMatcher matchScheduledShiftsBy) {
            this.matchScheduledShiftsBy = Optional.ofNullable(matchScheduledShiftsBy);
            return this;
        }

        /**
         * <p>Location-specific timezones convert workdays to datetime filters.
         * Every location included in the query must have a timezone or this field
         * must be provided as a fallback. Format: the IANA timezone database
         * identifier for the relevant timezone.</p>
         */
        @JsonSetter(value = "default_timezone", nulls = Nulls.SKIP)
        public Builder defaultTimezone(Optional<String> defaultTimezone) {
            this.defaultTimezone = defaultTimezone;
            return this;
        }

        public Builder defaultTimezone(String defaultTimezone) {
            this.defaultTimezone = Optional.ofNullable(defaultTimezone);
            return this;
        }

        public Builder defaultTimezone(Nullable<String> defaultTimezone) {
            if (defaultTimezone.isNull()) {
                this.defaultTimezone = null;
            } else if (defaultTimezone.isEmpty()) {
                this.defaultTimezone = Optional.empty();
            } else {
                this.defaultTimezone = Optional.of(defaultTimezone.get());
            }
            return this;
        }

        public ScheduledShiftWorkday build() {
            return new ScheduledShiftWorkday(dateRange, matchScheduledShiftsBy, defaultTimezone, additionalProperties);
        }
    }
}
