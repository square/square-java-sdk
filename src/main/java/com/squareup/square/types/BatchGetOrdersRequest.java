/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchGetOrdersRequest.Builder.class)
public final class BatchGetOrdersRequest {
    private final Optional<String> locationId;

    private final List<String> orderIds;

    private final Map<String, Object> additionalProperties;

    private BatchGetOrdersRequest(
            Optional<String> locationId, List<String> orderIds, Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.orderIds = orderIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the location for these orders. This field is optional: omit it to retrieve
     * orders within the scope of the current authorization's merchant ID.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
     */
    @JsonProperty("order_ids")
    public List<String> getOrderIds() {
        return orderIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchGetOrdersRequest && equalTo((BatchGetOrdersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchGetOrdersRequest other) {
        return locationId.equals(other.locationId) && orderIds.equals(other.orderIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.orderIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> locationId = Optional.empty();

        private List<String> orderIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchGetOrdersRequest other) {
            locationId(other.getLocationId());
            orderIds(other.getOrderIds());
            return this;
        }

        /**
         * <p>The ID of the location for these orders. This field is optional: omit it to retrieve
         * orders within the scope of the current authorization's merchant ID.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.</p>
         */
        @JsonSetter(value = "order_ids", nulls = Nulls.SKIP)
        public Builder orderIds(List<String> orderIds) {
            this.orderIds.clear();
            this.orderIds.addAll(orderIds);
            return this;
        }

        public Builder addOrderIds(String orderIds) {
            this.orderIds.add(orderIds);
            return this;
        }

        public Builder addAllOrderIds(List<String> orderIds) {
            this.orderIds.addAll(orderIds);
            return this;
        }

        public BatchGetOrdersRequest build() {
            return new BatchGetOrdersRequest(locationId, orderIds, additionalProperties);
        }
    }
}
