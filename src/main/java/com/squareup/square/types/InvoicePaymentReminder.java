/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoicePaymentReminder.Builder.class)
public final class InvoicePaymentReminder {
    private final Optional<String> uid;

    private final Optional<Integer> relativeScheduledDays;

    private final Optional<String> message;

    private final Optional<InvoicePaymentReminderStatus> status;

    private final Optional<String> sentAt;

    private final Map<String, Object> additionalProperties;

    private InvoicePaymentReminder(
            Optional<String> uid,
            Optional<Integer> relativeScheduledDays,
            Optional<String> message,
            Optional<InvoicePaymentReminderStatus> status,
            Optional<String> sentAt,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.relativeScheduledDays = relativeScheduledDays;
        this.message = message;
        this.status = status;
        this.sentAt = sentAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A Square-assigned ID that uniquely identifies the reminder within the
     * <code>InvoicePaymentRequest</code>.
     */
    @JsonProperty("uid")
    public Optional<String> getUid() {
        return uid;
    }

    /**
     * @return The number of days before (a negative number) or after (a positive number)
     * the payment request <code>due_date</code> when the reminder is sent. For example, -3 indicates that
     * the reminder should be sent 3 days before the payment request <code>due_date</code>.
     */
    @JsonIgnore
    public Optional<Integer> getRelativeScheduledDays() {
        if (relativeScheduledDays == null) {
            return Optional.empty();
        }
        return relativeScheduledDays;
    }

    /**
     * @return The reminder message.
     */
    @JsonIgnore
    public Optional<String> getMessage() {
        if (message == null) {
            return Optional.empty();
        }
        return message;
    }

    /**
     * @return The status of the reminder.
     * See <a href="#type-invoicepaymentreminderstatus">InvoicePaymentReminderStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<InvoicePaymentReminderStatus> getStatus() {
        return status;
    }

    /**
     * @return If sent, the timestamp when the reminder was sent, in RFC 3339 format.
     */
    @JsonProperty("sent_at")
    public Optional<String> getSentAt() {
        return sentAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("relative_scheduled_days")
    private Optional<Integer> _getRelativeScheduledDays() {
        return relativeScheduledDays;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("message")
    private Optional<String> _getMessage() {
        return message;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoicePaymentReminder && equalTo((InvoicePaymentReminder) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoicePaymentReminder other) {
        return uid.equals(other.uid)
                && relativeScheduledDays.equals(other.relativeScheduledDays)
                && message.equals(other.message)
                && status.equals(other.status)
                && sentAt.equals(other.sentAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.relativeScheduledDays, this.message, this.status, this.sentAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<Integer> relativeScheduledDays = Optional.empty();

        private Optional<String> message = Optional.empty();

        private Optional<InvoicePaymentReminderStatus> status = Optional.empty();

        private Optional<String> sentAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoicePaymentReminder other) {
            uid(other.getUid());
            relativeScheduledDays(other.getRelativeScheduledDays());
            message(other.getMessage());
            status(other.getStatus());
            sentAt(other.getSentAt());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        @JsonSetter(value = "relative_scheduled_days", nulls = Nulls.SKIP)
        public Builder relativeScheduledDays(Optional<Integer> relativeScheduledDays) {
            this.relativeScheduledDays = relativeScheduledDays;
            return this;
        }

        public Builder relativeScheduledDays(Integer relativeScheduledDays) {
            this.relativeScheduledDays = Optional.ofNullable(relativeScheduledDays);
            return this;
        }

        public Builder relativeScheduledDays(Nullable<Integer> relativeScheduledDays) {
            if (relativeScheduledDays.isNull()) {
                this.relativeScheduledDays = null;
            } else if (relativeScheduledDays.isEmpty()) {
                this.relativeScheduledDays = Optional.empty();
            } else {
                this.relativeScheduledDays = Optional.of(relativeScheduledDays.get());
            }
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(String message) {
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Nullable<String> message) {
            if (message.isNull()) {
                this.message = null;
            } else if (message.isEmpty()) {
                this.message = Optional.empty();
            } else {
                this.message = Optional.of(message.get());
            }
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<InvoicePaymentReminderStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(InvoicePaymentReminderStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "sent_at", nulls = Nulls.SKIP)
        public Builder sentAt(Optional<String> sentAt) {
            this.sentAt = sentAt;
            return this;
        }

        public Builder sentAt(String sentAt) {
            this.sentAt = Optional.ofNullable(sentAt);
            return this;
        }

        public InvoicePaymentReminder build() {
            return new InvoicePaymentReminder(
                    uid, relativeScheduledDays, message, status, sentAt, additionalProperties);
        }
    }
}
