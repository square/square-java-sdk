/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class CatalogCategoryType {
    public static final CatalogCategoryType REGULAR_CATEGORY =
            new CatalogCategoryType(Value.REGULAR_CATEGORY, "REGULAR_CATEGORY");

    public static final CatalogCategoryType MENU_CATEGORY =
            new CatalogCategoryType(Value.MENU_CATEGORY, "MENU_CATEGORY");

    public static final CatalogCategoryType KITCHEN_CATEGORY =
            new CatalogCategoryType(Value.KITCHEN_CATEGORY, "KITCHEN_CATEGORY");

    private final Value value;

    private final String string;

    CatalogCategoryType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof CatalogCategoryType && this.string.equals(((CatalogCategoryType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case REGULAR_CATEGORY:
                return visitor.visitRegularCategory();
            case MENU_CATEGORY:
                return visitor.visitMenuCategory();
            case KITCHEN_CATEGORY:
                return visitor.visitKitchenCategory();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static CatalogCategoryType valueOf(String value) {
        switch (value) {
            case "REGULAR_CATEGORY":
                return REGULAR_CATEGORY;
            case "MENU_CATEGORY":
                return MENU_CATEGORY;
            case "KITCHEN_CATEGORY":
                return KITCHEN_CATEGORY;
            default:
                return new CatalogCategoryType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        REGULAR_CATEGORY,

        MENU_CATEGORY,

        KITCHEN_CATEGORY,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitRegularCategory();

        T visitMenuCategory();

        T visitKitchenCategory();

        T visitUnknown(String unknownType);
    }
}
