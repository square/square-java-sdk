/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogAvailabilityPeriod.Builder.class)
public final class CatalogAvailabilityPeriod {
    private final Optional<String> startLocalTime;

    private final Optional<String> endLocalTime;

    private final Optional<DayOfWeek> dayOfWeek;

    private final Map<String, Object> additionalProperties;

    private CatalogAvailabilityPeriod(
            Optional<String> startLocalTime,
            Optional<String> endLocalTime,
            Optional<DayOfWeek> dayOfWeek,
            Map<String, Object> additionalProperties) {
        this.startLocalTime = startLocalTime;
        this.endLocalTime = endLocalTime;
        this.dayOfWeek = dayOfWeek;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The start time of an availability period, specified in local time using partial-time
     * RFC 3339 format. For example, <code>8:30:00</code> for a period starting at 8:30 in the morning.
     * Note that the seconds value is always :00, but it is appended for conformance to the RFC.
     */
    @JsonIgnore
    public Optional<String> getStartLocalTime() {
        if (startLocalTime == null) {
            return Optional.empty();
        }
        return startLocalTime;
    }

    /**
     * @return The end time of an availability period, specified in local time using partial-time
     * RFC 3339 format. For example, <code>21:00:00</code> for a period ending at 9:00 in the evening.
     * Note that the seconds value is always :00, but it is appended for conformance to the RFC.
     */
    @JsonIgnore
    public Optional<String> getEndLocalTime() {
        if (endLocalTime == null) {
            return Optional.empty();
        }
        return endLocalTime;
    }

    /**
     * @return The day of the week for this availability period.
     * See <a href="#type-dayofweek">DayOfWeek</a> for possible values
     */
    @JsonProperty("day_of_week")
    public Optional<DayOfWeek> getDayOfWeek() {
        return dayOfWeek;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_local_time")
    private Optional<String> _getStartLocalTime() {
        return startLocalTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_local_time")
    private Optional<String> _getEndLocalTime() {
        return endLocalTime;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogAvailabilityPeriod && equalTo((CatalogAvailabilityPeriod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogAvailabilityPeriod other) {
        return startLocalTime.equals(other.startLocalTime)
                && endLocalTime.equals(other.endLocalTime)
                && dayOfWeek.equals(other.dayOfWeek);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startLocalTime, this.endLocalTime, this.dayOfWeek);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startLocalTime = Optional.empty();

        private Optional<String> endLocalTime = Optional.empty();

        private Optional<DayOfWeek> dayOfWeek = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogAvailabilityPeriod other) {
            startLocalTime(other.getStartLocalTime());
            endLocalTime(other.getEndLocalTime());
            dayOfWeek(other.getDayOfWeek());
            return this;
        }

        /**
         * <p>The start time of an availability period, specified in local time using partial-time
         * RFC 3339 format. For example, <code>8:30:00</code> for a period starting at 8:30 in the morning.
         * Note that the seconds value is always :00, but it is appended for conformance to the RFC.</p>
         */
        @JsonSetter(value = "start_local_time", nulls = Nulls.SKIP)
        public Builder startLocalTime(Optional<String> startLocalTime) {
            this.startLocalTime = startLocalTime;
            return this;
        }

        public Builder startLocalTime(String startLocalTime) {
            this.startLocalTime = Optional.ofNullable(startLocalTime);
            return this;
        }

        public Builder startLocalTime(Nullable<String> startLocalTime) {
            if (startLocalTime.isNull()) {
                this.startLocalTime = null;
            } else if (startLocalTime.isEmpty()) {
                this.startLocalTime = Optional.empty();
            } else {
                this.startLocalTime = Optional.of(startLocalTime.get());
            }
            return this;
        }

        /**
         * <p>The end time of an availability period, specified in local time using partial-time
         * RFC 3339 format. For example, <code>21:00:00</code> for a period ending at 9:00 in the evening.
         * Note that the seconds value is always :00, but it is appended for conformance to the RFC.</p>
         */
        @JsonSetter(value = "end_local_time", nulls = Nulls.SKIP)
        public Builder endLocalTime(Optional<String> endLocalTime) {
            this.endLocalTime = endLocalTime;
            return this;
        }

        public Builder endLocalTime(String endLocalTime) {
            this.endLocalTime = Optional.ofNullable(endLocalTime);
            return this;
        }

        public Builder endLocalTime(Nullable<String> endLocalTime) {
            if (endLocalTime.isNull()) {
                this.endLocalTime = null;
            } else if (endLocalTime.isEmpty()) {
                this.endLocalTime = Optional.empty();
            } else {
                this.endLocalTime = Optional.of(endLocalTime.get());
            }
            return this;
        }

        /**
         * <p>The day of the week for this availability period.
         * See <a href="#type-dayofweek">DayOfWeek</a> for possible values</p>
         */
        @JsonSetter(value = "day_of_week", nulls = Nulls.SKIP)
        public Builder dayOfWeek(Optional<DayOfWeek> dayOfWeek) {
            this.dayOfWeek = dayOfWeek;
            return this;
        }

        public Builder dayOfWeek(DayOfWeek dayOfWeek) {
            this.dayOfWeek = Optional.ofNullable(dayOfWeek);
            return this;
        }

        public CatalogAvailabilityPeriod build() {
            return new CatalogAvailabilityPeriod(startLocalTime, endLocalTime, dayOfWeek, additionalProperties);
        }
    }
}
