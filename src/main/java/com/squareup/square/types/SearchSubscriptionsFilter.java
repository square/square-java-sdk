/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchSubscriptionsFilter.Builder.class)
public final class SearchSubscriptionsFilter {
    private final Optional<List<String>> customerIds;

    private final Optional<List<String>> locationIds;

    private final Optional<List<String>> sourceNames;

    private final Map<String, Object> additionalProperties;

    private SearchSubscriptionsFilter(
            Optional<List<String>> customerIds,
            Optional<List<String>> locationIds,
            Optional<List<String>> sourceNames,
            Map<String, Object> additionalProperties) {
        this.customerIds = customerIds;
        this.locationIds = locationIds;
        this.sourceNames = sourceNames;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A filter to select subscriptions based on the subscribing customer IDs.
     */
    @JsonIgnore
    public Optional<List<String>> getCustomerIds() {
        if (customerIds == null) {
            return Optional.empty();
        }
        return customerIds;
    }

    /**
     * @return A filter to select subscriptions based on the location.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return A filter to select subscriptions based on the source application.
     */
    @JsonIgnore
    public Optional<List<String>> getSourceNames() {
        if (sourceNames == null) {
            return Optional.empty();
        }
        return sourceNames;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_ids")
    private Optional<List<String>> _getCustomerIds() {
        return customerIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_names")
    private Optional<List<String>> _getSourceNames() {
        return sourceNames;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchSubscriptionsFilter && equalTo((SearchSubscriptionsFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchSubscriptionsFilter other) {
        return customerIds.equals(other.customerIds)
                && locationIds.equals(other.locationIds)
                && sourceNames.equals(other.sourceNames);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customerIds, this.locationIds, this.sourceNames);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> customerIds = Optional.empty();

        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<List<String>> sourceNames = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchSubscriptionsFilter other) {
            customerIds(other.getCustomerIds());
            locationIds(other.getLocationIds());
            sourceNames(other.getSourceNames());
            return this;
        }

        @JsonSetter(value = "customer_ids", nulls = Nulls.SKIP)
        public Builder customerIds(Optional<List<String>> customerIds) {
            this.customerIds = customerIds;
            return this;
        }

        public Builder customerIds(List<String> customerIds) {
            this.customerIds = Optional.ofNullable(customerIds);
            return this;
        }

        public Builder customerIds(Nullable<List<String>> customerIds) {
            if (customerIds.isNull()) {
                this.customerIds = null;
            } else if (customerIds.isEmpty()) {
                this.customerIds = Optional.empty();
            } else {
                this.customerIds = Optional.of(customerIds.get());
            }
            return this;
        }

        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        @JsonSetter(value = "source_names", nulls = Nulls.SKIP)
        public Builder sourceNames(Optional<List<String>> sourceNames) {
            this.sourceNames = sourceNames;
            return this;
        }

        public Builder sourceNames(List<String> sourceNames) {
            this.sourceNames = Optional.ofNullable(sourceNames);
            return this;
        }

        public Builder sourceNames(Nullable<List<String>> sourceNames) {
            if (sourceNames.isNull()) {
                this.sourceNames = null;
            } else if (sourceNames.isEmpty()) {
                this.sourceNames = Optional.empty();
            } else {
                this.sourceNames = Optional.of(sourceNames.get());
            }
            return this;
        }

        public SearchSubscriptionsFilter build() {
            return new SearchSubscriptionsFilter(customerIds, locationIds, sourceNames, additionalProperties);
        }
    }
}
