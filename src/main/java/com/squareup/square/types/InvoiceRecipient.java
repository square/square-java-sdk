/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceRecipient.Builder.class)
public final class InvoiceRecipient {
    private final Optional<String> customerId;

    private final Optional<String> givenName;

    private final Optional<String> familyName;

    private final Optional<String> emailAddress;

    private final Optional<Address> address;

    private final Optional<String> phoneNumber;

    private final Optional<String> companyName;

    private final Optional<InvoiceRecipientTaxIds> taxIds;

    private final Map<String, Object> additionalProperties;

    private InvoiceRecipient(
            Optional<String> customerId,
            Optional<String> givenName,
            Optional<String> familyName,
            Optional<String> emailAddress,
            Optional<Address> address,
            Optional<String> phoneNumber,
            Optional<String> companyName,
            Optional<InvoiceRecipientTaxIds> taxIds,
            Map<String, Object> additionalProperties) {
        this.customerId = customerId;
        this.givenName = givenName;
        this.familyName = familyName;
        this.emailAddress = emailAddress;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.companyName = companyName;
        this.taxIds = taxIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the customer. This is the customer profile ID that
     * you provide when creating a draft invoice.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The recipient's given (that is, first) name.
     */
    @JsonProperty("given_name")
    public Optional<String> getGivenName() {
        return givenName;
    }

    /**
     * @return The recipient's family (that is, last) name.
     */
    @JsonProperty("family_name")
    public Optional<String> getFamilyName() {
        return familyName;
    }

    /**
     * @return The recipient's email address.
     */
    @JsonProperty("email_address")
    public Optional<String> getEmailAddress() {
        return emailAddress;
    }

    /**
     * @return The recipient's physical address.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return The recipient's phone number.
     */
    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return The name of the recipient's company.
     */
    @JsonProperty("company_name")
    public Optional<String> getCompanyName() {
        return companyName;
    }

    /**
     * @return The recipient's tax IDs. The country of the seller account determines whether this field
     * is available for the customer. For more information, see <a href="https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids">Invoice recipient tax IDs</a>.
     */
    @JsonProperty("tax_ids")
    public Optional<InvoiceRecipientTaxIds> getTaxIds() {
        return taxIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceRecipient && equalTo((InvoiceRecipient) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceRecipient other) {
        return customerId.equals(other.customerId)
                && givenName.equals(other.givenName)
                && familyName.equals(other.familyName)
                && emailAddress.equals(other.emailAddress)
                && address.equals(other.address)
                && phoneNumber.equals(other.phoneNumber)
                && companyName.equals(other.companyName)
                && taxIds.equals(other.taxIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerId,
                this.givenName,
                this.familyName,
                this.emailAddress,
                this.address,
                this.phoneNumber,
                this.companyName,
                this.taxIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> customerId = Optional.empty();

        private Optional<String> givenName = Optional.empty();

        private Optional<String> familyName = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> companyName = Optional.empty();

        private Optional<InvoiceRecipientTaxIds> taxIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceRecipient other) {
            customerId(other.getCustomerId());
            givenName(other.getGivenName());
            familyName(other.getFamilyName());
            emailAddress(other.getEmailAddress());
            address(other.getAddress());
            phoneNumber(other.getPhoneNumber());
            companyName(other.getCompanyName());
            taxIds(other.getTaxIds());
            return this;
        }

        /**
         * <p>The ID of the customer. This is the customer profile ID that
         * you provide when creating a draft invoice.</p>
         */
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>The recipient's given (that is, first) name.</p>
         */
        @JsonSetter(value = "given_name", nulls = Nulls.SKIP)
        public Builder givenName(Optional<String> givenName) {
            this.givenName = givenName;
            return this;
        }

        public Builder givenName(String givenName) {
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        /**
         * <p>The recipient's family (that is, last) name.</p>
         */
        @JsonSetter(value = "family_name", nulls = Nulls.SKIP)
        public Builder familyName(Optional<String> familyName) {
            this.familyName = familyName;
            return this;
        }

        public Builder familyName(String familyName) {
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        /**
         * <p>The recipient's email address.</p>
         */
        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * <p>The recipient's physical address.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>The recipient's phone number.</p>
         */
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * <p>The name of the recipient's company.</p>
         */
        @JsonSetter(value = "company_name", nulls = Nulls.SKIP)
        public Builder companyName(Optional<String> companyName) {
            this.companyName = companyName;
            return this;
        }

        public Builder companyName(String companyName) {
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * <p>The recipient's tax IDs. The country of the seller account determines whether this field
         * is available for the customer. For more information, see <a href="https://developer.squareup.com/docs/invoices-api/overview#recipient-tax-ids">Invoice recipient tax IDs</a>.</p>
         */
        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(Optional<InvoiceRecipientTaxIds> taxIds) {
            this.taxIds = taxIds;
            return this;
        }

        public Builder taxIds(InvoiceRecipientTaxIds taxIds) {
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        public InvoiceRecipient build() {
            return new InvoiceRecipient(
                    customerId,
                    givenName,
                    familyName,
                    emailAddress,
                    address,
                    phoneNumber,
                    companyName,
                    taxIds,
                    additionalProperties);
        }
    }
}
