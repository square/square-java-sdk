/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class MeasurementUnitWeight {
    public static final MeasurementUnitWeight IMPERIAL_WEIGHT_OUNCE =
            new MeasurementUnitWeight(Value.IMPERIAL_WEIGHT_OUNCE, "IMPERIAL_WEIGHT_OUNCE");

    public static final MeasurementUnitWeight METRIC_KILOGRAM =
            new MeasurementUnitWeight(Value.METRIC_KILOGRAM, "METRIC_KILOGRAM");

    public static final MeasurementUnitWeight IMPERIAL_STONE =
            new MeasurementUnitWeight(Value.IMPERIAL_STONE, "IMPERIAL_STONE");

    public static final MeasurementUnitWeight METRIC_MILLIGRAM =
            new MeasurementUnitWeight(Value.METRIC_MILLIGRAM, "METRIC_MILLIGRAM");

    public static final MeasurementUnitWeight IMPERIAL_POUND =
            new MeasurementUnitWeight(Value.IMPERIAL_POUND, "IMPERIAL_POUND");

    public static final MeasurementUnitWeight METRIC_GRAM = new MeasurementUnitWeight(Value.METRIC_GRAM, "METRIC_GRAM");

    private final Value value;

    private final String string;

    MeasurementUnitWeight(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof MeasurementUnitWeight
                        && this.string.equals(((MeasurementUnitWeight) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case IMPERIAL_WEIGHT_OUNCE:
                return visitor.visitImperialWeightOunce();
            case METRIC_KILOGRAM:
                return visitor.visitMetricKilogram();
            case IMPERIAL_STONE:
                return visitor.visitImperialStone();
            case METRIC_MILLIGRAM:
                return visitor.visitMetricMilligram();
            case IMPERIAL_POUND:
                return visitor.visitImperialPound();
            case METRIC_GRAM:
                return visitor.visitMetricGram();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static MeasurementUnitWeight valueOf(String value) {
        switch (value) {
            case "IMPERIAL_WEIGHT_OUNCE":
                return IMPERIAL_WEIGHT_OUNCE;
            case "METRIC_KILOGRAM":
                return METRIC_KILOGRAM;
            case "IMPERIAL_STONE":
                return IMPERIAL_STONE;
            case "METRIC_MILLIGRAM":
                return METRIC_MILLIGRAM;
            case "IMPERIAL_POUND":
                return IMPERIAL_POUND;
            case "METRIC_GRAM":
                return METRIC_GRAM;
            default:
                return new MeasurementUnitWeight(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        IMPERIAL_WEIGHT_OUNCE,

        IMPERIAL_POUND,

        IMPERIAL_STONE,

        METRIC_MILLIGRAM,

        METRIC_GRAM,

        METRIC_KILOGRAM,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitImperialWeightOunce();

        T visitImperialPound();

        T visitImperialStone();

        T visitMetricMilligram();

        T visitMetricGram();

        T visitMetricKilogram();

        T visitUnknown(String unknownType);
    }
}
