/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class MeasurementUnitVolume {
    public static final MeasurementUnitVolume GENERIC_SHOT =
            new MeasurementUnitVolume(Value.GENERIC_SHOT, "GENERIC_SHOT");

    public static final MeasurementUnitVolume METRIC_LITER =
            new MeasurementUnitVolume(Value.METRIC_LITER, "METRIC_LITER");

    public static final MeasurementUnitVolume GENERIC_QUART =
            new MeasurementUnitVolume(Value.GENERIC_QUART, "GENERIC_QUART");

    public static final MeasurementUnitVolume IMPERIAL_CUBIC_INCH =
            new MeasurementUnitVolume(Value.IMPERIAL_CUBIC_INCH, "IMPERIAL_CUBIC_INCH");

    public static final MeasurementUnitVolume GENERIC_FLUID_OUNCE =
            new MeasurementUnitVolume(Value.GENERIC_FLUID_OUNCE, "GENERIC_FLUID_OUNCE");

    public static final MeasurementUnitVolume GENERIC_GALLON =
            new MeasurementUnitVolume(Value.GENERIC_GALLON, "GENERIC_GALLON");

    public static final MeasurementUnitVolume METRIC_MILLILITER =
            new MeasurementUnitVolume(Value.METRIC_MILLILITER, "METRIC_MILLILITER");

    public static final MeasurementUnitVolume IMPERIAL_CUBIC_FOOT =
            new MeasurementUnitVolume(Value.IMPERIAL_CUBIC_FOOT, "IMPERIAL_CUBIC_FOOT");

    public static final MeasurementUnitVolume GENERIC_CUP = new MeasurementUnitVolume(Value.GENERIC_CUP, "GENERIC_CUP");

    public static final MeasurementUnitVolume GENERIC_PINT =
            new MeasurementUnitVolume(Value.GENERIC_PINT, "GENERIC_PINT");

    public static final MeasurementUnitVolume IMPERIAL_CUBIC_YARD =
            new MeasurementUnitVolume(Value.IMPERIAL_CUBIC_YARD, "IMPERIAL_CUBIC_YARD");

    private final Value value;

    private final String string;

    MeasurementUnitVolume(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof MeasurementUnitVolume
                        && this.string.equals(((MeasurementUnitVolume) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case GENERIC_SHOT:
                return visitor.visitGenericShot();
            case METRIC_LITER:
                return visitor.visitMetricLiter();
            case GENERIC_QUART:
                return visitor.visitGenericQuart();
            case IMPERIAL_CUBIC_INCH:
                return visitor.visitImperialCubicInch();
            case GENERIC_FLUID_OUNCE:
                return visitor.visitGenericFluidOunce();
            case GENERIC_GALLON:
                return visitor.visitGenericGallon();
            case METRIC_MILLILITER:
                return visitor.visitMetricMilliliter();
            case IMPERIAL_CUBIC_FOOT:
                return visitor.visitImperialCubicFoot();
            case GENERIC_CUP:
                return visitor.visitGenericCup();
            case GENERIC_PINT:
                return visitor.visitGenericPint();
            case IMPERIAL_CUBIC_YARD:
                return visitor.visitImperialCubicYard();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static MeasurementUnitVolume valueOf(String value) {
        switch (value) {
            case "GENERIC_SHOT":
                return GENERIC_SHOT;
            case "METRIC_LITER":
                return METRIC_LITER;
            case "GENERIC_QUART":
                return GENERIC_QUART;
            case "IMPERIAL_CUBIC_INCH":
                return IMPERIAL_CUBIC_INCH;
            case "GENERIC_FLUID_OUNCE":
                return GENERIC_FLUID_OUNCE;
            case "GENERIC_GALLON":
                return GENERIC_GALLON;
            case "METRIC_MILLILITER":
                return METRIC_MILLILITER;
            case "IMPERIAL_CUBIC_FOOT":
                return IMPERIAL_CUBIC_FOOT;
            case "GENERIC_CUP":
                return GENERIC_CUP;
            case "GENERIC_PINT":
                return GENERIC_PINT;
            case "IMPERIAL_CUBIC_YARD":
                return IMPERIAL_CUBIC_YARD;
            default:
                return new MeasurementUnitVolume(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        GENERIC_FLUID_OUNCE,

        GENERIC_SHOT,

        GENERIC_CUP,

        GENERIC_PINT,

        GENERIC_QUART,

        GENERIC_GALLON,

        IMPERIAL_CUBIC_INCH,

        IMPERIAL_CUBIC_FOOT,

        IMPERIAL_CUBIC_YARD,

        METRIC_MILLILITER,

        METRIC_LITER,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitGenericFluidOunce();

        T visitGenericShot();

        T visitGenericCup();

        T visitGenericPint();

        T visitGenericQuart();

        T visitGenericGallon();

        T visitImperialCubicInch();

        T visitImperialCubicFoot();

        T visitImperialCubicYard();

        T visitMetricMilliliter();

        T visitMetricLiter();

        T visitUnknown(String unknownType);
    }
}
