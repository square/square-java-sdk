/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DestinationDetailsExternalRefundDetails.Builder.class)
public final class DestinationDetailsExternalRefundDetails {
    private final String type;

    private final String source;

    private final Optional<String> sourceId;

    private final Map<String, Object> additionalProperties;

    private DestinationDetailsExternalRefundDetails(
            String type, String source, Optional<String> sourceId, Map<String, Object> additionalProperties) {
        this.type = type;
        this.source = source;
        this.sourceId = sourceId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of external refund the seller paid to the buyer. It can be one of the
     * following:
     * <ul>
     * <li>CHECK - Refunded using a physical check.</li>
     * <li>BANK_TRANSFER - Refunded using external bank transfer.</li>
     * <li>OTHER_GIFT_CARD - Refunded using a non-Square gift card.</li>
     * <li>CRYPTO - Refunded using a crypto currency.</li>
     * <li>SQUARE_CASH - Refunded using Square Cash App.</li>
     * <li>SOCIAL - Refunded using peer-to-peer payment applications.</li>
     * <li>EXTERNAL - A third-party application gathered this refund outside of Square.</li>
     * <li>EMONEY - Refunded using an E-money provider.</li>
     * <li>CARD - A credit or debit card that Square does not support.</li>
     * <li>STORED_BALANCE - Use for house accounts, store credit, and so forth.</li>
     * <li>FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals</li>
     * <li>OTHER - A type not listed here.</li>
     * </ul>
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return A description of the external refund source. For example,
     * &quot;Food Delivery Service&quot;.
     */
    @JsonProperty("source")
    public String getSource() {
        return source;
    }

    /**
     * @return An ID to associate the refund to its originating source.
     */
    @JsonIgnore
    public Optional<String> getSourceId() {
        if (sourceId == null) {
            return Optional.empty();
        }
        return sourceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_id")
    private Optional<String> _getSourceId() {
        return sourceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DestinationDetailsExternalRefundDetails
                && equalTo((DestinationDetailsExternalRefundDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DestinationDetailsExternalRefundDetails other) {
        return type.equals(other.type) && source.equals(other.source) && sourceId.equals(other.sourceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.source, this.sourceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        SourceStage type(@NotNull String type);

        Builder from(DestinationDetailsExternalRefundDetails other);
    }

    public interface SourceStage {
        _FinalStage source(@NotNull String source);
    }

    public interface _FinalStage {
        DestinationDetailsExternalRefundDetails build();

        _FinalStage sourceId(Optional<String> sourceId);

        _FinalStage sourceId(String sourceId);

        _FinalStage sourceId(Nullable<String> sourceId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, SourceStage, _FinalStage {
        private String type;

        private String source;

        private Optional<String> sourceId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DestinationDetailsExternalRefundDetails other) {
            type(other.getType());
            source(other.getSource());
            sourceId(other.getSourceId());
            return this;
        }

        /**
         * <p>The type of external refund the seller paid to the buyer. It can be one of the
         * following:</p>
         * <ul>
         * <li>CHECK - Refunded using a physical check.</li>
         * <li>BANK_TRANSFER - Refunded using external bank transfer.</li>
         * <li>OTHER_GIFT_CARD - Refunded using a non-Square gift card.</li>
         * <li>CRYPTO - Refunded using a crypto currency.</li>
         * <li>SQUARE_CASH - Refunded using Square Cash App.</li>
         * <li>SOCIAL - Refunded using peer-to-peer payment applications.</li>
         * <li>EXTERNAL - A third-party application gathered this refund outside of Square.</li>
         * <li>EMONEY - Refunded using an E-money provider.</li>
         * <li>CARD - A credit or debit card that Square does not support.</li>
         * <li>STORED_BALANCE - Use for house accounts, store credit, and so forth.</li>
         * <li>FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals</li>
         * <li>OTHER - A type not listed here.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public SourceStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>A description of the external refund source. For example,
         * &quot;Food Delivery Service&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(@NotNull String source) {
            this.source = Objects.requireNonNull(source, "source must not be null");
            return this;
        }

        /**
         * <p>An ID to associate the refund to its originating source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceId(Nullable<String> sourceId) {
            if (sourceId.isNull()) {
                this.sourceId = null;
            } else if (sourceId.isEmpty()) {
                this.sourceId = Optional.empty();
            } else {
                this.sourceId = Optional.of(sourceId.get());
            }
            return this;
        }

        /**
         * <p>An ID to associate the refund to its originating source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceId(String sourceId) {
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_id", nulls = Nulls.SKIP)
        public _FinalStage sourceId(Optional<String> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        @java.lang.Override
        public DestinationDetailsExternalRefundDetails build() {
            return new DestinationDetailsExternalRefundDetails(type, source, sourceId, additionalProperties);
        }
    }
}
