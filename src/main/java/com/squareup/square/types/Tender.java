/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Tender.Builder.class)
public final class Tender {
    private final Optional<String> id;

    private final Optional<String> locationId;

    private final Optional<String> transactionId;

    private final Optional<String> createdAt;

    private final Optional<String> note;

    private final Optional<Money> amountMoney;

    private final Optional<Money> tipMoney;

    private final Optional<Money> processingFeeMoney;

    private final Optional<String> customerId;

    private final TenderType type;

    private final Optional<TenderCardDetails> cardDetails;

    private final Optional<TenderCashDetails> cashDetails;

    private final Optional<TenderBankAccountDetails> bankAccountDetails;

    private final Optional<TenderBuyNowPayLaterDetails> buyNowPayLaterDetails;

    private final Optional<TenderSquareAccountDetails> squareAccountDetails;

    private final Optional<List<AdditionalRecipient>> additionalRecipients;

    private final Optional<String> paymentId;

    private final Map<String, Object> additionalProperties;

    private Tender(
            Optional<String> id,
            Optional<String> locationId,
            Optional<String> transactionId,
            Optional<String> createdAt,
            Optional<String> note,
            Optional<Money> amountMoney,
            Optional<Money> tipMoney,
            Optional<Money> processingFeeMoney,
            Optional<String> customerId,
            TenderType type,
            Optional<TenderCardDetails> cardDetails,
            Optional<TenderCashDetails> cashDetails,
            Optional<TenderBankAccountDetails> bankAccountDetails,
            Optional<TenderBuyNowPayLaterDetails> buyNowPayLaterDetails,
            Optional<TenderSquareAccountDetails> squareAccountDetails,
            Optional<List<AdditionalRecipient>> additionalRecipients,
            Optional<String> paymentId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.locationId = locationId;
        this.transactionId = transactionId;
        this.createdAt = createdAt;
        this.note = note;
        this.amountMoney = amountMoney;
        this.tipMoney = tipMoney;
        this.processingFeeMoney = processingFeeMoney;
        this.customerId = customerId;
        this.type = type;
        this.cardDetails = cardDetails;
        this.cashDetails = cashDetails;
        this.bankAccountDetails = bankAccountDetails;
        this.buyNowPayLaterDetails = buyNowPayLaterDetails;
        this.squareAccountDetails = squareAccountDetails;
        this.additionalRecipients = additionalRecipients;
        this.paymentId = paymentId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The tender's unique ID. It is the associated payment ID.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of the transaction's associated location.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The ID of the tender's associated transaction.
     */
    @JsonIgnore
    public Optional<String> getTransactionId() {
        if (transactionId == null) {
            return Optional.empty();
        }
        return transactionId;
    }

    /**
     * @return The timestamp for when the tender was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return An optional note associated with the tender at the time of payment.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The total amount of the tender, including <code>tip_money</code>. If the tender has a <code>payment_id</code>,
     * the <code>total_money</code> of the corresponding <a href="entity:Payment">Payment</a> will be equal to the
     * <code>amount_money</code> of the tender.
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The tip's amount of the tender.
     */
    @JsonProperty("tip_money")
    public Optional<Money> getTipMoney() {
        return tipMoney;
    }

    /**
     * @return The amount of any Square processing fees applied to the tender.
     * <p>This field is not immediately populated when a new transaction is created.
     * It is usually available after about ten seconds.</p>
     */
    @JsonProperty("processing_fee_money")
    public Optional<Money> getProcessingFeeMoney() {
        return processingFeeMoney;
    }

    /**
     * @return If the tender is associated with a customer or represents a customer's card on file,
     * this is the ID of the associated customer.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The type of tender, such as <code>CARD</code> or <code>CASH</code>.
     * See <a href="#type-tendertype">TenderType</a> for possible values
     */
    @JsonProperty("type")
    public TenderType getType() {
        return type;
    }

    /**
     * @return The details of the card tender.
     * <p>This value is present only if the value of <code>type</code> is <code>CARD</code>.</p>
     */
    @JsonProperty("card_details")
    public Optional<TenderCardDetails> getCardDetails() {
        return cardDetails;
    }

    /**
     * @return The details of the cash tender.
     * <p>This value is present only if the value of <code>type</code> is <code>CASH</code>.</p>
     */
    @JsonProperty("cash_details")
    public Optional<TenderCashDetails> getCashDetails() {
        return cashDetails;
    }

    /**
     * @return The details of the bank account tender.
     * <p>This value is present only if the value of <code>type</code> is <code>BANK_ACCOUNT</code>.</p>
     */
    @JsonProperty("bank_account_details")
    public Optional<TenderBankAccountDetails> getBankAccountDetails() {
        return bankAccountDetails;
    }

    /**
     * @return The details of a Buy Now Pay Later tender.
     * <p>This value is present only if the value of <code>type</code> is <code>BUY_NOW_PAY_LATER</code>.</p>
     */
    @JsonProperty("buy_now_pay_later_details")
    public Optional<TenderBuyNowPayLaterDetails> getBuyNowPayLaterDetails() {
        return buyNowPayLaterDetails;
    }

    /**
     * @return The details of a Square Account tender.
     * <p>This value is present only if the value of <code>type</code> is <code>SQUARE_ACCOUNT</code>.</p>
     */
    @JsonProperty("square_account_details")
    public Optional<TenderSquareAccountDetails> getSquareAccountDetails() {
        return squareAccountDetails;
    }

    /**
     * @return Additional recipients (other than the merchant) receiving a portion of this tender.
     * For example, fees assessed on the purchase by a third party integration.
     */
    @JsonIgnore
    public Optional<List<AdditionalRecipient>> getAdditionalRecipients() {
        if (additionalRecipients == null) {
            return Optional.empty();
        }
        return additionalRecipients;
    }

    /**
     * @return The ID of the <a href="entity:Payment">Payment</a> that corresponds to this tender.
     * This value is only present for payments created with the v2 Payments API.
     */
    @JsonIgnore
    public Optional<String> getPaymentId() {
        if (paymentId == null) {
            return Optional.empty();
        }
        return paymentId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transaction_id")
    private Optional<String> _getTransactionId() {
        return transactionId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("additional_recipients")
    private Optional<List<AdditionalRecipient>> _getAdditionalRecipients() {
        return additionalRecipients;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_id")
    private Optional<String> _getPaymentId() {
        return paymentId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Tender && equalTo((Tender) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Tender other) {
        return id.equals(other.id)
                && locationId.equals(other.locationId)
                && transactionId.equals(other.transactionId)
                && createdAt.equals(other.createdAt)
                && note.equals(other.note)
                && amountMoney.equals(other.amountMoney)
                && tipMoney.equals(other.tipMoney)
                && processingFeeMoney.equals(other.processingFeeMoney)
                && customerId.equals(other.customerId)
                && type.equals(other.type)
                && cardDetails.equals(other.cardDetails)
                && cashDetails.equals(other.cashDetails)
                && bankAccountDetails.equals(other.bankAccountDetails)
                && buyNowPayLaterDetails.equals(other.buyNowPayLaterDetails)
                && squareAccountDetails.equals(other.squareAccountDetails)
                && additionalRecipients.equals(other.additionalRecipients)
                && paymentId.equals(other.paymentId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.locationId,
                this.transactionId,
                this.createdAt,
                this.note,
                this.amountMoney,
                this.tipMoney,
                this.processingFeeMoney,
                this.customerId,
                this.type,
                this.cardDetails,
                this.cashDetails,
                this.bankAccountDetails,
                this.buyNowPayLaterDetails,
                this.squareAccountDetails,
                this.additionalRecipients,
                this.paymentId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of tender, such as <code>CARD</code> or <code>CASH</code>.
         * See <a href="#type-tendertype">TenderType</a> for possible values</p>
         */
        _FinalStage type(@NotNull TenderType type);

        Builder from(Tender other);
    }

    public interface _FinalStage {
        Tender build();

        /**
         * <p>The tender's unique ID. It is the associated payment ID.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>The ID of the transaction's associated location.</p>
         */
        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        _FinalStage locationId(Nullable<String> locationId);

        /**
         * <p>The ID of the tender's associated transaction.</p>
         */
        _FinalStage transactionId(Optional<String> transactionId);

        _FinalStage transactionId(String transactionId);

        _FinalStage transactionId(Nullable<String> transactionId);

        /**
         * <p>The timestamp for when the tender was created, in RFC 3339 format.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>An optional note associated with the tender at the time of payment.</p>
         */
        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage note(Nullable<String> note);

        /**
         * <p>The total amount of the tender, including <code>tip_money</code>. If the tender has a <code>payment_id</code>,
         * the <code>total_money</code> of the corresponding <a href="entity:Payment">Payment</a> will be equal to the
         * <code>amount_money</code> of the tender.</p>
         */
        _FinalStage amountMoney(Optional<Money> amountMoney);

        _FinalStage amountMoney(Money amountMoney);

        /**
         * <p>The tip's amount of the tender.</p>
         */
        _FinalStage tipMoney(Optional<Money> tipMoney);

        _FinalStage tipMoney(Money tipMoney);

        /**
         * <p>The amount of any Square processing fees applied to the tender.</p>
         * <p>This field is not immediately populated when a new transaction is created.
         * It is usually available after about ten seconds.</p>
         */
        _FinalStage processingFeeMoney(Optional<Money> processingFeeMoney);

        _FinalStage processingFeeMoney(Money processingFeeMoney);

        /**
         * <p>If the tender is associated with a customer or represents a customer's card on file,
         * this is the ID of the associated customer.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerId(Nullable<String> customerId);

        /**
         * <p>The details of the card tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CARD</code>.</p>
         */
        _FinalStage cardDetails(Optional<TenderCardDetails> cardDetails);

        _FinalStage cardDetails(TenderCardDetails cardDetails);

        /**
         * <p>The details of the cash tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CASH</code>.</p>
         */
        _FinalStage cashDetails(Optional<TenderCashDetails> cashDetails);

        _FinalStage cashDetails(TenderCashDetails cashDetails);

        /**
         * <p>The details of the bank account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BANK_ACCOUNT</code>.</p>
         */
        _FinalStage bankAccountDetails(Optional<TenderBankAccountDetails> bankAccountDetails);

        _FinalStage bankAccountDetails(TenderBankAccountDetails bankAccountDetails);

        /**
         * <p>The details of a Buy Now Pay Later tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BUY_NOW_PAY_LATER</code>.</p>
         */
        _FinalStage buyNowPayLaterDetails(Optional<TenderBuyNowPayLaterDetails> buyNowPayLaterDetails);

        _FinalStage buyNowPayLaterDetails(TenderBuyNowPayLaterDetails buyNowPayLaterDetails);

        /**
         * <p>The details of a Square Account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>SQUARE_ACCOUNT</code>.</p>
         */
        _FinalStage squareAccountDetails(Optional<TenderSquareAccountDetails> squareAccountDetails);

        _FinalStage squareAccountDetails(TenderSquareAccountDetails squareAccountDetails);

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this tender.
         * For example, fees assessed on the purchase by a third party integration.</p>
         */
        _FinalStage additionalRecipients(Optional<List<AdditionalRecipient>> additionalRecipients);

        _FinalStage additionalRecipients(List<AdditionalRecipient> additionalRecipients);

        _FinalStage additionalRecipients(Nullable<List<AdditionalRecipient>> additionalRecipients);

        /**
         * <p>The ID of the <a href="entity:Payment">Payment</a> that corresponds to this tender.
         * This value is only present for payments created with the v2 Payments API.</p>
         */
        _FinalStage paymentId(Optional<String> paymentId);

        _FinalStage paymentId(String paymentId);

        _FinalStage paymentId(Nullable<String> paymentId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private TenderType type;

        private Optional<String> paymentId = Optional.empty();

        private Optional<List<AdditionalRecipient>> additionalRecipients = Optional.empty();

        private Optional<TenderSquareAccountDetails> squareAccountDetails = Optional.empty();

        private Optional<TenderBuyNowPayLaterDetails> buyNowPayLaterDetails = Optional.empty();

        private Optional<TenderBankAccountDetails> bankAccountDetails = Optional.empty();

        private Optional<TenderCashDetails> cashDetails = Optional.empty();

        private Optional<TenderCardDetails> cardDetails = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<Money> processingFeeMoney = Optional.empty();

        private Optional<Money> tipMoney = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Tender other) {
            id(other.getId());
            locationId(other.getLocationId());
            transactionId(other.getTransactionId());
            createdAt(other.getCreatedAt());
            note(other.getNote());
            amountMoney(other.getAmountMoney());
            tipMoney(other.getTipMoney());
            processingFeeMoney(other.getProcessingFeeMoney());
            customerId(other.getCustomerId());
            type(other.getType());
            cardDetails(other.getCardDetails());
            cashDetails(other.getCashDetails());
            bankAccountDetails(other.getBankAccountDetails());
            buyNowPayLaterDetails(other.getBuyNowPayLaterDetails());
            squareAccountDetails(other.getSquareAccountDetails());
            additionalRecipients(other.getAdditionalRecipients());
            paymentId(other.getPaymentId());
            return this;
        }

        /**
         * <p>The type of tender, such as <code>CARD</code> or <code>CASH</code>.
         * See <a href="#type-tendertype">TenderType</a> for possible values</p>
         * <p>The type of tender, such as <code>CARD</code> or <code>CASH</code>.
         * See <a href="#type-tendertype">TenderType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(@NotNull TenderType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Payment">Payment</a> that corresponds to this tender.
         * This value is only present for payments created with the v2 Payments API.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(Nullable<String> paymentId) {
            if (paymentId.isNull()) {
                this.paymentId = null;
            } else if (paymentId.isEmpty()) {
                this.paymentId = Optional.empty();
            } else {
                this.paymentId = Optional.of(paymentId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Payment">Payment</a> that corresponds to this tender.
         * This value is only present for payments created with the v2 Payments API.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Payment">Payment</a> that corresponds to this tender.
         * This value is only present for payments created with the v2 Payments API.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payment_id", nulls = Nulls.SKIP)
        public _FinalStage paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this tender.
         * For example, fees assessed on the purchase by a third party integration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalRecipients(Nullable<List<AdditionalRecipient>> additionalRecipients) {
            if (additionalRecipients.isNull()) {
                this.additionalRecipients = null;
            } else if (additionalRecipients.isEmpty()) {
                this.additionalRecipients = Optional.empty();
            } else {
                this.additionalRecipients = Optional.of(additionalRecipients.get());
            }
            return this;
        }

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this tender.
         * For example, fees assessed on the purchase by a third party integration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalRecipients(List<AdditionalRecipient> additionalRecipients) {
            this.additionalRecipients = Optional.ofNullable(additionalRecipients);
            return this;
        }

        /**
         * <p>Additional recipients (other than the merchant) receiving a portion of this tender.
         * For example, fees assessed on the purchase by a third party integration.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "additional_recipients", nulls = Nulls.SKIP)
        public _FinalStage additionalRecipients(Optional<List<AdditionalRecipient>> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }

        /**
         * <p>The details of a Square Account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>SQUARE_ACCOUNT</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage squareAccountDetails(TenderSquareAccountDetails squareAccountDetails) {
            this.squareAccountDetails = Optional.ofNullable(squareAccountDetails);
            return this;
        }

        /**
         * <p>The details of a Square Account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>SQUARE_ACCOUNT</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "square_account_details", nulls = Nulls.SKIP)
        public _FinalStage squareAccountDetails(Optional<TenderSquareAccountDetails> squareAccountDetails) {
            this.squareAccountDetails = squareAccountDetails;
            return this;
        }

        /**
         * <p>The details of a Buy Now Pay Later tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BUY_NOW_PAY_LATER</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage buyNowPayLaterDetails(TenderBuyNowPayLaterDetails buyNowPayLaterDetails) {
            this.buyNowPayLaterDetails = Optional.ofNullable(buyNowPayLaterDetails);
            return this;
        }

        /**
         * <p>The details of a Buy Now Pay Later tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BUY_NOW_PAY_LATER</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "buy_now_pay_later_details", nulls = Nulls.SKIP)
        public _FinalStage buyNowPayLaterDetails(Optional<TenderBuyNowPayLaterDetails> buyNowPayLaterDetails) {
            this.buyNowPayLaterDetails = buyNowPayLaterDetails;
            return this;
        }

        /**
         * <p>The details of the bank account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BANK_ACCOUNT</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankAccountDetails(TenderBankAccountDetails bankAccountDetails) {
            this.bankAccountDetails = Optional.ofNullable(bankAccountDetails);
            return this;
        }

        /**
         * <p>The details of the bank account tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>BANK_ACCOUNT</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "bank_account_details", nulls = Nulls.SKIP)
        public _FinalStage bankAccountDetails(Optional<TenderBankAccountDetails> bankAccountDetails) {
            this.bankAccountDetails = bankAccountDetails;
            return this;
        }

        /**
         * <p>The details of the cash tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CASH</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cashDetails(TenderCashDetails cashDetails) {
            this.cashDetails = Optional.ofNullable(cashDetails);
            return this;
        }

        /**
         * <p>The details of the cash tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CASH</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cash_details", nulls = Nulls.SKIP)
        public _FinalStage cashDetails(Optional<TenderCashDetails> cashDetails) {
            this.cashDetails = cashDetails;
            return this;
        }

        /**
         * <p>The details of the card tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CARD</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cardDetails(TenderCardDetails cardDetails) {
            this.cardDetails = Optional.ofNullable(cardDetails);
            return this;
        }

        /**
         * <p>The details of the card tender.</p>
         * <p>This value is present only if the value of <code>type</code> is <code>CARD</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "card_details", nulls = Nulls.SKIP)
        public _FinalStage cardDetails(Optional<TenderCardDetails> cardDetails) {
            this.cardDetails = cardDetails;
            return this;
        }

        /**
         * <p>If the tender is associated with a customer or represents a customer's card on file,
         * this is the ID of the associated customer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>If the tender is associated with a customer or represents a customer's card on file,
         * this is the ID of the associated customer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>If the tender is associated with a customer or represents a customer's card on file,
         * this is the ID of the associated customer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>The amount of any Square processing fees applied to the tender.</p>
         * <p>This field is not immediately populated when a new transaction is created.
         * It is usually available after about ten seconds.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage processingFeeMoney(Money processingFeeMoney) {
            this.processingFeeMoney = Optional.ofNullable(processingFeeMoney);
            return this;
        }

        /**
         * <p>The amount of any Square processing fees applied to the tender.</p>
         * <p>This field is not immediately populated when a new transaction is created.
         * It is usually available after about ten seconds.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "processing_fee_money", nulls = Nulls.SKIP)
        public _FinalStage processingFeeMoney(Optional<Money> processingFeeMoney) {
            this.processingFeeMoney = processingFeeMoney;
            return this;
        }

        /**
         * <p>The tip's amount of the tender.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tipMoney(Money tipMoney) {
            this.tipMoney = Optional.ofNullable(tipMoney);
            return this;
        }

        /**
         * <p>The tip's amount of the tender.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tip_money", nulls = Nulls.SKIP)
        public _FinalStage tipMoney(Optional<Money> tipMoney) {
            this.tipMoney = tipMoney;
            return this;
        }

        /**
         * <p>The total amount of the tender, including <code>tip_money</code>. If the tender has a <code>payment_id</code>,
         * the <code>total_money</code> of the corresponding <a href="entity:Payment">Payment</a> will be equal to the
         * <code>amount_money</code> of the tender.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The total amount of the tender, including <code>tip_money</code>. If the tender has a <code>payment_id</code>,
         * the <code>total_money</code> of the corresponding <a href="entity:Payment">Payment</a> will be equal to the
         * <code>amount_money</code> of the tender.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public _FinalStage amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        /**
         * <p>An optional note associated with the tender at the time of payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>An optional note associated with the tender at the time of payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>An optional note associated with the tender at the time of payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>The timestamp for when the tender was created, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp for when the tender was created, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The ID of the tender's associated transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionId(Nullable<String> transactionId) {
            if (transactionId.isNull()) {
                this.transactionId = null;
            } else if (transactionId.isEmpty()) {
                this.transactionId = Optional.empty();
            } else {
                this.transactionId = Optional.of(transactionId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the tender's associated transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * <p>The ID of the tender's associated transaction.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transaction_id", nulls = Nulls.SKIP)
        public _FinalStage transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        /**
         * <p>The ID of the transaction's associated location.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the transaction's associated location.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The ID of the transaction's associated location.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>The tender's unique ID. It is the associated payment ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The tender's unique ID. It is the associated payment ID.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Tender build() {
            return new Tender(
                    id,
                    locationId,
                    transactionId,
                    createdAt,
                    note,
                    amountMoney,
                    tipMoney,
                    processingFeeMoney,
                    customerId,
                    type,
                    cardDetails,
                    cashDetails,
                    bankAccountDetails,
                    buyNowPayLaterDetails,
                    squareAccountDetails,
                    additionalRecipients,
                    paymentId,
                    additionalProperties);
        }
    }
}
