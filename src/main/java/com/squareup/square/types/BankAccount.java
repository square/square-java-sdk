/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankAccount.Builder.class)
public final class BankAccount {
    private final String id;

    private final String accountNumberSuffix;

    private final Country country;

    private final Currency currency;

    private final BankAccountType accountType;

    private final String holderName;

    private final String primaryBankIdentificationNumber;

    private final Optional<String> secondaryBankIdentificationNumber;

    private final Optional<String> debitMandateReferenceId;

    private final Optional<String> referenceId;

    private final Optional<String> locationId;

    private final BankAccountStatus status;

    private final boolean creditable;

    private final boolean debitable;

    private final Optional<String> fingerprint;

    private final Optional<Integer> version;

    private final Optional<String> bankName;

    private final Map<String, Object> additionalProperties;

    private BankAccount(
            String id,
            String accountNumberSuffix,
            Country country,
            Currency currency,
            BankAccountType accountType,
            String holderName,
            String primaryBankIdentificationNumber,
            Optional<String> secondaryBankIdentificationNumber,
            Optional<String> debitMandateReferenceId,
            Optional<String> referenceId,
            Optional<String> locationId,
            BankAccountStatus status,
            boolean creditable,
            boolean debitable,
            Optional<String> fingerprint,
            Optional<Integer> version,
            Optional<String> bankName,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.accountNumberSuffix = accountNumberSuffix;
        this.country = country;
        this.currency = currency;
        this.accountType = accountType;
        this.holderName = holderName;
        this.primaryBankIdentificationNumber = primaryBankIdentificationNumber;
        this.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber;
        this.debitMandateReferenceId = debitMandateReferenceId;
        this.referenceId = referenceId;
        this.locationId = locationId;
        this.status = status;
        this.creditable = creditable;
        this.debitable = debitable;
        this.fingerprint = fingerprint;
        this.version = version;
        this.bankName = bankName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique, Square-issued identifier for the bank account.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The last few digits of the account number.
     */
    @JsonProperty("account_number_suffix")
    public String getAccountNumberSuffix() {
        return accountNumberSuffix;
    }

    /**
     * @return The ISO 3166 Alpha-2 country code where the bank account is based.
     * See <a href="#type-country">Country</a> for possible values
     */
    @JsonProperty("country")
    public Country getCountry() {
        return country;
    }

    /**
     * @return The 3-character ISO 4217 currency code indicating the operating
     * currency of the bank account. For example, the currency code for US dollars
     * is <code>USD</code>.
     * See <a href="#type-currency">Currency</a> for possible values
     */
    @JsonProperty("currency")
    public Currency getCurrency() {
        return currency;
    }

    /**
     * @return The financial purpose of the associated bank account.
     * See <a href="#type-bankaccounttype">BankAccountType</a> for possible values
     */
    @JsonProperty("account_type")
    public BankAccountType getAccountType() {
        return accountType;
    }

    /**
     * @return Name of the account holder. This name must match the name
     * on the targeted bank account record.
     */
    @JsonProperty("holder_name")
    public String getHolderName() {
        return holderName;
    }

    /**
     * @return Primary identifier for the bank. For more information, see
     * <a href="https://developer.squareup.com/docs/bank-accounts-api">Bank Accounts API</a>.
     */
    @JsonProperty("primary_bank_identification_number")
    public String getPrimaryBankIdentificationNumber() {
        return primaryBankIdentificationNumber;
    }

    /**
     * @return Secondary identifier for the bank. For more information, see
     * <a href="https://developer.squareup.com/docs/bank-accounts-api">Bank Accounts API</a>.
     */
    @JsonIgnore
    public Optional<String> getSecondaryBankIdentificationNumber() {
        if (secondaryBankIdentificationNumber == null) {
            return Optional.empty();
        }
        return secondaryBankIdentificationNumber;
    }

    /**
     * @return Reference identifier that will be displayed to UK bank account owners
     * when collecting direct debit authorization. Only required for UK bank accounts.
     */
    @JsonIgnore
    public Optional<String> getDebitMandateReferenceId() {
        if (debitMandateReferenceId == null) {
            return Optional.empty();
        }
        return debitMandateReferenceId;
    }

    /**
     * @return Client-provided identifier for linking the banking account to an entity
     * in a third-party system (for example, a bank account number or a user identifier).
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The location to which the bank account belongs.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return Read-only. The current verification status of this BankAccount object.
     * See <a href="#type-bankaccountstatus">BankAccountStatus</a> for possible values
     */
    @JsonProperty("status")
    public BankAccountStatus getStatus() {
        return status;
    }

    /**
     * @return Indicates whether it is possible for Square to send money to this bank account.
     */
    @JsonProperty("creditable")
    public boolean getCreditable() {
        return creditable;
    }

    /**
     * @return Indicates whether it is possible for Square to take money from this
     * bank account.
     */
    @JsonProperty("debitable")
    public boolean getDebitable() {
        return debitable;
    }

    /**
     * @return A Square-assigned, unique identifier for the bank account based on the
     * account information. The account fingerprint can be used to compare account
     * entries and determine if the they represent the same real-world bank account.
     */
    @JsonIgnore
    public Optional<String> getFingerprint() {
        if (fingerprint == null) {
            return Optional.empty();
        }
        return fingerprint;
    }

    /**
     * @return The current version of the <code>BankAccount</code>.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return Read only. Name of actual financial institution.
     * For example &quot;Bank of America&quot;.
     */
    @JsonIgnore
    public Optional<String> getBankName() {
        if (bankName == null) {
            return Optional.empty();
        }
        return bankName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("secondary_bank_identification_number")
    private Optional<String> _getSecondaryBankIdentificationNumber() {
        return secondaryBankIdentificationNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("debit_mandate_reference_id")
    private Optional<String> _getDebitMandateReferenceId() {
        return debitMandateReferenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fingerprint")
    private Optional<String> _getFingerprint() {
        return fingerprint;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bank_name")
    private Optional<String> _getBankName() {
        return bankName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccount && equalTo((BankAccount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccount other) {
        return id.equals(other.id)
                && accountNumberSuffix.equals(other.accountNumberSuffix)
                && country.equals(other.country)
                && currency.equals(other.currency)
                && accountType.equals(other.accountType)
                && holderName.equals(other.holderName)
                && primaryBankIdentificationNumber.equals(other.primaryBankIdentificationNumber)
                && secondaryBankIdentificationNumber.equals(other.secondaryBankIdentificationNumber)
                && debitMandateReferenceId.equals(other.debitMandateReferenceId)
                && referenceId.equals(other.referenceId)
                && locationId.equals(other.locationId)
                && status.equals(other.status)
                && creditable == other.creditable
                && debitable == other.debitable
                && fingerprint.equals(other.fingerprint)
                && version.equals(other.version)
                && bankName.equals(other.bankName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.accountNumberSuffix,
                this.country,
                this.currency,
                this.accountType,
                this.holderName,
                this.primaryBankIdentificationNumber,
                this.secondaryBankIdentificationNumber,
                this.debitMandateReferenceId,
                this.referenceId,
                this.locationId,
                this.status,
                this.creditable,
                this.debitable,
                this.fingerprint,
                this.version,
                this.bankName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        AccountNumberSuffixStage id(@NotNull String id);

        Builder from(BankAccount other);
    }

    public interface AccountNumberSuffixStage {
        CountryStage accountNumberSuffix(@NotNull String accountNumberSuffix);
    }

    public interface CountryStage {
        CurrencyStage country(@NotNull Country country);
    }

    public interface CurrencyStage {
        AccountTypeStage currency(@NotNull Currency currency);
    }

    public interface AccountTypeStage {
        HolderNameStage accountType(@NotNull BankAccountType accountType);
    }

    public interface HolderNameStage {
        PrimaryBankIdentificationNumberStage holderName(@NotNull String holderName);
    }

    public interface PrimaryBankIdentificationNumberStage {
        StatusStage primaryBankIdentificationNumber(@NotNull String primaryBankIdentificationNumber);
    }

    public interface StatusStage {
        CreditableStage status(@NotNull BankAccountStatus status);
    }

    public interface CreditableStage {
        DebitableStage creditable(boolean creditable);
    }

    public interface DebitableStage {
        _FinalStage debitable(boolean debitable);
    }

    public interface _FinalStage {
        BankAccount build();

        _FinalStage secondaryBankIdentificationNumber(Optional<String> secondaryBankIdentificationNumber);

        _FinalStage secondaryBankIdentificationNumber(String secondaryBankIdentificationNumber);

        _FinalStage secondaryBankIdentificationNumber(Nullable<String> secondaryBankIdentificationNumber);

        _FinalStage debitMandateReferenceId(Optional<String> debitMandateReferenceId);

        _FinalStage debitMandateReferenceId(String debitMandateReferenceId);

        _FinalStage debitMandateReferenceId(Nullable<String> debitMandateReferenceId);

        _FinalStage referenceId(Optional<String> referenceId);

        _FinalStage referenceId(String referenceId);

        _FinalStage referenceId(Nullable<String> referenceId);

        _FinalStage locationId(Optional<String> locationId);

        _FinalStage locationId(String locationId);

        _FinalStage locationId(Nullable<String> locationId);

        _FinalStage fingerprint(Optional<String> fingerprint);

        _FinalStage fingerprint(String fingerprint);

        _FinalStage fingerprint(Nullable<String> fingerprint);

        _FinalStage version(Optional<Integer> version);

        _FinalStage version(Integer version);

        _FinalStage bankName(Optional<String> bankName);

        _FinalStage bankName(String bankName);

        _FinalStage bankName(Nullable<String> bankName);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    AccountNumberSuffixStage,
                    CountryStage,
                    CurrencyStage,
                    AccountTypeStage,
                    HolderNameStage,
                    PrimaryBankIdentificationNumberStage,
                    StatusStage,
                    CreditableStage,
                    DebitableStage,
                    _FinalStage {
        private String id;

        private String accountNumberSuffix;

        private Country country;

        private Currency currency;

        private BankAccountType accountType;

        private String holderName;

        private String primaryBankIdentificationNumber;

        private BankAccountStatus status;

        private boolean creditable;

        private boolean debitable;

        private Optional<String> bankName = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> fingerprint = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> debitMandateReferenceId = Optional.empty();

        private Optional<String> secondaryBankIdentificationNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BankAccount other) {
            id(other.getId());
            accountNumberSuffix(other.getAccountNumberSuffix());
            country(other.getCountry());
            currency(other.getCurrency());
            accountType(other.getAccountType());
            holderName(other.getHolderName());
            primaryBankIdentificationNumber(other.getPrimaryBankIdentificationNumber());
            secondaryBankIdentificationNumber(other.getSecondaryBankIdentificationNumber());
            debitMandateReferenceId(other.getDebitMandateReferenceId());
            referenceId(other.getReferenceId());
            locationId(other.getLocationId());
            status(other.getStatus());
            creditable(other.getCreditable());
            debitable(other.getDebitable());
            fingerprint(other.getFingerprint());
            version(other.getVersion());
            bankName(other.getBankName());
            return this;
        }

        /**
         * <p>The unique, Square-issued identifier for the bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public AccountNumberSuffixStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The last few digits of the account number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("account_number_suffix")
        public CountryStage accountNumberSuffix(@NotNull String accountNumberSuffix) {
            this.accountNumberSuffix =
                    Objects.requireNonNull(accountNumberSuffix, "accountNumberSuffix must not be null");
            return this;
        }

        /**
         * <p>The ISO 3166 Alpha-2 country code where the bank account is based.
         * See <a href="#type-country">Country</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("country")
        public CurrencyStage country(@NotNull Country country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        /**
         * <p>The 3-character ISO 4217 currency code indicating the operating
         * currency of the bank account. For example, the currency code for US dollars
         * is <code>USD</code>.
         * See <a href="#type-currency">Currency</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("currency")
        public AccountTypeStage currency(@NotNull Currency currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        /**
         * <p>The financial purpose of the associated bank account.
         * See <a href="#type-bankaccounttype">BankAccountType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("account_type")
        public HolderNameStage accountType(@NotNull BankAccountType accountType) {
            this.accountType = Objects.requireNonNull(accountType, "accountType must not be null");
            return this;
        }

        /**
         * <p>Name of the account holder. This name must match the name
         * on the targeted bank account record.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("holder_name")
        public PrimaryBankIdentificationNumberStage holderName(@NotNull String holderName) {
            this.holderName = Objects.requireNonNull(holderName, "holderName must not be null");
            return this;
        }

        /**
         * <p>Primary identifier for the bank. For more information, see
         * <a href="https://developer.squareup.com/docs/bank-accounts-api">Bank Accounts API</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("primary_bank_identification_number")
        public StatusStage primaryBankIdentificationNumber(@NotNull String primaryBankIdentificationNumber) {
            this.primaryBankIdentificationNumber = Objects.requireNonNull(
                    primaryBankIdentificationNumber, "primaryBankIdentificationNumber must not be null");
            return this;
        }

        /**
         * <p>Read-only. The current verification status of this BankAccount object.
         * See <a href="#type-bankaccountstatus">BankAccountStatus</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public CreditableStage status(@NotNull BankAccountStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Indicates whether it is possible for Square to send money to this bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("creditable")
        public DebitableStage creditable(boolean creditable) {
            this.creditable = creditable;
            return this;
        }

        /**
         * <p>Indicates whether it is possible for Square to take money from this
         * bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("debitable")
        public _FinalStage debitable(boolean debitable) {
            this.debitable = debitable;
            return this;
        }

        /**
         * <p>Read only. Name of actual financial institution.
         * For example &quot;Bank of America&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankName(Nullable<String> bankName) {
            if (bankName.isNull()) {
                this.bankName = null;
            } else if (bankName.isEmpty()) {
                this.bankName = Optional.empty();
            } else {
                this.bankName = Optional.of(bankName.get());
            }
            return this;
        }

        /**
         * <p>Read only. Name of actual financial institution.
         * For example &quot;Bank of America&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "bank_name", nulls = Nulls.SKIP)
        public _FinalStage bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        /**
         * <p>The current version of the <code>BankAccount</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>A Square-assigned, unique identifier for the bank account based on the
         * account information. The account fingerprint can be used to compare account
         * entries and determine if the they represent the same real-world bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fingerprint(Nullable<String> fingerprint) {
            if (fingerprint.isNull()) {
                this.fingerprint = null;
            } else if (fingerprint.isEmpty()) {
                this.fingerprint = Optional.empty();
            } else {
                this.fingerprint = Optional.of(fingerprint.get());
            }
            return this;
        }

        /**
         * <p>A Square-assigned, unique identifier for the bank account based on the
         * account information. The account fingerprint can be used to compare account
         * entries and determine if the they represent the same real-world bank account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fingerprint(String fingerprint) {
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fingerprint", nulls = Nulls.SKIP)
        public _FinalStage fingerprint(Optional<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        /**
         * <p>The location to which the bank account belongs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The location to which the bank account belongs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public _FinalStage locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        /**
         * <p>Client-provided identifier for linking the banking account to an entity
         * in a third-party system (for example, a bank account number or a user identifier).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>Client-provided identifier for linking the banking account to an entity
         * in a third-party system (for example, a bank account number or a user identifier).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public _FinalStage referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * <p>Reference identifier that will be displayed to UK bank account owners
         * when collecting direct debit authorization. Only required for UK bank accounts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage debitMandateReferenceId(Nullable<String> debitMandateReferenceId) {
            if (debitMandateReferenceId.isNull()) {
                this.debitMandateReferenceId = null;
            } else if (debitMandateReferenceId.isEmpty()) {
                this.debitMandateReferenceId = Optional.empty();
            } else {
                this.debitMandateReferenceId = Optional.of(debitMandateReferenceId.get());
            }
            return this;
        }

        /**
         * <p>Reference identifier that will be displayed to UK bank account owners
         * when collecting direct debit authorization. Only required for UK bank accounts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage debitMandateReferenceId(String debitMandateReferenceId) {
            this.debitMandateReferenceId = Optional.ofNullable(debitMandateReferenceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "debit_mandate_reference_id", nulls = Nulls.SKIP)
        public _FinalStage debitMandateReferenceId(Optional<String> debitMandateReferenceId) {
            this.debitMandateReferenceId = debitMandateReferenceId;
            return this;
        }

        /**
         * <p>Secondary identifier for the bank. For more information, see
         * <a href="https://developer.squareup.com/docs/bank-accounts-api">Bank Accounts API</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage secondaryBankIdentificationNumber(Nullable<String> secondaryBankIdentificationNumber) {
            if (secondaryBankIdentificationNumber.isNull()) {
                this.secondaryBankIdentificationNumber = null;
            } else if (secondaryBankIdentificationNumber.isEmpty()) {
                this.secondaryBankIdentificationNumber = Optional.empty();
            } else {
                this.secondaryBankIdentificationNumber = Optional.of(secondaryBankIdentificationNumber.get());
            }
            return this;
        }

        /**
         * <p>Secondary identifier for the bank. For more information, see
         * <a href="https://developer.squareup.com/docs/bank-accounts-api">Bank Accounts API</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage secondaryBankIdentificationNumber(String secondaryBankIdentificationNumber) {
            this.secondaryBankIdentificationNumber = Optional.ofNullable(secondaryBankIdentificationNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "secondary_bank_identification_number", nulls = Nulls.SKIP)
        public _FinalStage secondaryBankIdentificationNumber(Optional<String> secondaryBankIdentificationNumber) {
            this.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber;
            return this;
        }

        @java.lang.Override
        public BankAccount build() {
            return new BankAccount(
                    id,
                    accountNumberSuffix,
                    country,
                    currency,
                    accountType,
                    holderName,
                    primaryBankIdentificationNumber,
                    secondaryBankIdentificationNumber,
                    debitMandateReferenceId,
                    referenceId,
                    locationId,
                    status,
                    creditable,
                    debitable,
                    fingerprint,
                    version,
                    bankName,
                    additionalProperties);
        }
    }
}
