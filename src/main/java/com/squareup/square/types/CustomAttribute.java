/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomAttribute.Builder.class)
public final class CustomAttribute {
    private final Optional<String> key;

    private final Optional<Object> value;

    private final Optional<Integer> version;

    private final Optional<CustomAttributeDefinitionVisibility> visibility;

    private final Optional<CustomAttributeDefinition> definition;

    private final Optional<String> updatedAt;

    private final Optional<String> createdAt;

    private final Map<String, Object> additionalProperties;

    private CustomAttribute(
            Optional<String> key,
            Optional<Object> value,
            Optional<Integer> version,
            Optional<CustomAttributeDefinitionVisibility> visibility,
            Optional<CustomAttributeDefinition> definition,
            Optional<String> updatedAt,
            Optional<String> createdAt,
            Map<String, Object> additionalProperties) {
        this.key = key;
        this.value = value;
        this.version = version;
        this.visibility = visibility;
        this.definition = definition;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier
     * of the custom attribute definition and its corresponding custom attributes. This value
     * can be a simple key, which is the key that is provided when the custom attribute definition
     * is created, or a qualified key, if the requesting
     * application is not the definition owner. The qualified key consists of the application ID
     * of the custom attribute definition owner
     * followed by the simple key that was provided when the definition was created. It has the
     * format application_id:simple key.
     * <p>The value for a simple key can contain up to 60 alphanumeric characters, periods (.),
     * underscores (_), and hyphens (-).</p>
     */
    @JsonIgnore
    public Optional<String> getKey() {
        if (key == null) {
            return Optional.empty();
        }
        return key;
    }

    @JsonProperty("value")
    public Optional<Object> getValue() {
        return value;
    }

    /**
     * @return Read only. The current version of the custom attribute. This field is incremented when the custom attribute is changed.
     * When updating an existing custom attribute value, you can provide this field
     * and specify the current version of the custom attribute to enable
     * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>.
     * This field can also be used to enforce strong consistency for reads. For more information about strong consistency for reads,
     * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return A copy of the <code>visibility</code> field value for the associated custom attribute definition.
     * See <a href="#type-customattributedefinitionvisibility">CustomAttributeDefinitionVisibility</a> for possible values
     */
    @JsonProperty("visibility")
    public Optional<CustomAttributeDefinitionVisibility> getVisibility() {
        return visibility;
    }

    /**
     * @return A copy of the associated custom attribute definition object. This field is only set when
     * the optional field is specified on the request.
     */
    @JsonProperty("definition")
    public Optional<CustomAttributeDefinition> getDefinition() {
        return definition;
    }

    /**
     * @return The timestamp that indicates when the custom attribute was created or was most recently
     * updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The timestamp that indicates when the custom attribute was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("key")
    private Optional<String> _getKey() {
        return key;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomAttribute && equalTo((CustomAttribute) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomAttribute other) {
        return key.equals(other.key)
                && value.equals(other.value)
                && version.equals(other.version)
                && visibility.equals(other.visibility)
                && definition.equals(other.definition)
                && updatedAt.equals(other.updatedAt)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.key, this.value, this.version, this.visibility, this.definition, this.updatedAt, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> key = Optional.empty();

        private Optional<Object> value = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<CustomAttributeDefinitionVisibility> visibility = Optional.empty();

        private Optional<CustomAttributeDefinition> definition = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomAttribute other) {
            key(other.getKey());
            value(other.getValue());
            version(other.getVersion());
            visibility(other.getVisibility());
            definition(other.getDefinition());
            updatedAt(other.getUpdatedAt());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The identifier
         * of the custom attribute definition and its corresponding custom attributes. This value
         * can be a simple key, which is the key that is provided when the custom attribute definition
         * is created, or a qualified key, if the requesting
         * application is not the definition owner. The qualified key consists of the application ID
         * of the custom attribute definition owner
         * followed by the simple key that was provided when the definition was created. It has the
         * format application_id:simple key.</p>
         * <p>The value for a simple key can contain up to 60 alphanumeric characters, periods (.),
         * underscores (_), and hyphens (-).</p>
         */
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Nullable<String> key) {
            if (key.isNull()) {
                this.key = null;
            } else if (key.isEmpty()) {
                this.key = Optional.empty();
            } else {
                this.key = Optional.of(key.get());
            }
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<Object> value) {
            this.value = value;
            return this;
        }

        public Builder value(Object value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * <p>Read only. The current version of the custom attribute. This field is incremented when the custom attribute is changed.
         * When updating an existing custom attribute value, you can provide this field
         * and specify the current version of the custom attribute to enable
         * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>.
         * This field can also be used to enforce strong consistency for reads. For more information about strong consistency for reads,
         * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>A copy of the <code>visibility</code> field value for the associated custom attribute definition.
         * See <a href="#type-customattributedefinitionvisibility">CustomAttributeDefinitionVisibility</a> for possible values</p>
         */
        @JsonSetter(value = "visibility", nulls = Nulls.SKIP)
        public Builder visibility(Optional<CustomAttributeDefinitionVisibility> visibility) {
            this.visibility = visibility;
            return this;
        }

        public Builder visibility(CustomAttributeDefinitionVisibility visibility) {
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * <p>A copy of the associated custom attribute definition object. This field is only set when
         * the optional field is specified on the request.</p>
         */
        @JsonSetter(value = "definition", nulls = Nulls.SKIP)
        public Builder definition(Optional<CustomAttributeDefinition> definition) {
            this.definition = definition;
            return this;
        }

        public Builder definition(CustomAttributeDefinition definition) {
            this.definition = Optional.ofNullable(definition);
            return this;
        }

        /**
         * <p>The timestamp that indicates when the custom attribute was created or was most recently
         * updated, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The timestamp that indicates when the custom attribute was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public CustomAttribute build() {
            return new CustomAttribute(
                    key, value, version, visibility, definition, updatedAt, createdAt, additionalProperties);
        }
    }
}
