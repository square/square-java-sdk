/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdatePaymentRequest.Builder.class)
public final class UpdatePaymentRequest {
    private final String paymentId;

    private final Optional<Payment> payment;

    private final String idempotencyKey;

    private final Map<String, Object> additionalProperties;

    private UpdatePaymentRequest(
            String paymentId,
            Optional<Payment> payment,
            String idempotencyKey,
            Map<String, Object> additionalProperties) {
        this.paymentId = paymentId;
        this.payment = payment;
        this.idempotencyKey = idempotencyKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the payment to update.
     */
    @JsonProperty("payment_id")
    public String getPaymentId() {
        return paymentId;
    }

    /**
     * @return The updated <code>Payment</code> object.
     */
    @JsonProperty("payment")
    public Optional<Payment> getPayment() {
        return payment;
    }

    /**
     * @return A unique string that identifies this <code>UpdatePayment</code> request. Keys can be any valid string
     * but must be unique for every <code>UpdatePayment</code> request.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdatePaymentRequest && equalTo((UpdatePaymentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdatePaymentRequest other) {
        return paymentId.equals(other.paymentId)
                && payment.equals(other.payment)
                && idempotencyKey.equals(other.idempotencyKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentId, this.payment, this.idempotencyKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaymentIdStage builder() {
        return new Builder();
    }

    public interface PaymentIdStage {
        /**
         * <p>The ID of the payment to update.</p>
         */
        IdempotencyKeyStage paymentId(@NotNull String paymentId);

        Builder from(UpdatePaymentRequest other);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies this <code>UpdatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>UpdatePayment</code> request.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         */
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface _FinalStage {
        UpdatePaymentRequest build();

        /**
         * <p>The updated <code>Payment</code> object.</p>
         */
        _FinalStage payment(Optional<Payment> payment);

        _FinalStage payment(Payment payment);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PaymentIdStage, IdempotencyKeyStage, _FinalStage {
        private String paymentId;

        private String idempotencyKey;

        private Optional<Payment> payment = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdatePaymentRequest other) {
            paymentId(other.getPaymentId());
            payment(other.getPayment());
            idempotencyKey(other.getIdempotencyKey());
            return this;
        }

        /**
         * <p>The ID of the payment to update.</p>
         * <p>The ID of the payment to update.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payment_id")
        public IdempotencyKeyStage paymentId(@NotNull String paymentId) {
            this.paymentId = Objects.requireNonNull(paymentId, "paymentId must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>UpdatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>UpdatePayment</code> request.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * <p>A unique string that identifies this <code>UpdatePayment</code> request. Keys can be any valid string
         * but must be unique for every <code>UpdatePayment</code> request.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The updated <code>Payment</code> object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage payment(Payment payment) {
            this.payment = Optional.ofNullable(payment);
            return this;
        }

        /**
         * <p>The updated <code>Payment</code> object.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payment", nulls = Nulls.SKIP)
        public _FinalStage payment(Optional<Payment> payment) {
            this.payment = payment;
            return this;
        }

        @java.lang.Override
        public UpdatePaymentRequest build() {
            return new UpdatePaymentRequest(paymentId, payment, idempotencyKey, additionalProperties);
        }
    }
}
