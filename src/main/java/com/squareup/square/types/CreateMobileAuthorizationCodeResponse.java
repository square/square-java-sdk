/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateMobileAuthorizationCodeResponse.Builder.class)
public final class CreateMobileAuthorizationCodeResponse {
    private final Optional<String> authorizationCode;

    private final Optional<String> expiresAt;

    private final Optional<List<Error>> errors;

    private final Map<String, Object> additionalProperties;

    private CreateMobileAuthorizationCodeResponse(
            Optional<String> authorizationCode,
            Optional<String> expiresAt,
            Optional<List<Error>> errors,
            Map<String, Object> additionalProperties) {
        this.authorizationCode = authorizationCode;
        this.expiresAt = expiresAt;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The generated authorization code that connects a mobile application instance
     * to a Square account.
     */
    @JsonProperty("authorization_code")
    public Optional<String> getAuthorizationCode() {
        return authorizationCode;
    }

    /**
     * @return The timestamp when <code>authorization_code</code> expires, in
     * <a href="https://tools.ietf.org/html/rfc3339">RFC 3339</a> format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("expires_at")
    public Optional<String> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateMobileAuthorizationCodeResponse
                && equalTo((CreateMobileAuthorizationCodeResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateMobileAuthorizationCodeResponse other) {
        return authorizationCode.equals(other.authorizationCode)
                && expiresAt.equals(other.expiresAt)
                && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.authorizationCode, this.expiresAt, this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> authorizationCode = Optional.empty();

        private Optional<String> expiresAt = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateMobileAuthorizationCodeResponse other) {
            authorizationCode(other.getAuthorizationCode());
            expiresAt(other.getExpiresAt());
            errors(other.getErrors());
            return this;
        }

        @JsonSetter(value = "authorization_code", nulls = Nulls.SKIP)
        public Builder authorizationCode(Optional<String> authorizationCode) {
            this.authorizationCode = authorizationCode;
            return this;
        }

        public Builder authorizationCode(String authorizationCode) {
            this.authorizationCode = Optional.ofNullable(authorizationCode);
            return this;
        }

        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public CreateMobileAuthorizationCodeResponse build() {
            return new CreateMobileAuthorizationCodeResponse(
                    authorizationCode, expiresAt, errors, additionalProperties);
        }
    }
}
