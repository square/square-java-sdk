/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerCustomAttributeFilters.Builder.class)
public final class CustomerCustomAttributeFilters {
    private final Optional<List<CustomerCustomAttributeFilter>> filters;

    private final Map<String, Object> additionalProperties;

    private CustomerCustomAttributeFilters(
            Optional<List<CustomerCustomAttributeFilter>> filters, Map<String, Object> additionalProperties) {
        this.filters = filters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The custom attribute filters. Each filter must specify <code>key</code> and include the <code>filter</code> field with a type-specific filter,
     * the <code>updated_at</code> field, or both. The provided keys must be unique within the list of custom attribute filters.
     */
    @JsonIgnore
    public Optional<List<CustomerCustomAttributeFilter>> getFilters() {
        if (filters == null) {
            return Optional.empty();
        }
        return filters;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("filters")
    private Optional<List<CustomerCustomAttributeFilter>> _getFilters() {
        return filters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerCustomAttributeFilters && equalTo((CustomerCustomAttributeFilters) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerCustomAttributeFilters other) {
        return filters.equals(other.filters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CustomerCustomAttributeFilter>> filters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerCustomAttributeFilters other) {
            filters(other.getFilters());
            return this;
        }

        @JsonSetter(value = "filters", nulls = Nulls.SKIP)
        public Builder filters(Optional<List<CustomerCustomAttributeFilter>> filters) {
            this.filters = filters;
            return this;
        }

        public Builder filters(List<CustomerCustomAttributeFilter> filters) {
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        public Builder filters(Nullable<List<CustomerCustomAttributeFilter>> filters) {
            if (filters.isNull()) {
                this.filters = null;
            } else if (filters.isEmpty()) {
                this.filters = Optional.empty();
            } else {
                this.filters = Optional.of(filters.get());
            }
            return this;
        }

        public CustomerCustomAttributeFilters build() {
            return new CustomerCustomAttributeFilters(filters, additionalProperties);
        }
    }
}
