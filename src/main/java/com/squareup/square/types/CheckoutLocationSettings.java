/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutLocationSettings.Builder.class)
public final class CheckoutLocationSettings {
    private final Optional<String> locationId;

    private final Optional<Boolean> customerNotesEnabled;

    private final Optional<List<CheckoutLocationSettingsPolicy>> policies;

    private final Optional<CheckoutLocationSettingsBranding> branding;

    private final Optional<CheckoutLocationSettingsTipping> tipping;

    private final Optional<CheckoutLocationSettingsCoupons> coupons;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private CheckoutLocationSettings(
            Optional<String> locationId,
            Optional<Boolean> customerNotesEnabled,
            Optional<List<CheckoutLocationSettingsPolicy>> policies,
            Optional<CheckoutLocationSettingsBranding> branding,
            Optional<CheckoutLocationSettingsTipping> tipping,
            Optional<CheckoutLocationSettingsCoupons> coupons,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.customerNotesEnabled = customerNotesEnabled;
        this.policies = policies;
        this.branding = branding;
        this.tipping = tipping;
        this.coupons = coupons;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the location that these settings apply to.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return Indicates whether customers are allowed to leave notes at checkout.
     */
    @JsonIgnore
    public Optional<Boolean> getCustomerNotesEnabled() {
        if (customerNotesEnabled == null) {
            return Optional.empty();
        }
        return customerNotesEnabled;
    }

    /**
     * @return Policy information is displayed at the bottom of the checkout pages.
     * You can set a maximum of two policies.
     */
    @JsonIgnore
    public Optional<List<CheckoutLocationSettingsPolicy>> getPolicies() {
        if (policies == null) {
            return Optional.empty();
        }
        return policies;
    }

    /**
     * @return The branding settings for this location.
     */
    @JsonProperty("branding")
    public Optional<CheckoutLocationSettingsBranding> getBranding() {
        return branding;
    }

    /**
     * @return The tip settings for this location.
     */
    @JsonProperty("tipping")
    public Optional<CheckoutLocationSettingsTipping> getTipping() {
        return tipping;
    }

    /**
     * @return The coupon settings for this location.
     */
    @JsonProperty("coupons")
    public Optional<CheckoutLocationSettingsCoupons> getCoupons() {
        return coupons;
    }

    /**
     * @return The timestamp when the settings were last updated, in RFC 3339 format.
     * Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
     * UTC: 2020-01-26T02:25:34Z
     * Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_notes_enabled")
    private Optional<Boolean> _getCustomerNotesEnabled() {
        return customerNotesEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("policies")
    private Optional<List<CheckoutLocationSettingsPolicy>> _getPolicies() {
        return policies;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutLocationSettings && equalTo((CheckoutLocationSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutLocationSettings other) {
        return locationId.equals(other.locationId)
                && customerNotesEnabled.equals(other.customerNotesEnabled)
                && policies.equals(other.policies)
                && branding.equals(other.branding)
                && tipping.equals(other.tipping)
                && coupons.equals(other.coupons)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.locationId,
                this.customerNotesEnabled,
                this.policies,
                this.branding,
                this.tipping,
                this.coupons,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> locationId = Optional.empty();

        private Optional<Boolean> customerNotesEnabled = Optional.empty();

        private Optional<List<CheckoutLocationSettingsPolicy>> policies = Optional.empty();

        private Optional<CheckoutLocationSettingsBranding> branding = Optional.empty();

        private Optional<CheckoutLocationSettingsTipping> tipping = Optional.empty();

        private Optional<CheckoutLocationSettingsCoupons> coupons = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutLocationSettings other) {
            locationId(other.getLocationId());
            customerNotesEnabled(other.getCustomerNotesEnabled());
            policies(other.getPolicies());
            branding(other.getBranding());
            tipping(other.getTipping());
            coupons(other.getCoupons());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        @JsonSetter(value = "customer_notes_enabled", nulls = Nulls.SKIP)
        public Builder customerNotesEnabled(Optional<Boolean> customerNotesEnabled) {
            this.customerNotesEnabled = customerNotesEnabled;
            return this;
        }

        public Builder customerNotesEnabled(Boolean customerNotesEnabled) {
            this.customerNotesEnabled = Optional.ofNullable(customerNotesEnabled);
            return this;
        }

        public Builder customerNotesEnabled(Nullable<Boolean> customerNotesEnabled) {
            if (customerNotesEnabled.isNull()) {
                this.customerNotesEnabled = null;
            } else if (customerNotesEnabled.isEmpty()) {
                this.customerNotesEnabled = Optional.empty();
            } else {
                this.customerNotesEnabled = Optional.of(customerNotesEnabled.get());
            }
            return this;
        }

        @JsonSetter(value = "policies", nulls = Nulls.SKIP)
        public Builder policies(Optional<List<CheckoutLocationSettingsPolicy>> policies) {
            this.policies = policies;
            return this;
        }

        public Builder policies(List<CheckoutLocationSettingsPolicy> policies) {
            this.policies = Optional.ofNullable(policies);
            return this;
        }

        public Builder policies(Nullable<List<CheckoutLocationSettingsPolicy>> policies) {
            if (policies.isNull()) {
                this.policies = null;
            } else if (policies.isEmpty()) {
                this.policies = Optional.empty();
            } else {
                this.policies = Optional.of(policies.get());
            }
            return this;
        }

        @JsonSetter(value = "branding", nulls = Nulls.SKIP)
        public Builder branding(Optional<CheckoutLocationSettingsBranding> branding) {
            this.branding = branding;
            return this;
        }

        public Builder branding(CheckoutLocationSettingsBranding branding) {
            this.branding = Optional.ofNullable(branding);
            return this;
        }

        @JsonSetter(value = "tipping", nulls = Nulls.SKIP)
        public Builder tipping(Optional<CheckoutLocationSettingsTipping> tipping) {
            this.tipping = tipping;
            return this;
        }

        public Builder tipping(CheckoutLocationSettingsTipping tipping) {
            this.tipping = Optional.ofNullable(tipping);
            return this;
        }

        @JsonSetter(value = "coupons", nulls = Nulls.SKIP)
        public Builder coupons(Optional<CheckoutLocationSettingsCoupons> coupons) {
            this.coupons = coupons;
            return this;
        }

        public Builder coupons(CheckoutLocationSettingsCoupons coupons) {
            this.coupons = Optional.ofNullable(coupons);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public CheckoutLocationSettings build() {
            return new CheckoutLocationSettings(
                    locationId,
                    customerNotesEnabled,
                    policies,
                    branding,
                    tipping,
                    coupons,
                    updatedAt,
                    additionalProperties);
        }
    }
}
