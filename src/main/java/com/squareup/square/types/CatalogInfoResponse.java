/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogInfoResponse.Builder.class)
public final class CatalogInfoResponse {
    private final Optional<List<Error>> errors;

    private final Optional<CatalogInfoResponseLimits> limits;

    private final Optional<StandardUnitDescriptionGroup> standardUnitDescriptionGroup;

    private final Map<String, Object> additionalProperties;

    private CatalogInfoResponse(
            Optional<List<Error>> errors,
            Optional<CatalogInfoResponseLimits> limits,
            Optional<StandardUnitDescriptionGroup> standardUnitDescriptionGroup,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.limits = limits;
        this.standardUnitDescriptionGroup = standardUnitDescriptionGroup;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return Limits that apply to this API.
     */
    @JsonProperty("limits")
    public Optional<CatalogInfoResponseLimits> getLimits() {
        return limits;
    }

    /**
     * @return Names and abbreviations for standard units.
     */
    @JsonProperty("standard_unit_description_group")
    public Optional<StandardUnitDescriptionGroup> getStandardUnitDescriptionGroup() {
        return standardUnitDescriptionGroup;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogInfoResponse && equalTo((CatalogInfoResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogInfoResponse other) {
        return errors.equals(other.errors)
                && limits.equals(other.limits)
                && standardUnitDescriptionGroup.equals(other.standardUnitDescriptionGroup);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.limits, this.standardUnitDescriptionGroup);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<CatalogInfoResponseLimits> limits = Optional.empty();

        private Optional<StandardUnitDescriptionGroup> standardUnitDescriptionGroup = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogInfoResponse other) {
            errors(other.getErrors());
            limits(other.getLimits());
            standardUnitDescriptionGroup(other.getStandardUnitDescriptionGroup());
            return this;
        }

        /**
         * <p>Any errors that occurred during the request.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * <p>Limits that apply to this API.</p>
         */
        @JsonSetter(value = "limits", nulls = Nulls.SKIP)
        public Builder limits(Optional<CatalogInfoResponseLimits> limits) {
            this.limits = limits;
            return this;
        }

        public Builder limits(CatalogInfoResponseLimits limits) {
            this.limits = Optional.ofNullable(limits);
            return this;
        }

        /**
         * <p>Names and abbreviations for standard units.</p>
         */
        @JsonSetter(value = "standard_unit_description_group", nulls = Nulls.SKIP)
        public Builder standardUnitDescriptionGroup(
                Optional<StandardUnitDescriptionGroup> standardUnitDescriptionGroup) {
            this.standardUnitDescriptionGroup = standardUnitDescriptionGroup;
            return this;
        }

        public Builder standardUnitDescriptionGroup(StandardUnitDescriptionGroup standardUnitDescriptionGroup) {
            this.standardUnitDescriptionGroup = Optional.ofNullable(standardUnitDescriptionGroup);
            return this;
        }

        public CatalogInfoResponse build() {
            return new CatalogInfoResponse(errors, limits, standardUnitDescriptionGroup, additionalProperties);
        }
    }
}
