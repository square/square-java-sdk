/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerCreatedEventEventContextMerge.Builder.class)
public final class CustomerCreatedEventEventContextMerge {
    private final Optional<List<String>> fromCustomerIds;

    private final Optional<String> toCustomerId;

    private final Map<String, Object> additionalProperties;

    private CustomerCreatedEventEventContextMerge(
            Optional<List<String>> fromCustomerIds,
            Optional<String> toCustomerId,
            Map<String, Object> additionalProperties) {
        this.fromCustomerIds = fromCustomerIds;
        this.toCustomerId = toCustomerId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The IDs of the existing customers that were merged and then deleted.
     */
    @JsonIgnore
    public Optional<List<String>> getFromCustomerIds() {
        if (fromCustomerIds == null) {
            return Optional.empty();
        }
        return fromCustomerIds;
    }

    /**
     * @return The ID of the new customer created by the merge.
     */
    @JsonIgnore
    public Optional<String> getToCustomerId() {
        if (toCustomerId == null) {
            return Optional.empty();
        }
        return toCustomerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("from_customer_ids")
    private Optional<List<String>> _getFromCustomerIds() {
        return fromCustomerIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("to_customer_id")
    private Optional<String> _getToCustomerId() {
        return toCustomerId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerCreatedEventEventContextMerge
                && equalTo((CustomerCreatedEventEventContextMerge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerCreatedEventEventContextMerge other) {
        return fromCustomerIds.equals(other.fromCustomerIds) && toCustomerId.equals(other.toCustomerId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fromCustomerIds, this.toCustomerId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> fromCustomerIds = Optional.empty();

        private Optional<String> toCustomerId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerCreatedEventEventContextMerge other) {
            fromCustomerIds(other.getFromCustomerIds());
            toCustomerId(other.getToCustomerId());
            return this;
        }

        @JsonSetter(value = "from_customer_ids", nulls = Nulls.SKIP)
        public Builder fromCustomerIds(Optional<List<String>> fromCustomerIds) {
            this.fromCustomerIds = fromCustomerIds;
            return this;
        }

        public Builder fromCustomerIds(List<String> fromCustomerIds) {
            this.fromCustomerIds = Optional.ofNullable(fromCustomerIds);
            return this;
        }

        public Builder fromCustomerIds(Nullable<List<String>> fromCustomerIds) {
            if (fromCustomerIds.isNull()) {
                this.fromCustomerIds = null;
            } else if (fromCustomerIds.isEmpty()) {
                this.fromCustomerIds = Optional.empty();
            } else {
                this.fromCustomerIds = Optional.of(fromCustomerIds.get());
            }
            return this;
        }

        @JsonSetter(value = "to_customer_id", nulls = Nulls.SKIP)
        public Builder toCustomerId(Optional<String> toCustomerId) {
            this.toCustomerId = toCustomerId;
            return this;
        }

        public Builder toCustomerId(String toCustomerId) {
            this.toCustomerId = Optional.ofNullable(toCustomerId);
            return this;
        }

        public Builder toCustomerId(Nullable<String> toCustomerId) {
            if (toCustomerId.isNull()) {
                this.toCustomerId = null;
            } else if (toCustomerId.isEmpty()) {
                this.toCustomerId = Optional.empty();
            } else {
                this.toCustomerId = Optional.of(toCustomerId.get());
            }
            return this;
        }

        public CustomerCreatedEventEventContextMerge build() {
            return new CustomerCreatedEventEventContextMerge(fromCustomerIds, toCustomerId, additionalProperties);
        }
    }
}
