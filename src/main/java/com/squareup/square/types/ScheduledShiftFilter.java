/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScheduledShiftFilter.Builder.class)
public final class ScheduledShiftFilter {
    private final Optional<List<String>> locationIds;

    private final Optional<TimeRange> start;

    private final Optional<TimeRange> end;

    private final Optional<ScheduledShiftWorkday> workday;

    private final Optional<List<String>> teamMemberIds;

    private final Optional<ScheduledShiftFilterAssignmentStatus> assignmentStatus;

    private final Optional<List<ScheduledShiftFilterScheduledShiftStatus>> scheduledShiftStatuses;

    private final Map<String, Object> additionalProperties;

    private ScheduledShiftFilter(
            Optional<List<String>> locationIds,
            Optional<TimeRange> start,
            Optional<TimeRange> end,
            Optional<ScheduledShiftWorkday> workday,
            Optional<List<String>> teamMemberIds,
            Optional<ScheduledShiftFilterAssignmentStatus> assignmentStatus,
            Optional<List<ScheduledShiftFilterScheduledShiftStatus>> scheduledShiftStatuses,
            Map<String, Object> additionalProperties) {
        this.locationIds = locationIds;
        this.start = start;
        this.end = end;
        this.workday = workday;
        this.teamMemberIds = teamMemberIds;
        this.assignmentStatus = assignmentStatus;
        this.scheduledShiftStatuses = scheduledShiftStatuses;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Return shifts for the specified locations. When omitted, shifts for all
     * locations are returned. If needed, call <a href="api-endpoint:Locations-ListLocations">ListLocations</a>
     * to get location IDs.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return Return shifts whose <code>start_at</code> time is within the specified
     * time range (inclusive).
     */
    @JsonProperty("start")
    public Optional<TimeRange> getStart() {
        return start;
    }

    /**
     * @return Return shifts whose <code>end_at</code> time is within the specified
     * time range (inclusive).
     */
    @JsonProperty("end")
    public Optional<TimeRange> getEnd() {
        return end;
    }

    /**
     * @return Return shifts based on a workday date range.
     */
    @JsonProperty("workday")
    public Optional<ScheduledShiftWorkday> getWorkday() {
        return workday;
    }

    /**
     * @return Return shifts assigned to specified team members. If needed, call
     * <a href="api-endpoint:Team-SearchTeamMembers">SearchTeamMembers</a> to get team member IDs.
     * <p>To return only the shifts assigned to the specified team members, include the
     * <code>assignment_status</code> filter in the query. Otherwise, all unassigned shifts are
     * returned along with shifts assigned to the specified team members.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getTeamMemberIds() {
        if (teamMemberIds == null) {
            return Optional.empty();
        }
        return teamMemberIds;
    }

    /**
     * @return Return shifts based on whether a team member is assigned. A shift is
     * assigned if the <code>team_member_id</code> field is populated in the <code>draft_shift_details</code>
     * or <code>published_shift details</code> field of the shift.
     * <p>To return only draft or published shifts, include the <code>scheduled_shift_statuses</code>
     * filter in the query.
     * See <a href="#type-scheduledshiftfilterassignmentstatus">ScheduledShiftFilterAssignmentStatus</a> for possible values</p>
     */
    @JsonProperty("assignment_status")
    public Optional<ScheduledShiftFilterAssignmentStatus> getAssignmentStatus() {
        return assignmentStatus;
    }

    /**
     * @return Return shifts based on the draft or published status of the shift.
     * A shift is published if the <code>published_shift_details</code> field is present.
     * <p>Note that shifts with <code>draft_shift_details.is_deleted</code> set to <code>true</code> are ignored
     * with the <code>DRAFT</code> filter.
     * See <a href="#type-scheduledshiftfilterscheduledshiftstatus">ScheduledShiftFilterScheduledShiftStatus</a> for possible values</p>
     */
    @JsonIgnore
    public Optional<List<ScheduledShiftFilterScheduledShiftStatus>> getScheduledShiftStatuses() {
        if (scheduledShiftStatuses == null) {
            return Optional.empty();
        }
        return scheduledShiftStatuses;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_ids")
    private Optional<List<String>> _getTeamMemberIds() {
        return teamMemberIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("scheduled_shift_statuses")
    private Optional<List<ScheduledShiftFilterScheduledShiftStatus>> _getScheduledShiftStatuses() {
        return scheduledShiftStatuses;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScheduledShiftFilter && equalTo((ScheduledShiftFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScheduledShiftFilter other) {
        return locationIds.equals(other.locationIds)
                && start.equals(other.start)
                && end.equals(other.end)
                && workday.equals(other.workday)
                && teamMemberIds.equals(other.teamMemberIds)
                && assignmentStatus.equals(other.assignmentStatus)
                && scheduledShiftStatuses.equals(other.scheduledShiftStatuses);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.locationIds,
                this.start,
                this.end,
                this.workday,
                this.teamMemberIds,
                this.assignmentStatus,
                this.scheduledShiftStatuses);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<TimeRange> start = Optional.empty();

        private Optional<TimeRange> end = Optional.empty();

        private Optional<ScheduledShiftWorkday> workday = Optional.empty();

        private Optional<List<String>> teamMemberIds = Optional.empty();

        private Optional<ScheduledShiftFilterAssignmentStatus> assignmentStatus = Optional.empty();

        private Optional<List<ScheduledShiftFilterScheduledShiftStatus>> scheduledShiftStatuses = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScheduledShiftFilter other) {
            locationIds(other.getLocationIds());
            start(other.getStart());
            end(other.getEnd());
            workday(other.getWorkday());
            teamMemberIds(other.getTeamMemberIds());
            assignmentStatus(other.getAssignmentStatus());
            scheduledShiftStatuses(other.getScheduledShiftStatuses());
            return this;
        }

        /**
         * <p>Return shifts for the specified locations. When omitted, shifts for all
         * locations are returned. If needed, call <a href="api-endpoint:Locations-ListLocations">ListLocations</a>
         * to get location IDs.</p>
         */
        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        /**
         * <p>Return shifts whose <code>start_at</code> time is within the specified
         * time range (inclusive).</p>
         */
        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<TimeRange> start) {
            this.start = start;
            return this;
        }

        public Builder start(TimeRange start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        /**
         * <p>Return shifts whose <code>end_at</code> time is within the specified
         * time range (inclusive).</p>
         */
        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<TimeRange> end) {
            this.end = end;
            return this;
        }

        public Builder end(TimeRange end) {
            this.end = Optional.ofNullable(end);
            return this;
        }

        /**
         * <p>Return shifts based on a workday date range.</p>
         */
        @JsonSetter(value = "workday", nulls = Nulls.SKIP)
        public Builder workday(Optional<ScheduledShiftWorkday> workday) {
            this.workday = workday;
            return this;
        }

        public Builder workday(ScheduledShiftWorkday workday) {
            this.workday = Optional.ofNullable(workday);
            return this;
        }

        /**
         * <p>Return shifts assigned to specified team members. If needed, call
         * <a href="api-endpoint:Team-SearchTeamMembers">SearchTeamMembers</a> to get team member IDs.</p>
         * <p>To return only the shifts assigned to the specified team members, include the
         * <code>assignment_status</code> filter in the query. Otherwise, all unassigned shifts are
         * returned along with shifts assigned to the specified team members.</p>
         */
        @JsonSetter(value = "team_member_ids", nulls = Nulls.SKIP)
        public Builder teamMemberIds(Optional<List<String>> teamMemberIds) {
            this.teamMemberIds = teamMemberIds;
            return this;
        }

        public Builder teamMemberIds(List<String> teamMemberIds) {
            this.teamMemberIds = Optional.ofNullable(teamMemberIds);
            return this;
        }

        public Builder teamMemberIds(Nullable<List<String>> teamMemberIds) {
            if (teamMemberIds.isNull()) {
                this.teamMemberIds = null;
            } else if (teamMemberIds.isEmpty()) {
                this.teamMemberIds = Optional.empty();
            } else {
                this.teamMemberIds = Optional.of(teamMemberIds.get());
            }
            return this;
        }

        /**
         * <p>Return shifts based on whether a team member is assigned. A shift is
         * assigned if the <code>team_member_id</code> field is populated in the <code>draft_shift_details</code>
         * or <code>published_shift details</code> field of the shift.</p>
         * <p>To return only draft or published shifts, include the <code>scheduled_shift_statuses</code>
         * filter in the query.
         * See <a href="#type-scheduledshiftfilterassignmentstatus">ScheduledShiftFilterAssignmentStatus</a> for possible values</p>
         */
        @JsonSetter(value = "assignment_status", nulls = Nulls.SKIP)
        public Builder assignmentStatus(Optional<ScheduledShiftFilterAssignmentStatus> assignmentStatus) {
            this.assignmentStatus = assignmentStatus;
            return this;
        }

        public Builder assignmentStatus(ScheduledShiftFilterAssignmentStatus assignmentStatus) {
            this.assignmentStatus = Optional.ofNullable(assignmentStatus);
            return this;
        }

        /**
         * <p>Return shifts based on the draft or published status of the shift.
         * A shift is published if the <code>published_shift_details</code> field is present.</p>
         * <p>Note that shifts with <code>draft_shift_details.is_deleted</code> set to <code>true</code> are ignored
         * with the <code>DRAFT</code> filter.
         * See <a href="#type-scheduledshiftfilterscheduledshiftstatus">ScheduledShiftFilterScheduledShiftStatus</a> for possible values</p>
         */
        @JsonSetter(value = "scheduled_shift_statuses", nulls = Nulls.SKIP)
        public Builder scheduledShiftStatuses(
                Optional<List<ScheduledShiftFilterScheduledShiftStatus>> scheduledShiftStatuses) {
            this.scheduledShiftStatuses = scheduledShiftStatuses;
            return this;
        }

        public Builder scheduledShiftStatuses(List<ScheduledShiftFilterScheduledShiftStatus> scheduledShiftStatuses) {
            this.scheduledShiftStatuses = Optional.ofNullable(scheduledShiftStatuses);
            return this;
        }

        public Builder scheduledShiftStatuses(
                Nullable<List<ScheduledShiftFilterScheduledShiftStatus>> scheduledShiftStatuses) {
            if (scheduledShiftStatuses.isNull()) {
                this.scheduledShiftStatuses = null;
            } else if (scheduledShiftStatuses.isEmpty()) {
                this.scheduledShiftStatuses = Optional.empty();
            } else {
                this.scheduledShiftStatuses = Optional.of(scheduledShiftStatuses.get());
            }
            return this;
        }

        public ScheduledShiftFilter build() {
            return new ScheduledShiftFilter(
                    locationIds,
                    start,
                    end,
                    workday,
                    teamMemberIds,
                    assignmentStatus,
                    scheduledShiftStatuses,
                    additionalProperties);
        }
    }
}
