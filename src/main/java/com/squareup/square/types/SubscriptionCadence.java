/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class SubscriptionCadence {
    public static final SubscriptionCadence QUARTERLY = new SubscriptionCadence(Value.QUARTERLY, "QUARTERLY");

    public static final SubscriptionCadence SIXTY_DAYS = new SubscriptionCadence(Value.SIXTY_DAYS, "SIXTY_DAYS");

    public static final SubscriptionCadence NINETY_DAYS = new SubscriptionCadence(Value.NINETY_DAYS, "NINETY_DAYS");

    public static final SubscriptionCadence MONTHLY = new SubscriptionCadence(Value.MONTHLY, "MONTHLY");

    public static final SubscriptionCadence EVERY_SIX_MONTHS =
            new SubscriptionCadence(Value.EVERY_SIX_MONTHS, "EVERY_SIX_MONTHS");

    public static final SubscriptionCadence EVERY_FOUR_MONTHS =
            new SubscriptionCadence(Value.EVERY_FOUR_MONTHS, "EVERY_FOUR_MONTHS");

    public static final SubscriptionCadence ANNUAL = new SubscriptionCadence(Value.ANNUAL, "ANNUAL");

    public static final SubscriptionCadence DAILY = new SubscriptionCadence(Value.DAILY, "DAILY");

    public static final SubscriptionCadence EVERY_TWO_MONTHS =
            new SubscriptionCadence(Value.EVERY_TWO_MONTHS, "EVERY_TWO_MONTHS");

    public static final SubscriptionCadence EVERY_TWO_YEARS =
            new SubscriptionCadence(Value.EVERY_TWO_YEARS, "EVERY_TWO_YEARS");

    public static final SubscriptionCadence WEEKLY = new SubscriptionCadence(Value.WEEKLY, "WEEKLY");

    public static final SubscriptionCadence THIRTY_DAYS = new SubscriptionCadence(Value.THIRTY_DAYS, "THIRTY_DAYS");

    public static final SubscriptionCadence EVERY_TWO_WEEKS =
            new SubscriptionCadence(Value.EVERY_TWO_WEEKS, "EVERY_TWO_WEEKS");

    private final Value value;

    private final String string;

    SubscriptionCadence(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof SubscriptionCadence && this.string.equals(((SubscriptionCadence) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case QUARTERLY:
                return visitor.visitQuarterly();
            case SIXTY_DAYS:
                return visitor.visitSixtyDays();
            case NINETY_DAYS:
                return visitor.visitNinetyDays();
            case MONTHLY:
                return visitor.visitMonthly();
            case EVERY_SIX_MONTHS:
                return visitor.visitEverySixMonths();
            case EVERY_FOUR_MONTHS:
                return visitor.visitEveryFourMonths();
            case ANNUAL:
                return visitor.visitAnnual();
            case DAILY:
                return visitor.visitDaily();
            case EVERY_TWO_MONTHS:
                return visitor.visitEveryTwoMonths();
            case EVERY_TWO_YEARS:
                return visitor.visitEveryTwoYears();
            case WEEKLY:
                return visitor.visitWeekly();
            case THIRTY_DAYS:
                return visitor.visitThirtyDays();
            case EVERY_TWO_WEEKS:
                return visitor.visitEveryTwoWeeks();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static SubscriptionCadence valueOf(String value) {
        switch (value) {
            case "QUARTERLY":
                return QUARTERLY;
            case "SIXTY_DAYS":
                return SIXTY_DAYS;
            case "NINETY_DAYS":
                return NINETY_DAYS;
            case "MONTHLY":
                return MONTHLY;
            case "EVERY_SIX_MONTHS":
                return EVERY_SIX_MONTHS;
            case "EVERY_FOUR_MONTHS":
                return EVERY_FOUR_MONTHS;
            case "ANNUAL":
                return ANNUAL;
            case "DAILY":
                return DAILY;
            case "EVERY_TWO_MONTHS":
                return EVERY_TWO_MONTHS;
            case "EVERY_TWO_YEARS":
                return EVERY_TWO_YEARS;
            case "WEEKLY":
                return WEEKLY;
            case "THIRTY_DAYS":
                return THIRTY_DAYS;
            case "EVERY_TWO_WEEKS":
                return EVERY_TWO_WEEKS;
            default:
                return new SubscriptionCadence(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        DAILY,

        WEEKLY,

        EVERY_TWO_WEEKS,

        THIRTY_DAYS,

        SIXTY_DAYS,

        NINETY_DAYS,

        MONTHLY,

        EVERY_TWO_MONTHS,

        QUARTERLY,

        EVERY_FOUR_MONTHS,

        EVERY_SIX_MONTHS,

        ANNUAL,

        EVERY_TWO_YEARS,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitDaily();

        T visitWeekly();

        T visitEveryTwoWeeks();

        T visitThirtyDays();

        T visitSixtyDays();

        T visitNinetyDays();

        T visitMonthly();

        T visitEveryTwoMonths();

        T visitQuarterly();

        T visitEveryFourMonths();

        T visitEverySixMonths();

        T visitAnnual();

        T visitEveryTwoYears();

        T visitUnknown(String unknownType);
    }
}
