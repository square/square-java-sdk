/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Order.Builder.class)
public final class Order {
    private final Optional<String> id;

    private final String locationId;

    private final Optional<String> referenceId;

    private final Optional<OrderSource> source;

    private final Optional<String> customerId;

    private final Optional<List<OrderLineItem>> lineItems;

    private final Optional<List<OrderLineItemTax>> taxes;

    private final Optional<List<OrderLineItemDiscount>> discounts;

    private final Optional<List<OrderServiceCharge>> serviceCharges;

    private final Optional<List<Fulfillment>> fulfillments;

    private final Optional<List<OrderReturn>> returns;

    private final Optional<OrderMoneyAmounts> returnAmounts;

    private final Optional<OrderMoneyAmounts> netAmounts;

    private final Optional<OrderRoundingAdjustment> roundingAdjustment;

    private final Optional<List<Tender>> tenders;

    private final Optional<List<Refund>> refunds;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> closedAt;

    private final Optional<OrderState> state;

    private final Optional<Integer> version;

    private final Optional<Money> totalMoney;

    private final Optional<Money> totalTaxMoney;

    private final Optional<Money> totalDiscountMoney;

    private final Optional<Money> totalTipMoney;

    private final Optional<Money> totalServiceChargeMoney;

    private final Optional<String> ticketName;

    private final Optional<OrderPricingOptions> pricingOptions;

    private final Optional<List<OrderReward>> rewards;

    private final Optional<Money> netAmountDueMoney;

    private final Map<String, Object> additionalProperties;

    private Order(
            Optional<String> id,
            String locationId,
            Optional<String> referenceId,
            Optional<OrderSource> source,
            Optional<String> customerId,
            Optional<List<OrderLineItem>> lineItems,
            Optional<List<OrderLineItemTax>> taxes,
            Optional<List<OrderLineItemDiscount>> discounts,
            Optional<List<OrderServiceCharge>> serviceCharges,
            Optional<List<Fulfillment>> fulfillments,
            Optional<List<OrderReturn>> returns,
            Optional<OrderMoneyAmounts> returnAmounts,
            Optional<OrderMoneyAmounts> netAmounts,
            Optional<OrderRoundingAdjustment> roundingAdjustment,
            Optional<List<Tender>> tenders,
            Optional<List<Refund>> refunds,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> closedAt,
            Optional<OrderState> state,
            Optional<Integer> version,
            Optional<Money> totalMoney,
            Optional<Money> totalTaxMoney,
            Optional<Money> totalDiscountMoney,
            Optional<Money> totalTipMoney,
            Optional<Money> totalServiceChargeMoney,
            Optional<String> ticketName,
            Optional<OrderPricingOptions> pricingOptions,
            Optional<List<OrderReward>> rewards,
            Optional<Money> netAmountDueMoney,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.locationId = locationId;
        this.referenceId = referenceId;
        this.source = source;
        this.customerId = customerId;
        this.lineItems = lineItems;
        this.taxes = taxes;
        this.discounts = discounts;
        this.serviceCharges = serviceCharges;
        this.fulfillments = fulfillments;
        this.returns = returns;
        this.returnAmounts = returnAmounts;
        this.netAmounts = netAmounts;
        this.roundingAdjustment = roundingAdjustment;
        this.tenders = tenders;
        this.refunds = refunds;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.closedAt = closedAt;
        this.state = state;
        this.version = version;
        this.totalMoney = totalMoney;
        this.totalTaxMoney = totalTaxMoney;
        this.totalDiscountMoney = totalDiscountMoney;
        this.totalTipMoney = totalTipMoney;
        this.totalServiceChargeMoney = totalServiceChargeMoney;
        this.ticketName = ticketName;
        this.pricingOptions = pricingOptions;
        this.rewards = rewards;
        this.netAmountDueMoney = netAmountDueMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order's unique ID.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of the seller location that this order is associated with.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return A client-specified ID to associate an entity in another system
     * with this order.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The origination details of the order.
     */
    @JsonProperty("source")
    public Optional<OrderSource> getSource() {
        return source;
    }

    /**
     * @return The ID of the <a href="entity:Customer">customer</a> associated with the order.
     * <p>You should specify a <code>customer_id</code> on the order (or the payment) to ensure that transactions
     * are reliably linked to customers. Omitting this field might result in the creation of new
     * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profiles</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The line items included in the order.
     */
    @JsonIgnore
    public Optional<List<OrderLineItem>> getLineItems() {
        if (lineItems == null) {
            return Optional.empty();
        }
        return lineItems;
    }

    /**
     * @return The list of all taxes associated with the order.
     * <p>Taxes can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For taxes with <code>LINE_ITEM</code> scope, an
     * <code>OrderLineItemAppliedTax</code> must be added to each line item that the tax applies to. For taxes
     * with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedTax</code> for every line item.</p>
     * <p>On reads, each tax in the list includes the total amount of that tax applied to the order.</p>
     * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any taxes in this field, using the deprecated
     * <code>line_items.taxes</code> field results in an error. Use <code>line_items.applied_taxes</code>
     * instead.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemTax>> getTaxes() {
        if (taxes == null) {
            return Optional.empty();
        }
        return taxes;
    }

    /**
     * @return The list of all discounts associated with the order.
     * <p>Discounts can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For discounts scoped to <code>LINE_ITEM</code>,
     * an <code>OrderLineItemAppliedDiscount</code> must be added to each line item that the discount applies to.
     * For discounts with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedDiscount</code>
     * for every line item.</p>
     * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any discounts in this field, using the deprecated
     * <code>line_items.discounts</code> field results in an error. Use <code>line_items.applied_discounts</code>
     * instead.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemDiscount>> getDiscounts() {
        if (discounts == null) {
            return Optional.empty();
        }
        return discounts;
    }

    /**
     * @return A list of service charges applied to the order.
     */
    @JsonIgnore
    public Optional<List<OrderServiceCharge>> getServiceCharges() {
        if (serviceCharges == null) {
            return Optional.empty();
        }
        return serviceCharges;
    }

    /**
     * @return Details about order fulfillment.
     * <p>Orders can only be created with at most one fulfillment. However, orders returned
     * by the API might contain multiple fulfillments.</p>
     */
    @JsonIgnore
    public Optional<List<Fulfillment>> getFulfillments() {
        if (fulfillments == null) {
            return Optional.empty();
        }
        return fulfillments;
    }

    /**
     * @return A collection of items from sale orders being returned in this one. Normally part of an
     * itemized return or exchange. There is exactly one <code>Return</code> object per sale <code>Order</code> being
     * referenced.
     */
    @JsonProperty("returns")
    public Optional<List<OrderReturn>> getReturns() {
        return returns;
    }

    /**
     * @return The rollup of the returned money amounts.
     */
    @JsonProperty("return_amounts")
    public Optional<OrderMoneyAmounts> getReturnAmounts() {
        return returnAmounts;
    }

    /**
     * @return The net money amounts (sale money - return money).
     */
    @JsonProperty("net_amounts")
    public Optional<OrderMoneyAmounts> getNetAmounts() {
        return netAmounts;
    }

    /**
     * @return A positive rounding adjustment to the total of the order. This adjustment is commonly
     * used to apply cash rounding when the minimum unit of account is smaller than the lowest physical
     * denomination of the currency.
     */
    @JsonProperty("rounding_adjustment")
    public Optional<OrderRoundingAdjustment> getRoundingAdjustment() {
        return roundingAdjustment;
    }

    /**
     * @return The tenders that were used to pay for the order.
     */
    @JsonProperty("tenders")
    public Optional<List<Tender>> getTenders() {
        return tenders;
    }

    /**
     * @return The refunds that are part of this order.
     */
    @JsonProperty("refunds")
    public Optional<List<Refund>> getRefunds() {
        return refunds;
    }

    /**
     * @return Application-defined data attached to this order. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * <p>Keys written by applications must be 60 characters or less and must be in the character set
     * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.</p>
     * <p>Values have a maximum length of 255 characters.</p>
     * <p>An application can have up to 10 entries per metadata field.</p>
     * <p>Entries written by applications are private and can only be read or modified by the same
     * application.</p>
     * <p>For more information, see  <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
     */
    @JsonIgnore
    public Optional<Map<String, Optional<String>>> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    /**
     * @return The timestamp for when the order was created, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp for when the order was last updated, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The timestamp for when the order reached a terminal <a href="entity:OrderState">state</a>, in RFC 3339 format (for example &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("closed_at")
    public Optional<String> getClosedAt() {
        return closedAt;
    }

    /**
     * @return The current state of the order.
     * See <a href="#type-orderstate">OrderState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<OrderState> getState() {
        return state;
    }

    /**
     * @return The version number, which is incremented each time an update is committed to the order.
     * Orders not created through the API do not include a version number and
     * therefore cannot be updated.
     * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions</a>.</p>
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The total amount of money to collect for the order.
     */
    @JsonProperty("total_money")
    public Optional<Money> getTotalMoney() {
        return totalMoney;
    }

    /**
     * @return The total amount of tax money to collect for the order.
     */
    @JsonProperty("total_tax_money")
    public Optional<Money> getTotalTaxMoney() {
        return totalTaxMoney;
    }

    /**
     * @return The total amount of discount money to collect for the order.
     */
    @JsonProperty("total_discount_money")
    public Optional<Money> getTotalDiscountMoney() {
        return totalDiscountMoney;
    }

    /**
     * @return The total amount of tip money to collect for the order.
     */
    @JsonProperty("total_tip_money")
    public Optional<Money> getTotalTipMoney() {
        return totalTipMoney;
    }

    /**
     * @return The total amount of money collected in service charges for the order.
     * <p>Note: <code>total_service_charge_money</code> is the sum of <code>applied_money</code> fields for each individual
     * service charge. Therefore, <code>total_service_charge_money</code> only includes inclusive tax amounts,
     * not additive tax amounts.</p>
     */
    @JsonProperty("total_service_charge_money")
    public Optional<Money> getTotalServiceChargeMoney() {
        return totalServiceChargeMoney;
    }

    /**
     * @return A short-term identifier for the order (such as a customer first name,
     * table number, or auto-generated order number that resets daily).
     */
    @JsonIgnore
    public Optional<String> getTicketName() {
        if (ticketName == null) {
            return Optional.empty();
        }
        return ticketName;
    }

    /**
     * @return Pricing options for an order. The options affect how the order's price is calculated.
     * They can be used, for example, to apply automatic price adjustments that are based on
     * preconfigured <a href="entity:CatalogPricingRule">pricing rules</a>.
     */
    @JsonProperty("pricing_options")
    public Optional<OrderPricingOptions> getPricingOptions() {
        return pricingOptions;
    }

    /**
     * @return A set-like list of Rewards that have been added to the Order.
     */
    @JsonProperty("rewards")
    public Optional<List<OrderReward>> getRewards() {
        return rewards;
    }

    /**
     * @return The net amount of money due on the order.
     */
    @JsonProperty("net_amount_due_money")
    public Optional<Money> getNetAmountDueMoney() {
        return netAmountDueMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("line_items")
    private Optional<List<OrderLineItem>> _getLineItems() {
        return lineItems;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("taxes")
    private Optional<List<OrderLineItemTax>> _getTaxes() {
        return taxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("discounts")
    private Optional<List<OrderLineItemDiscount>> _getDiscounts() {
        return discounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("service_charges")
    private Optional<List<OrderServiceCharge>> _getServiceCharges() {
        return serviceCharges;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fulfillments")
    private Optional<List<Fulfillment>> _getFulfillments() {
        return fulfillments;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Map<String, Optional<String>>> _getMetadata() {
        return metadata;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ticket_name")
    private Optional<String> _getTicketName() {
        return ticketName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Order && equalTo((Order) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Order other) {
        return id.equals(other.id)
                && locationId.equals(other.locationId)
                && referenceId.equals(other.referenceId)
                && source.equals(other.source)
                && customerId.equals(other.customerId)
                && lineItems.equals(other.lineItems)
                && taxes.equals(other.taxes)
                && discounts.equals(other.discounts)
                && serviceCharges.equals(other.serviceCharges)
                && fulfillments.equals(other.fulfillments)
                && returns.equals(other.returns)
                && returnAmounts.equals(other.returnAmounts)
                && netAmounts.equals(other.netAmounts)
                && roundingAdjustment.equals(other.roundingAdjustment)
                && tenders.equals(other.tenders)
                && refunds.equals(other.refunds)
                && metadata.equals(other.metadata)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && closedAt.equals(other.closedAt)
                && state.equals(other.state)
                && version.equals(other.version)
                && totalMoney.equals(other.totalMoney)
                && totalTaxMoney.equals(other.totalTaxMoney)
                && totalDiscountMoney.equals(other.totalDiscountMoney)
                && totalTipMoney.equals(other.totalTipMoney)
                && totalServiceChargeMoney.equals(other.totalServiceChargeMoney)
                && ticketName.equals(other.ticketName)
                && pricingOptions.equals(other.pricingOptions)
                && rewards.equals(other.rewards)
                && netAmountDueMoney.equals(other.netAmountDueMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.locationId,
                this.referenceId,
                this.source,
                this.customerId,
                this.lineItems,
                this.taxes,
                this.discounts,
                this.serviceCharges,
                this.fulfillments,
                this.returns,
                this.returnAmounts,
                this.netAmounts,
                this.roundingAdjustment,
                this.tenders,
                this.refunds,
                this.metadata,
                this.createdAt,
                this.updatedAt,
                this.closedAt,
                this.state,
                this.version,
                this.totalMoney,
                this.totalTaxMoney,
                this.totalDiscountMoney,
                this.totalTipMoney,
                this.totalServiceChargeMoney,
                this.ticketName,
                this.pricingOptions,
                this.rewards,
                this.netAmountDueMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the seller location that this order is associated with.</p>
         */
        _FinalStage locationId(@NotNull String locationId);

        Builder from(Order other);
    }

    public interface _FinalStage {
        Order build();

        /**
         * <p>The order's unique ID.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>A client-specified ID to associate an entity in another system
         * with this order.</p>
         */
        _FinalStage referenceId(Optional<String> referenceId);

        _FinalStage referenceId(String referenceId);

        _FinalStage referenceId(Nullable<String> referenceId);

        /**
         * <p>The origination details of the order.</p>
         */
        _FinalStage source(Optional<OrderSource> source);

        _FinalStage source(OrderSource source);

        /**
         * <p>The ID of the <a href="entity:Customer">customer</a> associated with the order.</p>
         * <p>You should specify a <code>customer_id</code> on the order (or the payment) to ensure that transactions
         * are reliably linked to customers. Omitting this field might result in the creation of new
         * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profiles</a>.</p>
         */
        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerId(Nullable<String> customerId);

        /**
         * <p>The line items included in the order.</p>
         */
        _FinalStage lineItems(Optional<List<OrderLineItem>> lineItems);

        _FinalStage lineItems(List<OrderLineItem> lineItems);

        _FinalStage lineItems(Nullable<List<OrderLineItem>> lineItems);

        /**
         * <p>The list of all taxes associated with the order.</p>
         * <p>Taxes can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For taxes with <code>LINE_ITEM</code> scope, an
         * <code>OrderLineItemAppliedTax</code> must be added to each line item that the tax applies to. For taxes
         * with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedTax</code> for every line item.</p>
         * <p>On reads, each tax in the list includes the total amount of that tax applied to the order.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any taxes in this field, using the deprecated
         * <code>line_items.taxes</code> field results in an error. Use <code>line_items.applied_taxes</code>
         * instead.</p>
         */
        _FinalStage taxes(Optional<List<OrderLineItemTax>> taxes);

        _FinalStage taxes(List<OrderLineItemTax> taxes);

        _FinalStage taxes(Nullable<List<OrderLineItemTax>> taxes);

        /**
         * <p>The list of all discounts associated with the order.</p>
         * <p>Discounts can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For discounts scoped to <code>LINE_ITEM</code>,
         * an <code>OrderLineItemAppliedDiscount</code> must be added to each line item that the discount applies to.
         * For discounts with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedDiscount</code>
         * for every line item.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any discounts in this field, using the deprecated
         * <code>line_items.discounts</code> field results in an error. Use <code>line_items.applied_discounts</code>
         * instead.</p>
         */
        _FinalStage discounts(Optional<List<OrderLineItemDiscount>> discounts);

        _FinalStage discounts(List<OrderLineItemDiscount> discounts);

        _FinalStage discounts(Nullable<List<OrderLineItemDiscount>> discounts);

        /**
         * <p>A list of service charges applied to the order.</p>
         */
        _FinalStage serviceCharges(Optional<List<OrderServiceCharge>> serviceCharges);

        _FinalStage serviceCharges(List<OrderServiceCharge> serviceCharges);

        _FinalStage serviceCharges(Nullable<List<OrderServiceCharge>> serviceCharges);

        /**
         * <p>Details about order fulfillment.</p>
         * <p>Orders can only be created with at most one fulfillment. However, orders returned
         * by the API might contain multiple fulfillments.</p>
         */
        _FinalStage fulfillments(Optional<List<Fulfillment>> fulfillments);

        _FinalStage fulfillments(List<Fulfillment> fulfillments);

        _FinalStage fulfillments(Nullable<List<Fulfillment>> fulfillments);

        /**
         * <p>A collection of items from sale orders being returned in this one. Normally part of an
         * itemized return or exchange. There is exactly one <code>Return</code> object per sale <code>Order</code> being
         * referenced.</p>
         */
        _FinalStage returns(Optional<List<OrderReturn>> returns);

        _FinalStage returns(List<OrderReturn> returns);

        /**
         * <p>The rollup of the returned money amounts.</p>
         */
        _FinalStage returnAmounts(Optional<OrderMoneyAmounts> returnAmounts);

        _FinalStage returnAmounts(OrderMoneyAmounts returnAmounts);

        /**
         * <p>The net money amounts (sale money - return money).</p>
         */
        _FinalStage netAmounts(Optional<OrderMoneyAmounts> netAmounts);

        _FinalStage netAmounts(OrderMoneyAmounts netAmounts);

        /**
         * <p>A positive rounding adjustment to the total of the order. This adjustment is commonly
         * used to apply cash rounding when the minimum unit of account is smaller than the lowest physical
         * denomination of the currency.</p>
         */
        _FinalStage roundingAdjustment(Optional<OrderRoundingAdjustment> roundingAdjustment);

        _FinalStage roundingAdjustment(OrderRoundingAdjustment roundingAdjustment);

        /**
         * <p>The tenders that were used to pay for the order.</p>
         */
        _FinalStage tenders(Optional<List<Tender>> tenders);

        _FinalStage tenders(List<Tender> tenders);

        /**
         * <p>The refunds that are part of this order.</p>
         */
        _FinalStage refunds(Optional<List<Refund>> refunds);

        _FinalStage refunds(List<Refund> refunds);

        /**
         * <p>Application-defined data attached to this order. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see  <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        _FinalStage metadata(Optional<Map<String, Optional<String>>> metadata);

        _FinalStage metadata(Map<String, Optional<String>> metadata);

        _FinalStage metadata(Nullable<Map<String, Optional<String>>> metadata);

        /**
         * <p>The timestamp for when the order was created, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The timestamp for when the order was last updated, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        /**
         * <p>The timestamp for when the order reached a terminal <a href="entity:OrderState">state</a>, in RFC 3339 format (for example &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        _FinalStage closedAt(Optional<String> closedAt);

        _FinalStage closedAt(String closedAt);

        /**
         * <p>The current state of the order.
         * See <a href="#type-orderstate">OrderState</a> for possible values</p>
         */
        _FinalStage state(Optional<OrderState> state);

        _FinalStage state(OrderState state);

        /**
         * <p>The version number, which is incremented each time an update is committed to the order.
         * Orders not created through the API do not include a version number and
         * therefore cannot be updated.</p>
         * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions</a>.</p>
         */
        _FinalStage version(Optional<Integer> version);

        _FinalStage version(Integer version);

        /**
         * <p>The total amount of money to collect for the order.</p>
         */
        _FinalStage totalMoney(Optional<Money> totalMoney);

        _FinalStage totalMoney(Money totalMoney);

        /**
         * <p>The total amount of tax money to collect for the order.</p>
         */
        _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney);

        _FinalStage totalTaxMoney(Money totalTaxMoney);

        /**
         * <p>The total amount of discount money to collect for the order.</p>
         */
        _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney);

        _FinalStage totalDiscountMoney(Money totalDiscountMoney);

        /**
         * <p>The total amount of tip money to collect for the order.</p>
         */
        _FinalStage totalTipMoney(Optional<Money> totalTipMoney);

        _FinalStage totalTipMoney(Money totalTipMoney);

        /**
         * <p>The total amount of money collected in service charges for the order.</p>
         * <p>Note: <code>total_service_charge_money</code> is the sum of <code>applied_money</code> fields for each individual
         * service charge. Therefore, <code>total_service_charge_money</code> only includes inclusive tax amounts,
         * not additive tax amounts.</p>
         */
        _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney);

        _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney);

        /**
         * <p>A short-term identifier for the order (such as a customer first name,
         * table number, or auto-generated order number that resets daily).</p>
         */
        _FinalStage ticketName(Optional<String> ticketName);

        _FinalStage ticketName(String ticketName);

        _FinalStage ticketName(Nullable<String> ticketName);

        /**
         * <p>Pricing options for an order. The options affect how the order's price is calculated.
         * They can be used, for example, to apply automatic price adjustments that are based on
         * preconfigured <a href="entity:CatalogPricingRule">pricing rules</a>.</p>
         */
        _FinalStage pricingOptions(Optional<OrderPricingOptions> pricingOptions);

        _FinalStage pricingOptions(OrderPricingOptions pricingOptions);

        /**
         * <p>A set-like list of Rewards that have been added to the Order.</p>
         */
        _FinalStage rewards(Optional<List<OrderReward>> rewards);

        _FinalStage rewards(List<OrderReward> rewards);

        /**
         * <p>The net amount of money due on the order.</p>
         */
        _FinalStage netAmountDueMoney(Optional<Money> netAmountDueMoney);

        _FinalStage netAmountDueMoney(Money netAmountDueMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LocationIdStage, _FinalStage {
        private String locationId;

        private Optional<Money> netAmountDueMoney = Optional.empty();

        private Optional<List<OrderReward>> rewards = Optional.empty();

        private Optional<OrderPricingOptions> pricingOptions = Optional.empty();

        private Optional<String> ticketName = Optional.empty();

        private Optional<Money> totalServiceChargeMoney = Optional.empty();

        private Optional<Money> totalTipMoney = Optional.empty();

        private Optional<Money> totalDiscountMoney = Optional.empty();

        private Optional<Money> totalTaxMoney = Optional.empty();

        private Optional<Money> totalMoney = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<OrderState> state = Optional.empty();

        private Optional<String> closedAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<List<Refund>> refunds = Optional.empty();

        private Optional<List<Tender>> tenders = Optional.empty();

        private Optional<OrderRoundingAdjustment> roundingAdjustment = Optional.empty();

        private Optional<OrderMoneyAmounts> netAmounts = Optional.empty();

        private Optional<OrderMoneyAmounts> returnAmounts = Optional.empty();

        private Optional<List<OrderReturn>> returns = Optional.empty();

        private Optional<List<Fulfillment>> fulfillments = Optional.empty();

        private Optional<List<OrderServiceCharge>> serviceCharges = Optional.empty();

        private Optional<List<OrderLineItemDiscount>> discounts = Optional.empty();

        private Optional<List<OrderLineItemTax>> taxes = Optional.empty();

        private Optional<List<OrderLineItem>> lineItems = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<OrderSource> source = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Order other) {
            id(other.getId());
            locationId(other.getLocationId());
            referenceId(other.getReferenceId());
            source(other.getSource());
            customerId(other.getCustomerId());
            lineItems(other.getLineItems());
            taxes(other.getTaxes());
            discounts(other.getDiscounts());
            serviceCharges(other.getServiceCharges());
            fulfillments(other.getFulfillments());
            returns(other.getReturns());
            returnAmounts(other.getReturnAmounts());
            netAmounts(other.getNetAmounts());
            roundingAdjustment(other.getRoundingAdjustment());
            tenders(other.getTenders());
            refunds(other.getRefunds());
            metadata(other.getMetadata());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            closedAt(other.getClosedAt());
            state(other.getState());
            version(other.getVersion());
            totalMoney(other.getTotalMoney());
            totalTaxMoney(other.getTotalTaxMoney());
            totalDiscountMoney(other.getTotalDiscountMoney());
            totalTipMoney(other.getTotalTipMoney());
            totalServiceChargeMoney(other.getTotalServiceChargeMoney());
            ticketName(other.getTicketName());
            pricingOptions(other.getPricingOptions());
            rewards(other.getRewards());
            netAmountDueMoney(other.getNetAmountDueMoney());
            return this;
        }

        /**
         * <p>The ID of the seller location that this order is associated with.</p>
         * <p>The ID of the seller location that this order is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>The net amount of money due on the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netAmountDueMoney(Money netAmountDueMoney) {
            this.netAmountDueMoney = Optional.ofNullable(netAmountDueMoney);
            return this;
        }

        /**
         * <p>The net amount of money due on the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "net_amount_due_money", nulls = Nulls.SKIP)
        public _FinalStage netAmountDueMoney(Optional<Money> netAmountDueMoney) {
            this.netAmountDueMoney = netAmountDueMoney;
            return this;
        }

        /**
         * <p>A set-like list of Rewards that have been added to the Order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rewards(List<OrderReward> rewards) {
            this.rewards = Optional.ofNullable(rewards);
            return this;
        }

        /**
         * <p>A set-like list of Rewards that have been added to the Order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rewards", nulls = Nulls.SKIP)
        public _FinalStage rewards(Optional<List<OrderReward>> rewards) {
            this.rewards = rewards;
            return this;
        }

        /**
         * <p>Pricing options for an order. The options affect how the order's price is calculated.
         * They can be used, for example, to apply automatic price adjustments that are based on
         * preconfigured <a href="entity:CatalogPricingRule">pricing rules</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pricingOptions(OrderPricingOptions pricingOptions) {
            this.pricingOptions = Optional.ofNullable(pricingOptions);
            return this;
        }

        /**
         * <p>Pricing options for an order. The options affect how the order's price is calculated.
         * They can be used, for example, to apply automatic price adjustments that are based on
         * preconfigured <a href="entity:CatalogPricingRule">pricing rules</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "pricing_options", nulls = Nulls.SKIP)
        public _FinalStage pricingOptions(Optional<OrderPricingOptions> pricingOptions) {
            this.pricingOptions = pricingOptions;
            return this;
        }

        /**
         * <p>A short-term identifier for the order (such as a customer first name,
         * table number, or auto-generated order number that resets daily).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ticketName(Nullable<String> ticketName) {
            if (ticketName.isNull()) {
                this.ticketName = null;
            } else if (ticketName.isEmpty()) {
                this.ticketName = Optional.empty();
            } else {
                this.ticketName = Optional.of(ticketName.get());
            }
            return this;
        }

        /**
         * <p>A short-term identifier for the order (such as a customer first name,
         * table number, or auto-generated order number that resets daily).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ticketName(String ticketName) {
            this.ticketName = Optional.ofNullable(ticketName);
            return this;
        }

        /**
         * <p>A short-term identifier for the order (such as a customer first name,
         * table number, or auto-generated order number that resets daily).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ticket_name", nulls = Nulls.SKIP)
        public _FinalStage ticketName(Optional<String> ticketName) {
            this.ticketName = ticketName;
            return this;
        }

        /**
         * <p>The total amount of money collected in service charges for the order.</p>
         * <p>Note: <code>total_service_charge_money</code> is the sum of <code>applied_money</code> fields for each individual
         * service charge. Therefore, <code>total_service_charge_money</code> only includes inclusive tax amounts,
         * not additive tax amounts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney) {
            this.totalServiceChargeMoney = Optional.ofNullable(totalServiceChargeMoney);
            return this;
        }

        /**
         * <p>The total amount of money collected in service charges for the order.</p>
         * <p>Note: <code>total_service_charge_money</code> is the sum of <code>applied_money</code> fields for each individual
         * service charge. Therefore, <code>total_service_charge_money</code> only includes inclusive tax amounts,
         * not additive tax amounts.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_service_charge_money", nulls = Nulls.SKIP)
        public _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney) {
            this.totalServiceChargeMoney = totalServiceChargeMoney;
            return this;
        }

        /**
         * <p>The total amount of tip money to collect for the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalTipMoney(Money totalTipMoney) {
            this.totalTipMoney = Optional.ofNullable(totalTipMoney);
            return this;
        }

        /**
         * <p>The total amount of tip money to collect for the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_tip_money", nulls = Nulls.SKIP)
        public _FinalStage totalTipMoney(Optional<Money> totalTipMoney) {
            this.totalTipMoney = totalTipMoney;
            return this;
        }

        /**
         * <p>The total amount of discount money to collect for the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalDiscountMoney(Money totalDiscountMoney) {
            this.totalDiscountMoney = Optional.ofNullable(totalDiscountMoney);
            return this;
        }

        /**
         * <p>The total amount of discount money to collect for the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_discount_money", nulls = Nulls.SKIP)
        public _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney) {
            this.totalDiscountMoney = totalDiscountMoney;
            return this;
        }

        /**
         * <p>The total amount of tax money to collect for the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalTaxMoney(Money totalTaxMoney) {
            this.totalTaxMoney = Optional.ofNullable(totalTaxMoney);
            return this;
        }

        /**
         * <p>The total amount of tax money to collect for the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_tax_money", nulls = Nulls.SKIP)
        public _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney) {
            this.totalTaxMoney = totalTaxMoney;
            return this;
        }

        /**
         * <p>The total amount of money to collect for the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalMoney(Money totalMoney) {
            this.totalMoney = Optional.ofNullable(totalMoney);
            return this;
        }

        /**
         * <p>The total amount of money to collect for the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_money", nulls = Nulls.SKIP)
        public _FinalStage totalMoney(Optional<Money> totalMoney) {
            this.totalMoney = totalMoney;
            return this;
        }

        /**
         * <p>The version number, which is incremented each time an update is committed to the order.
         * Orders not created through the API do not include a version number and
         * therefore cannot be updated.</p>
         * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The version number, which is incremented each time an update is committed to the order.
         * Orders not created through the API do not include a version number and
         * therefore cannot be updated.</p>
         * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>The current state of the order.
         * See <a href="#type-orderstate">OrderState</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage state(OrderState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>The current state of the order.
         * See <a href="#type-orderstate">OrderState</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public _FinalStage state(Optional<OrderState> state) {
            this.state = state;
            return this;
        }

        /**
         * <p>The timestamp for when the order reached a terminal <a href="entity:OrderState">state</a>, in RFC 3339 format (for example &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage closedAt(String closedAt) {
            this.closedAt = Optional.ofNullable(closedAt);
            return this;
        }

        /**
         * <p>The timestamp for when the order reached a terminal <a href="entity:OrderState">state</a>, in RFC 3339 format (for example &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "closed_at", nulls = Nulls.SKIP)
        public _FinalStage closedAt(Optional<String> closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        /**
         * <p>The timestamp for when the order was last updated, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The timestamp for when the order was last updated, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The timestamp for when the order was created, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp for when the order was created, at server side, in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Application-defined data attached to this order. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see  <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Nullable<Map<String, Optional<String>>> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        /**
         * <p>Application-defined data attached to this order. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see  <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Application-defined data attached to this order. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see  <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>The refunds that are part of this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refunds(List<Refund> refunds) {
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * <p>The refunds that are part of this order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "refunds", nulls = Nulls.SKIP)
        public _FinalStage refunds(Optional<List<Refund>> refunds) {
            this.refunds = refunds;
            return this;
        }

        /**
         * <p>The tenders that were used to pay for the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage tenders(List<Tender> tenders) {
            this.tenders = Optional.ofNullable(tenders);
            return this;
        }

        /**
         * <p>The tenders that were used to pay for the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "tenders", nulls = Nulls.SKIP)
        public _FinalStage tenders(Optional<List<Tender>> tenders) {
            this.tenders = tenders;
            return this;
        }

        /**
         * <p>A positive rounding adjustment to the total of the order. This adjustment is commonly
         * used to apply cash rounding when the minimum unit of account is smaller than the lowest physical
         * denomination of the currency.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage roundingAdjustment(OrderRoundingAdjustment roundingAdjustment) {
            this.roundingAdjustment = Optional.ofNullable(roundingAdjustment);
            return this;
        }

        /**
         * <p>A positive rounding adjustment to the total of the order. This adjustment is commonly
         * used to apply cash rounding when the minimum unit of account is smaller than the lowest physical
         * denomination of the currency.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rounding_adjustment", nulls = Nulls.SKIP)
        public _FinalStage roundingAdjustment(Optional<OrderRoundingAdjustment> roundingAdjustment) {
            this.roundingAdjustment = roundingAdjustment;
            return this;
        }

        /**
         * <p>The net money amounts (sale money - return money).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netAmounts(OrderMoneyAmounts netAmounts) {
            this.netAmounts = Optional.ofNullable(netAmounts);
            return this;
        }

        /**
         * <p>The net money amounts (sale money - return money).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "net_amounts", nulls = Nulls.SKIP)
        public _FinalStage netAmounts(Optional<OrderMoneyAmounts> netAmounts) {
            this.netAmounts = netAmounts;
            return this;
        }

        /**
         * <p>The rollup of the returned money amounts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage returnAmounts(OrderMoneyAmounts returnAmounts) {
            this.returnAmounts = Optional.ofNullable(returnAmounts);
            return this;
        }

        /**
         * <p>The rollup of the returned money amounts.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "return_amounts", nulls = Nulls.SKIP)
        public _FinalStage returnAmounts(Optional<OrderMoneyAmounts> returnAmounts) {
            this.returnAmounts = returnAmounts;
            return this;
        }

        /**
         * <p>A collection of items from sale orders being returned in this one. Normally part of an
         * itemized return or exchange. There is exactly one <code>Return</code> object per sale <code>Order</code> being
         * referenced.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage returns(List<OrderReturn> returns) {
            this.returns = Optional.ofNullable(returns);
            return this;
        }

        /**
         * <p>A collection of items from sale orders being returned in this one. Normally part of an
         * itemized return or exchange. There is exactly one <code>Return</code> object per sale <code>Order</code> being
         * referenced.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "returns", nulls = Nulls.SKIP)
        public _FinalStage returns(Optional<List<OrderReturn>> returns) {
            this.returns = returns;
            return this;
        }

        /**
         * <p>Details about order fulfillment.</p>
         * <p>Orders can only be created with at most one fulfillment. However, orders returned
         * by the API might contain multiple fulfillments.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fulfillments(Nullable<List<Fulfillment>> fulfillments) {
            if (fulfillments.isNull()) {
                this.fulfillments = null;
            } else if (fulfillments.isEmpty()) {
                this.fulfillments = Optional.empty();
            } else {
                this.fulfillments = Optional.of(fulfillments.get());
            }
            return this;
        }

        /**
         * <p>Details about order fulfillment.</p>
         * <p>Orders can only be created with at most one fulfillment. However, orders returned
         * by the API might contain multiple fulfillments.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fulfillments(List<Fulfillment> fulfillments) {
            this.fulfillments = Optional.ofNullable(fulfillments);
            return this;
        }

        /**
         * <p>Details about order fulfillment.</p>
         * <p>Orders can only be created with at most one fulfillment. However, orders returned
         * by the API might contain multiple fulfillments.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fulfillments", nulls = Nulls.SKIP)
        public _FinalStage fulfillments(Optional<List<Fulfillment>> fulfillments) {
            this.fulfillments = fulfillments;
            return this;
        }

        /**
         * <p>A list of service charges applied to the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceCharges(Nullable<List<OrderServiceCharge>> serviceCharges) {
            if (serviceCharges.isNull()) {
                this.serviceCharges = null;
            } else if (serviceCharges.isEmpty()) {
                this.serviceCharges = Optional.empty();
            } else {
                this.serviceCharges = Optional.of(serviceCharges.get());
            }
            return this;
        }

        /**
         * <p>A list of service charges applied to the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceCharges(List<OrderServiceCharge> serviceCharges) {
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }

        /**
         * <p>A list of service charges applied to the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "service_charges", nulls = Nulls.SKIP)
        public _FinalStage serviceCharges(Optional<List<OrderServiceCharge>> serviceCharges) {
            this.serviceCharges = serviceCharges;
            return this;
        }

        /**
         * <p>The list of all discounts associated with the order.</p>
         * <p>Discounts can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For discounts scoped to <code>LINE_ITEM</code>,
         * an <code>OrderLineItemAppliedDiscount</code> must be added to each line item that the discount applies to.
         * For discounts with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedDiscount</code>
         * for every line item.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any discounts in this field, using the deprecated
         * <code>line_items.discounts</code> field results in an error. Use <code>line_items.applied_discounts</code>
         * instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage discounts(Nullable<List<OrderLineItemDiscount>> discounts) {
            if (discounts.isNull()) {
                this.discounts = null;
            } else if (discounts.isEmpty()) {
                this.discounts = Optional.empty();
            } else {
                this.discounts = Optional.of(discounts.get());
            }
            return this;
        }

        /**
         * <p>The list of all discounts associated with the order.</p>
         * <p>Discounts can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For discounts scoped to <code>LINE_ITEM</code>,
         * an <code>OrderLineItemAppliedDiscount</code> must be added to each line item that the discount applies to.
         * For discounts with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedDiscount</code>
         * for every line item.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any discounts in this field, using the deprecated
         * <code>line_items.discounts</code> field results in an error. Use <code>line_items.applied_discounts</code>
         * instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage discounts(List<OrderLineItemDiscount> discounts) {
            this.discounts = Optional.ofNullable(discounts);
            return this;
        }

        /**
         * <p>The list of all discounts associated with the order.</p>
         * <p>Discounts can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For discounts scoped to <code>LINE_ITEM</code>,
         * an <code>OrderLineItemAppliedDiscount</code> must be added to each line item that the discount applies to.
         * For discounts with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedDiscount</code>
         * for every line item.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any discounts in this field, using the deprecated
         * <code>line_items.discounts</code> field results in an error. Use <code>line_items.applied_discounts</code>
         * instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "discounts", nulls = Nulls.SKIP)
        public _FinalStage discounts(Optional<List<OrderLineItemDiscount>> discounts) {
            this.discounts = discounts;
            return this;
        }

        /**
         * <p>The list of all taxes associated with the order.</p>
         * <p>Taxes can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For taxes with <code>LINE_ITEM</code> scope, an
         * <code>OrderLineItemAppliedTax</code> must be added to each line item that the tax applies to. For taxes
         * with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedTax</code> for every line item.</p>
         * <p>On reads, each tax in the list includes the total amount of that tax applied to the order.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any taxes in this field, using the deprecated
         * <code>line_items.taxes</code> field results in an error. Use <code>line_items.applied_taxes</code>
         * instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage taxes(Nullable<List<OrderLineItemTax>> taxes) {
            if (taxes.isNull()) {
                this.taxes = null;
            } else if (taxes.isEmpty()) {
                this.taxes = Optional.empty();
            } else {
                this.taxes = Optional.of(taxes.get());
            }
            return this;
        }

        /**
         * <p>The list of all taxes associated with the order.</p>
         * <p>Taxes can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For taxes with <code>LINE_ITEM</code> scope, an
         * <code>OrderLineItemAppliedTax</code> must be added to each line item that the tax applies to. For taxes
         * with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedTax</code> for every line item.</p>
         * <p>On reads, each tax in the list includes the total amount of that tax applied to the order.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any taxes in this field, using the deprecated
         * <code>line_items.taxes</code> field results in an error. Use <code>line_items.applied_taxes</code>
         * instead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage taxes(List<OrderLineItemTax> taxes) {
            this.taxes = Optional.ofNullable(taxes);
            return this;
        }

        /**
         * <p>The list of all taxes associated with the order.</p>
         * <p>Taxes can be scoped to either <code>ORDER</code> or <code>LINE_ITEM</code>. For taxes with <code>LINE_ITEM</code> scope, an
         * <code>OrderLineItemAppliedTax</code> must be added to each line item that the tax applies to. For taxes
         * with <code>ORDER</code> scope, the server generates an <code>OrderLineItemAppliedTax</code> for every line item.</p>
         * <p>On reads, each tax in the list includes the total amount of that tax applied to the order.</p>
         * <p><strong>IMPORTANT</strong>: If <code>LINE_ITEM</code> scope is set on any taxes in this field, using the deprecated
         * <code>line_items.taxes</code> field results in an error. Use <code>line_items.applied_taxes</code>
         * instead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "taxes", nulls = Nulls.SKIP)
        public _FinalStage taxes(Optional<List<OrderLineItemTax>> taxes) {
            this.taxes = taxes;
            return this;
        }

        /**
         * <p>The line items included in the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lineItems(Nullable<List<OrderLineItem>> lineItems) {
            if (lineItems.isNull()) {
                this.lineItems = null;
            } else if (lineItems.isEmpty()) {
                this.lineItems = Optional.empty();
            } else {
                this.lineItems = Optional.of(lineItems.get());
            }
            return this;
        }

        /**
         * <p>The line items included in the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lineItems(List<OrderLineItem> lineItems) {
            this.lineItems = Optional.ofNullable(lineItems);
            return this;
        }

        /**
         * <p>The line items included in the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "line_items", nulls = Nulls.SKIP)
        public _FinalStage lineItems(Optional<List<OrderLineItem>> lineItems) {
            this.lineItems = lineItems;
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Customer">customer</a> associated with the order.</p>
         * <p>You should specify a <code>customer_id</code> on the order (or the payment) to ensure that transactions
         * are reliably linked to customers. Omitting this field might result in the creation of new
         * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profiles</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Customer">customer</a> associated with the order.</p>
         * <p>You should specify a <code>customer_id</code> on the order (or the payment) to ensure that transactions
         * are reliably linked to customers. Omitting this field might result in the creation of new
         * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profiles</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Customer">customer</a> associated with the order.</p>
         * <p>You should specify a <code>customer_id</code> on the order (or the payment) to ensure that transactions
         * are reliably linked to customers. Omitting this field might result in the creation of new
         * <a href="https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles">instant profiles</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>The origination details of the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage source(OrderSource source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>The origination details of the order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<OrderSource> source) {
            this.source = source;
            return this;
        }

        /**
         * <p>A client-specified ID to associate an entity in another system
         * with this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>A client-specified ID to associate an entity in another system
         * with this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        /**
         * <p>A client-specified ID to associate an entity in another system
         * with this order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public _FinalStage referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * <p>The order's unique ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The order's unique ID.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Order build() {
            return new Order(
                    id,
                    locationId,
                    referenceId,
                    source,
                    customerId,
                    lineItems,
                    taxes,
                    discounts,
                    serviceCharges,
                    fulfillments,
                    returns,
                    returnAmounts,
                    netAmounts,
                    roundingAdjustment,
                    tenders,
                    refunds,
                    metadata,
                    createdAt,
                    updatedAt,
                    closedAt,
                    state,
                    version,
                    totalMoney,
                    totalTaxMoney,
                    totalDiscountMoney,
                    totalTipMoney,
                    totalServiceChargeMoney,
                    ticketName,
                    pricingOptions,
                    rewards,
                    netAmountDueMoney,
                    additionalProperties);
        }
    }
}
