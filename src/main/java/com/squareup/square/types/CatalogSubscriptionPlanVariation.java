/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogSubscriptionPlanVariation.Builder.class)
public final class CatalogSubscriptionPlanVariation {
    private final String name;

    private final List<SubscriptionPhase> phases;

    private final Optional<String> subscriptionPlanId;

    private final Optional<Long> monthlyBillingAnchorDate;

    private final Optional<Boolean> canProrate;

    private final Optional<String> successorPlanVariationId;

    private final Map<String, Object> additionalProperties;

    private CatalogSubscriptionPlanVariation(
            String name,
            List<SubscriptionPhase> phases,
            Optional<String> subscriptionPlanId,
            Optional<Long> monthlyBillingAnchorDate,
            Optional<Boolean> canProrate,
            Optional<String> successorPlanVariationId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phases = phases;
        this.subscriptionPlanId = subscriptionPlanId;
        this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
        this.canProrate = canProrate;
        this.successorPlanVariationId = successorPlanVariationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the plan variation.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return A list containing each <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan variation.
     */
    @JsonProperty("phases")
    public List<SubscriptionPhase> getPhases() {
        return phases;
    }

    /**
     * @return The id of the subscription plan, if there is one.
     */
    @JsonIgnore
    public Optional<String> getSubscriptionPlanId() {
        if (subscriptionPlanId == null) {
            return Optional.empty();
        }
        return subscriptionPlanId;
    }

    /**
     * @return The day of the month the billing period starts.
     */
    @JsonIgnore
    public Optional<Long> getMonthlyBillingAnchorDate() {
        if (monthlyBillingAnchorDate == null) {
            return Optional.empty();
        }
        return monthlyBillingAnchorDate;
    }

    /**
     * @return Whether bills for this plan variation can be split for proration.
     */
    @JsonIgnore
    public Optional<Boolean> getCanProrate() {
        if (canProrate == null) {
            return Optional.empty();
        }
        return canProrate;
    }

    /**
     * @return The ID of a &quot;successor&quot; plan variation to this one. If the field is set, and this object is disabled at all
     * locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
     * its stead.
     */
    @JsonIgnore
    public Optional<String> getSuccessorPlanVariationId() {
        if (successorPlanVariationId == null) {
            return Optional.empty();
        }
        return successorPlanVariationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("subscription_plan_id")
    private Optional<String> _getSubscriptionPlanId() {
        return subscriptionPlanId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("monthly_billing_anchor_date")
    private Optional<Long> _getMonthlyBillingAnchorDate() {
        return monthlyBillingAnchorDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("can_prorate")
    private Optional<Boolean> _getCanProrate() {
        return canProrate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("successor_plan_variation_id")
    private Optional<String> _getSuccessorPlanVariationId() {
        return successorPlanVariationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogSubscriptionPlanVariation && equalTo((CatalogSubscriptionPlanVariation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogSubscriptionPlanVariation other) {
        return name.equals(other.name)
                && phases.equals(other.phases)
                && subscriptionPlanId.equals(other.subscriptionPlanId)
                && monthlyBillingAnchorDate.equals(other.monthlyBillingAnchorDate)
                && canProrate.equals(other.canProrate)
                && successorPlanVariationId.equals(other.successorPlanVariationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.phases,
                this.subscriptionPlanId,
                this.monthlyBillingAnchorDate,
                this.canProrate,
                this.successorPlanVariationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The name of the plan variation.</p>
         */
        _FinalStage name(@NotNull String name);

        Builder from(CatalogSubscriptionPlanVariation other);
    }

    public interface _FinalStage {
        CatalogSubscriptionPlanVariation build();

        /**
         * <p>A list containing each <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan variation.</p>
         */
        _FinalStage phases(List<SubscriptionPhase> phases);

        _FinalStage addPhases(SubscriptionPhase phases);

        _FinalStage addAllPhases(List<SubscriptionPhase> phases);

        /**
         * <p>The id of the subscription plan, if there is one.</p>
         */
        _FinalStage subscriptionPlanId(Optional<String> subscriptionPlanId);

        _FinalStage subscriptionPlanId(String subscriptionPlanId);

        _FinalStage subscriptionPlanId(Nullable<String> subscriptionPlanId);

        /**
         * <p>The day of the month the billing period starts.</p>
         */
        _FinalStage monthlyBillingAnchorDate(Optional<Long> monthlyBillingAnchorDate);

        _FinalStage monthlyBillingAnchorDate(Long monthlyBillingAnchorDate);

        _FinalStage monthlyBillingAnchorDate(Nullable<Long> monthlyBillingAnchorDate);

        /**
         * <p>Whether bills for this plan variation can be split for proration.</p>
         */
        _FinalStage canProrate(Optional<Boolean> canProrate);

        _FinalStage canProrate(Boolean canProrate);

        _FinalStage canProrate(Nullable<Boolean> canProrate);

        /**
         * <p>The ID of a &quot;successor&quot; plan variation to this one. If the field is set, and this object is disabled at all
         * locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
         * its stead.</p>
         */
        _FinalStage successorPlanVariationId(Optional<String> successorPlanVariationId);

        _FinalStage successorPlanVariationId(String successorPlanVariationId);

        _FinalStage successorPlanVariationId(Nullable<String> successorPlanVariationId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<String> successorPlanVariationId = Optional.empty();

        private Optional<Boolean> canProrate = Optional.empty();

        private Optional<Long> monthlyBillingAnchorDate = Optional.empty();

        private Optional<String> subscriptionPlanId = Optional.empty();

        private List<SubscriptionPhase> phases = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogSubscriptionPlanVariation other) {
            name(other.getName());
            phases(other.getPhases());
            subscriptionPlanId(other.getSubscriptionPlanId());
            monthlyBillingAnchorDate(other.getMonthlyBillingAnchorDate());
            canProrate(other.getCanProrate());
            successorPlanVariationId(other.getSuccessorPlanVariationId());
            return this;
        }

        /**
         * <p>The name of the plan variation.</p>
         * <p>The name of the plan variation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The ID of a &quot;successor&quot; plan variation to this one. If the field is set, and this object is disabled at all
         * locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
         * its stead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage successorPlanVariationId(Nullable<String> successorPlanVariationId) {
            if (successorPlanVariationId.isNull()) {
                this.successorPlanVariationId = null;
            } else if (successorPlanVariationId.isEmpty()) {
                this.successorPlanVariationId = Optional.empty();
            } else {
                this.successorPlanVariationId = Optional.of(successorPlanVariationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of a &quot;successor&quot; plan variation to this one. If the field is set, and this object is disabled at all
         * locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
         * its stead.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage successorPlanVariationId(String successorPlanVariationId) {
            this.successorPlanVariationId = Optional.ofNullable(successorPlanVariationId);
            return this;
        }

        /**
         * <p>The ID of a &quot;successor&quot; plan variation to this one. If the field is set, and this object is disabled at all
         * locations, it indicates that this variation is deprecated and the object identified by the successor ID be used in
         * its stead.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "successor_plan_variation_id", nulls = Nulls.SKIP)
        public _FinalStage successorPlanVariationId(Optional<String> successorPlanVariationId) {
            this.successorPlanVariationId = successorPlanVariationId;
            return this;
        }

        /**
         * <p>Whether bills for this plan variation can be split for proration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage canProrate(Nullable<Boolean> canProrate) {
            if (canProrate.isNull()) {
                this.canProrate = null;
            } else if (canProrate.isEmpty()) {
                this.canProrate = Optional.empty();
            } else {
                this.canProrate = Optional.of(canProrate.get());
            }
            return this;
        }

        /**
         * <p>Whether bills for this plan variation can be split for proration.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage canProrate(Boolean canProrate) {
            this.canProrate = Optional.ofNullable(canProrate);
            return this;
        }

        /**
         * <p>Whether bills for this plan variation can be split for proration.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "can_prorate", nulls = Nulls.SKIP)
        public _FinalStage canProrate(Optional<Boolean> canProrate) {
            this.canProrate = canProrate;
            return this;
        }

        /**
         * <p>The day of the month the billing period starts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monthlyBillingAnchorDate(Nullable<Long> monthlyBillingAnchorDate) {
            if (monthlyBillingAnchorDate.isNull()) {
                this.monthlyBillingAnchorDate = null;
            } else if (monthlyBillingAnchorDate.isEmpty()) {
                this.monthlyBillingAnchorDate = Optional.empty();
            } else {
                this.monthlyBillingAnchorDate = Optional.of(monthlyBillingAnchorDate.get());
            }
            return this;
        }

        /**
         * <p>The day of the month the billing period starts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monthlyBillingAnchorDate(Long monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = Optional.ofNullable(monthlyBillingAnchorDate);
            return this;
        }

        /**
         * <p>The day of the month the billing period starts.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "monthly_billing_anchor_date", nulls = Nulls.SKIP)
        public _FinalStage monthlyBillingAnchorDate(Optional<Long> monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
            return this;
        }

        /**
         * <p>The id of the subscription plan, if there is one.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionPlanId(Nullable<String> subscriptionPlanId) {
            if (subscriptionPlanId.isNull()) {
                this.subscriptionPlanId = null;
            } else if (subscriptionPlanId.isEmpty()) {
                this.subscriptionPlanId = Optional.empty();
            } else {
                this.subscriptionPlanId = Optional.of(subscriptionPlanId.get());
            }
            return this;
        }

        /**
         * <p>The id of the subscription plan, if there is one.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionPlanId(String subscriptionPlanId) {
            this.subscriptionPlanId = Optional.ofNullable(subscriptionPlanId);
            return this;
        }

        /**
         * <p>The id of the subscription plan, if there is one.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "subscription_plan_id", nulls = Nulls.SKIP)
        public _FinalStage subscriptionPlanId(Optional<String> subscriptionPlanId) {
            this.subscriptionPlanId = subscriptionPlanId;
            return this;
        }

        /**
         * <p>A list containing each <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan variation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllPhases(List<SubscriptionPhase> phases) {
            if (phases != null) {
                this.phases.addAll(phases);
            }
            return this;
        }

        /**
         * <p>A list containing each <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan variation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addPhases(SubscriptionPhase phases) {
            this.phases.add(phases);
            return this;
        }

        /**
         * <p>A list containing each <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan variation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phases", nulls = Nulls.SKIP)
        public _FinalStage phases(List<SubscriptionPhase> phases) {
            this.phases.clear();
            this.phases.addAll(phases);
            return this;
        }

        @java.lang.Override
        public CatalogSubscriptionPlanVariation build() {
            return new CatalogSubscriptionPlanVariation(
                    name,
                    phases,
                    subscriptionPlanId,
                    monthlyBillingAnchorDate,
                    canProrate,
                    successorPlanVariationId,
                    additionalProperties);
        }
    }
}
