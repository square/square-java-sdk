/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WebhookSubscription.Builder.class)
public final class WebhookSubscription {
    private final Optional<String> id;

    private final Optional<String> name;

    private final Optional<Boolean> enabled;

    private final Optional<List<String>> eventTypes;

    private final Optional<String> notificationUrl;

    private final Optional<String> apiVersion;

    private final Optional<String> signatureKey;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private WebhookSubscription(
            Optional<String> id,
            Optional<String> name,
            Optional<Boolean> enabled,
            Optional<List<String>> eventTypes,
            Optional<String> notificationUrl,
            Optional<String> apiVersion,
            Optional<String> signatureKey,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.enabled = enabled;
        this.eventTypes = eventTypes;
        this.notificationUrl = notificationUrl;
        this.apiVersion = apiVersion;
        this.signatureKey = signatureKey;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A Square-generated unique ID for the subscription.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The name of this subscription.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Indicates whether the subscription is enabled (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getEnabled() {
        if (enabled == null) {
            return Optional.empty();
        }
        return enabled;
    }

    /**
     * @return The event types associated with this subscription.
     */
    @JsonIgnore
    public Optional<List<String>> getEventTypes() {
        if (eventTypes == null) {
            return Optional.empty();
        }
        return eventTypes;
    }

    /**
     * @return The URL to which webhooks are sent.
     */
    @JsonIgnore
    public Optional<String> getNotificationUrl() {
        if (notificationUrl == null) {
            return Optional.empty();
        }
        return notificationUrl;
    }

    /**
     * @return The API version of the subscription.
     * This field is optional for <code>CreateWebhookSubscription</code>.
     * The value defaults to the API version used by the application.
     */
    @JsonIgnore
    public Optional<String> getApiVersion() {
        if (apiVersion == null) {
            return Optional.empty();
        }
        return apiVersion;
    }

    /**
     * @return The Square-generated signature key used to validate the origin of the webhook event.
     */
    @JsonProperty("signature_key")
    public Optional<String> getSignatureKey() {
        return signatureKey;
    }

    /**
     * @return The timestamp of when the subscription was created, in RFC 3339 format. For example, &quot;2016-09-04T23:59:33.123Z&quot;.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the subscription was last updated, in RFC 3339 format.
     * For example, &quot;2016-09-04T23:59:33.123Z&quot;.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enabled")
    private Optional<Boolean> _getEnabled() {
        return enabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("event_types")
    private Optional<List<String>> _getEventTypes() {
        return eventTypes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("notification_url")
    private Optional<String> _getNotificationUrl() {
        return notificationUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("api_version")
    private Optional<String> _getApiVersion() {
        return apiVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookSubscription && equalTo((WebhookSubscription) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhookSubscription other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && enabled.equals(other.enabled)
                && eventTypes.equals(other.eventTypes)
                && notificationUrl.equals(other.notificationUrl)
                && apiVersion.equals(other.apiVersion)
                && signatureKey.equals(other.signatureKey)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.enabled,
                this.eventTypes,
                this.notificationUrl,
                this.apiVersion,
                this.signatureKey,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<List<String>> eventTypes = Optional.empty();

        private Optional<String> notificationUrl = Optional.empty();

        private Optional<String> apiVersion = Optional.empty();

        private Optional<String> signatureKey = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WebhookSubscription other) {
            id(other.getId());
            name(other.getName());
            enabled(other.getEnabled());
            eventTypes(other.getEventTypes());
            notificationUrl(other.getNotificationUrl());
            apiVersion(other.getApiVersion());
            signatureKey(other.getSignatureKey());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Nullable<Boolean> enabled) {
            if (enabled.isNull()) {
                this.enabled = null;
            } else if (enabled.isEmpty()) {
                this.enabled = Optional.empty();
            } else {
                this.enabled = Optional.of(enabled.get());
            }
            return this;
        }

        @JsonSetter(value = "event_types", nulls = Nulls.SKIP)
        public Builder eventTypes(Optional<List<String>> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(List<String> eventTypes) {
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        public Builder eventTypes(Nullable<List<String>> eventTypes) {
            if (eventTypes.isNull()) {
                this.eventTypes = null;
            } else if (eventTypes.isEmpty()) {
                this.eventTypes = Optional.empty();
            } else {
                this.eventTypes = Optional.of(eventTypes.get());
            }
            return this;
        }

        @JsonSetter(value = "notification_url", nulls = Nulls.SKIP)
        public Builder notificationUrl(Optional<String> notificationUrl) {
            this.notificationUrl = notificationUrl;
            return this;
        }

        public Builder notificationUrl(String notificationUrl) {
            this.notificationUrl = Optional.ofNullable(notificationUrl);
            return this;
        }

        public Builder notificationUrl(Nullable<String> notificationUrl) {
            if (notificationUrl.isNull()) {
                this.notificationUrl = null;
            } else if (notificationUrl.isEmpty()) {
                this.notificationUrl = Optional.empty();
            } else {
                this.notificationUrl = Optional.of(notificationUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "api_version", nulls = Nulls.SKIP)
        public Builder apiVersion(Optional<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Optional.ofNullable(apiVersion);
            return this;
        }

        public Builder apiVersion(Nullable<String> apiVersion) {
            if (apiVersion.isNull()) {
                this.apiVersion = null;
            } else if (apiVersion.isEmpty()) {
                this.apiVersion = Optional.empty();
            } else {
                this.apiVersion = Optional.of(apiVersion.get());
            }
            return this;
        }

        @JsonSetter(value = "signature_key", nulls = Nulls.SKIP)
        public Builder signatureKey(Optional<String> signatureKey) {
            this.signatureKey = signatureKey;
            return this;
        }

        public Builder signatureKey(String signatureKey) {
            this.signatureKey = Optional.ofNullable(signatureKey);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public WebhookSubscription build() {
            return new WebhookSubscription(
                    id,
                    name,
                    enabled,
                    eventTypes,
                    notificationUrl,
                    apiVersion,
                    signatureKey,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
