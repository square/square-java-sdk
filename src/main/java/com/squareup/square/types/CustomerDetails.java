/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerDetails.Builder.class)
public final class CustomerDetails {
    private final Optional<Boolean> customerInitiated;

    private final Optional<Boolean> sellerKeyedIn;

    private final Map<String, Object> additionalProperties;

    private CustomerDetails(
            Optional<Boolean> customerInitiated,
            Optional<Boolean> sellerKeyedIn,
            Map<String, Object> additionalProperties) {
        this.customerInitiated = customerInitiated;
        this.sellerKeyedIn = sellerKeyedIn;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the customer initiated the payment.
     */
    @JsonIgnore
    public Optional<Boolean> getCustomerInitiated() {
        if (customerInitiated == null) {
            return Optional.empty();
        }
        return customerInitiated;
    }

    /**
     * @return Indicates that the seller keyed in payment details on behalf of the customer.
     * This is used to flag a payment as Mail Order / Telephone Order (MOTO).
     */
    @JsonIgnore
    public Optional<Boolean> getSellerKeyedIn() {
        if (sellerKeyedIn == null) {
            return Optional.empty();
        }
        return sellerKeyedIn;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_initiated")
    private Optional<Boolean> _getCustomerInitiated() {
        return customerInitiated;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("seller_keyed_in")
    private Optional<Boolean> _getSellerKeyedIn() {
        return sellerKeyedIn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerDetails && equalTo((CustomerDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerDetails other) {
        return customerInitiated.equals(other.customerInitiated) && sellerKeyedIn.equals(other.sellerKeyedIn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customerInitiated, this.sellerKeyedIn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> customerInitiated = Optional.empty();

        private Optional<Boolean> sellerKeyedIn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerDetails other) {
            customerInitiated(other.getCustomerInitiated());
            sellerKeyedIn(other.getSellerKeyedIn());
            return this;
        }

        @JsonSetter(value = "customer_initiated", nulls = Nulls.SKIP)
        public Builder customerInitiated(Optional<Boolean> customerInitiated) {
            this.customerInitiated = customerInitiated;
            return this;
        }

        public Builder customerInitiated(Boolean customerInitiated) {
            this.customerInitiated = Optional.ofNullable(customerInitiated);
            return this;
        }

        public Builder customerInitiated(Nullable<Boolean> customerInitiated) {
            if (customerInitiated.isNull()) {
                this.customerInitiated = null;
            } else if (customerInitiated.isEmpty()) {
                this.customerInitiated = Optional.empty();
            } else {
                this.customerInitiated = Optional.of(customerInitiated.get());
            }
            return this;
        }

        @JsonSetter(value = "seller_keyed_in", nulls = Nulls.SKIP)
        public Builder sellerKeyedIn(Optional<Boolean> sellerKeyedIn) {
            this.sellerKeyedIn = sellerKeyedIn;
            return this;
        }

        public Builder sellerKeyedIn(Boolean sellerKeyedIn) {
            this.sellerKeyedIn = Optional.ofNullable(sellerKeyedIn);
            return this;
        }

        public Builder sellerKeyedIn(Nullable<Boolean> sellerKeyedIn) {
            if (sellerKeyedIn.isNull()) {
                this.sellerKeyedIn = null;
            } else if (sellerKeyedIn.isEmpty()) {
                this.sellerKeyedIn = Optional.empty();
            } else {
                this.sellerKeyedIn = Optional.of(sellerKeyedIn.get());
            }
            return this;
        }

        public CustomerDetails build() {
            return new CustomerDetails(customerInitiated, sellerKeyedIn, additionalProperties);
        }
    }
}
