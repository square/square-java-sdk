/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CompletePaymentRequest.Builder.class)
public final class CompletePaymentRequest {
    private final String paymentId;

    private final Optional<String> versionToken;

    private final Map<String, Object> additionalProperties;

    private CompletePaymentRequest(
            String paymentId, Optional<String> versionToken, Map<String, Object> additionalProperties) {
        this.paymentId = paymentId;
        this.versionToken = versionToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID identifying the payment to be completed.
     */
    @JsonProperty("payment_id")
    public String getPaymentId() {
        return paymentId;
    }

    /**
     * @return Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
     * version that the caller expects. If the server has a different version of the Payment,
     * the update fails and a response with a VERSION_MISMATCH error is returned.
     */
    @JsonIgnore
    public Optional<String> getVersionToken() {
        if (versionToken == null) {
            return Optional.empty();
        }
        return versionToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("version_token")
    private Optional<String> _getVersionToken() {
        return versionToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompletePaymentRequest && equalTo((CompletePaymentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompletePaymentRequest other) {
        return paymentId.equals(other.paymentId) && versionToken.equals(other.versionToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentId, this.versionToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaymentIdStage builder() {
        return new Builder();
    }

    public interface PaymentIdStage {
        _FinalStage paymentId(@NotNull String paymentId);

        Builder from(CompletePaymentRequest other);
    }

    public interface _FinalStage {
        CompletePaymentRequest build();

        _FinalStage versionToken(Optional<String> versionToken);

        _FinalStage versionToken(String versionToken);

        _FinalStage versionToken(Nullable<String> versionToken);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PaymentIdStage, _FinalStage {
        private String paymentId;

        private Optional<String> versionToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CompletePaymentRequest other) {
            paymentId(other.getPaymentId());
            versionToken(other.getVersionToken());
            return this;
        }

        /**
         * <p>The unique ID identifying the payment to be completed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payment_id")
        public _FinalStage paymentId(@NotNull String paymentId) {
            this.paymentId = Objects.requireNonNull(paymentId, "paymentId must not be null");
            return this;
        }

        /**
         * <p>Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
         * version that the caller expects. If the server has a different version of the Payment,
         * the update fails and a response with a VERSION_MISMATCH error is returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage versionToken(Nullable<String> versionToken) {
            if (versionToken.isNull()) {
                this.versionToken = null;
            } else if (versionToken.isEmpty()) {
                this.versionToken = Optional.empty();
            } else {
                this.versionToken = Optional.of(versionToken.get());
            }
            return this;
        }

        /**
         * <p>Used for optimistic concurrency. This opaque token identifies the current <code>Payment</code>
         * version that the caller expects. If the server has a different version of the Payment,
         * the update fails and a response with a VERSION_MISMATCH error is returned.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage versionToken(String versionToken) {
            this.versionToken = Optional.ofNullable(versionToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version_token", nulls = Nulls.SKIP)
        public _FinalStage versionToken(Optional<String> versionToken) {
            this.versionToken = versionToken;
            return this;
        }

        @java.lang.Override
        public CompletePaymentRequest build() {
            return new CompletePaymentRequest(paymentId, versionToken, additionalProperties);
        }
    }
}
