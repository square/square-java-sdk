/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayoutFee.Builder.class)
public final class PayoutFee {
    private final Optional<Money> amountMoney;

    private final Optional<String> effectiveAt;

    private final Optional<PayoutFeeType> type;

    private final Map<String, Object> additionalProperties;

    private PayoutFee(
            Optional<Money> amountMoney,
            Optional<String> effectiveAt,
            Optional<PayoutFeeType> type,
            Map<String, Object> additionalProperties) {
        this.amountMoney = amountMoney;
        this.effectiveAt = effectiveAt;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The money amount of the payout fee.
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The timestamp of when the fee takes effect, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getEffectiveAt() {
        if (effectiveAt == null) {
            return Optional.empty();
        }
        return effectiveAt;
    }

    /**
     * @return The type of fee assessed as part of the payout.
     * See <a href="#type-payoutfeetype">PayoutFeeType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<PayoutFeeType> getType() {
        return type;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("effective_at")
    private Optional<String> _getEffectiveAt() {
        return effectiveAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayoutFee && equalTo((PayoutFee) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayoutFee other) {
        return amountMoney.equals(other.amountMoney)
                && effectiveAt.equals(other.effectiveAt)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amountMoney, this.effectiveAt, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Money> amountMoney = Optional.empty();

        private Optional<String> effectiveAt = Optional.empty();

        private Optional<PayoutFeeType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayoutFee other) {
            amountMoney(other.getAmountMoney());
            effectiveAt(other.getEffectiveAt());
            type(other.getType());
            return this;
        }

        /**
         * <p>The money amount of the payout fee.</p>
         */
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The timestamp of when the fee takes effect, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "effective_at", nulls = Nulls.SKIP)
        public Builder effectiveAt(Optional<String> effectiveAt) {
            this.effectiveAt = effectiveAt;
            return this;
        }

        public Builder effectiveAt(String effectiveAt) {
            this.effectiveAt = Optional.ofNullable(effectiveAt);
            return this;
        }

        public Builder effectiveAt(Nullable<String> effectiveAt) {
            if (effectiveAt.isNull()) {
                this.effectiveAt = null;
            } else if (effectiveAt.isEmpty()) {
                this.effectiveAt = Optional.empty();
            } else {
                this.effectiveAt = Optional.of(effectiveAt.get());
            }
            return this;
        }

        /**
         * <p>The type of fee assessed as part of the payout.
         * See <a href="#type-payoutfeetype">PayoutFeeType</a> for possible values</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<PayoutFeeType> type) {
            this.type = type;
            return this;
        }

        public Builder type(PayoutFeeType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public PayoutFee build() {
            return new PayoutFee(amountMoney, effectiveAt, type, additionalProperties);
        }
    }
}
