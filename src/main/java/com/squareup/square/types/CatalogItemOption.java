/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogItemOption.Builder.class)
public final class CatalogItemOption {
    private final Optional<String> name;

    private final Optional<String> displayName;

    private final Optional<String> description;

    private final Optional<Boolean> showColors;

    private final Optional<List<CatalogObject>> values;

    private final Map<String, Object> additionalProperties;

    private CatalogItemOption(
            Optional<String> name,
            Optional<String> displayName,
            Optional<String> description,
            Optional<Boolean> showColors,
            Optional<List<CatalogObject>> values,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.displayName = displayName;
        this.description = description;
        this.showColors = showColors;
        this.values = values;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The item option's display name for the seller. Must be unique across
     * all item options. This is a searchable attribute for use in applicable query filters.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The item option's display name for the customer. This is a searchable attribute for use in applicable query filters.
     */
    @JsonIgnore
    public Optional<String> getDisplayName() {
        if (displayName == null) {
            return Optional.empty();
        }
        return displayName;
    }

    /**
     * @return The item option's human-readable description. Displayed in the Square
     * Point of Sale app for the seller and in the Online Store or on receipts for
     * the buyer. This is a searchable attribute for use in applicable query filters.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return If true, display colors for entries in <code>values</code> when present.
     */
    @JsonIgnore
    public Optional<Boolean> getShowColors() {
        if (showColors == null) {
            return Optional.empty();
        }
        return showColors;
    }

    /**
     * @return A list of CatalogObjects containing the
     * <code>CatalogItemOptionValue</code>s for this item.
     */
    @JsonIgnore
    public Optional<List<CatalogObject>> getValues() {
        if (values == null) {
            return Optional.empty();
        }
        return values;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("display_name")
    private Optional<String> _getDisplayName() {
        return displayName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("show_colors")
    private Optional<Boolean> _getShowColors() {
        return showColors;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("values")
    private Optional<List<CatalogObject>> _getValues() {
        return values;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogItemOption && equalTo((CatalogItemOption) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogItemOption other) {
        return name.equals(other.name)
                && displayName.equals(other.displayName)
                && description.equals(other.description)
                && showColors.equals(other.showColors)
                && values.equals(other.values);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.displayName, this.description, this.showColors, this.values);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> showColors = Optional.empty();

        private Optional<List<CatalogObject>> values = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogItemOption other) {
            name(other.getName());
            displayName(other.getDisplayName());
            description(other.getDescription());
            showColors(other.getShowColors());
            values(other.getValues());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Nullable<String> displayName) {
            if (displayName.isNull()) {
                this.displayName = null;
            } else if (displayName.isEmpty()) {
                this.displayName = Optional.empty();
            } else {
                this.displayName = Optional.of(displayName.get());
            }
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        @JsonSetter(value = "show_colors", nulls = Nulls.SKIP)
        public Builder showColors(Optional<Boolean> showColors) {
            this.showColors = showColors;
            return this;
        }

        public Builder showColors(Boolean showColors) {
            this.showColors = Optional.ofNullable(showColors);
            return this;
        }

        public Builder showColors(Nullable<Boolean> showColors) {
            if (showColors.isNull()) {
                this.showColors = null;
            } else if (showColors.isEmpty()) {
                this.showColors = Optional.empty();
            } else {
                this.showColors = Optional.of(showColors.get());
            }
            return this;
        }

        @JsonSetter(value = "values", nulls = Nulls.SKIP)
        public Builder values(Optional<List<CatalogObject>> values) {
            this.values = values;
            return this;
        }

        public Builder values(List<CatalogObject> values) {
            this.values = Optional.ofNullable(values);
            return this;
        }

        public Builder values(Nullable<List<CatalogObject>> values) {
            if (values.isNull()) {
                this.values = null;
            } else if (values.isEmpty()) {
                this.values = Optional.empty();
            } else {
                this.values = Optional.of(values.get());
            }
            return this;
        }

        public CatalogItemOption build() {
            return new CatalogItemOption(name, displayName, description, showColors, values, additionalProperties);
        }
    }
}
