/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class ComponentComponentType {
    public static final ComponentComponentType APPLICATION =
            new ComponentComponentType(Value.APPLICATION, "APPLICATION");

    public static final ComponentComponentType WIFI = new ComponentComponentType(Value.WIFI, "WIFI");

    public static final ComponentComponentType CARD_READER =
            new ComponentComponentType(Value.CARD_READER, "CARD_READER");

    public static final ComponentComponentType BATTERY = new ComponentComponentType(Value.BATTERY, "BATTERY");

    public static final ComponentComponentType ETHERNET = new ComponentComponentType(Value.ETHERNET, "ETHERNET");

    public static final ComponentComponentType PRINTER = new ComponentComponentType(Value.PRINTER, "PRINTER");

    private final Value value;

    private final String string;

    ComponentComponentType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof ComponentComponentType
                        && this.string.equals(((ComponentComponentType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case APPLICATION:
                return visitor.visitApplication();
            case WIFI:
                return visitor.visitWifi();
            case CARD_READER:
                return visitor.visitCardReader();
            case BATTERY:
                return visitor.visitBattery();
            case ETHERNET:
                return visitor.visitEthernet();
            case PRINTER:
                return visitor.visitPrinter();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static ComponentComponentType valueOf(String value) {
        switch (value) {
            case "APPLICATION":
                return APPLICATION;
            case "WIFI":
                return WIFI;
            case "CARD_READER":
                return CARD_READER;
            case "BATTERY":
                return BATTERY;
            case "ETHERNET":
                return ETHERNET;
            case "PRINTER":
                return PRINTER;
            default:
                return new ComponentComponentType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        APPLICATION,

        CARD_READER,

        BATTERY,

        WIFI,

        ETHERNET,

        PRINTER,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitApplication();

        T visitCardReader();

        T visitBattery();

        T visitWifi();

        T visitEthernet();

        T visitPrinter();

        T visitUnknown(String unknownType);
    }
}
