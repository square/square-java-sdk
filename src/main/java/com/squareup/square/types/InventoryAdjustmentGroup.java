/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InventoryAdjustmentGroup.Builder.class)
public final class InventoryAdjustmentGroup {
    private final Optional<String> id;

    private final Optional<String> rootAdjustmentId;

    private final Optional<InventoryState> fromState;

    private final Optional<InventoryState> toState;

    private final Map<String, Object> additionalProperties;

    private InventoryAdjustmentGroup(
            Optional<String> id,
            Optional<String> rootAdjustmentId,
            Optional<InventoryState> fromState,
            Optional<InventoryState> toState,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.rootAdjustmentId = rootAdjustmentId;
        this.fromState = fromState;
        this.toState = toState;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID generated by Square for the
     * <code>InventoryAdjustmentGroup</code>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The inventory adjustment of the composed variation.
     */
    @JsonProperty("root_adjustment_id")
    public Optional<String> getRootAdjustmentId() {
        return rootAdjustmentId;
    }

    /**
     * @return Representative <code>from_state</code> for adjustments within the group. For example, for a group adjustment from <code>IN_STOCK</code> to <code>SOLD</code>,
     * there can be two component adjustments in the group: one from <code>IN_STOCK</code>to <code>COMPOSED</code> and the other one from <code>COMPOSED</code> to <code>SOLD</code>.
     * Here, the representative <code>from_state</code> for the <code>InventoryAdjustmentGroup</code> is <code>IN_STOCK</code>.
     * See <a href="#type-inventorystate">InventoryState</a> for possible values
     */
    @JsonProperty("from_state")
    public Optional<InventoryState> getFromState() {
        return fromState;
    }

    /**
     * @return Representative <code>to_state</code> for adjustments within group. For example, for a group adjustment from <code>IN_STOCK</code> to <code>SOLD</code>,
     * the two component adjustments in the group can be from <code>IN_STOCK</code> to <code>COMPOSED</code> and from <code>COMPOSED</code> to <code>SOLD</code>.
     * Here, the representative <code>to_state</code> of the <code>InventoryAdjustmentGroup</code> is <code>SOLD</code>.
     * See <a href="#type-inventorystate">InventoryState</a> for possible values
     */
    @JsonProperty("to_state")
    public Optional<InventoryState> getToState() {
        return toState;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InventoryAdjustmentGroup && equalTo((InventoryAdjustmentGroup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InventoryAdjustmentGroup other) {
        return id.equals(other.id)
                && rootAdjustmentId.equals(other.rootAdjustmentId)
                && fromState.equals(other.fromState)
                && toState.equals(other.toState);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.rootAdjustmentId, this.fromState, this.toState);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> rootAdjustmentId = Optional.empty();

        private Optional<InventoryState> fromState = Optional.empty();

        private Optional<InventoryState> toState = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InventoryAdjustmentGroup other) {
            id(other.getId());
            rootAdjustmentId(other.getRootAdjustmentId());
            fromState(other.getFromState());
            toState(other.getToState());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "root_adjustment_id", nulls = Nulls.SKIP)
        public Builder rootAdjustmentId(Optional<String> rootAdjustmentId) {
            this.rootAdjustmentId = rootAdjustmentId;
            return this;
        }

        public Builder rootAdjustmentId(String rootAdjustmentId) {
            this.rootAdjustmentId = Optional.ofNullable(rootAdjustmentId);
            return this;
        }

        @JsonSetter(value = "from_state", nulls = Nulls.SKIP)
        public Builder fromState(Optional<InventoryState> fromState) {
            this.fromState = fromState;
            return this;
        }

        public Builder fromState(InventoryState fromState) {
            this.fromState = Optional.ofNullable(fromState);
            return this;
        }

        @JsonSetter(value = "to_state", nulls = Nulls.SKIP)
        public Builder toState(Optional<InventoryState> toState) {
            this.toState = toState;
            return this;
        }

        public Builder toState(InventoryState toState) {
            this.toState = Optional.ofNullable(toState);
            return this;
        }

        public InventoryAdjustmentGroup build() {
            return new InventoryAdjustmentGroup(id, rootAdjustmentId, fromState, toState, additionalProperties);
        }
    }
}
