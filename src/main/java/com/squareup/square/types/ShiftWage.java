/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ShiftWage.Builder.class)
public final class ShiftWage {
    private final Optional<String> title;

    private final Optional<Money> hourlyRate;

    private final Optional<String> jobId;

    private final Optional<Boolean> tipEligible;

    private final Map<String, Object> additionalProperties;

    private ShiftWage(
            Optional<String> title,
            Optional<Money> hourlyRate,
            Optional<String> jobId,
            Optional<Boolean> tipEligible,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.hourlyRate = hourlyRate;
        this.jobId = jobId;
        this.tipEligible = tipEligible;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the job performed during this shift.
     */
    @JsonIgnore
    public Optional<String> getTitle() {
        if (title == null) {
            return Optional.empty();
        }
        return title;
    }

    /**
     * @return Can be a custom-set hourly wage or the calculated effective hourly
     * wage based on the annual wage and hours worked per week.
     */
    @JsonProperty("hourly_rate")
    public Optional<Money> getHourlyRate() {
        return hourlyRate;
    }

    /**
     * @return The id of the job performed during this shift. Square
     * labor-reporting UIs might group shifts together by id.
     */
    @JsonProperty("job_id")
    public Optional<String> getJobId() {
        return jobId;
    }

    /**
     * @return Whether team members are eligible for tips when working this job.
     */
    @JsonIgnore
    public Optional<Boolean> getTipEligible() {
        if (tipEligible == null) {
            return Optional.empty();
        }
        return tipEligible;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("title")
    private Optional<String> _getTitle() {
        return title;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tip_eligible")
    private Optional<Boolean> _getTipEligible() {
        return tipEligible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ShiftWage && equalTo((ShiftWage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ShiftWage other) {
        return title.equals(other.title)
                && hourlyRate.equals(other.hourlyRate)
                && jobId.equals(other.jobId)
                && tipEligible.equals(other.tipEligible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.title, this.hourlyRate, this.jobId, this.tipEligible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> title = Optional.empty();

        private Optional<Money> hourlyRate = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<Boolean> tipEligible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ShiftWage other) {
            title(other.getTitle());
            hourlyRate(other.getHourlyRate());
            jobId(other.getJobId());
            tipEligible(other.getTipEligible());
            return this;
        }

        /**
         * <p>The name of the job performed during this shift.</p>
         */
        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Nullable<String> title) {
            if (title.isNull()) {
                this.title = null;
            } else if (title.isEmpty()) {
                this.title = Optional.empty();
            } else {
                this.title = Optional.of(title.get());
            }
            return this;
        }

        /**
         * <p>Can be a custom-set hourly wage or the calculated effective hourly
         * wage based on the annual wage and hours worked per week.</p>
         */
        @JsonSetter(value = "hourly_rate", nulls = Nulls.SKIP)
        public Builder hourlyRate(Optional<Money> hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }

        public Builder hourlyRate(Money hourlyRate) {
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        /**
         * <p>The id of the job performed during this shift. Square
         * labor-reporting UIs might group shifts together by id.</p>
         */
        @JsonSetter(value = "job_id", nulls = Nulls.SKIP)
        public Builder jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        /**
         * <p>Whether team members are eligible for tips when working this job.</p>
         */
        @JsonSetter(value = "tip_eligible", nulls = Nulls.SKIP)
        public Builder tipEligible(Optional<Boolean> tipEligible) {
            this.tipEligible = tipEligible;
            return this;
        }

        public Builder tipEligible(Boolean tipEligible) {
            this.tipEligible = Optional.ofNullable(tipEligible);
            return this;
        }

        public Builder tipEligible(Nullable<Boolean> tipEligible) {
            if (tipEligible.isNull()) {
                this.tipEligible = null;
            } else if (tipEligible.isEmpty()) {
                this.tipEligible = Optional.empty();
            } else {
                this.tipEligible = Optional.of(tipEligible.get());
            }
            return this;
        }

        public ShiftWage build() {
            return new ShiftWage(title, hourlyRate, jobId, tipEligible, additionalProperties);
        }
    }
}
