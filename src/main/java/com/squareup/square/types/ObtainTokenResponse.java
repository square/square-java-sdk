/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ObtainTokenResponse.Builder.class)
public final class ObtainTokenResponse {
    private final Optional<String> accessToken;

    private final Optional<String> tokenType;

    private final Optional<String> expiresAt;

    private final Optional<String> merchantId;

    private final Optional<String> subscriptionId;

    private final Optional<String> planId;

    private final Optional<String> idToken;

    private final Optional<String> refreshToken;

    private final Optional<Boolean> shortLived;

    private final Optional<List<Error>> errors;

    private final Optional<String> refreshTokenExpiresAt;

    private final Map<String, Object> additionalProperties;

    private ObtainTokenResponse(
            Optional<String> accessToken,
            Optional<String> tokenType,
            Optional<String> expiresAt,
            Optional<String> merchantId,
            Optional<String> subscriptionId,
            Optional<String> planId,
            Optional<String> idToken,
            Optional<String> refreshToken,
            Optional<Boolean> shortLived,
            Optional<List<Error>> errors,
            Optional<String> refreshTokenExpiresAt,
            Map<String, Object> additionalProperties) {
        this.accessToken = accessToken;
        this.tokenType = tokenType;
        this.expiresAt = expiresAt;
        this.merchantId = merchantId;
        this.subscriptionId = subscriptionId;
        this.planId = planId;
        this.idToken = idToken;
        this.refreshToken = refreshToken;
        this.shortLived = shortLived;
        this.errors = errors;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An OAuth access token used to authorize Square API requests on behalf of the seller.
     * Include this token as a bearer token in the <code>Authorization</code> header of your API requests.
     * <p>OAuth access tokens expire in 30 days (except <code>short_lived</code> access tokens). You should call
     * <code>ObtainToken</code> and provide the returned <code>refresh_token</code> to get a new access token well before
     * the current one expires. For more information, see <a href="https://developer.squareup.com/docs/oauth-api/walkthrough">OAuth API: Walkthrough</a>.</p>
     */
    @JsonProperty("access_token")
    public Optional<String> getAccessToken() {
        return accessToken;
    }

    /**
     * @return The type of access token. This value is always <code>bearer</code>.
     */
    @JsonProperty("token_type")
    public Optional<String> getTokenType() {
        return tokenType;
    }

    /**
     * @return The timestamp of when the <code>access_token</code> expires, in <a href="http://www.iso.org/iso/home/standards/iso8601.htm">ISO 8601</a> format.
     */
    @JsonProperty("expires_at")
    public Optional<String> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return The ID of the authorizing <a href="entity:Merchant">merchant</a> (seller), which represents a business.
     */
    @JsonProperty("merchant_id")
    public Optional<String> getMerchantId() {
        return merchantId;
    }

    /**
     * @return <strong>LEGACY</strong> The ID of merchant's subscription.
     * The ID is only present if the merchant signed up for a subscription plan during authorization.
     */
    @JsonProperty("subscription_id")
    public Optional<String> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return <strong>LEGACY</strong> The ID of the subscription plan the merchant signed
     * up for. The ID is only present if the merchant signed up for a subscription plan during
     * authorization.
     */
    @JsonProperty("plan_id")
    public Optional<String> getPlanId() {
        return planId;
    }

    /**
     * @return The OpenID token that belongs to this person. This token is only present if the
     * <code>OPENID</code> scope is included in the authorization request.
     * <p>Deprecated at version 2021-09-15. Square doesn't support OpenID or other single sign-on (SSO)
     * protocols on top of OAuth.</p>
     */
    @JsonProperty("id_token")
    public Optional<String> getIdToken() {
        return idToken;
    }

    /**
     * @return A refresh token that can be used in an <code>ObtainToken</code> request to generate a new access token.
     * <p>With the code flow:</p>
     * <ul>
     * <li>For the <code>authorization_code</code> grant type, the refresh token is multi-use and never expires.</li>
     * <li>For the <code>refresh_token</code> grant type, the response returns the same refresh token.</li>
     * </ul>
     * <p>With the PKCE flow:</p>
     * <ul>
     * <li>For the <code>authorization_code</code> grant type, the refresh token is single-use and expires in 90 days.</li>
     * <li>For the <code>refresh_token</code> grant type, the refresh token is a new single-use refresh token that expires in 90 days.</li>
     * </ul>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/oauth-api/refresh-revoke-limit-scope">Refresh, Revoke, and Limit the Scope of OAuth Tokens</a>.</p>
     */
    @JsonProperty("refresh_token")
    public Optional<String> getRefreshToken() {
        return refreshToken;
    }

    /**
     * @return Indicates whether the access_token is short lived. If <code>true</code>, the access token expires
     * in 24 hours. If <code>false</code>, the access token expires in 30 days.
     */
    @JsonProperty("short_lived")
    public Optional<Boolean> getShortLived() {
        return shortLived;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The timestamp of when the <code>refresh_token</code> expires, in <a href="http://www.iso.org/iso/home/standards/iso8601.htm">ISO 8601</a>
     * format.
     * <p>This field is only returned for the PKCE flow.</p>
     */
    @JsonProperty("refresh_token_expires_at")
    public Optional<String> getRefreshTokenExpiresAt() {
        return refreshTokenExpiresAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ObtainTokenResponse && equalTo((ObtainTokenResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ObtainTokenResponse other) {
        return accessToken.equals(other.accessToken)
                && tokenType.equals(other.tokenType)
                && expiresAt.equals(other.expiresAt)
                && merchantId.equals(other.merchantId)
                && subscriptionId.equals(other.subscriptionId)
                && planId.equals(other.planId)
                && idToken.equals(other.idToken)
                && refreshToken.equals(other.refreshToken)
                && shortLived.equals(other.shortLived)
                && errors.equals(other.errors)
                && refreshTokenExpiresAt.equals(other.refreshTokenExpiresAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accessToken,
                this.tokenType,
                this.expiresAt,
                this.merchantId,
                this.subscriptionId,
                this.planId,
                this.idToken,
                this.refreshToken,
                this.shortLived,
                this.errors,
                this.refreshTokenExpiresAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accessToken = Optional.empty();

        private Optional<String> tokenType = Optional.empty();

        private Optional<String> expiresAt = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<String> subscriptionId = Optional.empty();

        private Optional<String> planId = Optional.empty();

        private Optional<String> idToken = Optional.empty();

        private Optional<String> refreshToken = Optional.empty();

        private Optional<Boolean> shortLived = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        private Optional<String> refreshTokenExpiresAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ObtainTokenResponse other) {
            accessToken(other.getAccessToken());
            tokenType(other.getTokenType());
            expiresAt(other.getExpiresAt());
            merchantId(other.getMerchantId());
            subscriptionId(other.getSubscriptionId());
            planId(other.getPlanId());
            idToken(other.getIdToken());
            refreshToken(other.getRefreshToken());
            shortLived(other.getShortLived());
            errors(other.getErrors());
            refreshTokenExpiresAt(other.getRefreshTokenExpiresAt());
            return this;
        }

        @JsonSetter(value = "access_token", nulls = Nulls.SKIP)
        public Builder accessToken(Optional<String> accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        public Builder accessToken(String accessToken) {
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        @JsonSetter(value = "token_type", nulls = Nulls.SKIP)
        public Builder tokenType(Optional<String> tokenType) {
            this.tokenType = tokenType;
            return this;
        }

        public Builder tokenType(String tokenType) {
            this.tokenType = Optional.ofNullable(tokenType);
            return this;
        }

        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        @JsonSetter(value = "subscription_id", nulls = Nulls.SKIP)
        public Builder subscriptionId(Optional<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        @JsonSetter(value = "plan_id", nulls = Nulls.SKIP)
        public Builder planId(Optional<String> planId) {
            this.planId = planId;
            return this;
        }

        public Builder planId(String planId) {
            this.planId = Optional.ofNullable(planId);
            return this;
        }

        @JsonSetter(value = "id_token", nulls = Nulls.SKIP)
        public Builder idToken(Optional<String> idToken) {
            this.idToken = idToken;
            return this;
        }

        public Builder idToken(String idToken) {
            this.idToken = Optional.ofNullable(idToken);
            return this;
        }

        @JsonSetter(value = "refresh_token", nulls = Nulls.SKIP)
        public Builder refreshToken(Optional<String> refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        public Builder refreshToken(String refreshToken) {
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        @JsonSetter(value = "short_lived", nulls = Nulls.SKIP)
        public Builder shortLived(Optional<Boolean> shortLived) {
            this.shortLived = shortLived;
            return this;
        }

        public Builder shortLived(Boolean shortLived) {
            this.shortLived = Optional.ofNullable(shortLived);
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "refresh_token_expires_at", nulls = Nulls.SKIP)
        public Builder refreshTokenExpiresAt(Optional<String> refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        public Builder refreshTokenExpiresAt(String refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = Optional.ofNullable(refreshTokenExpiresAt);
            return this;
        }

        public ObtainTokenResponse build() {
            return new ObtainTokenResponse(
                    accessToken,
                    tokenType,
                    expiresAt,
                    merchantId,
                    subscriptionId,
                    planId,
                    idToken,
                    refreshToken,
                    shortLived,
                    errors,
                    refreshTokenExpiresAt,
                    additionalProperties);
        }
    }
}
