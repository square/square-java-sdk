/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DismissTerminalCheckoutRequest.Builder.class)
public final class DismissTerminalCheckoutRequest {
    private final String checkoutId;

    private final Map<String, Object> additionalProperties;

    private DismissTerminalCheckoutRequest(String checkoutId, Map<String, Object> additionalProperties) {
        this.checkoutId = checkoutId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique ID for the <code>TerminalCheckout</code> associated with the checkout to be dismissed.
     */
    @JsonProperty("checkout_id")
    public String getCheckoutId() {
        return checkoutId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DismissTerminalCheckoutRequest && equalTo((DismissTerminalCheckoutRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DismissTerminalCheckoutRequest other) {
        return checkoutId.equals(other.checkoutId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.checkoutId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CheckoutIdStage builder() {
        return new Builder();
    }

    public interface CheckoutIdStage {
        _FinalStage checkoutId(@NotNull String checkoutId);

        Builder from(DismissTerminalCheckoutRequest other);
    }

    public interface _FinalStage {
        DismissTerminalCheckoutRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CheckoutIdStage, _FinalStage {
        private String checkoutId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DismissTerminalCheckoutRequest other) {
            checkoutId(other.getCheckoutId());
            return this;
        }

        /**
         * <p>Unique ID for the <code>TerminalCheckout</code> associated with the checkout to be dismissed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("checkout_id")
        public _FinalStage checkoutId(@NotNull String checkoutId) {
            this.checkoutId = Objects.requireNonNull(checkoutId, "checkoutId must not be null");
            return this;
        }

        @java.lang.Override
        public DismissTerminalCheckoutRequest build() {
            return new DismissTerminalCheckoutRequest(checkoutId, additionalProperties);
        }
    }
}
