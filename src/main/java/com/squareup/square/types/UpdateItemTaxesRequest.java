/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateItemTaxesRequest.Builder.class)
public final class UpdateItemTaxesRequest {
    private final List<String> itemIds;

    private final Optional<List<String>> taxesToEnable;

    private final Optional<List<String>> taxesToDisable;

    private final Map<String, Object> additionalProperties;

    private UpdateItemTaxesRequest(
            List<String> itemIds,
            Optional<List<String>> taxesToEnable,
            Optional<List<String>> taxesToDisable,
            Map<String, Object> additionalProperties) {
        this.itemIds = itemIds;
        this.taxesToEnable = taxesToEnable;
        this.taxesToDisable = taxesToDisable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return IDs for the CatalogItems associated with the CatalogTax objects being updated.
     * No more than 1,000 IDs may be provided.
     */
    @JsonProperty("item_ids")
    public List<String> getItemIds() {
        return itemIds;
    }

    /**
     * @return IDs of the CatalogTax objects to enable.
     * At least one of <code>taxes_to_enable</code> or <code>taxes_to_disable</code> must be specified.
     */
    @JsonIgnore
    public Optional<List<String>> getTaxesToEnable() {
        if (taxesToEnable == null) {
            return Optional.empty();
        }
        return taxesToEnable;
    }

    /**
     * @return IDs of the CatalogTax objects to disable.
     * At least one of <code>taxes_to_enable</code> or <code>taxes_to_disable</code> must be specified.
     */
    @JsonIgnore
    public Optional<List<String>> getTaxesToDisable() {
        if (taxesToDisable == null) {
            return Optional.empty();
        }
        return taxesToDisable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("taxes_to_enable")
    private Optional<List<String>> _getTaxesToEnable() {
        return taxesToEnable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("taxes_to_disable")
    private Optional<List<String>> _getTaxesToDisable() {
        return taxesToDisable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateItemTaxesRequest && equalTo((UpdateItemTaxesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateItemTaxesRequest other) {
        return itemIds.equals(other.itemIds)
                && taxesToEnable.equals(other.taxesToEnable)
                && taxesToDisable.equals(other.taxesToDisable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.itemIds, this.taxesToEnable, this.taxesToDisable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> itemIds = new ArrayList<>();

        private Optional<List<String>> taxesToEnable = Optional.empty();

        private Optional<List<String>> taxesToDisable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateItemTaxesRequest other) {
            itemIds(other.getItemIds());
            taxesToEnable(other.getTaxesToEnable());
            taxesToDisable(other.getTaxesToDisable());
            return this;
        }

        @JsonSetter(value = "item_ids", nulls = Nulls.SKIP)
        public Builder itemIds(List<String> itemIds) {
            this.itemIds.clear();
            this.itemIds.addAll(itemIds);
            return this;
        }

        public Builder addItemIds(String itemIds) {
            this.itemIds.add(itemIds);
            return this;
        }

        public Builder addAllItemIds(List<String> itemIds) {
            this.itemIds.addAll(itemIds);
            return this;
        }

        @JsonSetter(value = "taxes_to_enable", nulls = Nulls.SKIP)
        public Builder taxesToEnable(Optional<List<String>> taxesToEnable) {
            this.taxesToEnable = taxesToEnable;
            return this;
        }

        public Builder taxesToEnable(List<String> taxesToEnable) {
            this.taxesToEnable = Optional.ofNullable(taxesToEnable);
            return this;
        }

        public Builder taxesToEnable(Nullable<List<String>> taxesToEnable) {
            if (taxesToEnable.isNull()) {
                this.taxesToEnable = null;
            } else if (taxesToEnable.isEmpty()) {
                this.taxesToEnable = Optional.empty();
            } else {
                this.taxesToEnable = Optional.of(taxesToEnable.get());
            }
            return this;
        }

        @JsonSetter(value = "taxes_to_disable", nulls = Nulls.SKIP)
        public Builder taxesToDisable(Optional<List<String>> taxesToDisable) {
            this.taxesToDisable = taxesToDisable;
            return this;
        }

        public Builder taxesToDisable(List<String> taxesToDisable) {
            this.taxesToDisable = Optional.ofNullable(taxesToDisable);
            return this;
        }

        public Builder taxesToDisable(Nullable<List<String>> taxesToDisable) {
            if (taxesToDisable.isNull()) {
                this.taxesToDisable = null;
            } else if (taxesToDisable.isEmpty()) {
                this.taxesToDisable = Optional.empty();
            } else {
                this.taxesToDisable = Optional.of(taxesToDisable.get());
            }
            return this;
        }

        public UpdateItemTaxesRequest build() {
            return new UpdateItemTaxesRequest(itemIds, taxesToEnable, taxesToDisable, additionalProperties);
        }
    }
}
