/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItemAppliedServiceCharge.Builder.class)
public final class OrderLineItemAppliedServiceCharge {
    private final Optional<String> uid;

    private final String serviceChargeUid;

    private final Optional<Money> appliedMoney;

    private final Map<String, Object> additionalProperties;

    private OrderLineItemAppliedServiceCharge(
            Optional<String> uid,
            String serviceChargeUid,
            Optional<Money> appliedMoney,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.serviceChargeUid = serviceChargeUid;
        this.appliedMoney = appliedMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the applied service charge only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The <code>uid</code> of the service charge that the applied service charge represents. It must
     * reference a service charge present in the <code>order.service_charges</code> field.
     * <p>This field is immutable. To change which service charges apply to a line item,
     * delete and add a new <code>OrderLineItemAppliedServiceCharge</code>.</p>
     */
    @JsonProperty("service_charge_uid")
    public String getServiceChargeUid() {
        return serviceChargeUid;
    }

    /**
     * @return The amount of money applied by the service charge to the line item.
     */
    @JsonProperty("applied_money")
    public Optional<Money> getAppliedMoney() {
        return appliedMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItemAppliedServiceCharge && equalTo((OrderLineItemAppliedServiceCharge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItemAppliedServiceCharge other) {
        return uid.equals(other.uid)
                && serviceChargeUid.equals(other.serviceChargeUid)
                && appliedMoney.equals(other.appliedMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.serviceChargeUid, this.appliedMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ServiceChargeUidStage builder() {
        return new Builder();
    }

    public interface ServiceChargeUidStage {
        /**
         * <p>The <code>uid</code> of the service charge that the applied service charge represents. It must
         * reference a service charge present in the <code>order.service_charges</code> field.</p>
         * <p>This field is immutable. To change which service charges apply to a line item,
         * delete and add a new <code>OrderLineItemAppliedServiceCharge</code>.</p>
         */
        _FinalStage serviceChargeUid(@NotNull String serviceChargeUid);

        Builder from(OrderLineItemAppliedServiceCharge other);
    }

    public interface _FinalStage {
        OrderLineItemAppliedServiceCharge build();

        /**
         * <p>A unique ID that identifies the applied service charge only within this order.</p>
         */
        _FinalStage uid(Optional<String> uid);

        _FinalStage uid(String uid);

        _FinalStage uid(Nullable<String> uid);

        /**
         * <p>The amount of money applied by the service charge to the line item.</p>
         */
        _FinalStage appliedMoney(Optional<Money> appliedMoney);

        _FinalStage appliedMoney(Money appliedMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ServiceChargeUidStage, _FinalStage {
        private String serviceChargeUid;

        private Optional<Money> appliedMoney = Optional.empty();

        private Optional<String> uid = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OrderLineItemAppliedServiceCharge other) {
            uid(other.getUid());
            serviceChargeUid(other.getServiceChargeUid());
            appliedMoney(other.getAppliedMoney());
            return this;
        }

        /**
         * <p>The <code>uid</code> of the service charge that the applied service charge represents. It must
         * reference a service charge present in the <code>order.service_charges</code> field.</p>
         * <p>This field is immutable. To change which service charges apply to a line item,
         * delete and add a new <code>OrderLineItemAppliedServiceCharge</code>.</p>
         * <p>The <code>uid</code> of the service charge that the applied service charge represents. It must
         * reference a service charge present in the <code>order.service_charges</code> field.</p>
         * <p>This field is immutable. To change which service charges apply to a line item,
         * delete and add a new <code>OrderLineItemAppliedServiceCharge</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("service_charge_uid")
        public _FinalStage serviceChargeUid(@NotNull String serviceChargeUid) {
            this.serviceChargeUid = Objects.requireNonNull(serviceChargeUid, "serviceChargeUid must not be null");
            return this;
        }

        /**
         * <p>The amount of money applied by the service charge to the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedMoney(Money appliedMoney) {
            this.appliedMoney = Optional.ofNullable(appliedMoney);
            return this;
        }

        /**
         * <p>The amount of money applied by the service charge to the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_money", nulls = Nulls.SKIP)
        public _FinalStage appliedMoney(Optional<Money> appliedMoney) {
            this.appliedMoney = appliedMoney;
            return this;
        }

        /**
         * <p>A unique ID that identifies the applied service charge only within this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>A unique ID that identifies the applied service charge only within this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        /**
         * <p>A unique ID that identifies the applied service charge only within this order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public _FinalStage uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.Override
        public OrderLineItemAppliedServiceCharge build() {
            return new OrderLineItemAppliedServiceCharge(uid, serviceChargeUid, appliedMoney, additionalProperties);
        }
    }
}
