/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FulfillmentPickupDetails.Builder.class)
public final class FulfillmentPickupDetails {
    private final Optional<FulfillmentRecipient> recipient;

    private final Optional<String> expiresAt;

    private final Optional<String> autoCompleteDuration;

    private final Optional<FulfillmentPickupDetailsScheduleType> scheduleType;

    private final Optional<String> pickupAt;

    private final Optional<String> pickupWindowDuration;

    private final Optional<String> prepTimeDuration;

    private final Optional<String> note;

    private final Optional<String> placedAt;

    private final Optional<String> acceptedAt;

    private final Optional<String> rejectedAt;

    private final Optional<String> readyAt;

    private final Optional<String> expiredAt;

    private final Optional<String> pickedUpAt;

    private final Optional<String> canceledAt;

    private final Optional<String> cancelReason;

    private final Optional<Boolean> isCurbsidePickup;

    private final Optional<FulfillmentPickupDetailsCurbsidePickupDetails> curbsidePickupDetails;

    private final Map<String, Object> additionalProperties;

    private FulfillmentPickupDetails(
            Optional<FulfillmentRecipient> recipient,
            Optional<String> expiresAt,
            Optional<String> autoCompleteDuration,
            Optional<FulfillmentPickupDetailsScheduleType> scheduleType,
            Optional<String> pickupAt,
            Optional<String> pickupWindowDuration,
            Optional<String> prepTimeDuration,
            Optional<String> note,
            Optional<String> placedAt,
            Optional<String> acceptedAt,
            Optional<String> rejectedAt,
            Optional<String> readyAt,
            Optional<String> expiredAt,
            Optional<String> pickedUpAt,
            Optional<String> canceledAt,
            Optional<String> cancelReason,
            Optional<Boolean> isCurbsidePickup,
            Optional<FulfillmentPickupDetailsCurbsidePickupDetails> curbsidePickupDetails,
            Map<String, Object> additionalProperties) {
        this.recipient = recipient;
        this.expiresAt = expiresAt;
        this.autoCompleteDuration = autoCompleteDuration;
        this.scheduleType = scheduleType;
        this.pickupAt = pickupAt;
        this.pickupWindowDuration = pickupWindowDuration;
        this.prepTimeDuration = prepTimeDuration;
        this.note = note;
        this.placedAt = placedAt;
        this.acceptedAt = acceptedAt;
        this.rejectedAt = rejectedAt;
        this.readyAt = readyAt;
        this.expiredAt = expiredAt;
        this.pickedUpAt = pickedUpAt;
        this.canceledAt = canceledAt;
        this.cancelReason = cancelReason;
        this.isCurbsidePickup = isCurbsidePickup;
        this.curbsidePickupDetails = curbsidePickupDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information about the person to pick up this fulfillment from a physical
     * location.
     */
    @JsonProperty("recipient")
    public Optional<FulfillmentRecipient> getRecipient() {
        return recipient;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when this fulfillment expires if it is not marked in progress. The timestamp must be
     * in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;). The expiration time can only be set
     * up to 7 days in the future. If <code>expires_at</code> is not set, any new payments attached to the order
     * are automatically completed.
     */
    @JsonIgnore
    public Optional<String> getExpiresAt() {
        if (expiresAt == null) {
            return Optional.empty();
        }
        return expiresAt;
    }

    /**
     * @return The duration of time after which an in progress pickup fulfillment is automatically moved
     * to the <code>COMPLETED</code> state. The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).
     * <p>If not set, this pickup fulfillment remains in progress until it is canceled or completed.</p>
     */
    @JsonIgnore
    public Optional<String> getAutoCompleteDuration() {
        if (autoCompleteDuration == null) {
            return Optional.empty();
        }
        return autoCompleteDuration;
    }

    /**
     * @return The schedule type of the pickup fulfillment. Defaults to <code>SCHEDULED</code>.
     * See <a href="#type-fulfillmentpickupdetailsscheduletype">FulfillmentPickupDetailsScheduleType</a> for possible values
     */
    @JsonProperty("schedule_type")
    public Optional<FulfillmentPickupDetailsScheduleType> getScheduleType() {
        return scheduleType;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
     * &quot;2016-09-04T23:59:33.123Z&quot;.
     * <p>For fulfillments with the schedule type <code>ASAP</code>, this is automatically set
     * to the current time plus the expected duration to prepare the fulfillment.</p>
     */
    @JsonIgnore
    public Optional<String> getPickupAt() {
        if (pickupAt == null) {
            return Optional.empty();
        }
        return pickupAt;
    }

    /**
     * @return The window of time in which the order should be picked up after the <code>pickup_at</code> timestamp.
     * Must be in RFC 3339 duration format, e.g., &quot;P1W3D&quot;. Can be used as an
     * informational guideline for merchants.
     */
    @JsonIgnore
    public Optional<String> getPickupWindowDuration() {
        if (pickupWindowDuration == null) {
            return Optional.empty();
        }
        return pickupWindowDuration;
    }

    /**
     * @return The duration of time it takes to prepare this fulfillment.
     * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).
     */
    @JsonIgnore
    public Optional<String> getPrepTimeDuration() {
        if (prepTimeDuration == null) {
            return Optional.empty();
        }
        return prepTimeDuration;
    }

    /**
     * @return A note to provide additional instructions about the pickup
     * fulfillment displayed in the Square Point of Sale application and set by the API.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("placed_at")
    public Optional<String> getPlacedAt() {
        return placedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was marked in progress. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("accepted_at")
    public Optional<String> getAcceptedAt() {
        return acceptedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("rejected_at")
    public Optional<String> getRejectedAt() {
        return rejectedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("ready_at")
    public Optional<String> getReadyAt() {
        return readyAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("expired_at")
    public Optional<String> getExpiredAt() {
        return expiredAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("picked_up_at")
    public Optional<String> getPickedUpAt() {
        return pickedUpAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("canceled_at")
    public Optional<String> getCanceledAt() {
        return canceledAt;
    }

    /**
     * @return A description of why the pickup was canceled. The maximum length: 100 characters.
     */
    @JsonIgnore
    public Optional<String> getCancelReason() {
        if (cancelReason == null) {
            return Optional.empty();
        }
        return cancelReason;
    }

    /**
     * @return If set to <code>true</code>, indicates that this pickup order is for curbside pickup, not in-store pickup.
     */
    @JsonIgnore
    public Optional<Boolean> getIsCurbsidePickup() {
        if (isCurbsidePickup == null) {
            return Optional.empty();
        }
        return isCurbsidePickup;
    }

    /**
     * @return Specific details for curbside pickup. These details can only be populated if <code>is_curbside_pickup</code> is set to <code>true</code>.
     */
    @JsonProperty("curbside_pickup_details")
    public Optional<FulfillmentPickupDetailsCurbsidePickupDetails> getCurbsidePickupDetails() {
        return curbsidePickupDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("expires_at")
    private Optional<String> _getExpiresAt() {
        return expiresAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("auto_complete_duration")
    private Optional<String> _getAutoCompleteDuration() {
        return autoCompleteDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pickup_at")
    private Optional<String> _getPickupAt() {
        return pickupAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pickup_window_duration")
    private Optional<String> _getPickupWindowDuration() {
        return pickupWindowDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("prep_time_duration")
    private Optional<String> _getPrepTimeDuration() {
        return prepTimeDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cancel_reason")
    private Optional<String> _getCancelReason() {
        return cancelReason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_curbside_pickup")
    private Optional<Boolean> _getIsCurbsidePickup() {
        return isCurbsidePickup;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FulfillmentPickupDetails && equalTo((FulfillmentPickupDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FulfillmentPickupDetails other) {
        return recipient.equals(other.recipient)
                && expiresAt.equals(other.expiresAt)
                && autoCompleteDuration.equals(other.autoCompleteDuration)
                && scheduleType.equals(other.scheduleType)
                && pickupAt.equals(other.pickupAt)
                && pickupWindowDuration.equals(other.pickupWindowDuration)
                && prepTimeDuration.equals(other.prepTimeDuration)
                && note.equals(other.note)
                && placedAt.equals(other.placedAt)
                && acceptedAt.equals(other.acceptedAt)
                && rejectedAt.equals(other.rejectedAt)
                && readyAt.equals(other.readyAt)
                && expiredAt.equals(other.expiredAt)
                && pickedUpAt.equals(other.pickedUpAt)
                && canceledAt.equals(other.canceledAt)
                && cancelReason.equals(other.cancelReason)
                && isCurbsidePickup.equals(other.isCurbsidePickup)
                && curbsidePickupDetails.equals(other.curbsidePickupDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.recipient,
                this.expiresAt,
                this.autoCompleteDuration,
                this.scheduleType,
                this.pickupAt,
                this.pickupWindowDuration,
                this.prepTimeDuration,
                this.note,
                this.placedAt,
                this.acceptedAt,
                this.rejectedAt,
                this.readyAt,
                this.expiredAt,
                this.pickedUpAt,
                this.canceledAt,
                this.cancelReason,
                this.isCurbsidePickup,
                this.curbsidePickupDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FulfillmentRecipient> recipient = Optional.empty();

        private Optional<String> expiresAt = Optional.empty();

        private Optional<String> autoCompleteDuration = Optional.empty();

        private Optional<FulfillmentPickupDetailsScheduleType> scheduleType = Optional.empty();

        private Optional<String> pickupAt = Optional.empty();

        private Optional<String> pickupWindowDuration = Optional.empty();

        private Optional<String> prepTimeDuration = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> placedAt = Optional.empty();

        private Optional<String> acceptedAt = Optional.empty();

        private Optional<String> rejectedAt = Optional.empty();

        private Optional<String> readyAt = Optional.empty();

        private Optional<String> expiredAt = Optional.empty();

        private Optional<String> pickedUpAt = Optional.empty();

        private Optional<String> canceledAt = Optional.empty();

        private Optional<String> cancelReason = Optional.empty();

        private Optional<Boolean> isCurbsidePickup = Optional.empty();

        private Optional<FulfillmentPickupDetailsCurbsidePickupDetails> curbsidePickupDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FulfillmentPickupDetails other) {
            recipient(other.getRecipient());
            expiresAt(other.getExpiresAt());
            autoCompleteDuration(other.getAutoCompleteDuration());
            scheduleType(other.getScheduleType());
            pickupAt(other.getPickupAt());
            pickupWindowDuration(other.getPickupWindowDuration());
            prepTimeDuration(other.getPrepTimeDuration());
            note(other.getNote());
            placedAt(other.getPlacedAt());
            acceptedAt(other.getAcceptedAt());
            rejectedAt(other.getRejectedAt());
            readyAt(other.getReadyAt());
            expiredAt(other.getExpiredAt());
            pickedUpAt(other.getPickedUpAt());
            canceledAt(other.getCanceledAt());
            cancelReason(other.getCancelReason());
            isCurbsidePickup(other.getIsCurbsidePickup());
            curbsidePickupDetails(other.getCurbsidePickupDetails());
            return this;
        }

        /**
         * <p>Information about the person to pick up this fulfillment from a physical
         * location.</p>
         */
        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<FulfillmentRecipient> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(FulfillmentRecipient recipient) {
            this.recipient = Optional.ofNullable(recipient);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when this fulfillment expires if it is not marked in progress. The timestamp must be
         * in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;). The expiration time can only be set
         * up to 7 days in the future. If <code>expires_at</code> is not set, any new payments attached to the order
         * are automatically completed.</p>
         */
        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        public Builder expiresAt(Nullable<String> expiresAt) {
            if (expiresAt.isNull()) {
                this.expiresAt = null;
            } else if (expiresAt.isEmpty()) {
                this.expiresAt = Optional.empty();
            } else {
                this.expiresAt = Optional.of(expiresAt.get());
            }
            return this;
        }

        /**
         * <p>The duration of time after which an in progress pickup fulfillment is automatically moved
         * to the <code>COMPLETED</code> state. The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
         * <p>If not set, this pickup fulfillment remains in progress until it is canceled or completed.</p>
         */
        @JsonSetter(value = "auto_complete_duration", nulls = Nulls.SKIP)
        public Builder autoCompleteDuration(Optional<String> autoCompleteDuration) {
            this.autoCompleteDuration = autoCompleteDuration;
            return this;
        }

        public Builder autoCompleteDuration(String autoCompleteDuration) {
            this.autoCompleteDuration = Optional.ofNullable(autoCompleteDuration);
            return this;
        }

        public Builder autoCompleteDuration(Nullable<String> autoCompleteDuration) {
            if (autoCompleteDuration.isNull()) {
                this.autoCompleteDuration = null;
            } else if (autoCompleteDuration.isEmpty()) {
                this.autoCompleteDuration = Optional.empty();
            } else {
                this.autoCompleteDuration = Optional.of(autoCompleteDuration.get());
            }
            return this;
        }

        /**
         * <p>The schedule type of the pickup fulfillment. Defaults to <code>SCHEDULED</code>.
         * See <a href="#type-fulfillmentpickupdetailsscheduletype">FulfillmentPickupDetailsScheduleType</a> for possible values</p>
         */
        @JsonSetter(value = "schedule_type", nulls = Nulls.SKIP)
        public Builder scheduleType(Optional<FulfillmentPickupDetailsScheduleType> scheduleType) {
            this.scheduleType = scheduleType;
            return this;
        }

        public Builder scheduleType(FulfillmentPickupDetailsScheduleType scheduleType) {
            this.scheduleType = Optional.ofNullable(scheduleType);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
         * &quot;2016-09-04T23:59:33.123Z&quot;.</p>
         * <p>For fulfillments with the schedule type <code>ASAP</code>, this is automatically set
         * to the current time plus the expected duration to prepare the fulfillment.</p>
         */
        @JsonSetter(value = "pickup_at", nulls = Nulls.SKIP)
        public Builder pickupAt(Optional<String> pickupAt) {
            this.pickupAt = pickupAt;
            return this;
        }

        public Builder pickupAt(String pickupAt) {
            this.pickupAt = Optional.ofNullable(pickupAt);
            return this;
        }

        public Builder pickupAt(Nullable<String> pickupAt) {
            if (pickupAt.isNull()) {
                this.pickupAt = null;
            } else if (pickupAt.isEmpty()) {
                this.pickupAt = Optional.empty();
            } else {
                this.pickupAt = Optional.of(pickupAt.get());
            }
            return this;
        }

        /**
         * <p>The window of time in which the order should be picked up after the <code>pickup_at</code> timestamp.
         * Must be in RFC 3339 duration format, e.g., &quot;P1W3D&quot;. Can be used as an
         * informational guideline for merchants.</p>
         */
        @JsonSetter(value = "pickup_window_duration", nulls = Nulls.SKIP)
        public Builder pickupWindowDuration(Optional<String> pickupWindowDuration) {
            this.pickupWindowDuration = pickupWindowDuration;
            return this;
        }

        public Builder pickupWindowDuration(String pickupWindowDuration) {
            this.pickupWindowDuration = Optional.ofNullable(pickupWindowDuration);
            return this;
        }

        public Builder pickupWindowDuration(Nullable<String> pickupWindowDuration) {
            if (pickupWindowDuration.isNull()) {
                this.pickupWindowDuration = null;
            } else if (pickupWindowDuration.isEmpty()) {
                this.pickupWindowDuration = Optional.empty();
            } else {
                this.pickupWindowDuration = Optional.of(pickupWindowDuration.get());
            }
            return this;
        }

        /**
         * <p>The duration of time it takes to prepare this fulfillment.
         * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
         */
        @JsonSetter(value = "prep_time_duration", nulls = Nulls.SKIP)
        public Builder prepTimeDuration(Optional<String> prepTimeDuration) {
            this.prepTimeDuration = prepTimeDuration;
            return this;
        }

        public Builder prepTimeDuration(String prepTimeDuration) {
            this.prepTimeDuration = Optional.ofNullable(prepTimeDuration);
            return this;
        }

        public Builder prepTimeDuration(Nullable<String> prepTimeDuration) {
            if (prepTimeDuration.isNull()) {
                this.prepTimeDuration = null;
            } else if (prepTimeDuration.isEmpty()) {
                this.prepTimeDuration = Optional.empty();
            } else {
                this.prepTimeDuration = Optional.of(prepTimeDuration.get());
            }
            return this;
        }

        /**
         * <p>A note to provide additional instructions about the pickup
         * fulfillment displayed in the Square Point of Sale application and set by the API.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        public Builder note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "placed_at", nulls = Nulls.SKIP)
        public Builder placedAt(Optional<String> placedAt) {
            this.placedAt = placedAt;
            return this;
        }

        public Builder placedAt(String placedAt) {
            this.placedAt = Optional.ofNullable(placedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was marked in progress. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "accepted_at", nulls = Nulls.SKIP)
        public Builder acceptedAt(Optional<String> acceptedAt) {
            this.acceptedAt = acceptedAt;
            return this;
        }

        public Builder acceptedAt(String acceptedAt) {
            this.acceptedAt = Optional.ofNullable(acceptedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "rejected_at", nulls = Nulls.SKIP)
        public Builder rejectedAt(Optional<String> rejectedAt) {
            this.rejectedAt = rejectedAt;
            return this;
        }

        public Builder rejectedAt(String rejectedAt) {
            this.rejectedAt = Optional.ofNullable(rejectedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "ready_at", nulls = Nulls.SKIP)
        public Builder readyAt(Optional<String> readyAt) {
            this.readyAt = readyAt;
            return this;
        }

        public Builder readyAt(String readyAt) {
            this.readyAt = Optional.ofNullable(readyAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "expired_at", nulls = Nulls.SKIP)
        public Builder expiredAt(Optional<String> expiredAt) {
            this.expiredAt = expiredAt;
            return this;
        }

        public Builder expiredAt(String expiredAt) {
            this.expiredAt = Optional.ofNullable(expiredAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "picked_up_at", nulls = Nulls.SKIP)
        public Builder pickedUpAt(Optional<String> pickedUpAt) {
            this.pickedUpAt = pickedUpAt;
            return this;
        }

        public Builder pickedUpAt(String pickedUpAt) {
            this.pickedUpAt = Optional.ofNullable(pickedUpAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "canceled_at", nulls = Nulls.SKIP)
        public Builder canceledAt(Optional<String> canceledAt) {
            this.canceledAt = canceledAt;
            return this;
        }

        public Builder canceledAt(String canceledAt) {
            this.canceledAt = Optional.ofNullable(canceledAt);
            return this;
        }

        /**
         * <p>A description of why the pickup was canceled. The maximum length: 100 characters.</p>
         */
        @JsonSetter(value = "cancel_reason", nulls = Nulls.SKIP)
        public Builder cancelReason(Optional<String> cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        public Builder cancelReason(String cancelReason) {
            this.cancelReason = Optional.ofNullable(cancelReason);
            return this;
        }

        public Builder cancelReason(Nullable<String> cancelReason) {
            if (cancelReason.isNull()) {
                this.cancelReason = null;
            } else if (cancelReason.isEmpty()) {
                this.cancelReason = Optional.empty();
            } else {
                this.cancelReason = Optional.of(cancelReason.get());
            }
            return this;
        }

        /**
         * <p>If set to <code>true</code>, indicates that this pickup order is for curbside pickup, not in-store pickup.</p>
         */
        @JsonSetter(value = "is_curbside_pickup", nulls = Nulls.SKIP)
        public Builder isCurbsidePickup(Optional<Boolean> isCurbsidePickup) {
            this.isCurbsidePickup = isCurbsidePickup;
            return this;
        }

        public Builder isCurbsidePickup(Boolean isCurbsidePickup) {
            this.isCurbsidePickup = Optional.ofNullable(isCurbsidePickup);
            return this;
        }

        public Builder isCurbsidePickup(Nullable<Boolean> isCurbsidePickup) {
            if (isCurbsidePickup.isNull()) {
                this.isCurbsidePickup = null;
            } else if (isCurbsidePickup.isEmpty()) {
                this.isCurbsidePickup = Optional.empty();
            } else {
                this.isCurbsidePickup = Optional.of(isCurbsidePickup.get());
            }
            return this;
        }

        /**
         * <p>Specific details for curbside pickup. These details can only be populated if <code>is_curbside_pickup</code> is set to <code>true</code>.</p>
         */
        @JsonSetter(value = "curbside_pickup_details", nulls = Nulls.SKIP)
        public Builder curbsidePickupDetails(
                Optional<FulfillmentPickupDetailsCurbsidePickupDetails> curbsidePickupDetails) {
            this.curbsidePickupDetails = curbsidePickupDetails;
            return this;
        }

        public Builder curbsidePickupDetails(FulfillmentPickupDetailsCurbsidePickupDetails curbsidePickupDetails) {
            this.curbsidePickupDetails = Optional.ofNullable(curbsidePickupDetails);
            return this;
        }

        public FulfillmentPickupDetails build() {
            return new FulfillmentPickupDetails(
                    recipient,
                    expiresAt,
                    autoCompleteDuration,
                    scheduleType,
                    pickupAt,
                    pickupWindowDuration,
                    prepTimeDuration,
                    note,
                    placedAt,
                    acceptedAt,
                    rejectedAt,
                    readyAt,
                    expiredAt,
                    pickedUpAt,
                    canceledAt,
                    cancelReason,
                    isCurbsidePickup,
                    curbsidePickupDetails,
                    additionalProperties);
        }
    }
}
