/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomAttributeDefinition.Builder.class)
public final class CustomAttributeDefinition {
    private final Optional<String> key;

    private final Optional<Map<String, Object>> schema;

    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<CustomAttributeDefinitionVisibility> visibility;

    private final Optional<Integer> version;

    private final Optional<String> updatedAt;

    private final Optional<String> createdAt;

    private final Map<String, Object> additionalProperties;

    private CustomAttributeDefinition(
            Optional<String> key,
            Optional<Map<String, Object>> schema,
            Optional<String> name,
            Optional<String> description,
            Optional<CustomAttributeDefinitionVisibility> visibility,
            Optional<Integer> version,
            Optional<String> updatedAt,
            Optional<String> createdAt,
            Map<String, Object> additionalProperties) {
        this.key = key;
        this.schema = schema;
        this.name = name;
        this.description = description;
        this.visibility = visibility;
        this.version = version;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The identifier
     * of the custom attribute definition and its corresponding custom attributes. This value
     * can be a simple key, which is the key that is provided when the custom attribute definition
     * is created, or a qualified key, if the requesting
     * application is not the definition owner. The qualified key consists of the application ID
     * of the custom attribute definition owner
     * followed by the simple key that was provided when the definition was created. It has the
     * format application_id:simple key.
     * <p>The value for a simple key can contain up to 60 alphanumeric characters, periods (.),
     * underscores (_), and hyphens (-).</p>
     * <p>This field can not be changed
     * after the custom attribute definition is created. This field is required when creating
     * a definition and must be unique per application, seller, and resource type.</p>
     */
    @JsonIgnore
    public Optional<String> getKey() {
        if (key == null) {
            return Optional.empty();
        }
        return key;
    }

    /**
     * @return The JSON schema for the custom attribute definition, which determines the data type of the corresponding custom attributes. For more information,
     * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>. This field is required when creating a definition.
     */
    @JsonIgnore
    public Optional<Map<String, Object>> getSchema() {
        if (schema == null) {
            return Optional.empty();
        }
        return schema;
    }

    /**
     * @return The name of the custom attribute definition for API and seller-facing UI purposes. The name must
     * be unique within the seller and application pair. This field is required if the
     * <code>visibility</code> field is <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Seller-oriented description of the custom attribute definition, including any constraints
     * that the seller should observe. May be displayed as a tooltip in Square UIs. This field is
     * required if the <code>visibility</code> field is <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return Specifies how the custom attribute definition and its values should be shared with
     * the seller and other applications. If no value is specified, the value defaults to <code>VISIBILITY_HIDDEN</code>.
     * See <a href="#type-visibility">Visibility</a> for possible values
     */
    @JsonProperty("visibility")
    public Optional<CustomAttributeDefinitionVisibility> getVisibility() {
        return visibility;
    }

    /**
     * @return Read only. The current version of the custom attribute definition.
     * The value is incremented each time the custom attribute definition is updated.
     * When updating a custom attribute definition, you can provide this field
     * and specify the current version of the custom attribute definition to enable
     * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>.
     * <p>On writes, this field must be set to the latest version. Stale writes are rejected.</p>
     * <p>This field can also be used to enforce strong consistency for reads. For more information about strong consistency for reads,
     * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>.</p>
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The timestamp that indicates when the custom attribute definition was created or most recently updated,
     * in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The timestamp that indicates when the custom attribute definition was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("key")
    private Optional<String> _getKey() {
        return key;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("schema")
    private Optional<Map<String, Object>> _getSchema() {
        return schema;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomAttributeDefinition && equalTo((CustomAttributeDefinition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomAttributeDefinition other) {
        return key.equals(other.key)
                && schema.equals(other.schema)
                && name.equals(other.name)
                && description.equals(other.description)
                && visibility.equals(other.visibility)
                && version.equals(other.version)
                && updatedAt.equals(other.updatedAt)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.key,
                this.schema,
                this.name,
                this.description,
                this.visibility,
                this.version,
                this.updatedAt,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> key = Optional.empty();

        private Optional<Map<String, Object>> schema = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<CustomAttributeDefinitionVisibility> visibility = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomAttributeDefinition other) {
            key(other.getKey());
            schema(other.getSchema());
            name(other.getName());
            description(other.getDescription());
            visibility(other.getVisibility());
            version(other.getVersion());
            updatedAt(other.getUpdatedAt());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The identifier
         * of the custom attribute definition and its corresponding custom attributes. This value
         * can be a simple key, which is the key that is provided when the custom attribute definition
         * is created, or a qualified key, if the requesting
         * application is not the definition owner. The qualified key consists of the application ID
         * of the custom attribute definition owner
         * followed by the simple key that was provided when the definition was created. It has the
         * format application_id:simple key.</p>
         * <p>The value for a simple key can contain up to 60 alphanumeric characters, periods (.),
         * underscores (_), and hyphens (-).</p>
         * <p>This field can not be changed
         * after the custom attribute definition is created. This field is required when creating
         * a definition and must be unique per application, seller, and resource type.</p>
         */
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Nullable<String> key) {
            if (key.isNull()) {
                this.key = null;
            } else if (key.isEmpty()) {
                this.key = Optional.empty();
            } else {
                this.key = Optional.of(key.get());
            }
            return this;
        }

        /**
         * <p>The JSON schema for the custom attribute definition, which determines the data type of the corresponding custom attributes. For more information,
         * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>. This field is required when creating a definition.</p>
         */
        @JsonSetter(value = "schema", nulls = Nulls.SKIP)
        public Builder schema(Optional<Map<String, Object>> schema) {
            this.schema = schema;
            return this;
        }

        public Builder schema(Map<String, Object> schema) {
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        public Builder schema(Nullable<Map<String, Object>> schema) {
            if (schema.isNull()) {
                this.schema = null;
            } else if (schema.isEmpty()) {
                this.schema = Optional.empty();
            } else {
                this.schema = Optional.of(schema.get());
            }
            return this;
        }

        /**
         * <p>The name of the custom attribute definition for API and seller-facing UI purposes. The name must
         * be unique within the seller and application pair. This field is required if the
         * <code>visibility</code> field is <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>Seller-oriented description of the custom attribute definition, including any constraints
         * that the seller should observe. May be displayed as a tooltip in Square UIs. This field is
         * required if the <code>visibility</code> field is <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        /**
         * <p>Specifies how the custom attribute definition and its values should be shared with
         * the seller and other applications. If no value is specified, the value defaults to <code>VISIBILITY_HIDDEN</code>.
         * See <a href="#type-visibility">Visibility</a> for possible values</p>
         */
        @JsonSetter(value = "visibility", nulls = Nulls.SKIP)
        public Builder visibility(Optional<CustomAttributeDefinitionVisibility> visibility) {
            this.visibility = visibility;
            return this;
        }

        public Builder visibility(CustomAttributeDefinitionVisibility visibility) {
            this.visibility = Optional.ofNullable(visibility);
            return this;
        }

        /**
         * <p>Read only. The current version of the custom attribute definition.
         * The value is incremented each time the custom attribute definition is updated.
         * When updating a custom attribute definition, you can provide this field
         * and specify the current version of the custom attribute definition to enable
         * <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>.</p>
         * <p>On writes, this field must be set to the latest version. Stale writes are rejected.</p>
         * <p>This field can also be used to enforce strong consistency for reads. For more information about strong consistency for reads,
         * see <a href="https://developer.squareup.com/docs/devtools/customattributes/overview">Custom Attributes Overview</a>.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The timestamp that indicates when the custom attribute definition was created or most recently updated,
         * in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The timestamp that indicates when the custom attribute definition was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public CustomAttributeDefinition build() {
            return new CustomAttributeDefinition(
                    key, schema, name, description, visibility, version, updatedAt, createdAt, additionalProperties);
        }
    }
}
