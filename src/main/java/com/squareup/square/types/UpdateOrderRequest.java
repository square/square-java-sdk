/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateOrderRequest.Builder.class)
public final class UpdateOrderRequest {
    private final String orderId;

    private final Optional<Order> order;

    private final Optional<List<String>> fieldsToClear;

    private final Optional<String> idempotencyKey;

    private final Map<String, Object> additionalProperties;

    private UpdateOrderRequest(
            String orderId,
            Optional<Order> order,
            Optional<List<String>> fieldsToClear,
            Optional<String> idempotencyKey,
            Map<String, Object> additionalProperties) {
        this.orderId = orderId;
        this.order = order;
        this.fieldsToClear = fieldsToClear;
        this.idempotencyKey = idempotencyKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the order to update.
     */
    @JsonProperty("order_id")
    public String getOrderId() {
        return orderId;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#sparse-order-objects">sparse order</a>
     * containing only the fields to update and the version to which the update is
     * being applied.
     */
    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#identifying-fields-to-delete">dot notation paths</a>
     * fields to clear. For example, <code>line_items[uid].note</code>.
     * For more information, see <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#deleting-fields">Deleting fields</a>.
     */
    @JsonIgnore
    public Optional<List<String>> getFieldsToClear() {
        if (fieldsToClear == null) {
            return Optional.empty();
        }
        return fieldsToClear;
    }

    /**
     * @return A value you specify that uniquely identifies this update request.
     * <p>If you are unsure whether a particular update was applied to an order successfully,
     * you can reattempt it with the same idempotency key without
     * worrying about creating duplicate updates to the order.
     * The latest order version is returned.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getIdempotencyKey() {
        if (idempotencyKey == null) {
            return Optional.empty();
        }
        return idempotencyKey;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fields_to_clear")
    private Optional<List<String>> _getFieldsToClear() {
        return fieldsToClear;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("idempotency_key")
    private Optional<String> _getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateOrderRequest && equalTo((UpdateOrderRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateOrderRequest other) {
        return orderId.equals(other.orderId)
                && order.equals(other.order)
                && fieldsToClear.equals(other.fieldsToClear)
                && idempotencyKey.equals(other.idempotencyKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orderId, this.order, this.fieldsToClear, this.idempotencyKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderIdStage builder() {
        return new Builder();
    }

    public interface OrderIdStage {
        _FinalStage orderId(@NotNull String orderId);

        Builder from(UpdateOrderRequest other);
    }

    public interface _FinalStage {
        UpdateOrderRequest build();

        _FinalStage order(Optional<Order> order);

        _FinalStage order(Order order);

        _FinalStage fieldsToClear(Optional<List<String>> fieldsToClear);

        _FinalStage fieldsToClear(List<String> fieldsToClear);

        _FinalStage fieldsToClear(Nullable<List<String>> fieldsToClear);

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        _FinalStage idempotencyKey(Nullable<String> idempotencyKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrderIdStage, _FinalStage {
        private String orderId;

        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<List<String>> fieldsToClear = Optional.empty();

        private Optional<Order> order = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateOrderRequest other) {
            orderId(other.getOrderId());
            order(other.getOrder());
            fieldsToClear(other.getFieldsToClear());
            idempotencyKey(other.getIdempotencyKey());
            return this;
        }

        /**
         * <p>The ID of the order to update.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order_id")
        public _FinalStage orderId(@NotNull String orderId) {
            this.orderId = Objects.requireNonNull(orderId, "orderId must not be null");
            return this;
        }

        /**
         * <p>A value you specify that uniquely identifies this update request.</p>
         * <p>If you are unsure whether a particular update was applied to an order successfully,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate updates to the order.
         * The latest order version is returned.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(Nullable<String> idempotencyKey) {
            if (idempotencyKey.isNull()) {
                this.idempotencyKey = null;
            } else if (idempotencyKey.isEmpty()) {
                this.idempotencyKey = Optional.empty();
            } else {
                this.idempotencyKey = Optional.of(idempotencyKey.get());
            }
            return this;
        }

        /**
         * <p>A value you specify that uniquely identifies this update request.</p>
         * <p>If you are unsure whether a particular update was applied to an order successfully,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate updates to the order.
         * The latest order version is returned.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#identifying-fields-to-delete">dot notation paths</a>
         * fields to clear. For example, <code>line_items[uid].note</code>.
         * For more information, see <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#deleting-fields">Deleting fields</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fieldsToClear(Nullable<List<String>> fieldsToClear) {
            if (fieldsToClear.isNull()) {
                this.fieldsToClear = null;
            } else if (fieldsToClear.isEmpty()) {
                this.fieldsToClear = Optional.empty();
            } else {
                this.fieldsToClear = Optional.of(fieldsToClear.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#identifying-fields-to-delete">dot notation paths</a>
         * fields to clear. For example, <code>line_items[uid].note</code>.
         * For more information, see <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#deleting-fields">Deleting fields</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fieldsToClear(List<String> fieldsToClear) {
            this.fieldsToClear = Optional.ofNullable(fieldsToClear);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "fields_to_clear", nulls = Nulls.SKIP)
        public _FinalStage fieldsToClear(Optional<List<String>> fieldsToClear) {
            this.fieldsToClear = fieldsToClear;
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#sparse-order-objects">sparse order</a>
         * containing only the fields to update and the version to which the update is
         * being applied.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage order(Order order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public _FinalStage order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        @java.lang.Override
        public UpdateOrderRequest build() {
            return new UpdateOrderRequest(orderId, order, fieldsToClear, idempotencyKey, additionalProperties);
        }
    }
}
