/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItemPricingBlocklists.Builder.class)
public final class OrderLineItemPricingBlocklists {
    private final Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> blockedDiscounts;

    private final Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> blockedTaxes;

    private final Map<String, Object> additionalProperties;

    private OrderLineItemPricingBlocklists(
            Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> blockedDiscounts,
            Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> blockedTaxes,
            Map<String, Object> additionalProperties) {
        this.blockedDiscounts = blockedDiscounts;
        this.blockedTaxes = blockedTaxes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of discounts blocked from applying to the line item.
     * Discounts can be blocked by the <code>discount_uid</code> (for ad hoc discounts) or
     * the <code>discount_catalog_object_id</code> (for catalog discounts).
     */
    @JsonIgnore
    public Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> getBlockedDiscounts() {
        if (blockedDiscounts == null) {
            return Optional.empty();
        }
        return blockedDiscounts;
    }

    /**
     * @return A list of taxes blocked from applying to the line item.
     * Taxes can be blocked by the <code>tax_uid</code> (for ad hoc taxes) or
     * the <code>tax_catalog_object_id</code> (for catalog taxes).
     */
    @JsonIgnore
    public Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> getBlockedTaxes() {
        if (blockedTaxes == null) {
            return Optional.empty();
        }
        return blockedTaxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("blocked_discounts")
    private Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> _getBlockedDiscounts() {
        return blockedDiscounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("blocked_taxes")
    private Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> _getBlockedTaxes() {
        return blockedTaxes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItemPricingBlocklists && equalTo((OrderLineItemPricingBlocklists) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItemPricingBlocklists other) {
        return blockedDiscounts.equals(other.blockedDiscounts) && blockedTaxes.equals(other.blockedTaxes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.blockedDiscounts, this.blockedTaxes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> blockedDiscounts = Optional.empty();

        private Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> blockedTaxes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineItemPricingBlocklists other) {
            blockedDiscounts(other.getBlockedDiscounts());
            blockedTaxes(other.getBlockedTaxes());
            return this;
        }

        @JsonSetter(value = "blocked_discounts", nulls = Nulls.SKIP)
        public Builder blockedDiscounts(
                Optional<List<OrderLineItemPricingBlocklistsBlockedDiscount>> blockedDiscounts) {
            this.blockedDiscounts = blockedDiscounts;
            return this;
        }

        public Builder blockedDiscounts(List<OrderLineItemPricingBlocklistsBlockedDiscount> blockedDiscounts) {
            this.blockedDiscounts = Optional.ofNullable(blockedDiscounts);
            return this;
        }

        public Builder blockedDiscounts(
                Nullable<List<OrderLineItemPricingBlocklistsBlockedDiscount>> blockedDiscounts) {
            if (blockedDiscounts.isNull()) {
                this.blockedDiscounts = null;
            } else if (blockedDiscounts.isEmpty()) {
                this.blockedDiscounts = Optional.empty();
            } else {
                this.blockedDiscounts = Optional.of(blockedDiscounts.get());
            }
            return this;
        }

        @JsonSetter(value = "blocked_taxes", nulls = Nulls.SKIP)
        public Builder blockedTaxes(Optional<List<OrderLineItemPricingBlocklistsBlockedTax>> blockedTaxes) {
            this.blockedTaxes = blockedTaxes;
            return this;
        }

        public Builder blockedTaxes(List<OrderLineItemPricingBlocklistsBlockedTax> blockedTaxes) {
            this.blockedTaxes = Optional.ofNullable(blockedTaxes);
            return this;
        }

        public Builder blockedTaxes(Nullable<List<OrderLineItemPricingBlocklistsBlockedTax>> blockedTaxes) {
            if (blockedTaxes.isNull()) {
                this.blockedTaxes = null;
            } else if (blockedTaxes.isEmpty()) {
                this.blockedTaxes = Optional.empty();
            } else {
                this.blockedTaxes = Optional.of(blockedTaxes.get());
            }
            return this;
        }

        public OrderLineItemPricingBlocklists build() {
            return new OrderLineItemPricingBlocklists(blockedDiscounts, blockedTaxes, additionalProperties);
        }
    }
}
