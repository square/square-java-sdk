/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateDisputeEvidenceTextRequest.Builder.class)
public final class CreateDisputeEvidenceTextRequest {
    private final String disputeId;

    private final String idempotencyKey;

    private final Optional<DisputeEvidenceType> evidenceType;

    private final String evidenceText;

    private final Map<String, Object> additionalProperties;

    private CreateDisputeEvidenceTextRequest(
            String disputeId,
            String idempotencyKey,
            Optional<DisputeEvidenceType> evidenceType,
            String evidenceText,
            Map<String, Object> additionalProperties) {
        this.disputeId = disputeId;
        this.idempotencyKey = idempotencyKey;
        this.evidenceType = evidenceType;
        this.evidenceText = evidenceText;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the dispute for which you want to upload evidence.
     */
    @JsonProperty("dispute_id")
    public String getDisputeId() {
        return disputeId;
    }

    /**
     * @return A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The type of evidence you are uploading.
     * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values
     */
    @JsonProperty("evidence_type")
    public Optional<DisputeEvidenceType> getEvidenceType() {
        return evidenceType;
    }

    /**
     * @return The evidence string.
     */
    @JsonProperty("evidence_text")
    public String getEvidenceText() {
        return evidenceText;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateDisputeEvidenceTextRequest && equalTo((CreateDisputeEvidenceTextRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateDisputeEvidenceTextRequest other) {
        return disputeId.equals(other.disputeId)
                && idempotencyKey.equals(other.idempotencyKey)
                && evidenceType.equals(other.evidenceType)
                && evidenceText.equals(other.evidenceText);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.disputeId, this.idempotencyKey, this.evidenceType, this.evidenceText);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DisputeIdStage builder() {
        return new Builder();
    }

    public interface DisputeIdStage {
        /**
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         */
        IdempotencyKeyStage disputeId(@NotNull String disputeId);

        Builder from(CreateDisputeEvidenceTextRequest other);
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         */
        EvidenceTextStage idempotencyKey(@NotNull String idempotencyKey);
    }

    public interface EvidenceTextStage {
        /**
         * <p>The evidence string.</p>
         */
        _FinalStage evidenceText(@NotNull String evidenceText);
    }

    public interface _FinalStage {
        CreateDisputeEvidenceTextRequest build();

        /**
         * <p>The type of evidence you are uploading.
         * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values</p>
         */
        _FinalStage evidenceType(Optional<DisputeEvidenceType> evidenceType);

        _FinalStage evidenceType(DisputeEvidenceType evidenceType);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DisputeIdStage, IdempotencyKeyStage, EvidenceTextStage, _FinalStage {
        private String disputeId;

        private String idempotencyKey;

        private String evidenceText;

        private Optional<DisputeEvidenceType> evidenceType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateDisputeEvidenceTextRequest other) {
            disputeId(other.getDisputeId());
            idempotencyKey(other.getIdempotencyKey());
            evidenceType(other.getEvidenceType());
            evidenceText(other.getEvidenceText());
            return this;
        }

        /**
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dispute_id")
        public IdempotencyKeyStage disputeId(@NotNull String disputeId) {
            this.disputeId = Objects.requireNonNull(disputeId, "disputeId must not be null");
            return this;
        }

        /**
         * <p>A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * <p>A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public EvidenceTextStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The evidence string.</p>
         * <p>The evidence string.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("evidence_text")
        public _FinalStage evidenceText(@NotNull String evidenceText) {
            this.evidenceText = Objects.requireNonNull(evidenceText, "evidenceText must not be null");
            return this;
        }

        /**
         * <p>The type of evidence you are uploading.
         * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage evidenceType(DisputeEvidenceType evidenceType) {
            this.evidenceType = Optional.ofNullable(evidenceType);
            return this;
        }

        /**
         * <p>The type of evidence you are uploading.
         * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "evidence_type", nulls = Nulls.SKIP)
        public _FinalStage evidenceType(Optional<DisputeEvidenceType> evidenceType) {
            this.evidenceType = evidenceType;
            return this;
        }

        @java.lang.Override
        public CreateDisputeEvidenceTextRequest build() {
            return new CreateDisputeEvidenceTextRequest(
                    disputeId, idempotencyKey, evidenceType, evidenceText, additionalProperties);
        }
    }
}
