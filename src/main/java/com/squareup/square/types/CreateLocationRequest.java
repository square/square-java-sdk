/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateLocationRequest.Builder.class)
public final class CreateLocationRequest {
    private final Optional<Location> location;

    private final Map<String, Object> additionalProperties;

    private CreateLocationRequest(Optional<Location> location, Map<String, Object> additionalProperties) {
        this.location = location;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The initial values of the location being created. The <code>name</code> field is required and must be unique within a seller account.
     * All other fields are optional, but any information you care about for the location should be included.
     * The remaining fields are automatically added based on the data from the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main location</a>.
     */
    @JsonProperty("location")
    public Optional<Location> getLocation() {
        return location;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateLocationRequest && equalTo((CreateLocationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateLocationRequest other) {
        return location.equals(other.location);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.location);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Location> location = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateLocationRequest other) {
            location(other.getLocation());
            return this;
        }

        @JsonSetter(value = "location", nulls = Nulls.SKIP)
        public Builder location(Optional<Location> location) {
            this.location = location;
            return this;
        }

        public Builder location(Location location) {
            this.location = Optional.ofNullable(location);
            return this;
        }

        public CreateLocationRequest build() {
            return new CreateLocationRequest(location, additionalProperties);
        }
    }
}
