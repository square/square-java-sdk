/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogEcomSeoData.Builder.class)
public final class CatalogEcomSeoData {
    private final Optional<String> pageTitle;

    private final Optional<String> pageDescription;

    private final Optional<String> permalink;

    private final Map<String, Object> additionalProperties;

    private CatalogEcomSeoData(
            Optional<String> pageTitle,
            Optional<String> pageDescription,
            Optional<String> permalink,
            Map<String, Object> additionalProperties) {
        this.pageTitle = pageTitle;
        this.pageDescription = pageDescription;
        this.permalink = permalink;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The SEO title used for the Square Online store.
     */
    @JsonIgnore
    public Optional<String> getPageTitle() {
        if (pageTitle == null) {
            return Optional.empty();
        }
        return pageTitle;
    }

    /**
     * @return The SEO description used for the Square Online store.
     */
    @JsonIgnore
    public Optional<String> getPageDescription() {
        if (pageDescription == null) {
            return Optional.empty();
        }
        return pageDescription;
    }

    /**
     * @return The SEO permalink used for the Square Online store.
     */
    @JsonIgnore
    public Optional<String> getPermalink() {
        if (permalink == null) {
            return Optional.empty();
        }
        return permalink;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("page_title")
    private Optional<String> _getPageTitle() {
        return pageTitle;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("page_description")
    private Optional<String> _getPageDescription() {
        return pageDescription;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("permalink")
    private Optional<String> _getPermalink() {
        return permalink;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogEcomSeoData && equalTo((CatalogEcomSeoData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogEcomSeoData other) {
        return pageTitle.equals(other.pageTitle)
                && pageDescription.equals(other.pageDescription)
                && permalink.equals(other.permalink);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageTitle, this.pageDescription, this.permalink);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> pageTitle = Optional.empty();

        private Optional<String> pageDescription = Optional.empty();

        private Optional<String> permalink = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogEcomSeoData other) {
            pageTitle(other.getPageTitle());
            pageDescription(other.getPageDescription());
            permalink(other.getPermalink());
            return this;
        }

        /**
         * <p>The SEO title used for the Square Online store.</p>
         */
        @JsonSetter(value = "page_title", nulls = Nulls.SKIP)
        public Builder pageTitle(Optional<String> pageTitle) {
            this.pageTitle = pageTitle;
            return this;
        }

        public Builder pageTitle(String pageTitle) {
            this.pageTitle = Optional.ofNullable(pageTitle);
            return this;
        }

        public Builder pageTitle(Nullable<String> pageTitle) {
            if (pageTitle.isNull()) {
                this.pageTitle = null;
            } else if (pageTitle.isEmpty()) {
                this.pageTitle = Optional.empty();
            } else {
                this.pageTitle = Optional.of(pageTitle.get());
            }
            return this;
        }

        /**
         * <p>The SEO description used for the Square Online store.</p>
         */
        @JsonSetter(value = "page_description", nulls = Nulls.SKIP)
        public Builder pageDescription(Optional<String> pageDescription) {
            this.pageDescription = pageDescription;
            return this;
        }

        public Builder pageDescription(String pageDescription) {
            this.pageDescription = Optional.ofNullable(pageDescription);
            return this;
        }

        public Builder pageDescription(Nullable<String> pageDescription) {
            if (pageDescription.isNull()) {
                this.pageDescription = null;
            } else if (pageDescription.isEmpty()) {
                this.pageDescription = Optional.empty();
            } else {
                this.pageDescription = Optional.of(pageDescription.get());
            }
            return this;
        }

        /**
         * <p>The SEO permalink used for the Square Online store.</p>
         */
        @JsonSetter(value = "permalink", nulls = Nulls.SKIP)
        public Builder permalink(Optional<String> permalink) {
            this.permalink = permalink;
            return this;
        }

        public Builder permalink(String permalink) {
            this.permalink = Optional.ofNullable(permalink);
            return this;
        }

        public Builder permalink(Nullable<String> permalink) {
            if (permalink.isNull()) {
                this.permalink = null;
            } else if (permalink.isEmpty()) {
                this.permalink = Optional.empty();
            } else {
                this.permalink = Optional.of(permalink.get());
            }
            return this;
        }

        public CatalogEcomSeoData build() {
            return new CatalogEcomSeoData(pageTitle, pageDescription, permalink, additionalProperties);
        }
    }
}
