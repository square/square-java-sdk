/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ObtainTokenRequest.Builder.class)
public final class ObtainTokenRequest {
    private final String clientId;

    private final Optional<String> clientSecret;

    private final Optional<String> code;

    private final Optional<String> redirectUri;

    private final String grantType;

    private final Optional<String> refreshToken;

    private final Optional<String> migrationToken;

    private final Optional<List<String>> scopes;

    private final Optional<Boolean> shortLived;

    private final Optional<String> codeVerifier;

    private final Map<String, Object> additionalProperties;

    private ObtainTokenRequest(
            String clientId,
            Optional<String> clientSecret,
            Optional<String> code,
            Optional<String> redirectUri,
            String grantType,
            Optional<String> refreshToken,
            Optional<String> migrationToken,
            Optional<List<String>> scopes,
            Optional<Boolean> shortLived,
            Optional<String> codeVerifier,
            Map<String, Object> additionalProperties) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.code = code;
        this.redirectUri = redirectUri;
        this.grantType = grantType;
        this.refreshToken = refreshToken;
        this.migrationToken = migrationToken;
        this.scopes = scopes;
        this.shortLived = shortLived;
        this.codeVerifier = codeVerifier;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-issued ID of your application, which is available on the <strong>OAuth</strong> page in the
     * <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.
     */
    @JsonProperty("client_id")
    public String getClientId() {
        return clientId;
    }

    /**
     * @return The Square-issued application secret for your application, which is available on the <strong>OAuth</strong> page
     * in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>. This parameter is only required when
     * you're not using the <a href="https://developer.squareup.com/docs/oauth-api/overview#pkce-flow">OAuth PKCE (Proof Key for Code Exchange) flow</a>.
     * The PKCE flow requires a <code>code_verifier</code> instead of a <code>client_secret</code> when <code>grant_type</code> is set to <code>authorization_code</code>.
     * If <code>grant_type</code> is set to <code>refresh_token</code> and the <code>refresh_token</code> is obtained uaing PKCE, the PKCE flow only requires <code>client_id</code>,
     * <code>grant_type</code>, and <code>refresh_token</code>.
     */
    @JsonIgnore
    public Optional<String> getClientSecret() {
        if (clientSecret == null) {
            return Optional.empty();
        }
        return clientSecret;
    }

    /**
     * @return The authorization code to exchange.
     * This code is required if <code>grant_type</code> is set to <code>authorization_code</code> to indicate that
     * the application wants to exchange an authorization code for an OAuth access token.
     */
    @JsonIgnore
    public Optional<String> getCode() {
        if (code == null) {
            return Optional.empty();
        }
        return code;
    }

    /**
     * @return The redirect URL assigned on the <strong>OAuth</strong> page for your application in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.
     */
    @JsonIgnore
    public Optional<String> getRedirectUri() {
        if (redirectUri == null) {
            return Optional.empty();
        }
        return redirectUri;
    }

    /**
     * @return Specifies the method to request an OAuth access token.
     * Valid values are <code>authorization_code</code>, <code>refresh_token</code>, and <code>migration_token</code>.
     */
    @JsonProperty("grant_type")
    public String getGrantType() {
        return grantType;
    }

    /**
     * @return A valid refresh token for generating a new OAuth access token.
     * <p>A valid refresh token is required if <code>grant_type</code> is set to <code>refresh_token</code>
     * to indicate that the application wants a replacement for an expired OAuth access token.</p>
     */
    @JsonIgnore
    public Optional<String> getRefreshToken() {
        if (refreshToken == null) {
            return Optional.empty();
        }
        return refreshToken;
    }

    /**
     * @return A legacy OAuth access token obtained using a Connect API version prior
     * to 2019-03-13. This parameter is required if <code>grant_type</code> is set to
     * <code>migration_token</code> to indicate that the application wants to get a replacement
     * OAuth access token. The response also returns a refresh token.
     * For more information, see <a href="https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens">Migrate to Using Refresh Tokens</a>.
     */
    @JsonIgnore
    public Optional<String> getMigrationToken() {
        if (migrationToken == null) {
            return Optional.empty();
        }
        return migrationToken;
    }

    /**
     * @return A JSON list of strings representing the permissions that the application is requesting.
     * For example, &quot;<code>[&quot;MERCHANT_PROFILE_READ&quot;,&quot;PAYMENTS_READ&quot;,&quot;BANK_ACCOUNTS_READ&quot;]</code>&quot;.
     * <p>The access token returned in the response is granted the permissions
     * that comprise the intersection between the requested list of permissions and those
     * that belong to the provided refresh token.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getScopes() {
        if (scopes == null) {
            return Optional.empty();
        }
        return scopes;
    }

    /**
     * @return A Boolean indicating a request for a short-lived access token.
     * <p>The short-lived access token returned in the response expires in 24 hours.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getShortLived() {
        if (shortLived == null) {
            return Optional.empty();
        }
        return shortLived;
    }

    /**
     * @return Must be provided when using the PKCE OAuth flow if <code>grant_type</code> is set to <code>authorization_code</code>. The <code>code_verifier</code> is used to verify against the
     * <code>code_challenge</code> associated with the <code>authorization_code</code>.
     */
    @JsonIgnore
    public Optional<String> getCodeVerifier() {
        if (codeVerifier == null) {
            return Optional.empty();
        }
        return codeVerifier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("client_secret")
    private Optional<String> _getClientSecret() {
        return clientSecret;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("code")
    private Optional<String> _getCode() {
        return code;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("redirect_uri")
    private Optional<String> _getRedirectUri() {
        return redirectUri;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("refresh_token")
    private Optional<String> _getRefreshToken() {
        return refreshToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("migration_token")
    private Optional<String> _getMigrationToken() {
        return migrationToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("scopes")
    private Optional<List<String>> _getScopes() {
        return scopes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("short_lived")
    private Optional<Boolean> _getShortLived() {
        return shortLived;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("code_verifier")
    private Optional<String> _getCodeVerifier() {
        return codeVerifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ObtainTokenRequest && equalTo((ObtainTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ObtainTokenRequest other) {
        return clientId.equals(other.clientId)
                && clientSecret.equals(other.clientSecret)
                && code.equals(other.code)
                && redirectUri.equals(other.redirectUri)
                && grantType.equals(other.grantType)
                && refreshToken.equals(other.refreshToken)
                && migrationToken.equals(other.migrationToken)
                && scopes.equals(other.scopes)
                && shortLived.equals(other.shortLived)
                && codeVerifier.equals(other.codeVerifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.clientId,
                this.clientSecret,
                this.code,
                this.redirectUri,
                this.grantType,
                this.refreshToken,
                this.migrationToken,
                this.scopes,
                this.shortLived,
                this.codeVerifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ClientIdStage builder() {
        return new Builder();
    }

    public interface ClientIdStage {
        GrantTypeStage clientId(@NotNull String clientId);

        Builder from(ObtainTokenRequest other);
    }

    public interface GrantTypeStage {
        _FinalStage grantType(@NotNull String grantType);
    }

    public interface _FinalStage {
        ObtainTokenRequest build();

        _FinalStage clientSecret(Optional<String> clientSecret);

        _FinalStage clientSecret(String clientSecret);

        _FinalStage clientSecret(Nullable<String> clientSecret);

        _FinalStage code(Optional<String> code);

        _FinalStage code(String code);

        _FinalStage code(Nullable<String> code);

        _FinalStage redirectUri(Optional<String> redirectUri);

        _FinalStage redirectUri(String redirectUri);

        _FinalStage redirectUri(Nullable<String> redirectUri);

        _FinalStage refreshToken(Optional<String> refreshToken);

        _FinalStage refreshToken(String refreshToken);

        _FinalStage refreshToken(Nullable<String> refreshToken);

        _FinalStage migrationToken(Optional<String> migrationToken);

        _FinalStage migrationToken(String migrationToken);

        _FinalStage migrationToken(Nullable<String> migrationToken);

        _FinalStage scopes(Optional<List<String>> scopes);

        _FinalStage scopes(List<String> scopes);

        _FinalStage scopes(Nullable<List<String>> scopes);

        _FinalStage shortLived(Optional<Boolean> shortLived);

        _FinalStage shortLived(Boolean shortLived);

        _FinalStage shortLived(Nullable<Boolean> shortLived);

        _FinalStage codeVerifier(Optional<String> codeVerifier);

        _FinalStage codeVerifier(String codeVerifier);

        _FinalStage codeVerifier(Nullable<String> codeVerifier);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ClientIdStage, GrantTypeStage, _FinalStage {
        private String clientId;

        private String grantType;

        private Optional<String> codeVerifier = Optional.empty();

        private Optional<Boolean> shortLived = Optional.empty();

        private Optional<List<String>> scopes = Optional.empty();

        private Optional<String> migrationToken = Optional.empty();

        private Optional<String> refreshToken = Optional.empty();

        private Optional<String> redirectUri = Optional.empty();

        private Optional<String> code = Optional.empty();

        private Optional<String> clientSecret = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ObtainTokenRequest other) {
            clientId(other.getClientId());
            clientSecret(other.getClientSecret());
            code(other.getCode());
            redirectUri(other.getRedirectUri());
            grantType(other.getGrantType());
            refreshToken(other.getRefreshToken());
            migrationToken(other.getMigrationToken());
            scopes(other.getScopes());
            shortLived(other.getShortLived());
            codeVerifier(other.getCodeVerifier());
            return this;
        }

        /**
         * <p>The Square-issued ID of your application, which is available on the <strong>OAuth</strong> page in the
         * <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("client_id")
        public GrantTypeStage clientId(@NotNull String clientId) {
            this.clientId = Objects.requireNonNull(clientId, "clientId must not be null");
            return this;
        }

        /**
         * <p>Specifies the method to request an OAuth access token.
         * Valid values are <code>authorization_code</code>, <code>refresh_token</code>, and <code>migration_token</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("grant_type")
        public _FinalStage grantType(@NotNull String grantType) {
            this.grantType = Objects.requireNonNull(grantType, "grantType must not be null");
            return this;
        }

        /**
         * <p>Must be provided when using the PKCE OAuth flow if <code>grant_type</code> is set to <code>authorization_code</code>. The <code>code_verifier</code> is used to verify against the
         * <code>code_challenge</code> associated with the <code>authorization_code</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage codeVerifier(Nullable<String> codeVerifier) {
            if (codeVerifier.isNull()) {
                this.codeVerifier = null;
            } else if (codeVerifier.isEmpty()) {
                this.codeVerifier = Optional.empty();
            } else {
                this.codeVerifier = Optional.of(codeVerifier.get());
            }
            return this;
        }

        /**
         * <p>Must be provided when using the PKCE OAuth flow if <code>grant_type</code> is set to <code>authorization_code</code>. The <code>code_verifier</code> is used to verify against the
         * <code>code_challenge</code> associated with the <code>authorization_code</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage codeVerifier(String codeVerifier) {
            this.codeVerifier = Optional.ofNullable(codeVerifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "code_verifier", nulls = Nulls.SKIP)
        public _FinalStage codeVerifier(Optional<String> codeVerifier) {
            this.codeVerifier = codeVerifier;
            return this;
        }

        /**
         * <p>A Boolean indicating a request for a short-lived access token.</p>
         * <p>The short-lived access token returned in the response expires in 24 hours.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shortLived(Nullable<Boolean> shortLived) {
            if (shortLived.isNull()) {
                this.shortLived = null;
            } else if (shortLived.isEmpty()) {
                this.shortLived = Optional.empty();
            } else {
                this.shortLived = Optional.of(shortLived.get());
            }
            return this;
        }

        /**
         * <p>A Boolean indicating a request for a short-lived access token.</p>
         * <p>The short-lived access token returned in the response expires in 24 hours.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage shortLived(Boolean shortLived) {
            this.shortLived = Optional.ofNullable(shortLived);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "short_lived", nulls = Nulls.SKIP)
        public _FinalStage shortLived(Optional<Boolean> shortLived) {
            this.shortLived = shortLived;
            return this;
        }

        /**
         * <p>A JSON list of strings representing the permissions that the application is requesting.
         * For example, &quot;<code>[&quot;MERCHANT_PROFILE_READ&quot;,&quot;PAYMENTS_READ&quot;,&quot;BANK_ACCOUNTS_READ&quot;]</code>&quot;.</p>
         * <p>The access token returned in the response is granted the permissions
         * that comprise the intersection between the requested list of permissions and those
         * that belong to the provided refresh token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scopes(Nullable<List<String>> scopes) {
            if (scopes.isNull()) {
                this.scopes = null;
            } else if (scopes.isEmpty()) {
                this.scopes = Optional.empty();
            } else {
                this.scopes = Optional.of(scopes.get());
            }
            return this;
        }

        /**
         * <p>A JSON list of strings representing the permissions that the application is requesting.
         * For example, &quot;<code>[&quot;MERCHANT_PROFILE_READ&quot;,&quot;PAYMENTS_READ&quot;,&quot;BANK_ACCOUNTS_READ&quot;]</code>&quot;.</p>
         * <p>The access token returned in the response is granted the permissions
         * that comprise the intersection between the requested list of permissions and those
         * that belong to the provided refresh token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scopes(List<String> scopes) {
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "scopes", nulls = Nulls.SKIP)
        public _FinalStage scopes(Optional<List<String>> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * <p>A legacy OAuth access token obtained using a Connect API version prior
         * to 2019-03-13. This parameter is required if <code>grant_type</code> is set to
         * <code>migration_token</code> to indicate that the application wants to get a replacement
         * OAuth access token. The response also returns a refresh token.
         * For more information, see <a href="https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens">Migrate to Using Refresh Tokens</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage migrationToken(Nullable<String> migrationToken) {
            if (migrationToken.isNull()) {
                this.migrationToken = null;
            } else if (migrationToken.isEmpty()) {
                this.migrationToken = Optional.empty();
            } else {
                this.migrationToken = Optional.of(migrationToken.get());
            }
            return this;
        }

        /**
         * <p>A legacy OAuth access token obtained using a Connect API version prior
         * to 2019-03-13. This parameter is required if <code>grant_type</code> is set to
         * <code>migration_token</code> to indicate that the application wants to get a replacement
         * OAuth access token. The response also returns a refresh token.
         * For more information, see <a href="https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens">Migrate to Using Refresh Tokens</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage migrationToken(String migrationToken) {
            this.migrationToken = Optional.ofNullable(migrationToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "migration_token", nulls = Nulls.SKIP)
        public _FinalStage migrationToken(Optional<String> migrationToken) {
            this.migrationToken = migrationToken;
            return this;
        }

        /**
         * <p>A valid refresh token for generating a new OAuth access token.</p>
         * <p>A valid refresh token is required if <code>grant_type</code> is set to <code>refresh_token</code>
         * to indicate that the application wants a replacement for an expired OAuth access token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refreshToken(Nullable<String> refreshToken) {
            if (refreshToken.isNull()) {
                this.refreshToken = null;
            } else if (refreshToken.isEmpty()) {
                this.refreshToken = Optional.empty();
            } else {
                this.refreshToken = Optional.of(refreshToken.get());
            }
            return this;
        }

        /**
         * <p>A valid refresh token for generating a new OAuth access token.</p>
         * <p>A valid refresh token is required if <code>grant_type</code> is set to <code>refresh_token</code>
         * to indicate that the application wants a replacement for an expired OAuth access token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refreshToken(String refreshToken) {
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "refresh_token", nulls = Nulls.SKIP)
        public _FinalStage refreshToken(Optional<String> refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * <p>The redirect URL assigned on the <strong>OAuth</strong> page for your application in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage redirectUri(Nullable<String> redirectUri) {
            if (redirectUri.isNull()) {
                this.redirectUri = null;
            } else if (redirectUri.isEmpty()) {
                this.redirectUri = Optional.empty();
            } else {
                this.redirectUri = Optional.of(redirectUri.get());
            }
            return this;
        }

        /**
         * <p>The redirect URL assigned on the <strong>OAuth</strong> page for your application in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage redirectUri(String redirectUri) {
            this.redirectUri = Optional.ofNullable(redirectUri);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "redirect_uri", nulls = Nulls.SKIP)
        public _FinalStage redirectUri(Optional<String> redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }

        /**
         * <p>The authorization code to exchange.
         * This code is required if <code>grant_type</code> is set to <code>authorization_code</code> to indicate that
         * the application wants to exchange an authorization code for an OAuth access token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage code(Nullable<String> code) {
            if (code.isNull()) {
                this.code = null;
            } else if (code.isEmpty()) {
                this.code = Optional.empty();
            } else {
                this.code = Optional.of(code.get());
            }
            return this;
        }

        /**
         * <p>The authorization code to exchange.
         * This code is required if <code>grant_type</code> is set to <code>authorization_code</code> to indicate that
         * the application wants to exchange an authorization code for an OAuth access token.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage code(String code) {
            this.code = Optional.ofNullable(code);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "code", nulls = Nulls.SKIP)
        public _FinalStage code(Optional<String> code) {
            this.code = code;
            return this;
        }

        /**
         * <p>The Square-issued application secret for your application, which is available on the <strong>OAuth</strong> page
         * in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>. This parameter is only required when
         * you're not using the <a href="https://developer.squareup.com/docs/oauth-api/overview#pkce-flow">OAuth PKCE (Proof Key for Code Exchange) flow</a>.
         * The PKCE flow requires a <code>code_verifier</code> instead of a <code>client_secret</code> when <code>grant_type</code> is set to <code>authorization_code</code>.
         * If <code>grant_type</code> is set to <code>refresh_token</code> and the <code>refresh_token</code> is obtained uaing PKCE, the PKCE flow only requires <code>client_id</code>,
         * <code>grant_type</code>, and <code>refresh_token</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clientSecret(Nullable<String> clientSecret) {
            if (clientSecret.isNull()) {
                this.clientSecret = null;
            } else if (clientSecret.isEmpty()) {
                this.clientSecret = Optional.empty();
            } else {
                this.clientSecret = Optional.of(clientSecret.get());
            }
            return this;
        }

        /**
         * <p>The Square-issued application secret for your application, which is available on the <strong>OAuth</strong> page
         * in the <a href="https://developer.squareup.com/apps">Developer Dashboard</a>. This parameter is only required when
         * you're not using the <a href="https://developer.squareup.com/docs/oauth-api/overview#pkce-flow">OAuth PKCE (Proof Key for Code Exchange) flow</a>.
         * The PKCE flow requires a <code>code_verifier</code> instead of a <code>client_secret</code> when <code>grant_type</code> is set to <code>authorization_code</code>.
         * If <code>grant_type</code> is set to <code>refresh_token</code> and the <code>refresh_token</code> is obtained uaing PKCE, the PKCE flow only requires <code>client_id</code>,
         * <code>grant_type</code>, and <code>refresh_token</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage clientSecret(String clientSecret) {
            this.clientSecret = Optional.ofNullable(clientSecret);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "client_secret", nulls = Nulls.SKIP)
        public _FinalStage clientSecret(Optional<String> clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        @java.lang.Override
        public ObtainTokenRequest build() {
            return new ObtainTokenRequest(
                    clientId,
                    clientSecret,
                    code,
                    redirectUri,
                    grantType,
                    refreshToken,
                    migrationToken,
                    scopes,
                    shortLived,
                    codeVerifier,
                    additionalProperties);
        }
    }
}
