/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AdditionalRecipient.Builder.class)
public final class AdditionalRecipient {
    private final String locationId;

    private final Optional<String> description;

    private final Money amountMoney;

    private final Optional<String> receivableId;

    private final Map<String, Object> additionalProperties;

    private AdditionalRecipient(
            String locationId,
            Optional<String> description,
            Money amountMoney,
            Optional<String> receivableId,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.description = description;
        this.amountMoney = amountMoney;
        this.receivableId = receivableId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The location ID for a recipient (other than the merchant) receiving a portion of this tender.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The description of the additional recipient.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The amount of money distributed to the recipient.
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The unique ID for the RETIRED <code>AdditionalRecipientReceivable</code> object. This field should be empty for any <code>AdditionalRecipient</code> objects created after the retirement.
     */
    @JsonIgnore
    public Optional<String> getReceivableId() {
        if (receivableId == null) {
            return Optional.empty();
        }
        return receivableId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("receivable_id")
    private Optional<String> _getReceivableId() {
        return receivableId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AdditionalRecipient && equalTo((AdditionalRecipient) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AdditionalRecipient other) {
        return locationId.equals(other.locationId)
                && description.equals(other.description)
                && amountMoney.equals(other.amountMoney)
                && receivableId.equals(other.receivableId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.description, this.amountMoney, this.receivableId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        /**
         * <p>The location ID for a recipient (other than the merchant) receiving a portion of this tender.</p>
         */
        AmountMoneyStage locationId(@NotNull String locationId);

        Builder from(AdditionalRecipient other);
    }

    public interface AmountMoneyStage {
        /**
         * <p>The amount of money distributed to the recipient.</p>
         */
        _FinalStage amountMoney(@NotNull Money amountMoney);
    }

    public interface _FinalStage {
        AdditionalRecipient build();

        /**
         * <p>The description of the additional recipient.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage description(Nullable<String> description);

        /**
         * <p>The unique ID for the RETIRED <code>AdditionalRecipientReceivable</code> object. This field should be empty for any <code>AdditionalRecipient</code> objects created after the retirement.</p>
         */
        _FinalStage receivableId(Optional<String> receivableId);

        _FinalStage receivableId(String receivableId);

        _FinalStage receivableId(Nullable<String> receivableId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LocationIdStage, AmountMoneyStage, _FinalStage {
        private String locationId;

        private Money amountMoney;

        private Optional<String> receivableId = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AdditionalRecipient other) {
            locationId(other.getLocationId());
            description(other.getDescription());
            amountMoney(other.getAmountMoney());
            receivableId(other.getReceivableId());
            return this;
        }

        /**
         * <p>The location ID for a recipient (other than the merchant) receiving a portion of this tender.</p>
         * <p>The location ID for a recipient (other than the merchant) receiving a portion of this tender.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public AmountMoneyStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>The amount of money distributed to the recipient.</p>
         * <p>The amount of money distributed to the recipient.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public _FinalStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>The unique ID for the RETIRED <code>AdditionalRecipientReceivable</code> object. This field should be empty for any <code>AdditionalRecipient</code> objects created after the retirement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage receivableId(Nullable<String> receivableId) {
            if (receivableId.isNull()) {
                this.receivableId = null;
            } else if (receivableId.isEmpty()) {
                this.receivableId = Optional.empty();
            } else {
                this.receivableId = Optional.of(receivableId.get());
            }
            return this;
        }

        /**
         * <p>The unique ID for the RETIRED <code>AdditionalRecipientReceivable</code> object. This field should be empty for any <code>AdditionalRecipient</code> objects created after the retirement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage receivableId(String receivableId) {
            this.receivableId = Optional.ofNullable(receivableId);
            return this;
        }

        /**
         * <p>The unique ID for the RETIRED <code>AdditionalRecipientReceivable</code> object. This field should be empty for any <code>AdditionalRecipient</code> objects created after the retirement.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "receivable_id", nulls = Nulls.SKIP)
        public _FinalStage receivableId(Optional<String> receivableId) {
            this.receivableId = receivableId;
            return this;
        }

        /**
         * <p>The description of the additional recipient.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        /**
         * <p>The description of the additional recipient.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The description of the additional recipient.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public AdditionalRecipient build() {
            return new AdditionalRecipient(locationId, description, amountMoney, receivableId, additionalProperties);
        }
    }
}
