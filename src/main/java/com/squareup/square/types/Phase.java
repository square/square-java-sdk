/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Phase.Builder.class)
public final class Phase {
    private final Optional<String> uid;

    private final Optional<Long> ordinal;

    private final Optional<String> orderTemplateId;

    private final Optional<String> planPhaseUid;

    private final Map<String, Object> additionalProperties;

    private Phase(
            Optional<String> uid,
            Optional<Long> ordinal,
            Optional<String> orderTemplateId,
            Optional<String> planPhaseUid,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.ordinal = ordinal;
        this.orderTemplateId = orderTemplateId;
        this.planPhaseUid = planPhaseUid;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return id of subscription phase
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return index of phase in total subscription plan
     */
    @JsonIgnore
    public Optional<Long> getOrdinal() {
        if (ordinal == null) {
            return Optional.empty();
        }
        return ordinal;
    }

    /**
     * @return id of order to be used in billing
     */
    @JsonIgnore
    public Optional<String> getOrderTemplateId() {
        if (orderTemplateId == null) {
            return Optional.empty();
        }
        return orderTemplateId;
    }

    /**
     * @return the uid from the plan's phase in catalog
     */
    @JsonIgnore
    public Optional<String> getPlanPhaseUid() {
        if (planPhaseUid == null) {
            return Optional.empty();
        }
        return planPhaseUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ordinal")
    private Optional<Long> _getOrdinal() {
        return ordinal;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_template_id")
    private Optional<String> _getOrderTemplateId() {
        return orderTemplateId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("plan_phase_uid")
    private Optional<String> _getPlanPhaseUid() {
        return planPhaseUid;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Phase && equalTo((Phase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Phase other) {
        return uid.equals(other.uid)
                && ordinal.equals(other.ordinal)
                && orderTemplateId.equals(other.orderTemplateId)
                && planPhaseUid.equals(other.planPhaseUid);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.ordinal, this.orderTemplateId, this.planPhaseUid);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<Long> ordinal = Optional.empty();

        private Optional<String> orderTemplateId = Optional.empty();

        private Optional<String> planPhaseUid = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Phase other) {
            uid(other.getUid());
            ordinal(other.getOrdinal());
            orderTemplateId(other.getOrderTemplateId());
            planPhaseUid(other.getPlanPhaseUid());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        @JsonSetter(value = "ordinal", nulls = Nulls.SKIP)
        public Builder ordinal(Optional<Long> ordinal) {
            this.ordinal = ordinal;
            return this;
        }

        public Builder ordinal(Long ordinal) {
            this.ordinal = Optional.ofNullable(ordinal);
            return this;
        }

        public Builder ordinal(Nullable<Long> ordinal) {
            if (ordinal.isNull()) {
                this.ordinal = null;
            } else if (ordinal.isEmpty()) {
                this.ordinal = Optional.empty();
            } else {
                this.ordinal = Optional.of(ordinal.get());
            }
            return this;
        }

        @JsonSetter(value = "order_template_id", nulls = Nulls.SKIP)
        public Builder orderTemplateId(Optional<String> orderTemplateId) {
            this.orderTemplateId = orderTemplateId;
            return this;
        }

        public Builder orderTemplateId(String orderTemplateId) {
            this.orderTemplateId = Optional.ofNullable(orderTemplateId);
            return this;
        }

        public Builder orderTemplateId(Nullable<String> orderTemplateId) {
            if (orderTemplateId.isNull()) {
                this.orderTemplateId = null;
            } else if (orderTemplateId.isEmpty()) {
                this.orderTemplateId = Optional.empty();
            } else {
                this.orderTemplateId = Optional.of(orderTemplateId.get());
            }
            return this;
        }

        @JsonSetter(value = "plan_phase_uid", nulls = Nulls.SKIP)
        public Builder planPhaseUid(Optional<String> planPhaseUid) {
            this.planPhaseUid = planPhaseUid;
            return this;
        }

        public Builder planPhaseUid(String planPhaseUid) {
            this.planPhaseUid = Optional.ofNullable(planPhaseUid);
            return this;
        }

        public Builder planPhaseUid(Nullable<String> planPhaseUid) {
            if (planPhaseUid.isNull()) {
                this.planPhaseUid = null;
            } else if (planPhaseUid.isEmpty()) {
                this.planPhaseUid = Optional.empty();
            } else {
                this.planPhaseUid = Optional.of(planPhaseUid.get());
            }
            return this;
        }

        public Phase build() {
            return new Phase(uid, ordinal, orderTemplateId, planPhaseUid, additionalProperties);
        }
    }
}
