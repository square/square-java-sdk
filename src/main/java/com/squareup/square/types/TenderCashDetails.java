/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TenderCashDetails.Builder.class)
public final class TenderCashDetails {
    private final Optional<Money> buyerTenderedMoney;

    private final Optional<Money> changeBackMoney;

    private final Map<String, Object> additionalProperties;

    private TenderCashDetails(
            Optional<Money> buyerTenderedMoney,
            Optional<Money> changeBackMoney,
            Map<String, Object> additionalProperties) {
        this.buyerTenderedMoney = buyerTenderedMoney;
        this.changeBackMoney = changeBackMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The total amount of cash provided by the buyer, before change is given.
     */
    @JsonProperty("buyer_tendered_money")
    public Optional<Money> getBuyerTenderedMoney() {
        return buyerTenderedMoney;
    }

    /**
     * @return The amount of change returned to the buyer.
     */
    @JsonProperty("change_back_money")
    public Optional<Money> getChangeBackMoney() {
        return changeBackMoney;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TenderCashDetails && equalTo((TenderCashDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TenderCashDetails other) {
        return buyerTenderedMoney.equals(other.buyerTenderedMoney) && changeBackMoney.equals(other.changeBackMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.buyerTenderedMoney, this.changeBackMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Money> buyerTenderedMoney = Optional.empty();

        private Optional<Money> changeBackMoney = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TenderCashDetails other) {
            buyerTenderedMoney(other.getBuyerTenderedMoney());
            changeBackMoney(other.getChangeBackMoney());
            return this;
        }

        /**
         * <p>The total amount of cash provided by the buyer, before change is given.</p>
         */
        @JsonSetter(value = "buyer_tendered_money", nulls = Nulls.SKIP)
        public Builder buyerTenderedMoney(Optional<Money> buyerTenderedMoney) {
            this.buyerTenderedMoney = buyerTenderedMoney;
            return this;
        }

        public Builder buyerTenderedMoney(Money buyerTenderedMoney) {
            this.buyerTenderedMoney = Optional.ofNullable(buyerTenderedMoney);
            return this;
        }

        /**
         * <p>The amount of change returned to the buyer.</p>
         */
        @JsonSetter(value = "change_back_money", nulls = Nulls.SKIP)
        public Builder changeBackMoney(Optional<Money> changeBackMoney) {
            this.changeBackMoney = changeBackMoney;
            return this;
        }

        public Builder changeBackMoney(Money changeBackMoney) {
            this.changeBackMoney = Optional.ofNullable(changeBackMoney);
            return this;
        }

        public TenderCashDetails build() {
            return new TenderCashDetails(buyerTenderedMoney, changeBackMoney, additionalProperties);
        }
    }
}
