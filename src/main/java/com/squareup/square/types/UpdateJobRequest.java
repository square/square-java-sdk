/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateJobRequest.Builder.class)
public final class UpdateJobRequest {
    private final String jobId;

    private final Job job;

    private final Map<String, Object> additionalProperties;

    private UpdateJobRequest(String jobId, Job job, Map<String, Object> additionalProperties) {
        this.jobId = jobId;
        this.job = job;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the job to update.
     */
    @JsonProperty("job_id")
    public String getJobId() {
        return jobId;
    }

    /**
     * @return The job with the updated fields, either <code>title</code>, <code>is_tip_eligible</code>, or both. Only changed fields need
     * to be included in the request. Optionally include <code>version</code> to enable optimistic concurrency control.
     */
    @JsonProperty("job")
    public Job getJob() {
        return job;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateJobRequest && equalTo((UpdateJobRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateJobRequest other) {
        return jobId.equals(other.jobId) && job.equals(other.job);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.jobId, this.job);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static JobIdStage builder() {
        return new Builder();
    }

    public interface JobIdStage {
        /**
         * <p>The ID of the job to update.</p>
         */
        JobStage jobId(@NotNull String jobId);

        Builder from(UpdateJobRequest other);
    }

    public interface JobStage {
        /**
         * <p>The job with the updated fields, either <code>title</code>, <code>is_tip_eligible</code>, or both. Only changed fields need
         * to be included in the request. Optionally include <code>version</code> to enable optimistic concurrency control.</p>
         */
        _FinalStage job(@NotNull Job job);
    }

    public interface _FinalStage {
        UpdateJobRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements JobIdStage, JobStage, _FinalStage {
        private String jobId;

        private Job job;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateJobRequest other) {
            jobId(other.getJobId());
            job(other.getJob());
            return this;
        }

        /**
         * <p>The ID of the job to update.</p>
         * <p>The ID of the job to update.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("job_id")
        public JobStage jobId(@NotNull String jobId) {
            this.jobId = Objects.requireNonNull(jobId, "jobId must not be null");
            return this;
        }

        /**
         * <p>The job with the updated fields, either <code>title</code>, <code>is_tip_eligible</code>, or both. Only changed fields need
         * to be included in the request. Optionally include <code>version</code> to enable optimistic concurrency control.</p>
         * <p>The job with the updated fields, either <code>title</code>, <code>is_tip_eligible</code>, or both. Only changed fields need
         * to be included in the request. Optionally include <code>version</code> to enable optimistic concurrency control.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("job")
        public _FinalStage job(@NotNull Job job) {
            this.job = Objects.requireNonNull(job, "job must not be null");
            return this;
        }

        @java.lang.Override
        public UpdateJobRequest build() {
            return new UpdateJobRequest(jobId, job, additionalProperties);
        }
    }
}
