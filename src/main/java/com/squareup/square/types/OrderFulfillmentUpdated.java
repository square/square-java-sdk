/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderFulfillmentUpdated.Builder.class)
public final class OrderFulfillmentUpdated {
    private final Optional<String> orderId;

    private final Optional<Integer> version;

    private final Optional<String> locationId;

    private final Optional<OrderState> state;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<List<OrderFulfillmentUpdatedUpdate>> fulfillmentUpdate;

    private final Map<String, Object> additionalProperties;

    private OrderFulfillmentUpdated(
            Optional<String> orderId,
            Optional<Integer> version,
            Optional<String> locationId,
            Optional<OrderState> state,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<List<OrderFulfillmentUpdatedUpdate>> fulfillmentUpdate,
            Map<String, Object> additionalProperties) {
        this.orderId = orderId;
        this.version = version;
        this.locationId = locationId;
        this.state = state;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.fulfillmentUpdate = fulfillmentUpdate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order's unique ID.
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return The version number, which is incremented each time an update is committed to the order.
     * Orders that were not created through the API do not include a version number and
     * therefore cannot be updated.
     * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions.</a></p>
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The ID of the seller location that this order is associated with.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The state of the order.
     * See <a href="#type-orderstate">OrderState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<OrderState> getState() {
        return state;
    }

    /**
     * @return The timestamp for when the order was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp for when the order was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The fulfillments that were updated with this version change.
     */
    @JsonIgnore
    public Optional<List<OrderFulfillmentUpdatedUpdate>> getFulfillmentUpdate() {
        if (fulfillmentUpdate == null) {
            return Optional.empty();
        }
        return fulfillmentUpdate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fulfillment_update")
    private Optional<List<OrderFulfillmentUpdatedUpdate>> _getFulfillmentUpdate() {
        return fulfillmentUpdate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderFulfillmentUpdated && equalTo((OrderFulfillmentUpdated) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderFulfillmentUpdated other) {
        return orderId.equals(other.orderId)
                && version.equals(other.version)
                && locationId.equals(other.locationId)
                && state.equals(other.state)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && fulfillmentUpdate.equals(other.fulfillmentUpdate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.orderId,
                this.version,
                this.locationId,
                this.state,
                this.createdAt,
                this.updatedAt,
                this.fulfillmentUpdate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> orderId = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<OrderState> state = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<List<OrderFulfillmentUpdatedUpdate>> fulfillmentUpdate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderFulfillmentUpdated other) {
            orderId(other.getOrderId());
            version(other.getVersion());
            locationId(other.getLocationId());
            state(other.getState());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            fulfillmentUpdate(other.getFulfillmentUpdate());
            return this;
        }

        /**
         * <p>The order's unique ID.</p>
         */
        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        /**
         * <p>The version number, which is incremented each time an update is committed to the order.
         * Orders that were not created through the API do not include a version number and
         * therefore cannot be updated.</p>
         * <p><a href="https://developer.squareup.com/docs/orders-api/manage-orders/update-orders">Read more about working with versions.</a></p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The ID of the seller location that this order is associated with.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The state of the order.
         * See <a href="#type-orderstate">OrderState</a> for possible values</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<OrderState> state) {
            this.state = state;
            return this;
        }

        public Builder state(OrderState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>The timestamp for when the order was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp for when the order was last updated, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The fulfillments that were updated with this version change.</p>
         */
        @JsonSetter(value = "fulfillment_update", nulls = Nulls.SKIP)
        public Builder fulfillmentUpdate(Optional<List<OrderFulfillmentUpdatedUpdate>> fulfillmentUpdate) {
            this.fulfillmentUpdate = fulfillmentUpdate;
            return this;
        }

        public Builder fulfillmentUpdate(List<OrderFulfillmentUpdatedUpdate> fulfillmentUpdate) {
            this.fulfillmentUpdate = Optional.ofNullable(fulfillmentUpdate);
            return this;
        }

        public Builder fulfillmentUpdate(Nullable<List<OrderFulfillmentUpdatedUpdate>> fulfillmentUpdate) {
            if (fulfillmentUpdate.isNull()) {
                this.fulfillmentUpdate = null;
            } else if (fulfillmentUpdate.isEmpty()) {
                this.fulfillmentUpdate = Optional.empty();
            } else {
                this.fulfillmentUpdate = Optional.of(fulfillmentUpdate.get());
            }
            return this;
        }

        public OrderFulfillmentUpdated build() {
            return new OrderFulfillmentUpdated(
                    orderId, version, locationId, state, createdAt, updatedAt, fulfillmentUpdate, additionalProperties);
        }
    }
}
