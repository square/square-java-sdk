/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ShippingFee.Builder.class)
public final class ShippingFee {
    private final Optional<String> name;

    private final Money charge;

    private final Map<String, Object> additionalProperties;

    private ShippingFee(Optional<String> name, Money charge, Map<String, Object> additionalProperties) {
        this.name = name;
        this.charge = charge;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name for the shipping fee.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The amount and currency for the shipping fee.
     */
    @JsonProperty("charge")
    public Money getCharge() {
        return charge;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ShippingFee && equalTo((ShippingFee) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ShippingFee other) {
        return name.equals(other.name) && charge.equals(other.charge);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.charge);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ChargeStage builder() {
        return new Builder();
    }

    public interface ChargeStage {
        _FinalStage charge(@NotNull Money charge);

        Builder from(ShippingFee other);
    }

    public interface _FinalStage {
        ShippingFee build();

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage name(Nullable<String> name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ChargeStage, _FinalStage {
        private Money charge;

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ShippingFee other) {
            name(other.getName());
            charge(other.getCharge());
            return this;
        }

        /**
         * <p>The amount and currency for the shipping fee.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("charge")
        public _FinalStage charge(@NotNull Money charge) {
            this.charge = Objects.requireNonNull(charge, "charge must not be null");
            return this;
        }

        /**
         * <p>The name for the shipping fee.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The name for the shipping fee.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public ShippingFee build() {
            return new ShippingFee(name, charge, additionalProperties);
        }
    }
}
