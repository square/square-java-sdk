/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateOrderRequest.Builder.class)
public final class CreateOrderRequest {
    private final Optional<Order> order;

    private final Optional<String> idempotencyKey;

    private final Map<String, Object> additionalProperties;

    private CreateOrderRequest(
            Optional<Order> order, Optional<String> idempotencyKey, Map<String, Object> additionalProperties) {
        this.order = order;
        this.idempotencyKey = idempotencyKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order to create. If this field is set, the only other top-level field that can be
     * set is the <code>idempotency_key</code>.
     */
    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    /**
     * @return A value you specify that uniquely identifies this
     * order among orders you have created.
     * <p>If you are unsure whether a particular order was created successfully,
     * you can try it again with the same idempotency key without
     * worrying about creating duplicate orders.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateOrderRequest && equalTo((CreateOrderRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateOrderRequest other) {
        return order.equals(other.order) && idempotencyKey.equals(other.idempotencyKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.order, this.idempotencyKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Order> order = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateOrderRequest other) {
            order(other.getOrder());
            idempotencyKey(other.getIdempotencyKey());
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        public Builder order(Order order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        public CreateOrderRequest build() {
            return new CreateOrderRequest(order, idempotencyKey, additionalProperties);
        }
    }
}
