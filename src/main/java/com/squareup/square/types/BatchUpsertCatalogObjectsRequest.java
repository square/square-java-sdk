/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchUpsertCatalogObjectsRequest.Builder.class)
public final class BatchUpsertCatalogObjectsRequest {
    private final String idempotencyKey;

    private final List<CatalogObjectBatch> batches;

    private final Map<String, Object> additionalProperties;

    private BatchUpsertCatalogObjectsRequest(
            String idempotencyKey, List<CatalogObjectBatch> batches, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.batches = batches;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A value you specify that uniquely identifies this
     * request among all your requests. A common way to create
     * a valid idempotency key is to use a Universally unique
     * identifier (UUID).
     * <p>If you're unsure whether a particular request was successful,
     * you can reattempt it with the same idempotency key without
     * worrying about creating duplicate objects.</p>
     * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return A batch of CatalogObjects to be inserted/updated atomically.
     * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
     * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
     * in one batch will not affect other batches within the same request.
     * <p>For each object, its <code>updated_at</code> field is ignored and replaced with a current <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, and its
     * <code>is_deleted</code> field must not be set to <code>true</code>.</p>
     * <p>To modify an existing object, supply its ID. To create a new object, use an ID starting
     * with <code>#</code>. These IDs may be used to create relationships between an object and attributes of
     * other objects that reference it. For example, you can create a CatalogItem with
     * ID <code>#ABC</code> and a CatalogItemVariation with its <code>item_id</code> attribute set to
     * <code>#ABC</code> in order to associate the CatalogItemVariation with its parent
     * CatalogItem.</p>
     * <p>Any <code>#</code>-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.</p>
     * <p>Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
     * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
     * be inserted or updated.</p>
     */
    @JsonProperty("batches")
    public List<CatalogObjectBatch> getBatches() {
        return batches;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchUpsertCatalogObjectsRequest && equalTo((BatchUpsertCatalogObjectsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchUpsertCatalogObjectsRequest other) {
        return idempotencyKey.equals(other.idempotencyKey) && batches.equals(other.batches);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.batches);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A value you specify that uniquely identifies this
         * request among all your requests. A common way to create
         * a valid idempotency key is to use a Universally unique
         * identifier (UUID).</p>
         * <p>If you're unsure whether a particular request was successful,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate objects.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
         */
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(BatchUpsertCatalogObjectsRequest other);
    }

    public interface _FinalStage {
        BatchUpsertCatalogObjectsRequest build();

        /**
         * <p>A batch of CatalogObjects to be inserted/updated atomically.
         * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
         * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
         * in one batch will not affect other batches within the same request.</p>
         * <p>For each object, its <code>updated_at</code> field is ignored and replaced with a current <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, and its
         * <code>is_deleted</code> field must not be set to <code>true</code>.</p>
         * <p>To modify an existing object, supply its ID. To create a new object, use an ID starting
         * with <code>#</code>. These IDs may be used to create relationships between an object and attributes of
         * other objects that reference it. For example, you can create a CatalogItem with
         * ID <code>#ABC</code> and a CatalogItemVariation with its <code>item_id</code> attribute set to
         * <code>#ABC</code> in order to associate the CatalogItemVariation with its parent
         * CatalogItem.</p>
         * <p>Any <code>#</code>-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.</p>
         * <p>Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
         * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
         * be inserted or updated.</p>
         */
        _FinalStage batches(List<CatalogObjectBatch> batches);

        _FinalStage addBatches(CatalogObjectBatch batches);

        _FinalStage addAllBatches(List<CatalogObjectBatch> batches);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, _FinalStage {
        private String idempotencyKey;

        private List<CatalogObjectBatch> batches = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchUpsertCatalogObjectsRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            batches(other.getBatches());
            return this;
        }

        /**
         * <p>A value you specify that uniquely identifies this
         * request among all your requests. A common way to create
         * a valid idempotency key is to use a Universally unique
         * identifier (UUID).</p>
         * <p>If you're unsure whether a particular request was successful,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate objects.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
         * <p>A value you specify that uniquely identifies this
         * request among all your requests. A common way to create
         * a valid idempotency key is to use a Universally unique
         * identifier (UUID).</p>
         * <p>If you're unsure whether a particular request was successful,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate objects.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>A batch of CatalogObjects to be inserted/updated atomically.
         * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
         * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
         * in one batch will not affect other batches within the same request.</p>
         * <p>For each object, its <code>updated_at</code> field is ignored and replaced with a current <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, and its
         * <code>is_deleted</code> field must not be set to <code>true</code>.</p>
         * <p>To modify an existing object, supply its ID. To create a new object, use an ID starting
         * with <code>#</code>. These IDs may be used to create relationships between an object and attributes of
         * other objects that reference it. For example, you can create a CatalogItem with
         * ID <code>#ABC</code> and a CatalogItemVariation with its <code>item_id</code> attribute set to
         * <code>#ABC</code> in order to associate the CatalogItemVariation with its parent
         * CatalogItem.</p>
         * <p>Any <code>#</code>-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.</p>
         * <p>Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
         * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
         * be inserted or updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllBatches(List<CatalogObjectBatch> batches) {
            if (batches != null) {
                this.batches.addAll(batches);
            }
            return this;
        }

        /**
         * <p>A batch of CatalogObjects to be inserted/updated atomically.
         * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
         * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
         * in one batch will not affect other batches within the same request.</p>
         * <p>For each object, its <code>updated_at</code> field is ignored and replaced with a current <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, and its
         * <code>is_deleted</code> field must not be set to <code>true</code>.</p>
         * <p>To modify an existing object, supply its ID. To create a new object, use an ID starting
         * with <code>#</code>. These IDs may be used to create relationships between an object and attributes of
         * other objects that reference it. For example, you can create a CatalogItem with
         * ID <code>#ABC</code> and a CatalogItemVariation with its <code>item_id</code> attribute set to
         * <code>#ABC</code> in order to associate the CatalogItemVariation with its parent
         * CatalogItem.</p>
         * <p>Any <code>#</code>-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.</p>
         * <p>Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
         * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
         * be inserted or updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addBatches(CatalogObjectBatch batches) {
            this.batches.add(batches);
            return this;
        }

        /**
         * <p>A batch of CatalogObjects to be inserted/updated atomically.
         * The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
         * attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
         * in one batch will not affect other batches within the same request.</p>
         * <p>For each object, its <code>updated_at</code> field is ignored and replaced with a current <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, and its
         * <code>is_deleted</code> field must not be set to <code>true</code>.</p>
         * <p>To modify an existing object, supply its ID. To create a new object, use an ID starting
         * with <code>#</code>. These IDs may be used to create relationships between an object and attributes of
         * other objects that reference it. For example, you can create a CatalogItem with
         * ID <code>#ABC</code> and a CatalogItemVariation with its <code>item_id</code> attribute set to
         * <code>#ABC</code> in order to associate the CatalogItemVariation with its parent
         * CatalogItem.</p>
         * <p>Any <code>#</code>-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.</p>
         * <p>Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
         * may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
         * be inserted or updated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batches", nulls = Nulls.SKIP)
        public _FinalStage batches(List<CatalogObjectBatch> batches) {
            this.batches.clear();
            this.batches.addAll(batches);
            return this;
        }

        @java.lang.Override
        public BatchUpsertCatalogObjectsRequest build() {
            return new BatchUpsertCatalogObjectsRequest(idempotencyKey, batches, additionalProperties);
        }
    }
}
