/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogInfoResponseLimits.Builder.class)
public final class CatalogInfoResponseLimits {
    private final Optional<Integer> batchUpsertMaxObjectsPerBatch;

    private final Optional<Integer> batchUpsertMaxTotalObjects;

    private final Optional<Integer> batchRetrieveMaxObjectIds;

    private final Optional<Integer> searchMaxPageLimit;

    private final Optional<Integer> batchDeleteMaxObjectIds;

    private final Optional<Integer> updateItemTaxesMaxItemIds;

    private final Optional<Integer> updateItemTaxesMaxTaxesToEnable;

    private final Optional<Integer> updateItemTaxesMaxTaxesToDisable;

    private final Optional<Integer> updateItemModifierListsMaxItemIds;

    private final Optional<Integer> updateItemModifierListsMaxModifierListsToEnable;

    private final Optional<Integer> updateItemModifierListsMaxModifierListsToDisable;

    private final Map<String, Object> additionalProperties;

    private CatalogInfoResponseLimits(
            Optional<Integer> batchUpsertMaxObjectsPerBatch,
            Optional<Integer> batchUpsertMaxTotalObjects,
            Optional<Integer> batchRetrieveMaxObjectIds,
            Optional<Integer> searchMaxPageLimit,
            Optional<Integer> batchDeleteMaxObjectIds,
            Optional<Integer> updateItemTaxesMaxItemIds,
            Optional<Integer> updateItemTaxesMaxTaxesToEnable,
            Optional<Integer> updateItemTaxesMaxTaxesToDisable,
            Optional<Integer> updateItemModifierListsMaxItemIds,
            Optional<Integer> updateItemModifierListsMaxModifierListsToEnable,
            Optional<Integer> updateItemModifierListsMaxModifierListsToDisable,
            Map<String, Object> additionalProperties) {
        this.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch;
        this.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects;
        this.batchRetrieveMaxObjectIds = batchRetrieveMaxObjectIds;
        this.searchMaxPageLimit = searchMaxPageLimit;
        this.batchDeleteMaxObjectIds = batchDeleteMaxObjectIds;
        this.updateItemTaxesMaxItemIds = updateItemTaxesMaxItemIds;
        this.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable;
        this.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable;
        this.updateItemModifierListsMaxItemIds = updateItemModifierListsMaxItemIds;
        this.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable;
        this.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The maximum number of objects that may appear within a single batch in a
     * <code>/v2/catalog/batch-upsert</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getBatchUpsertMaxObjectsPerBatch() {
        if (batchUpsertMaxObjectsPerBatch == null) {
            return Optional.empty();
        }
        return batchUpsertMaxObjectsPerBatch;
    }

    /**
     * @return The maximum number of objects that may appear across all batches in a
     * <code>/v2/catalog/batch-upsert</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getBatchUpsertMaxTotalObjects() {
        if (batchUpsertMaxTotalObjects == null) {
            return Optional.empty();
        }
        return batchUpsertMaxTotalObjects;
    }

    /**
     * @return The maximum number of object IDs that may appear in a <code>/v2/catalog/batch-retrieve</code>
     * request.
     */
    @JsonIgnore
    public Optional<Integer> getBatchRetrieveMaxObjectIds() {
        if (batchRetrieveMaxObjectIds == null) {
            return Optional.empty();
        }
        return batchRetrieveMaxObjectIds;
    }

    /**
     * @return The maximum number of results that may be returned in a page of a
     * <code>/v2/catalog/search</code> response.
     */
    @JsonIgnore
    public Optional<Integer> getSearchMaxPageLimit() {
        if (searchMaxPageLimit == null) {
            return Optional.empty();
        }
        return searchMaxPageLimit;
    }

    /**
     * @return The maximum number of object IDs that may be included in a single
     * <code>/v2/catalog/batch-delete</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getBatchDeleteMaxObjectIds() {
        if (batchDeleteMaxObjectIds == null) {
            return Optional.empty();
        }
        return batchDeleteMaxObjectIds;
    }

    /**
     * @return The maximum number of item IDs that may be included in a single
     * <code>/v2/catalog/update-item-taxes</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemTaxesMaxItemIds() {
        if (updateItemTaxesMaxItemIds == null) {
            return Optional.empty();
        }
        return updateItemTaxesMaxItemIds;
    }

    /**
     * @return The maximum number of tax IDs to be enabled that may be included in a single
     * <code>/v2/catalog/update-item-taxes</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemTaxesMaxTaxesToEnable() {
        if (updateItemTaxesMaxTaxesToEnable == null) {
            return Optional.empty();
        }
        return updateItemTaxesMaxTaxesToEnable;
    }

    /**
     * @return The maximum number of tax IDs to be disabled that may be included in a single
     * <code>/v2/catalog/update-item-taxes</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemTaxesMaxTaxesToDisable() {
        if (updateItemTaxesMaxTaxesToDisable == null) {
            return Optional.empty();
        }
        return updateItemTaxesMaxTaxesToDisable;
    }

    /**
     * @return The maximum number of item IDs that may be included in a single
     * <code>/v2/catalog/update-item-modifier-lists</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemModifierListsMaxItemIds() {
        if (updateItemModifierListsMaxItemIds == null) {
            return Optional.empty();
        }
        return updateItemModifierListsMaxItemIds;
    }

    /**
     * @return The maximum number of modifier list IDs to be enabled that may be included in
     * a single <code>/v2/catalog/update-item-modifier-lists</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemModifierListsMaxModifierListsToEnable() {
        if (updateItemModifierListsMaxModifierListsToEnable == null) {
            return Optional.empty();
        }
        return updateItemModifierListsMaxModifierListsToEnable;
    }

    /**
     * @return The maximum number of modifier list IDs to be disabled that may be included in
     * a single <code>/v2/catalog/update-item-modifier-lists</code> request.
     */
    @JsonIgnore
    public Optional<Integer> getUpdateItemModifierListsMaxModifierListsToDisable() {
        if (updateItemModifierListsMaxModifierListsToDisable == null) {
            return Optional.empty();
        }
        return updateItemModifierListsMaxModifierListsToDisable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("batch_upsert_max_objects_per_batch")
    private Optional<Integer> _getBatchUpsertMaxObjectsPerBatch() {
        return batchUpsertMaxObjectsPerBatch;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("batch_upsert_max_total_objects")
    private Optional<Integer> _getBatchUpsertMaxTotalObjects() {
        return batchUpsertMaxTotalObjects;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("batch_retrieve_max_object_ids")
    private Optional<Integer> _getBatchRetrieveMaxObjectIds() {
        return batchRetrieveMaxObjectIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("search_max_page_limit")
    private Optional<Integer> _getSearchMaxPageLimit() {
        return searchMaxPageLimit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("batch_delete_max_object_ids")
    private Optional<Integer> _getBatchDeleteMaxObjectIds() {
        return batchDeleteMaxObjectIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_taxes_max_item_ids")
    private Optional<Integer> _getUpdateItemTaxesMaxItemIds() {
        return updateItemTaxesMaxItemIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_taxes_max_taxes_to_enable")
    private Optional<Integer> _getUpdateItemTaxesMaxTaxesToEnable() {
        return updateItemTaxesMaxTaxesToEnable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_taxes_max_taxes_to_disable")
    private Optional<Integer> _getUpdateItemTaxesMaxTaxesToDisable() {
        return updateItemTaxesMaxTaxesToDisable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_modifier_lists_max_item_ids")
    private Optional<Integer> _getUpdateItemModifierListsMaxItemIds() {
        return updateItemModifierListsMaxItemIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_modifier_lists_max_modifier_lists_to_enable")
    private Optional<Integer> _getUpdateItemModifierListsMaxModifierListsToEnable() {
        return updateItemModifierListsMaxModifierListsToEnable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("update_item_modifier_lists_max_modifier_lists_to_disable")
    private Optional<Integer> _getUpdateItemModifierListsMaxModifierListsToDisable() {
        return updateItemModifierListsMaxModifierListsToDisable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogInfoResponseLimits && equalTo((CatalogInfoResponseLimits) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogInfoResponseLimits other) {
        return batchUpsertMaxObjectsPerBatch.equals(other.batchUpsertMaxObjectsPerBatch)
                && batchUpsertMaxTotalObjects.equals(other.batchUpsertMaxTotalObjects)
                && batchRetrieveMaxObjectIds.equals(other.batchRetrieveMaxObjectIds)
                && searchMaxPageLimit.equals(other.searchMaxPageLimit)
                && batchDeleteMaxObjectIds.equals(other.batchDeleteMaxObjectIds)
                && updateItemTaxesMaxItemIds.equals(other.updateItemTaxesMaxItemIds)
                && updateItemTaxesMaxTaxesToEnable.equals(other.updateItemTaxesMaxTaxesToEnable)
                && updateItemTaxesMaxTaxesToDisable.equals(other.updateItemTaxesMaxTaxesToDisable)
                && updateItemModifierListsMaxItemIds.equals(other.updateItemModifierListsMaxItemIds)
                && updateItemModifierListsMaxModifierListsToEnable.equals(
                        other.updateItemModifierListsMaxModifierListsToEnable)
                && updateItemModifierListsMaxModifierListsToDisable.equals(
                        other.updateItemModifierListsMaxModifierListsToDisable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batchUpsertMaxObjectsPerBatch,
                this.batchUpsertMaxTotalObjects,
                this.batchRetrieveMaxObjectIds,
                this.searchMaxPageLimit,
                this.batchDeleteMaxObjectIds,
                this.updateItemTaxesMaxItemIds,
                this.updateItemTaxesMaxTaxesToEnable,
                this.updateItemTaxesMaxTaxesToDisable,
                this.updateItemModifierListsMaxItemIds,
                this.updateItemModifierListsMaxModifierListsToEnable,
                this.updateItemModifierListsMaxModifierListsToDisable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> batchUpsertMaxObjectsPerBatch = Optional.empty();

        private Optional<Integer> batchUpsertMaxTotalObjects = Optional.empty();

        private Optional<Integer> batchRetrieveMaxObjectIds = Optional.empty();

        private Optional<Integer> searchMaxPageLimit = Optional.empty();

        private Optional<Integer> batchDeleteMaxObjectIds = Optional.empty();

        private Optional<Integer> updateItemTaxesMaxItemIds = Optional.empty();

        private Optional<Integer> updateItemTaxesMaxTaxesToEnable = Optional.empty();

        private Optional<Integer> updateItemTaxesMaxTaxesToDisable = Optional.empty();

        private Optional<Integer> updateItemModifierListsMaxItemIds = Optional.empty();

        private Optional<Integer> updateItemModifierListsMaxModifierListsToEnable = Optional.empty();

        private Optional<Integer> updateItemModifierListsMaxModifierListsToDisable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogInfoResponseLimits other) {
            batchUpsertMaxObjectsPerBatch(other.getBatchUpsertMaxObjectsPerBatch());
            batchUpsertMaxTotalObjects(other.getBatchUpsertMaxTotalObjects());
            batchRetrieveMaxObjectIds(other.getBatchRetrieveMaxObjectIds());
            searchMaxPageLimit(other.getSearchMaxPageLimit());
            batchDeleteMaxObjectIds(other.getBatchDeleteMaxObjectIds());
            updateItemTaxesMaxItemIds(other.getUpdateItemTaxesMaxItemIds());
            updateItemTaxesMaxTaxesToEnable(other.getUpdateItemTaxesMaxTaxesToEnable());
            updateItemTaxesMaxTaxesToDisable(other.getUpdateItemTaxesMaxTaxesToDisable());
            updateItemModifierListsMaxItemIds(other.getUpdateItemModifierListsMaxItemIds());
            updateItemModifierListsMaxModifierListsToEnable(other.getUpdateItemModifierListsMaxModifierListsToEnable());
            updateItemModifierListsMaxModifierListsToDisable(
                    other.getUpdateItemModifierListsMaxModifierListsToDisable());
            return this;
        }

        @JsonSetter(value = "batch_upsert_max_objects_per_batch", nulls = Nulls.SKIP)
        public Builder batchUpsertMaxObjectsPerBatch(Optional<Integer> batchUpsertMaxObjectsPerBatch) {
            this.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch;
            return this;
        }

        public Builder batchUpsertMaxObjectsPerBatch(Integer batchUpsertMaxObjectsPerBatch) {
            this.batchUpsertMaxObjectsPerBatch = Optional.ofNullable(batchUpsertMaxObjectsPerBatch);
            return this;
        }

        public Builder batchUpsertMaxObjectsPerBatch(Nullable<Integer> batchUpsertMaxObjectsPerBatch) {
            if (batchUpsertMaxObjectsPerBatch.isNull()) {
                this.batchUpsertMaxObjectsPerBatch = null;
            } else if (batchUpsertMaxObjectsPerBatch.isEmpty()) {
                this.batchUpsertMaxObjectsPerBatch = Optional.empty();
            } else {
                this.batchUpsertMaxObjectsPerBatch = Optional.of(batchUpsertMaxObjectsPerBatch.get());
            }
            return this;
        }

        @JsonSetter(value = "batch_upsert_max_total_objects", nulls = Nulls.SKIP)
        public Builder batchUpsertMaxTotalObjects(Optional<Integer> batchUpsertMaxTotalObjects) {
            this.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects;
            return this;
        }

        public Builder batchUpsertMaxTotalObjects(Integer batchUpsertMaxTotalObjects) {
            this.batchUpsertMaxTotalObjects = Optional.ofNullable(batchUpsertMaxTotalObjects);
            return this;
        }

        public Builder batchUpsertMaxTotalObjects(Nullable<Integer> batchUpsertMaxTotalObjects) {
            if (batchUpsertMaxTotalObjects.isNull()) {
                this.batchUpsertMaxTotalObjects = null;
            } else if (batchUpsertMaxTotalObjects.isEmpty()) {
                this.batchUpsertMaxTotalObjects = Optional.empty();
            } else {
                this.batchUpsertMaxTotalObjects = Optional.of(batchUpsertMaxTotalObjects.get());
            }
            return this;
        }

        @JsonSetter(value = "batch_retrieve_max_object_ids", nulls = Nulls.SKIP)
        public Builder batchRetrieveMaxObjectIds(Optional<Integer> batchRetrieveMaxObjectIds) {
            this.batchRetrieveMaxObjectIds = batchRetrieveMaxObjectIds;
            return this;
        }

        public Builder batchRetrieveMaxObjectIds(Integer batchRetrieveMaxObjectIds) {
            this.batchRetrieveMaxObjectIds = Optional.ofNullable(batchRetrieveMaxObjectIds);
            return this;
        }

        public Builder batchRetrieveMaxObjectIds(Nullable<Integer> batchRetrieveMaxObjectIds) {
            if (batchRetrieveMaxObjectIds.isNull()) {
                this.batchRetrieveMaxObjectIds = null;
            } else if (batchRetrieveMaxObjectIds.isEmpty()) {
                this.batchRetrieveMaxObjectIds = Optional.empty();
            } else {
                this.batchRetrieveMaxObjectIds = Optional.of(batchRetrieveMaxObjectIds.get());
            }
            return this;
        }

        @JsonSetter(value = "search_max_page_limit", nulls = Nulls.SKIP)
        public Builder searchMaxPageLimit(Optional<Integer> searchMaxPageLimit) {
            this.searchMaxPageLimit = searchMaxPageLimit;
            return this;
        }

        public Builder searchMaxPageLimit(Integer searchMaxPageLimit) {
            this.searchMaxPageLimit = Optional.ofNullable(searchMaxPageLimit);
            return this;
        }

        public Builder searchMaxPageLimit(Nullable<Integer> searchMaxPageLimit) {
            if (searchMaxPageLimit.isNull()) {
                this.searchMaxPageLimit = null;
            } else if (searchMaxPageLimit.isEmpty()) {
                this.searchMaxPageLimit = Optional.empty();
            } else {
                this.searchMaxPageLimit = Optional.of(searchMaxPageLimit.get());
            }
            return this;
        }

        @JsonSetter(value = "batch_delete_max_object_ids", nulls = Nulls.SKIP)
        public Builder batchDeleteMaxObjectIds(Optional<Integer> batchDeleteMaxObjectIds) {
            this.batchDeleteMaxObjectIds = batchDeleteMaxObjectIds;
            return this;
        }

        public Builder batchDeleteMaxObjectIds(Integer batchDeleteMaxObjectIds) {
            this.batchDeleteMaxObjectIds = Optional.ofNullable(batchDeleteMaxObjectIds);
            return this;
        }

        public Builder batchDeleteMaxObjectIds(Nullable<Integer> batchDeleteMaxObjectIds) {
            if (batchDeleteMaxObjectIds.isNull()) {
                this.batchDeleteMaxObjectIds = null;
            } else if (batchDeleteMaxObjectIds.isEmpty()) {
                this.batchDeleteMaxObjectIds = Optional.empty();
            } else {
                this.batchDeleteMaxObjectIds = Optional.of(batchDeleteMaxObjectIds.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_taxes_max_item_ids", nulls = Nulls.SKIP)
        public Builder updateItemTaxesMaxItemIds(Optional<Integer> updateItemTaxesMaxItemIds) {
            this.updateItemTaxesMaxItemIds = updateItemTaxesMaxItemIds;
            return this;
        }

        public Builder updateItemTaxesMaxItemIds(Integer updateItemTaxesMaxItemIds) {
            this.updateItemTaxesMaxItemIds = Optional.ofNullable(updateItemTaxesMaxItemIds);
            return this;
        }

        public Builder updateItemTaxesMaxItemIds(Nullable<Integer> updateItemTaxesMaxItemIds) {
            if (updateItemTaxesMaxItemIds.isNull()) {
                this.updateItemTaxesMaxItemIds = null;
            } else if (updateItemTaxesMaxItemIds.isEmpty()) {
                this.updateItemTaxesMaxItemIds = Optional.empty();
            } else {
                this.updateItemTaxesMaxItemIds = Optional.of(updateItemTaxesMaxItemIds.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_taxes_max_taxes_to_enable", nulls = Nulls.SKIP)
        public Builder updateItemTaxesMaxTaxesToEnable(Optional<Integer> updateItemTaxesMaxTaxesToEnable) {
            this.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable;
            return this;
        }

        public Builder updateItemTaxesMaxTaxesToEnable(Integer updateItemTaxesMaxTaxesToEnable) {
            this.updateItemTaxesMaxTaxesToEnable = Optional.ofNullable(updateItemTaxesMaxTaxesToEnable);
            return this;
        }

        public Builder updateItemTaxesMaxTaxesToEnable(Nullable<Integer> updateItemTaxesMaxTaxesToEnable) {
            if (updateItemTaxesMaxTaxesToEnable.isNull()) {
                this.updateItemTaxesMaxTaxesToEnable = null;
            } else if (updateItemTaxesMaxTaxesToEnable.isEmpty()) {
                this.updateItemTaxesMaxTaxesToEnable = Optional.empty();
            } else {
                this.updateItemTaxesMaxTaxesToEnable = Optional.of(updateItemTaxesMaxTaxesToEnable.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_taxes_max_taxes_to_disable", nulls = Nulls.SKIP)
        public Builder updateItemTaxesMaxTaxesToDisable(Optional<Integer> updateItemTaxesMaxTaxesToDisable) {
            this.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable;
            return this;
        }

        public Builder updateItemTaxesMaxTaxesToDisable(Integer updateItemTaxesMaxTaxesToDisable) {
            this.updateItemTaxesMaxTaxesToDisable = Optional.ofNullable(updateItemTaxesMaxTaxesToDisable);
            return this;
        }

        public Builder updateItemTaxesMaxTaxesToDisable(Nullable<Integer> updateItemTaxesMaxTaxesToDisable) {
            if (updateItemTaxesMaxTaxesToDisable.isNull()) {
                this.updateItemTaxesMaxTaxesToDisable = null;
            } else if (updateItemTaxesMaxTaxesToDisable.isEmpty()) {
                this.updateItemTaxesMaxTaxesToDisable = Optional.empty();
            } else {
                this.updateItemTaxesMaxTaxesToDisable = Optional.of(updateItemTaxesMaxTaxesToDisable.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_modifier_lists_max_item_ids", nulls = Nulls.SKIP)
        public Builder updateItemModifierListsMaxItemIds(Optional<Integer> updateItemModifierListsMaxItemIds) {
            this.updateItemModifierListsMaxItemIds = updateItemModifierListsMaxItemIds;
            return this;
        }

        public Builder updateItemModifierListsMaxItemIds(Integer updateItemModifierListsMaxItemIds) {
            this.updateItemModifierListsMaxItemIds = Optional.ofNullable(updateItemModifierListsMaxItemIds);
            return this;
        }

        public Builder updateItemModifierListsMaxItemIds(Nullable<Integer> updateItemModifierListsMaxItemIds) {
            if (updateItemModifierListsMaxItemIds.isNull()) {
                this.updateItemModifierListsMaxItemIds = null;
            } else if (updateItemModifierListsMaxItemIds.isEmpty()) {
                this.updateItemModifierListsMaxItemIds = Optional.empty();
            } else {
                this.updateItemModifierListsMaxItemIds = Optional.of(updateItemModifierListsMaxItemIds.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_modifier_lists_max_modifier_lists_to_enable", nulls = Nulls.SKIP)
        public Builder updateItemModifierListsMaxModifierListsToEnable(
                Optional<Integer> updateItemModifierListsMaxModifierListsToEnable) {
            this.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable;
            return this;
        }

        public Builder updateItemModifierListsMaxModifierListsToEnable(
                Integer updateItemModifierListsMaxModifierListsToEnable) {
            this.updateItemModifierListsMaxModifierListsToEnable =
                    Optional.ofNullable(updateItemModifierListsMaxModifierListsToEnable);
            return this;
        }

        public Builder updateItemModifierListsMaxModifierListsToEnable(
                Nullable<Integer> updateItemModifierListsMaxModifierListsToEnable) {
            if (updateItemModifierListsMaxModifierListsToEnable.isNull()) {
                this.updateItemModifierListsMaxModifierListsToEnable = null;
            } else if (updateItemModifierListsMaxModifierListsToEnable.isEmpty()) {
                this.updateItemModifierListsMaxModifierListsToEnable = Optional.empty();
            } else {
                this.updateItemModifierListsMaxModifierListsToEnable =
                        Optional.of(updateItemModifierListsMaxModifierListsToEnable.get());
            }
            return this;
        }

        @JsonSetter(value = "update_item_modifier_lists_max_modifier_lists_to_disable", nulls = Nulls.SKIP)
        public Builder updateItemModifierListsMaxModifierListsToDisable(
                Optional<Integer> updateItemModifierListsMaxModifierListsToDisable) {
            this.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable;
            return this;
        }

        public Builder updateItemModifierListsMaxModifierListsToDisable(
                Integer updateItemModifierListsMaxModifierListsToDisable) {
            this.updateItemModifierListsMaxModifierListsToDisable =
                    Optional.ofNullable(updateItemModifierListsMaxModifierListsToDisable);
            return this;
        }

        public Builder updateItemModifierListsMaxModifierListsToDisable(
                Nullable<Integer> updateItemModifierListsMaxModifierListsToDisable) {
            if (updateItemModifierListsMaxModifierListsToDisable.isNull()) {
                this.updateItemModifierListsMaxModifierListsToDisable = null;
            } else if (updateItemModifierListsMaxModifierListsToDisable.isEmpty()) {
                this.updateItemModifierListsMaxModifierListsToDisable = Optional.empty();
            } else {
                this.updateItemModifierListsMaxModifierListsToDisable =
                        Optional.of(updateItemModifierListsMaxModifierListsToDisable.get());
            }
            return this;
        }

        public CatalogInfoResponseLimits build() {
            return new CatalogInfoResponseLimits(
                    batchUpsertMaxObjectsPerBatch,
                    batchUpsertMaxTotalObjects,
                    batchRetrieveMaxObjectIds,
                    searchMaxPageLimit,
                    batchDeleteMaxObjectIds,
                    updateItemTaxesMaxItemIds,
                    updateItemTaxesMaxTaxesToEnable,
                    updateItemTaxesMaxTaxesToDisable,
                    updateItemModifierListsMaxItemIds,
                    updateItemModifierListsMaxModifierListsToEnable,
                    updateItemModifierListsMaxModifierListsToDisable,
                    additionalProperties);
        }
    }
}
