/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQuery.Builder.class)
public final class CatalogQuery {
    private final Optional<CatalogQuerySortedAttribute> sortedAttributeQuery;

    private final Optional<CatalogQueryExact> exactQuery;

    private final Optional<CatalogQuerySet> setQuery;

    private final Optional<CatalogQueryPrefix> prefixQuery;

    private final Optional<CatalogQueryRange> rangeQuery;

    private final Optional<CatalogQueryText> textQuery;

    private final Optional<CatalogQueryItemsForTax> itemsForTaxQuery;

    private final Optional<CatalogQueryItemsForModifierList> itemsForModifierListQuery;

    private final Optional<CatalogQueryItemsForItemOptions> itemsForItemOptionsQuery;

    private final Optional<CatalogQueryItemVariationsForItemOptionValues> itemVariationsForItemOptionValuesQuery;

    private final Map<String, Object> additionalProperties;

    private CatalogQuery(
            Optional<CatalogQuerySortedAttribute> sortedAttributeQuery,
            Optional<CatalogQueryExact> exactQuery,
            Optional<CatalogQuerySet> setQuery,
            Optional<CatalogQueryPrefix> prefixQuery,
            Optional<CatalogQueryRange> rangeQuery,
            Optional<CatalogQueryText> textQuery,
            Optional<CatalogQueryItemsForTax> itemsForTaxQuery,
            Optional<CatalogQueryItemsForModifierList> itemsForModifierListQuery,
            Optional<CatalogQueryItemsForItemOptions> itemsForItemOptionsQuery,
            Optional<CatalogQueryItemVariationsForItemOptionValues> itemVariationsForItemOptionValuesQuery,
            Map<String, Object> additionalProperties) {
        this.sortedAttributeQuery = sortedAttributeQuery;
        this.exactQuery = exactQuery;
        this.setQuery = setQuery;
        this.prefixQuery = prefixQuery;
        this.rangeQuery = rangeQuery;
        this.textQuery = textQuery;
        this.itemsForTaxQuery = itemsForTaxQuery;
        this.itemsForModifierListQuery = itemsForModifierListQuery;
        this.itemsForItemOptionsQuery = itemsForItemOptionsQuery;
        this.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A query expression to sort returned query result by the given attribute.
     */
    @JsonProperty("sorted_attribute_query")
    public Optional<CatalogQuerySortedAttribute> getSortedAttributeQuery() {
        return sortedAttributeQuery;
    }

    /**
     * @return An exact query expression to return objects with attribute name and value
     * matching the specified attribute name and value exactly. Value matching is case insensitive.
     */
    @JsonProperty("exact_query")
    public Optional<CatalogQueryExact> getExactQuery() {
        return exactQuery;
    }

    /**
     * @return A set query expression to return objects with attribute name and value
     * matching the specified attribute name and any of the specified attribute values exactly.
     * Value matching is case insensitive.
     */
    @JsonProperty("set_query")
    public Optional<CatalogQuerySet> getSetQuery() {
        return setQuery;
    }

    /**
     * @return A prefix query expression to return objects with attribute values
     * that have a prefix matching the specified string value. Value matching is case insensitive.
     */
    @JsonProperty("prefix_query")
    public Optional<CatalogQueryPrefix> getPrefixQuery() {
        return prefixQuery;
    }

    /**
     * @return A range query expression to return objects with numeric values
     * that lie in the specified range.
     */
    @JsonProperty("range_query")
    public Optional<CatalogQueryRange> getRangeQuery() {
        return rangeQuery;
    }

    /**
     * @return A text query expression to return objects whose searchable attributes contain all of the given
     * keywords, irrespective of their order. For example, if a <code>CatalogItem</code> contains custom attribute values of
     * <code>{&quot;name&quot;: &quot;t-shirt&quot;}</code> and <code>{&quot;description&quot;: &quot;Small, Purple&quot;}</code>, the query filter of <code>{&quot;keywords&quot;: [&quot;shirt&quot;, &quot;sma&quot;, &quot;purp&quot;]}</code>
     * returns this item.
     */
    @JsonProperty("text_query")
    public Optional<CatalogQueryText> getTextQuery() {
        return textQuery;
    }

    /**
     * @return A query expression to return items that have any of the specified taxes (as identified by the corresponding <code>CatalogTax</code> object IDs) enabled.
     */
    @JsonProperty("items_for_tax_query")
    public Optional<CatalogQueryItemsForTax> getItemsForTaxQuery() {
        return itemsForTaxQuery;
    }

    /**
     * @return A query expression to return items that have any of the given modifier list (as identified by the corresponding <code>CatalogModifierList</code>s IDs) enabled.
     */
    @JsonProperty("items_for_modifier_list_query")
    public Optional<CatalogQueryItemsForModifierList> getItemsForModifierListQuery() {
        return itemsForModifierListQuery;
    }

    /**
     * @return A query expression to return items that contains the specified item options (as identified the corresponding <code>CatalogItemOption</code> IDs).
     */
    @JsonProperty("items_for_item_options_query")
    public Optional<CatalogQueryItemsForItemOptions> getItemsForItemOptionsQuery() {
        return itemsForItemOptionsQuery;
    }

    /**
     * @return A query expression to return item variations (of the <a href="entity:CatalogItemVariation">CatalogItemVariation</a> type) that
     * contain all of the specified <code>CatalogItemOption</code> IDs.
     */
    @JsonProperty("item_variations_for_item_option_values_query")
    public Optional<CatalogQueryItemVariationsForItemOptionValues> getItemVariationsForItemOptionValuesQuery() {
        return itemVariationsForItemOptionValuesQuery;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQuery && equalTo((CatalogQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQuery other) {
        return sortedAttributeQuery.equals(other.sortedAttributeQuery)
                && exactQuery.equals(other.exactQuery)
                && setQuery.equals(other.setQuery)
                && prefixQuery.equals(other.prefixQuery)
                && rangeQuery.equals(other.rangeQuery)
                && textQuery.equals(other.textQuery)
                && itemsForTaxQuery.equals(other.itemsForTaxQuery)
                && itemsForModifierListQuery.equals(other.itemsForModifierListQuery)
                && itemsForItemOptionsQuery.equals(other.itemsForItemOptionsQuery)
                && itemVariationsForItemOptionValuesQuery.equals(other.itemVariationsForItemOptionValuesQuery);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sortedAttributeQuery,
                this.exactQuery,
                this.setQuery,
                this.prefixQuery,
                this.rangeQuery,
                this.textQuery,
                this.itemsForTaxQuery,
                this.itemsForModifierListQuery,
                this.itemsForItemOptionsQuery,
                this.itemVariationsForItemOptionValuesQuery);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CatalogQuerySortedAttribute> sortedAttributeQuery = Optional.empty();

        private Optional<CatalogQueryExact> exactQuery = Optional.empty();

        private Optional<CatalogQuerySet> setQuery = Optional.empty();

        private Optional<CatalogQueryPrefix> prefixQuery = Optional.empty();

        private Optional<CatalogQueryRange> rangeQuery = Optional.empty();

        private Optional<CatalogQueryText> textQuery = Optional.empty();

        private Optional<CatalogQueryItemsForTax> itemsForTaxQuery = Optional.empty();

        private Optional<CatalogQueryItemsForModifierList> itemsForModifierListQuery = Optional.empty();

        private Optional<CatalogQueryItemsForItemOptions> itemsForItemOptionsQuery = Optional.empty();

        private Optional<CatalogQueryItemVariationsForItemOptionValues> itemVariationsForItemOptionValuesQuery =
                Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogQuery other) {
            sortedAttributeQuery(other.getSortedAttributeQuery());
            exactQuery(other.getExactQuery());
            setQuery(other.getSetQuery());
            prefixQuery(other.getPrefixQuery());
            rangeQuery(other.getRangeQuery());
            textQuery(other.getTextQuery());
            itemsForTaxQuery(other.getItemsForTaxQuery());
            itemsForModifierListQuery(other.getItemsForModifierListQuery());
            itemsForItemOptionsQuery(other.getItemsForItemOptionsQuery());
            itemVariationsForItemOptionValuesQuery(other.getItemVariationsForItemOptionValuesQuery());
            return this;
        }

        @JsonSetter(value = "sorted_attribute_query", nulls = Nulls.SKIP)
        public Builder sortedAttributeQuery(Optional<CatalogQuerySortedAttribute> sortedAttributeQuery) {
            this.sortedAttributeQuery = sortedAttributeQuery;
            return this;
        }

        public Builder sortedAttributeQuery(CatalogQuerySortedAttribute sortedAttributeQuery) {
            this.sortedAttributeQuery = Optional.ofNullable(sortedAttributeQuery);
            return this;
        }

        @JsonSetter(value = "exact_query", nulls = Nulls.SKIP)
        public Builder exactQuery(Optional<CatalogQueryExact> exactQuery) {
            this.exactQuery = exactQuery;
            return this;
        }

        public Builder exactQuery(CatalogQueryExact exactQuery) {
            this.exactQuery = Optional.ofNullable(exactQuery);
            return this;
        }

        @JsonSetter(value = "set_query", nulls = Nulls.SKIP)
        public Builder setQuery(Optional<CatalogQuerySet> setQuery) {
            this.setQuery = setQuery;
            return this;
        }

        public Builder setQuery(CatalogQuerySet setQuery) {
            this.setQuery = Optional.ofNullable(setQuery);
            return this;
        }

        @JsonSetter(value = "prefix_query", nulls = Nulls.SKIP)
        public Builder prefixQuery(Optional<CatalogQueryPrefix> prefixQuery) {
            this.prefixQuery = prefixQuery;
            return this;
        }

        public Builder prefixQuery(CatalogQueryPrefix prefixQuery) {
            this.prefixQuery = Optional.ofNullable(prefixQuery);
            return this;
        }

        @JsonSetter(value = "range_query", nulls = Nulls.SKIP)
        public Builder rangeQuery(Optional<CatalogQueryRange> rangeQuery) {
            this.rangeQuery = rangeQuery;
            return this;
        }

        public Builder rangeQuery(CatalogQueryRange rangeQuery) {
            this.rangeQuery = Optional.ofNullable(rangeQuery);
            return this;
        }

        @JsonSetter(value = "text_query", nulls = Nulls.SKIP)
        public Builder textQuery(Optional<CatalogQueryText> textQuery) {
            this.textQuery = textQuery;
            return this;
        }

        public Builder textQuery(CatalogQueryText textQuery) {
            this.textQuery = Optional.ofNullable(textQuery);
            return this;
        }

        @JsonSetter(value = "items_for_tax_query", nulls = Nulls.SKIP)
        public Builder itemsForTaxQuery(Optional<CatalogQueryItemsForTax> itemsForTaxQuery) {
            this.itemsForTaxQuery = itemsForTaxQuery;
            return this;
        }

        public Builder itemsForTaxQuery(CatalogQueryItemsForTax itemsForTaxQuery) {
            this.itemsForTaxQuery = Optional.ofNullable(itemsForTaxQuery);
            return this;
        }

        @JsonSetter(value = "items_for_modifier_list_query", nulls = Nulls.SKIP)
        public Builder itemsForModifierListQuery(Optional<CatalogQueryItemsForModifierList> itemsForModifierListQuery) {
            this.itemsForModifierListQuery = itemsForModifierListQuery;
            return this;
        }

        public Builder itemsForModifierListQuery(CatalogQueryItemsForModifierList itemsForModifierListQuery) {
            this.itemsForModifierListQuery = Optional.ofNullable(itemsForModifierListQuery);
            return this;
        }

        @JsonSetter(value = "items_for_item_options_query", nulls = Nulls.SKIP)
        public Builder itemsForItemOptionsQuery(Optional<CatalogQueryItemsForItemOptions> itemsForItemOptionsQuery) {
            this.itemsForItemOptionsQuery = itemsForItemOptionsQuery;
            return this;
        }

        public Builder itemsForItemOptionsQuery(CatalogQueryItemsForItemOptions itemsForItemOptionsQuery) {
            this.itemsForItemOptionsQuery = Optional.ofNullable(itemsForItemOptionsQuery);
            return this;
        }

        @JsonSetter(value = "item_variations_for_item_option_values_query", nulls = Nulls.SKIP)
        public Builder itemVariationsForItemOptionValuesQuery(
                Optional<CatalogQueryItemVariationsForItemOptionValues> itemVariationsForItemOptionValuesQuery) {
            this.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery;
            return this;
        }

        public Builder itemVariationsForItemOptionValuesQuery(
                CatalogQueryItemVariationsForItemOptionValues itemVariationsForItemOptionValuesQuery) {
            this.itemVariationsForItemOptionValuesQuery = Optional.ofNullable(itemVariationsForItemOptionValuesQuery);
            return this;
        }

        public CatalogQuery build() {
            return new CatalogQuery(
                    sortedAttributeQuery,
                    exactQuery,
                    setQuery,
                    prefixQuery,
                    rangeQuery,
                    textQuery,
                    itemsForTaxQuery,
                    itemsForModifierListQuery,
                    itemsForItemOptionsQuery,
                    itemVariationsForItemOptionValuesQuery,
                    additionalProperties);
        }
    }
}
