/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchUpsertCatalogObjectsResponse.Builder.class)
public final class BatchUpsertCatalogObjectsResponse {
    private final Optional<List<Error>> errors;

    private final Optional<List<CatalogObject>> objects;

    private final Optional<String> updatedAt;

    private final Optional<List<CatalogIdMapping>> idMappings;

    private final Map<String, Object> additionalProperties;

    private BatchUpsertCatalogObjectsResponse(
            Optional<List<Error>> errors,
            Optional<List<CatalogObject>> objects,
            Optional<String> updatedAt,
            Optional<List<CatalogIdMapping>> idMappings,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.objects = objects;
        this.updatedAt = updatedAt;
        this.idMappings = idMappings;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The created successfully created CatalogObjects.
     */
    @JsonProperty("objects")
    public Optional<List<CatalogObject>> getObjects() {
        return objects;
    }

    /**
     * @return The database <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a> of this update in RFC 3339 format, e.g., &quot;2016-09-04T23:59:33.123Z&quot;.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The mapping between client and server IDs for this upsert.
     */
    @JsonProperty("id_mappings")
    public Optional<List<CatalogIdMapping>> getIdMappings() {
        return idMappings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchUpsertCatalogObjectsResponse && equalTo((BatchUpsertCatalogObjectsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchUpsertCatalogObjectsResponse other) {
        return errors.equals(other.errors)
                && objects.equals(other.objects)
                && updatedAt.equals(other.updatedAt)
                && idMappings.equals(other.idMappings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.objects, this.updatedAt, this.idMappings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<List<CatalogObject>> objects = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<List<CatalogIdMapping>> idMappings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchUpsertCatalogObjectsResponse other) {
            errors(other.getErrors());
            objects(other.getObjects());
            updatedAt(other.getUpdatedAt());
            idMappings(other.getIdMappings());
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "objects", nulls = Nulls.SKIP)
        public Builder objects(Optional<List<CatalogObject>> objects) {
            this.objects = objects;
            return this;
        }

        public Builder objects(List<CatalogObject> objects) {
            this.objects = Optional.ofNullable(objects);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "id_mappings", nulls = Nulls.SKIP)
        public Builder idMappings(Optional<List<CatalogIdMapping>> idMappings) {
            this.idMappings = idMappings;
            return this;
        }

        public Builder idMappings(List<CatalogIdMapping> idMappings) {
            this.idMappings = Optional.ofNullable(idMappings);
            return this;
        }

        public BatchUpsertCatalogObjectsResponse build() {
            return new BatchUpsertCatalogObjectsResponse(errors, objects, updatedAt, idMappings, additionalProperties);
        }
    }
}
