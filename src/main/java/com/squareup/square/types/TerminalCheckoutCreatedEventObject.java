/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalCheckoutCreatedEventObject.Builder.class)
public final class TerminalCheckoutCreatedEventObject {
    private final Optional<TerminalCheckout> checkout;

    private final Map<String, Object> additionalProperties;

    private TerminalCheckoutCreatedEventObject(
            Optional<TerminalCheckout> checkout, Map<String, Object> additionalProperties) {
        this.checkout = checkout;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The created terminal checkout
     */
    @JsonProperty("checkout")
    public Optional<TerminalCheckout> getCheckout() {
        return checkout;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalCheckoutCreatedEventObject
                && equalTo((TerminalCheckoutCreatedEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalCheckoutCreatedEventObject other) {
        return checkout.equals(other.checkout);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.checkout);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TerminalCheckout> checkout = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TerminalCheckoutCreatedEventObject other) {
            checkout(other.getCheckout());
            return this;
        }

        /**
         * <p>The created terminal checkout</p>
         */
        @JsonSetter(value = "checkout", nulls = Nulls.SKIP)
        public Builder checkout(Optional<TerminalCheckout> checkout) {
            this.checkout = checkout;
            return this;
        }

        public Builder checkout(TerminalCheckout checkout) {
            this.checkout = Optional.ofNullable(checkout);
            return this;
        }

        public TerminalCheckoutCreatedEventObject build() {
            return new TerminalCheckoutCreatedEventObject(checkout, additionalProperties);
        }
    }
}
