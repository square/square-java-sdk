/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogCustomAttributeDefinition.Builder.class)
public final class CatalogCustomAttributeDefinition {
    private final CatalogCustomAttributeDefinitionType type;

    private final String name;

    private final Optional<String> description;

    private final Optional<SourceApplication> sourceApplication;

    private final List<CatalogObjectType> allowedObjectTypes;

    private final Optional<CatalogCustomAttributeDefinitionSellerVisibility> sellerVisibility;

    private final Optional<CatalogCustomAttributeDefinitionAppVisibility> appVisibility;

    private final Optional<CatalogCustomAttributeDefinitionStringConfig> stringConfig;

    private final Optional<CatalogCustomAttributeDefinitionNumberConfig> numberConfig;

    private final Optional<CatalogCustomAttributeDefinitionSelectionConfig> selectionConfig;

    private final Optional<Integer> customAttributeUsageCount;

    private final Optional<String> key;

    private final Map<String, Object> additionalProperties;

    private CatalogCustomAttributeDefinition(
            CatalogCustomAttributeDefinitionType type,
            String name,
            Optional<String> description,
            Optional<SourceApplication> sourceApplication,
            List<CatalogObjectType> allowedObjectTypes,
            Optional<CatalogCustomAttributeDefinitionSellerVisibility> sellerVisibility,
            Optional<CatalogCustomAttributeDefinitionAppVisibility> appVisibility,
            Optional<CatalogCustomAttributeDefinitionStringConfig> stringConfig,
            Optional<CatalogCustomAttributeDefinitionNumberConfig> numberConfig,
            Optional<CatalogCustomAttributeDefinitionSelectionConfig> selectionConfig,
            Optional<Integer> customAttributeUsageCount,
            Optional<String> key,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.name = name;
        this.description = description;
        this.sourceApplication = sourceApplication;
        this.allowedObjectTypes = allowedObjectTypes;
        this.sellerVisibility = sellerVisibility;
        this.appVisibility = appVisibility;
        this.stringConfig = stringConfig;
        this.numberConfig = numberConfig;
        this.selectionConfig = selectionConfig;
        this.customAttributeUsageCount = customAttributeUsageCount;
        this.key = key;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of this custom attribute. Cannot be modified after creation.
     * Required.
     * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values
     */
    @JsonProperty("type")
    public CatalogCustomAttributeDefinitionType getType() {
        return type;
    }

    /**
     * @return The name of this definition for API and seller-facing UI purposes.
     * The name must be unique within the (merchant, application) pair. Required.
     * May not be empty and may not exceed 255 characters. Can be modified after creation.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return Seller-oriented description of the meaning of this Custom Attribute,
     * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return <strong>Read only.</strong> Contains information about the application that
     * created this custom attribute definition.
     */
    @JsonProperty("source_application")
    public Optional<SourceApplication> getSourceApplication() {
        return sourceApplication;
    }

    /**
     * @return The set of <code>CatalogObject</code> types that this custom atttribute may be applied to.
     * Currently, only <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, and <code>CATEGORY</code> are allowed. At least one type must be included.
     * See <a href="#type-catalogobjecttype">CatalogObjectType</a> for possible values
     */
    @JsonProperty("allowed_object_types")
    public List<CatalogObjectType> getAllowedObjectTypes() {
        return allowedObjectTypes;
    }

    /**
     * @return The visibility of a custom attribute in seller-facing UIs (including Square Point
     * of Sale applications and Square Dashboard). May be modified.
     * See <a href="#type-catalogcustomattributedefinitionsellervisibility">CatalogCustomAttributeDefinitionSellerVisibility</a> for possible values
     */
    @JsonProperty("seller_visibility")
    public Optional<CatalogCustomAttributeDefinitionSellerVisibility> getSellerVisibility() {
        return sellerVisibility;
    }

    /**
     * @return The visibility of a custom attribute to applications other than the application
     * that created the attribute.
     * See <a href="#type-catalogcustomattributedefinitionappvisibility">CatalogCustomAttributeDefinitionAppVisibility</a> for possible values
     */
    @JsonProperty("app_visibility")
    public Optional<CatalogCustomAttributeDefinitionAppVisibility> getAppVisibility() {
        return appVisibility;
    }

    /**
     * @return Optionally, populated when <code>type</code> = <code>STRING</code>, unset otherwise.
     */
    @JsonProperty("string_config")
    public Optional<CatalogCustomAttributeDefinitionStringConfig> getStringConfig() {
        return stringConfig;
    }

    /**
     * @return Optionally, populated when <code>type</code> = <code>NUMBER</code>, unset otherwise.
     */
    @JsonProperty("number_config")
    public Optional<CatalogCustomAttributeDefinitionNumberConfig> getNumberConfig() {
        return numberConfig;
    }

    /**
     * @return Populated when <code>type</code> is set to <code>SELECTION</code>, unset otherwise.
     */
    @JsonProperty("selection_config")
    public Optional<CatalogCustomAttributeDefinitionSelectionConfig> getSelectionConfig() {
        return selectionConfig;
    }

    /**
     * @return The number of custom attributes that reference this
     * custom attribute definition. Set by the server in response to a ListCatalog
     * request with <code>include_counts</code> set to <code>true</code>.  If the actual count is greater
     * than 100, <code>custom_attribute_usage_count</code> will be set to <code>100</code>.
     */
    @JsonProperty("custom_attribute_usage_count")
    public Optional<Integer> getCustomAttributeUsageCount() {
        return customAttributeUsageCount;
    }

    /**
     * @return The name of the desired custom attribute key that can be used to access
     * the custom attribute value on catalog objects. Cannot be modified after the
     * custom attribute definition has been created.
     * Must be between 1 and 60 characters, and may only contain the characters <code>[a-zA-Z0-9_-]</code>.
     */
    @JsonIgnore
    public Optional<String> getKey() {
        if (key == null) {
            return Optional.empty();
        }
        return key;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("key")
    private Optional<String> _getKey() {
        return key;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogCustomAttributeDefinition && equalTo((CatalogCustomAttributeDefinition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogCustomAttributeDefinition other) {
        return type.equals(other.type)
                && name.equals(other.name)
                && description.equals(other.description)
                && sourceApplication.equals(other.sourceApplication)
                && allowedObjectTypes.equals(other.allowedObjectTypes)
                && sellerVisibility.equals(other.sellerVisibility)
                && appVisibility.equals(other.appVisibility)
                && stringConfig.equals(other.stringConfig)
                && numberConfig.equals(other.numberConfig)
                && selectionConfig.equals(other.selectionConfig)
                && customAttributeUsageCount.equals(other.customAttributeUsageCount)
                && key.equals(other.key);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.name,
                this.description,
                this.sourceApplication,
                this.allowedObjectTypes,
                this.sellerVisibility,
                this.appVisibility,
                this.stringConfig,
                this.numberConfig,
                this.selectionConfig,
                this.customAttributeUsageCount,
                this.key);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        /**
         * <p>The type of this custom attribute. Cannot be modified after creation.
         * Required.
         * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values</p>
         */
        NameStage type(@NotNull CatalogCustomAttributeDefinitionType type);

        Builder from(CatalogCustomAttributeDefinition other);
    }

    public interface NameStage {
        /**
         * <p>The name of this definition for API and seller-facing UI purposes.
         * The name must be unique within the (merchant, application) pair. Required.
         * May not be empty and may not exceed 255 characters. Can be modified after creation.</p>
         */
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        CatalogCustomAttributeDefinition build();

        /**
         * <p>Seller-oriented description of the meaning of this Custom Attribute,
         * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage description(Nullable<String> description);

        /**
         * <p><strong>Read only.</strong> Contains information about the application that
         * created this custom attribute definition.</p>
         */
        _FinalStage sourceApplication(Optional<SourceApplication> sourceApplication);

        _FinalStage sourceApplication(SourceApplication sourceApplication);

        /**
         * <p>The set of <code>CatalogObject</code> types that this custom atttribute may be applied to.
         * Currently, only <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, and <code>CATEGORY</code> are allowed. At least one type must be included.
         * See <a href="#type-catalogobjecttype">CatalogObjectType</a> for possible values</p>
         */
        _FinalStage allowedObjectTypes(List<CatalogObjectType> allowedObjectTypes);

        _FinalStage addAllowedObjectTypes(CatalogObjectType allowedObjectTypes);

        _FinalStage addAllAllowedObjectTypes(List<CatalogObjectType> allowedObjectTypes);

        /**
         * <p>The visibility of a custom attribute in seller-facing UIs (including Square Point
         * of Sale applications and Square Dashboard). May be modified.
         * See <a href="#type-catalogcustomattributedefinitionsellervisibility">CatalogCustomAttributeDefinitionSellerVisibility</a> for possible values</p>
         */
        _FinalStage sellerVisibility(Optional<CatalogCustomAttributeDefinitionSellerVisibility> sellerVisibility);

        _FinalStage sellerVisibility(CatalogCustomAttributeDefinitionSellerVisibility sellerVisibility);

        /**
         * <p>The visibility of a custom attribute to applications other than the application
         * that created the attribute.
         * See <a href="#type-catalogcustomattributedefinitionappvisibility">CatalogCustomAttributeDefinitionAppVisibility</a> for possible values</p>
         */
        _FinalStage appVisibility(Optional<CatalogCustomAttributeDefinitionAppVisibility> appVisibility);

        _FinalStage appVisibility(CatalogCustomAttributeDefinitionAppVisibility appVisibility);

        /**
         * <p>Optionally, populated when <code>type</code> = <code>STRING</code>, unset otherwise.</p>
         */
        _FinalStage stringConfig(Optional<CatalogCustomAttributeDefinitionStringConfig> stringConfig);

        _FinalStage stringConfig(CatalogCustomAttributeDefinitionStringConfig stringConfig);

        /**
         * <p>Optionally, populated when <code>type</code> = <code>NUMBER</code>, unset otherwise.</p>
         */
        _FinalStage numberConfig(Optional<CatalogCustomAttributeDefinitionNumberConfig> numberConfig);

        _FinalStage numberConfig(CatalogCustomAttributeDefinitionNumberConfig numberConfig);

        /**
         * <p>Populated when <code>type</code> is set to <code>SELECTION</code>, unset otherwise.</p>
         */
        _FinalStage selectionConfig(Optional<CatalogCustomAttributeDefinitionSelectionConfig> selectionConfig);

        _FinalStage selectionConfig(CatalogCustomAttributeDefinitionSelectionConfig selectionConfig);

        /**
         * <p>The number of custom attributes that reference this
         * custom attribute definition. Set by the server in response to a ListCatalog
         * request with <code>include_counts</code> set to <code>true</code>.  If the actual count is greater
         * than 100, <code>custom_attribute_usage_count</code> will be set to <code>100</code>.</p>
         */
        _FinalStage customAttributeUsageCount(Optional<Integer> customAttributeUsageCount);

        _FinalStage customAttributeUsageCount(Integer customAttributeUsageCount);

        /**
         * <p>The name of the desired custom attribute key that can be used to access
         * the custom attribute value on catalog objects. Cannot be modified after the
         * custom attribute definition has been created.
         * Must be between 1 and 60 characters, and may only contain the characters <code>[a-zA-Z0-9_-]</code>.</p>
         */
        _FinalStage key(Optional<String> key);

        _FinalStage key(String key);

        _FinalStage key(Nullable<String> key);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, NameStage, _FinalStage {
        private CatalogCustomAttributeDefinitionType type;

        private String name;

        private Optional<String> key = Optional.empty();

        private Optional<Integer> customAttributeUsageCount = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionSelectionConfig> selectionConfig = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionNumberConfig> numberConfig = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionStringConfig> stringConfig = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionAppVisibility> appVisibility = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionSellerVisibility> sellerVisibility = Optional.empty();

        private List<CatalogObjectType> allowedObjectTypes = new ArrayList<>();

        private Optional<SourceApplication> sourceApplication = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogCustomAttributeDefinition other) {
            type(other.getType());
            name(other.getName());
            description(other.getDescription());
            sourceApplication(other.getSourceApplication());
            allowedObjectTypes(other.getAllowedObjectTypes());
            sellerVisibility(other.getSellerVisibility());
            appVisibility(other.getAppVisibility());
            stringConfig(other.getStringConfig());
            numberConfig(other.getNumberConfig());
            selectionConfig(other.getSelectionConfig());
            customAttributeUsageCount(other.getCustomAttributeUsageCount());
            key(other.getKey());
            return this;
        }

        /**
         * <p>The type of this custom attribute. Cannot be modified after creation.
         * Required.
         * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values</p>
         * <p>The type of this custom attribute. Cannot be modified after creation.
         * Required.
         * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public NameStage type(@NotNull CatalogCustomAttributeDefinitionType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The name of this definition for API and seller-facing UI purposes.
         * The name must be unique within the (merchant, application) pair. Required.
         * May not be empty and may not exceed 255 characters. Can be modified after creation.</p>
         * <p>The name of this definition for API and seller-facing UI purposes.
         * The name must be unique within the (merchant, application) pair. Required.
         * May not be empty and may not exceed 255 characters. Can be modified after creation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The name of the desired custom attribute key that can be used to access
         * the custom attribute value on catalog objects. Cannot be modified after the
         * custom attribute definition has been created.
         * Must be between 1 and 60 characters, and may only contain the characters <code>[a-zA-Z0-9_-]</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage key(Nullable<String> key) {
            if (key.isNull()) {
                this.key = null;
            } else if (key.isEmpty()) {
                this.key = Optional.empty();
            } else {
                this.key = Optional.of(key.get());
            }
            return this;
        }

        /**
         * <p>The name of the desired custom attribute key that can be used to access
         * the custom attribute value on catalog objects. Cannot be modified after the
         * custom attribute definition has been created.
         * Must be between 1 and 60 characters, and may only contain the characters <code>[a-zA-Z0-9_-]</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * <p>The name of the desired custom attribute key that can be used to access
         * the custom attribute value on catalog objects. Cannot be modified after the
         * custom attribute definition has been created.
         * Must be between 1 and 60 characters, and may only contain the characters <code>[a-zA-Z0-9_-]</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public _FinalStage key(Optional<String> key) {
            this.key = key;
            return this;
        }

        /**
         * <p>The number of custom attributes that reference this
         * custom attribute definition. Set by the server in response to a ListCatalog
         * request with <code>include_counts</code> set to <code>true</code>.  If the actual count is greater
         * than 100, <code>custom_attribute_usage_count</code> will be set to <code>100</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customAttributeUsageCount(Integer customAttributeUsageCount) {
            this.customAttributeUsageCount = Optional.ofNullable(customAttributeUsageCount);
            return this;
        }

        /**
         * <p>The number of custom attributes that reference this
         * custom attribute definition. Set by the server in response to a ListCatalog
         * request with <code>include_counts</code> set to <code>true</code>.  If the actual count is greater
         * than 100, <code>custom_attribute_usage_count</code> will be set to <code>100</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "custom_attribute_usage_count", nulls = Nulls.SKIP)
        public _FinalStage customAttributeUsageCount(Optional<Integer> customAttributeUsageCount) {
            this.customAttributeUsageCount = customAttributeUsageCount;
            return this;
        }

        /**
         * <p>Populated when <code>type</code> is set to <code>SELECTION</code>, unset otherwise.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage selectionConfig(CatalogCustomAttributeDefinitionSelectionConfig selectionConfig) {
            this.selectionConfig = Optional.ofNullable(selectionConfig);
            return this;
        }

        /**
         * <p>Populated when <code>type</code> is set to <code>SELECTION</code>, unset otherwise.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "selection_config", nulls = Nulls.SKIP)
        public _FinalStage selectionConfig(Optional<CatalogCustomAttributeDefinitionSelectionConfig> selectionConfig) {
            this.selectionConfig = selectionConfig;
            return this;
        }

        /**
         * <p>Optionally, populated when <code>type</code> = <code>NUMBER</code>, unset otherwise.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage numberConfig(CatalogCustomAttributeDefinitionNumberConfig numberConfig) {
            this.numberConfig = Optional.ofNullable(numberConfig);
            return this;
        }

        /**
         * <p>Optionally, populated when <code>type</code> = <code>NUMBER</code>, unset otherwise.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "number_config", nulls = Nulls.SKIP)
        public _FinalStage numberConfig(Optional<CatalogCustomAttributeDefinitionNumberConfig> numberConfig) {
            this.numberConfig = numberConfig;
            return this;
        }

        /**
         * <p>Optionally, populated when <code>type</code> = <code>STRING</code>, unset otherwise.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage stringConfig(CatalogCustomAttributeDefinitionStringConfig stringConfig) {
            this.stringConfig = Optional.ofNullable(stringConfig);
            return this;
        }

        /**
         * <p>Optionally, populated when <code>type</code> = <code>STRING</code>, unset otherwise.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "string_config", nulls = Nulls.SKIP)
        public _FinalStage stringConfig(Optional<CatalogCustomAttributeDefinitionStringConfig> stringConfig) {
            this.stringConfig = stringConfig;
            return this;
        }

        /**
         * <p>The visibility of a custom attribute to applications other than the application
         * that created the attribute.
         * See <a href="#type-catalogcustomattributedefinitionappvisibility">CatalogCustomAttributeDefinitionAppVisibility</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appVisibility(CatalogCustomAttributeDefinitionAppVisibility appVisibility) {
            this.appVisibility = Optional.ofNullable(appVisibility);
            return this;
        }

        /**
         * <p>The visibility of a custom attribute to applications other than the application
         * that created the attribute.
         * See <a href="#type-catalogcustomattributedefinitionappvisibility">CatalogCustomAttributeDefinitionAppVisibility</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "app_visibility", nulls = Nulls.SKIP)
        public _FinalStage appVisibility(Optional<CatalogCustomAttributeDefinitionAppVisibility> appVisibility) {
            this.appVisibility = appVisibility;
            return this;
        }

        /**
         * <p>The visibility of a custom attribute in seller-facing UIs (including Square Point
         * of Sale applications and Square Dashboard). May be modified.
         * See <a href="#type-catalogcustomattributedefinitionsellervisibility">CatalogCustomAttributeDefinitionSellerVisibility</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sellerVisibility(CatalogCustomAttributeDefinitionSellerVisibility sellerVisibility) {
            this.sellerVisibility = Optional.ofNullable(sellerVisibility);
            return this;
        }

        /**
         * <p>The visibility of a custom attribute in seller-facing UIs (including Square Point
         * of Sale applications and Square Dashboard). May be modified.
         * See <a href="#type-catalogcustomattributedefinitionsellervisibility">CatalogCustomAttributeDefinitionSellerVisibility</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "seller_visibility", nulls = Nulls.SKIP)
        public _FinalStage sellerVisibility(
                Optional<CatalogCustomAttributeDefinitionSellerVisibility> sellerVisibility) {
            this.sellerVisibility = sellerVisibility;
            return this;
        }

        /**
         * <p>The set of <code>CatalogObject</code> types that this custom atttribute may be applied to.
         * Currently, only <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, and <code>CATEGORY</code> are allowed. At least one type must be included.
         * See <a href="#type-catalogobjecttype">CatalogObjectType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAllowedObjectTypes(List<CatalogObjectType> allowedObjectTypes) {
            this.allowedObjectTypes.addAll(allowedObjectTypes);
            return this;
        }

        /**
         * <p>The set of <code>CatalogObject</code> types that this custom atttribute may be applied to.
         * Currently, only <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, and <code>CATEGORY</code> are allowed. At least one type must be included.
         * See <a href="#type-catalogobjecttype">CatalogObjectType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllowedObjectTypes(CatalogObjectType allowedObjectTypes) {
            this.allowedObjectTypes.add(allowedObjectTypes);
            return this;
        }

        /**
         * <p>The set of <code>CatalogObject</code> types that this custom atttribute may be applied to.
         * Currently, only <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, and <code>CATEGORY</code> are allowed. At least one type must be included.
         * See <a href="#type-catalogobjecttype">CatalogObjectType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "allowed_object_types", nulls = Nulls.SKIP)
        public _FinalStage allowedObjectTypes(List<CatalogObjectType> allowedObjectTypes) {
            this.allowedObjectTypes.clear();
            this.allowedObjectTypes.addAll(allowedObjectTypes);
            return this;
        }

        /**
         * <p><strong>Read only.</strong> Contains information about the application that
         * created this custom attribute definition.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceApplication(SourceApplication sourceApplication) {
            this.sourceApplication = Optional.ofNullable(sourceApplication);
            return this;
        }

        /**
         * <p><strong>Read only.</strong> Contains information about the application that
         * created this custom attribute definition.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "source_application", nulls = Nulls.SKIP)
        public _FinalStage sourceApplication(Optional<SourceApplication> sourceApplication) {
            this.sourceApplication = sourceApplication;
            return this;
        }

        /**
         * <p>Seller-oriented description of the meaning of this Custom Attribute,
         * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        /**
         * <p>Seller-oriented description of the meaning of this Custom Attribute,
         * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Seller-oriented description of the meaning of this Custom Attribute,
         * any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public CatalogCustomAttributeDefinition build() {
            return new CatalogCustomAttributeDefinition(
                    type,
                    name,
                    description,
                    sourceApplication,
                    allowedObjectTypes,
                    sellerVisibility,
                    appVisibility,
                    stringConfig,
                    numberConfig,
                    selectionConfig,
                    customAttributeUsageCount,
                    key,
                    additionalProperties);
        }
    }
}
