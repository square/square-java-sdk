/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogCustomAttributeValue.Builder.class)
public final class CatalogCustomAttributeValue {
    private final Optional<String> name;

    private final Optional<String> stringValue;

    private final Optional<String> customAttributeDefinitionId;

    private final Optional<CatalogCustomAttributeDefinitionType> type;

    private final Optional<String> numberValue;

    private final Optional<Boolean> booleanValue;

    private final Optional<List<String>> selectionUidValues;

    private final Optional<String> key;

    private final Map<String, Object> additionalProperties;

    private CatalogCustomAttributeValue(
            Optional<String> name,
            Optional<String> stringValue,
            Optional<String> customAttributeDefinitionId,
            Optional<CatalogCustomAttributeDefinitionType> type,
            Optional<String> numberValue,
            Optional<Boolean> booleanValue,
            Optional<List<String>> selectionUidValues,
            Optional<String> key,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.stringValue = stringValue;
        this.customAttributeDefinitionId = customAttributeDefinitionId;
        this.type = type;
        this.numberValue = numberValue;
        this.booleanValue = booleanValue;
        this.selectionUidValues = selectionUidValues;
        this.key = key;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the custom attribute.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The string value of the custom attribute.  Populated if <code>type</code> = <code>STRING</code>.
     */
    @JsonIgnore
    public Optional<String> getStringValue() {
        if (stringValue == null) {
            return Optional.empty();
        }
        return stringValue;
    }

    /**
     * @return The id of the <a href="entity:CatalogCustomAttributeDefinition">CatalogCustomAttributeDefinition</a> this value belongs to.
     */
    @JsonProperty("custom_attribute_definition_id")
    public Optional<String> getCustomAttributeDefinitionId() {
        return customAttributeDefinitionId;
    }

    /**
     * @return A copy of type from the associated <code>CatalogCustomAttributeDefinition</code>.
     * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<CatalogCustomAttributeDefinitionType> getType() {
        return type;
    }

    /**
     * @return Populated if <code>type</code> = <code>NUMBER</code>. Contains a string
     * representation of a decimal number, using a <code>.</code> as the decimal separator.
     */
    @JsonIgnore
    public Optional<String> getNumberValue() {
        if (numberValue == null) {
            return Optional.empty();
        }
        return numberValue;
    }

    /**
     * @return A <code>true</code> or <code>false</code> value. Populated if <code>type</code> = <code>BOOLEAN</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getBooleanValue() {
        if (booleanValue == null) {
            return Optional.empty();
        }
        return booleanValue;
    }

    /**
     * @return One or more choices from <code>allowed_selections</code>. Populated if <code>type</code> = <code>SELECTION</code>.
     */
    @JsonIgnore
    public Optional<List<String>> getSelectionUidValues() {
        if (selectionUidValues == null) {
            return Optional.empty();
        }
        return selectionUidValues;
    }

    /**
     * @return If the associated <code>CatalogCustomAttributeDefinition</code> object is defined by another application, this key is prefixed by the defining application ID.
     * For example, if the CatalogCustomAttributeDefinition has a key attribute of &quot;cocoa_brand&quot; and the defining application ID is &quot;abcd1234&quot;, this key is &quot;abcd1234:cocoa_brand&quot;
     * when the application making the request is different from the application defining the custom attribute definition. Otherwise, the key is simply &quot;cocoa_brand&quot;.
     */
    @JsonProperty("key")
    public Optional<String> getKey() {
        return key;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("string_value")
    private Optional<String> _getStringValue() {
        return stringValue;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("number_value")
    private Optional<String> _getNumberValue() {
        return numberValue;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("boolean_value")
    private Optional<Boolean> _getBooleanValue() {
        return booleanValue;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("selection_uid_values")
    private Optional<List<String>> _getSelectionUidValues() {
        return selectionUidValues;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogCustomAttributeValue && equalTo((CatalogCustomAttributeValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogCustomAttributeValue other) {
        return name.equals(other.name)
                && stringValue.equals(other.stringValue)
                && customAttributeDefinitionId.equals(other.customAttributeDefinitionId)
                && type.equals(other.type)
                && numberValue.equals(other.numberValue)
                && booleanValue.equals(other.booleanValue)
                && selectionUidValues.equals(other.selectionUidValues)
                && key.equals(other.key);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.stringValue,
                this.customAttributeDefinitionId,
                this.type,
                this.numberValue,
                this.booleanValue,
                this.selectionUidValues,
                this.key);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> stringValue = Optional.empty();

        private Optional<String> customAttributeDefinitionId = Optional.empty();

        private Optional<CatalogCustomAttributeDefinitionType> type = Optional.empty();

        private Optional<String> numberValue = Optional.empty();

        private Optional<Boolean> booleanValue = Optional.empty();

        private Optional<List<String>> selectionUidValues = Optional.empty();

        private Optional<String> key = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogCustomAttributeValue other) {
            name(other.getName());
            stringValue(other.getStringValue());
            customAttributeDefinitionId(other.getCustomAttributeDefinitionId());
            type(other.getType());
            numberValue(other.getNumberValue());
            booleanValue(other.getBooleanValue());
            selectionUidValues(other.getSelectionUidValues());
            key(other.getKey());
            return this;
        }

        /**
         * <p>The name of the custom attribute.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The string value of the custom attribute.  Populated if <code>type</code> = <code>STRING</code>.</p>
         */
        @JsonSetter(value = "string_value", nulls = Nulls.SKIP)
        public Builder stringValue(Optional<String> stringValue) {
            this.stringValue = stringValue;
            return this;
        }

        public Builder stringValue(String stringValue) {
            this.stringValue = Optional.ofNullable(stringValue);
            return this;
        }

        public Builder stringValue(Nullable<String> stringValue) {
            if (stringValue.isNull()) {
                this.stringValue = null;
            } else if (stringValue.isEmpty()) {
                this.stringValue = Optional.empty();
            } else {
                this.stringValue = Optional.of(stringValue.get());
            }
            return this;
        }

        /**
         * <p>The id of the <a href="entity:CatalogCustomAttributeDefinition">CatalogCustomAttributeDefinition</a> this value belongs to.</p>
         */
        @JsonSetter(value = "custom_attribute_definition_id", nulls = Nulls.SKIP)
        public Builder customAttributeDefinitionId(Optional<String> customAttributeDefinitionId) {
            this.customAttributeDefinitionId = customAttributeDefinitionId;
            return this;
        }

        public Builder customAttributeDefinitionId(String customAttributeDefinitionId) {
            this.customAttributeDefinitionId = Optional.ofNullable(customAttributeDefinitionId);
            return this;
        }

        /**
         * <p>A copy of type from the associated <code>CatalogCustomAttributeDefinition</code>.
         * See <a href="#type-catalogcustomattributedefinitiontype">CatalogCustomAttributeDefinitionType</a> for possible values</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<CatalogCustomAttributeDefinitionType> type) {
            this.type = type;
            return this;
        }

        public Builder type(CatalogCustomAttributeDefinitionType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Populated if <code>type</code> = <code>NUMBER</code>. Contains a string
         * representation of a decimal number, using a <code>.</code> as the decimal separator.</p>
         */
        @JsonSetter(value = "number_value", nulls = Nulls.SKIP)
        public Builder numberValue(Optional<String> numberValue) {
            this.numberValue = numberValue;
            return this;
        }

        public Builder numberValue(String numberValue) {
            this.numberValue = Optional.ofNullable(numberValue);
            return this;
        }

        public Builder numberValue(Nullable<String> numberValue) {
            if (numberValue.isNull()) {
                this.numberValue = null;
            } else if (numberValue.isEmpty()) {
                this.numberValue = Optional.empty();
            } else {
                this.numberValue = Optional.of(numberValue.get());
            }
            return this;
        }

        /**
         * <p>A <code>true</code> or <code>false</code> value. Populated if <code>type</code> = <code>BOOLEAN</code>.</p>
         */
        @JsonSetter(value = "boolean_value", nulls = Nulls.SKIP)
        public Builder booleanValue(Optional<Boolean> booleanValue) {
            this.booleanValue = booleanValue;
            return this;
        }

        public Builder booleanValue(Boolean booleanValue) {
            this.booleanValue = Optional.ofNullable(booleanValue);
            return this;
        }

        public Builder booleanValue(Nullable<Boolean> booleanValue) {
            if (booleanValue.isNull()) {
                this.booleanValue = null;
            } else if (booleanValue.isEmpty()) {
                this.booleanValue = Optional.empty();
            } else {
                this.booleanValue = Optional.of(booleanValue.get());
            }
            return this;
        }

        /**
         * <p>One or more choices from <code>allowed_selections</code>. Populated if <code>type</code> = <code>SELECTION</code>.</p>
         */
        @JsonSetter(value = "selection_uid_values", nulls = Nulls.SKIP)
        public Builder selectionUidValues(Optional<List<String>> selectionUidValues) {
            this.selectionUidValues = selectionUidValues;
            return this;
        }

        public Builder selectionUidValues(List<String> selectionUidValues) {
            this.selectionUidValues = Optional.ofNullable(selectionUidValues);
            return this;
        }

        public Builder selectionUidValues(Nullable<List<String>> selectionUidValues) {
            if (selectionUidValues.isNull()) {
                this.selectionUidValues = null;
            } else if (selectionUidValues.isEmpty()) {
                this.selectionUidValues = Optional.empty();
            } else {
                this.selectionUidValues = Optional.of(selectionUidValues.get());
            }
            return this;
        }

        /**
         * <p>If the associated <code>CatalogCustomAttributeDefinition</code> object is defined by another application, this key is prefixed by the defining application ID.
         * For example, if the CatalogCustomAttributeDefinition has a key attribute of &quot;cocoa_brand&quot; and the defining application ID is &quot;abcd1234&quot;, this key is &quot;abcd1234:cocoa_brand&quot;
         * when the application making the request is different from the application defining the custom attribute definition. Otherwise, the key is simply &quot;cocoa_brand&quot;.</p>
         */
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        public CatalogCustomAttributeValue build() {
            return new CatalogCustomAttributeValue(
                    name,
                    stringValue,
                    customAttributeDefinitionId,
                    type,
                    numberValue,
                    booleanValue,
                    selectionUidValues,
                    key,
                    additionalProperties);
        }
    }
}
