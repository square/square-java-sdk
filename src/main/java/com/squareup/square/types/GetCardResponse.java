/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetCardResponse.Builder.class)
public final class GetCardResponse {
    private final Optional<List<Error>> errors;

    private final Optional<Card> card;

    private final Map<String, Object> additionalProperties;

    private GetCardResponse(
            Optional<List<Error>> errors, Optional<Card> card, Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.card = card;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information on errors encountered during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The retrieved card.
     */
    @JsonProperty("card")
    public Optional<Card> getCard() {
        return card;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetCardResponse && equalTo((GetCardResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetCardResponse other) {
        return errors.equals(other.errors) && card.equals(other.card);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.card);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<Card> card = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetCardResponse other) {
            errors(other.getErrors());
            card(other.getCard());
            return this;
        }

        /**
         * <p>Information on errors encountered during the request.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * <p>The retrieved card.</p>
         */
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Card> card) {
            this.card = card;
            return this;
        }

        public Builder card(Card card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        public GetCardResponse build() {
            return new GetCardResponse(errors, card, additionalProperties);
        }
    }
}
