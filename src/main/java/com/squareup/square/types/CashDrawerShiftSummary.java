/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CashDrawerShiftSummary.Builder.class)
public final class CashDrawerShiftSummary {
    private final Optional<String> id;

    private final Optional<CashDrawerShiftState> state;

    private final Optional<String> openedAt;

    private final Optional<String> endedAt;

    private final Optional<String> closedAt;

    private final Optional<String> description;

    private final Optional<Money> openedCashMoney;

    private final Optional<Money> expectedCashMoney;

    private final Optional<Money> closedCashMoney;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private CashDrawerShiftSummary(
            Optional<String> id,
            Optional<CashDrawerShiftState> state,
            Optional<String> openedAt,
            Optional<String> endedAt,
            Optional<String> closedAt,
            Optional<String> description,
            Optional<Money> openedCashMoney,
            Optional<Money> expectedCashMoney,
            Optional<Money> closedCashMoney,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.state = state;
        this.openedAt = openedAt;
        this.endedAt = endedAt;
        this.closedAt = closedAt;
        this.description = description;
        this.openedCashMoney = openedCashMoney;
        this.expectedCashMoney = expectedCashMoney;
        this.closedCashMoney = closedCashMoney;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The shift unique ID.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The shift current state.
     * See <a href="#type-cashdrawershiftstate">CashDrawerShiftState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<CashDrawerShiftState> getState() {
        return state;
    }

    /**
     * @return The shift start time in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getOpenedAt() {
        if (openedAt == null) {
            return Optional.empty();
        }
        return openedAt;
    }

    /**
     * @return The shift end time in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getEndedAt() {
        if (endedAt == null) {
            return Optional.empty();
        }
        return endedAt;
    }

    /**
     * @return The shift close time in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getClosedAt() {
        if (closedAt == null) {
            return Optional.empty();
        }
        return closedAt;
    }

    /**
     * @return An employee free-text description of a cash drawer shift.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The amount of money in the cash drawer at the start of the shift. This
     * must be a positive amount.
     */
    @JsonProperty("opened_cash_money")
    public Optional<Money> getOpenedCashMoney() {
        return openedCashMoney;
    }

    /**
     * @return The amount of money that should be in the cash drawer at the end of the
     * shift, based on the cash drawer events on the shift.
     * The amount is correct if all shift employees accurately recorded their
     * cash drawer shift events. Unrecorded events and events with the wrong amount
     * result in an incorrect expected_cash_money amount that can be negative.
     */
    @JsonProperty("expected_cash_money")
    public Optional<Money> getExpectedCashMoney() {
        return expectedCashMoney;
    }

    /**
     * @return The amount of money found in the cash drawer at the end of the shift by
     * an auditing employee. The amount must be greater than or equal to zero.
     */
    @JsonProperty("closed_cash_money")
    public Optional<Money> getClosedCashMoney() {
        return closedCashMoney;
    }

    /**
     * @return The shift start time in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The shift updated at time in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the location the cash drawer shift belongs to.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("opened_at")
    private Optional<String> _getOpenedAt() {
        return openedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ended_at")
    private Optional<String> _getEndedAt() {
        return endedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("closed_at")
    private Optional<String> _getClosedAt() {
        return closedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CashDrawerShiftSummary && equalTo((CashDrawerShiftSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CashDrawerShiftSummary other) {
        return id.equals(other.id)
                && state.equals(other.state)
                && openedAt.equals(other.openedAt)
                && endedAt.equals(other.endedAt)
                && closedAt.equals(other.closedAt)
                && description.equals(other.description)
                && openedCashMoney.equals(other.openedCashMoney)
                && expectedCashMoney.equals(other.expectedCashMoney)
                && closedCashMoney.equals(other.closedCashMoney)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.state,
                this.openedAt,
                this.endedAt,
                this.closedAt,
                this.description,
                this.openedCashMoney,
                this.expectedCashMoney,
                this.closedCashMoney,
                this.createdAt,
                this.updatedAt,
                this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<CashDrawerShiftState> state = Optional.empty();

        private Optional<String> openedAt = Optional.empty();

        private Optional<String> endedAt = Optional.empty();

        private Optional<String> closedAt = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Money> openedCashMoney = Optional.empty();

        private Optional<Money> expectedCashMoney = Optional.empty();

        private Optional<Money> closedCashMoney = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CashDrawerShiftSummary other) {
            id(other.getId());
            state(other.getState());
            openedAt(other.getOpenedAt());
            endedAt(other.getEndedAt());
            closedAt(other.getClosedAt());
            description(other.getDescription());
            openedCashMoney(other.getOpenedCashMoney());
            expectedCashMoney(other.getExpectedCashMoney());
            closedCashMoney(other.getClosedCashMoney());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            locationId(other.getLocationId());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<CashDrawerShiftState> state) {
            this.state = state;
            return this;
        }

        public Builder state(CashDrawerShiftState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "opened_at", nulls = Nulls.SKIP)
        public Builder openedAt(Optional<String> openedAt) {
            this.openedAt = openedAt;
            return this;
        }

        public Builder openedAt(String openedAt) {
            this.openedAt = Optional.ofNullable(openedAt);
            return this;
        }

        public Builder openedAt(Nullable<String> openedAt) {
            if (openedAt.isNull()) {
                this.openedAt = null;
            } else if (openedAt.isEmpty()) {
                this.openedAt = Optional.empty();
            } else {
                this.openedAt = Optional.of(openedAt.get());
            }
            return this;
        }

        @JsonSetter(value = "ended_at", nulls = Nulls.SKIP)
        public Builder endedAt(Optional<String> endedAt) {
            this.endedAt = endedAt;
            return this;
        }

        public Builder endedAt(String endedAt) {
            this.endedAt = Optional.ofNullable(endedAt);
            return this;
        }

        public Builder endedAt(Nullable<String> endedAt) {
            if (endedAt.isNull()) {
                this.endedAt = null;
            } else if (endedAt.isEmpty()) {
                this.endedAt = Optional.empty();
            } else {
                this.endedAt = Optional.of(endedAt.get());
            }
            return this;
        }

        @JsonSetter(value = "closed_at", nulls = Nulls.SKIP)
        public Builder closedAt(Optional<String> closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        public Builder closedAt(String closedAt) {
            this.closedAt = Optional.ofNullable(closedAt);
            return this;
        }

        public Builder closedAt(Nullable<String> closedAt) {
            if (closedAt.isNull()) {
                this.closedAt = null;
            } else if (closedAt.isEmpty()) {
                this.closedAt = Optional.empty();
            } else {
                this.closedAt = Optional.of(closedAt.get());
            }
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        @JsonSetter(value = "opened_cash_money", nulls = Nulls.SKIP)
        public Builder openedCashMoney(Optional<Money> openedCashMoney) {
            this.openedCashMoney = openedCashMoney;
            return this;
        }

        public Builder openedCashMoney(Money openedCashMoney) {
            this.openedCashMoney = Optional.ofNullable(openedCashMoney);
            return this;
        }

        @JsonSetter(value = "expected_cash_money", nulls = Nulls.SKIP)
        public Builder expectedCashMoney(Optional<Money> expectedCashMoney) {
            this.expectedCashMoney = expectedCashMoney;
            return this;
        }

        public Builder expectedCashMoney(Money expectedCashMoney) {
            this.expectedCashMoney = Optional.ofNullable(expectedCashMoney);
            return this;
        }

        @JsonSetter(value = "closed_cash_money", nulls = Nulls.SKIP)
        public Builder closedCashMoney(Optional<Money> closedCashMoney) {
            this.closedCashMoney = closedCashMoney;
            return this;
        }

        public Builder closedCashMoney(Money closedCashMoney) {
            this.closedCashMoney = Optional.ofNullable(closedCashMoney);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public CashDrawerShiftSummary build() {
            return new CashDrawerShiftSummary(
                    id,
                    state,
                    openedAt,
                    endedAt,
                    closedAt,
                    description,
                    openedCashMoney,
                    expectedCashMoney,
                    closedCashMoney,
                    createdAt,
                    updatedAt,
                    locationId,
                    additionalProperties);
        }
    }
}
