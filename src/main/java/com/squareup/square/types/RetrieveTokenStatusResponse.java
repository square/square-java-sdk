/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RetrieveTokenStatusResponse.Builder.class)
public final class RetrieveTokenStatusResponse {
    private final Optional<List<String>> scopes;

    private final Optional<String> expiresAt;

    private final Optional<String> clientId;

    private final Optional<String> merchantId;

    private final Optional<List<Error>> errors;

    private final Map<String, Object> additionalProperties;

    private RetrieveTokenStatusResponse(
            Optional<List<String>> scopes,
            Optional<String> expiresAt,
            Optional<String> clientId,
            Optional<String> merchantId,
            Optional<List<Error>> errors,
            Map<String, Object> additionalProperties) {
        this.scopes = scopes;
        this.expiresAt = expiresAt;
        this.clientId = clientId;
        this.merchantId = merchantId;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The list of scopes associated with an access token.
     */
    @JsonProperty("scopes")
    public Optional<List<String>> getScopes() {
        return scopes;
    }

    /**
     * @return The date and time when the <code>access_token</code> expires, in RFC 3339 format. Empty if the token never expires.
     */
    @JsonProperty("expires_at")
    public Optional<String> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return The Square-issued application ID associated with the access token. This is the same application ID used to obtain the token.
     */
    @JsonProperty("client_id")
    public Optional<String> getClientId() {
        return clientId;
    }

    /**
     * @return The ID of the authorizing merchant's business.
     */
    @JsonProperty("merchant_id")
    public Optional<String> getMerchantId() {
        return merchantId;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RetrieveTokenStatusResponse && equalTo((RetrieveTokenStatusResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RetrieveTokenStatusResponse other) {
        return scopes.equals(other.scopes)
                && expiresAt.equals(other.expiresAt)
                && clientId.equals(other.clientId)
                && merchantId.equals(other.merchantId)
                && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.scopes, this.expiresAt, this.clientId, this.merchantId, this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> scopes = Optional.empty();

        private Optional<String> expiresAt = Optional.empty();

        private Optional<String> clientId = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RetrieveTokenStatusResponse other) {
            scopes(other.getScopes());
            expiresAt(other.getExpiresAt());
            clientId(other.getClientId());
            merchantId(other.getMerchantId());
            errors(other.getErrors());
            return this;
        }

        /**
         * <p>The list of scopes associated with an access token.</p>
         */
        @JsonSetter(value = "scopes", nulls = Nulls.SKIP)
        public Builder scopes(Optional<List<String>> scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * <p>The date and time when the <code>access_token</code> expires, in RFC 3339 format. Empty if the token never expires.</p>
         */
        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(String expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * <p>The Square-issued application ID associated with the access token. This is the same application ID used to obtain the token.</p>
         */
        @JsonSetter(value = "client_id", nulls = Nulls.SKIP)
        public Builder clientId(Optional<String> clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        /**
         * <p>The ID of the authorizing merchant's business.</p>
         */
        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        /**
         * <p>Any errors that occurred during the request.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public RetrieveTokenStatusResponse build() {
            return new RetrieveTokenStatusResponse(
                    scopes, expiresAt, clientId, merchantId, errors, additionalProperties);
        }
    }
}
