/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchCatalogObjectsRequest.Builder.class)
public final class SearchCatalogObjectsRequest {
    private final Optional<String> cursor;

    private final Optional<List<CatalogObjectType>> objectTypes;

    private final Optional<Boolean> includeDeletedObjects;

    private final Optional<Boolean> includeRelatedObjects;

    private final Optional<String> beginTime;

    private final Optional<CatalogQuery> query;

    private final Optional<Integer> limit;

    private final Optional<Boolean> includeCategoryPathToRoot;

    private final Map<String, Object> additionalProperties;

    private SearchCatalogObjectsRequest(
            Optional<String> cursor,
            Optional<List<CatalogObjectType>> objectTypes,
            Optional<Boolean> includeDeletedObjects,
            Optional<Boolean> includeRelatedObjects,
            Optional<String> beginTime,
            Optional<CatalogQuery> query,
            Optional<Integer> limit,
            Optional<Boolean> includeCategoryPathToRoot,
            Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.objectTypes = objectTypes;
        this.includeDeletedObjects = includeDeletedObjects;
        this.includeRelatedObjects = includeRelatedObjects;
        this.beginTime = beginTime;
        this.query = query;
        this.limit = limit;
        this.includeCategoryPathToRoot = includeCategoryPathToRoot;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The pagination cursor returned in the previous response. Leave unset for an initial request.
     * See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a> for more information.
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return The desired set of object types to appear in the search results.
     * <p>If this is unspecified, the operation returns objects of all the top level types at the version
     * of the Square API used to make the request. Object types that are nested onto other object types
     * are not included in the defaults.</p>
     * <p>At the current API version the default object types are:
     * ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
     * PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
     * SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.</p>
     * <p>Note that if you wish for the query to return objects belonging to nested types (i.e., COMPONENT, IMAGE,
     * ITEM_OPTION_VAL, ITEM_VARIATION, or MODIFIER), you must explicitly include all the types of interest
     * in this field.</p>
     */
    @JsonProperty("object_types")
    public Optional<List<CatalogObjectType>> getObjectTypes() {
        return objectTypes;
    }

    /**
     * @return If <code>true</code>, deleted objects will be included in the results. Defaults to <code>false</code>. Deleted objects will have their <code>is_deleted</code> field set to <code>true</code>. If <code>include_deleted_objects</code> is <code>true</code>, then the <code>include_category_path_to_root</code> request parameter must be <code>false</code>. Both properties cannot be <code>true</code> at the same time.
     */
    @JsonProperty("include_deleted_objects")
    public Optional<Boolean> getIncludeDeletedObjects() {
        return includeDeletedObjects;
    }

    /**
     * @return If <code>true</code>, the response will include additional objects that are related to the
     * requested objects. Related objects are objects that are referenced by object ID by the objects
     * in the response. This is helpful if the objects are being fetched for immediate display to a user.
     * This process only goes one level deep. Objects referenced by the related objects will not be included.
     * For example:
     * <p>If the <code>objects</code> field of the response contains a CatalogItem, its associated
     * CatalogCategory objects, CatalogTax objects, CatalogImage objects and
     * CatalogModifierLists will be returned in the <code>related_objects</code> field of the
     * response. If the <code>objects</code> field of the response contains a CatalogItemVariation,
     * its parent CatalogItem will be returned in the <code>related_objects</code> field of
     * the response.</p>
     * <p>Default value: <code>false</code></p>
     */
    @JsonProperty("include_related_objects")
    public Optional<Boolean> getIncludeRelatedObjects() {
        return includeRelatedObjects;
    }

    /**
     * @return Return objects modified after this <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>, in RFC 3339
     * format, e.g., <code>2016-09-04T23:59:33.123Z</code>. The timestamp is exclusive - objects with a
     * timestamp equal to <code>begin_time</code> will not be included in the response.
     */
    @JsonProperty("begin_time")
    public Optional<String> getBeginTime() {
        return beginTime;
    }

    /**
     * @return A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
     */
    @JsonProperty("query")
    public Optional<CatalogQuery> getQuery() {
        return query;
    }

    /**
     * @return A limit on the number of results to be returned in a single page. The limit is advisory -
     * the implementation may return more or fewer results. If the supplied limit is negative, zero, or
     * is higher than the maximum limit of 1,000, it will be ignored.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Specifies whether or not to include the <code>path_to_root</code> list for each returned category instance. The <code>path_to_root</code> list consists of <code>CategoryPathToRootNode</code> objects and specifies the path that starts with the immediate parent category of the returned category and ends with its root category. If the returned category is a top-level category, the <code>path_to_root</code> list is empty and is not returned in the response payload. If <code>include_category_path_to_root</code> is <code>true</code>, then the <code>include_deleted_objects</code> request parameter must be <code>false</code>. Both properties cannot be <code>true</code> at the same time.
     */
    @JsonProperty("include_category_path_to_root")
    public Optional<Boolean> getIncludeCategoryPathToRoot() {
        return includeCategoryPathToRoot;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchCatalogObjectsRequest && equalTo((SearchCatalogObjectsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchCatalogObjectsRequest other) {
        return cursor.equals(other.cursor)
                && objectTypes.equals(other.objectTypes)
                && includeDeletedObjects.equals(other.includeDeletedObjects)
                && includeRelatedObjects.equals(other.includeRelatedObjects)
                && beginTime.equals(other.beginTime)
                && query.equals(other.query)
                && limit.equals(other.limit)
                && includeCategoryPathToRoot.equals(other.includeCategoryPathToRoot);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.cursor,
                this.objectTypes,
                this.includeDeletedObjects,
                this.includeRelatedObjects,
                this.beginTime,
                this.query,
                this.limit,
                this.includeCategoryPathToRoot);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<List<CatalogObjectType>> objectTypes = Optional.empty();

        private Optional<Boolean> includeDeletedObjects = Optional.empty();

        private Optional<Boolean> includeRelatedObjects = Optional.empty();

        private Optional<String> beginTime = Optional.empty();

        private Optional<CatalogQuery> query = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Boolean> includeCategoryPathToRoot = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchCatalogObjectsRequest other) {
            cursor(other.getCursor());
            objectTypes(other.getObjectTypes());
            includeDeletedObjects(other.getIncludeDeletedObjects());
            includeRelatedObjects(other.getIncludeRelatedObjects());
            beginTime(other.getBeginTime());
            query(other.getQuery());
            limit(other.getLimit());
            includeCategoryPathToRoot(other.getIncludeCategoryPathToRoot());
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        @JsonSetter(value = "object_types", nulls = Nulls.SKIP)
        public Builder objectTypes(Optional<List<CatalogObjectType>> objectTypes) {
            this.objectTypes = objectTypes;
            return this;
        }

        public Builder objectTypes(List<CatalogObjectType> objectTypes) {
            this.objectTypes = Optional.ofNullable(objectTypes);
            return this;
        }

        @JsonSetter(value = "include_deleted_objects", nulls = Nulls.SKIP)
        public Builder includeDeletedObjects(Optional<Boolean> includeDeletedObjects) {
            this.includeDeletedObjects = includeDeletedObjects;
            return this;
        }

        public Builder includeDeletedObjects(Boolean includeDeletedObjects) {
            this.includeDeletedObjects = Optional.ofNullable(includeDeletedObjects);
            return this;
        }

        @JsonSetter(value = "include_related_objects", nulls = Nulls.SKIP)
        public Builder includeRelatedObjects(Optional<Boolean> includeRelatedObjects) {
            this.includeRelatedObjects = includeRelatedObjects;
            return this;
        }

        public Builder includeRelatedObjects(Boolean includeRelatedObjects) {
            this.includeRelatedObjects = Optional.ofNullable(includeRelatedObjects);
            return this;
        }

        @JsonSetter(value = "begin_time", nulls = Nulls.SKIP)
        public Builder beginTime(Optional<String> beginTime) {
            this.beginTime = beginTime;
            return this;
        }

        public Builder beginTime(String beginTime) {
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<CatalogQuery> query) {
            this.query = query;
            return this;
        }

        public Builder query(CatalogQuery query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "include_category_path_to_root", nulls = Nulls.SKIP)
        public Builder includeCategoryPathToRoot(Optional<Boolean> includeCategoryPathToRoot) {
            this.includeCategoryPathToRoot = includeCategoryPathToRoot;
            return this;
        }

        public Builder includeCategoryPathToRoot(Boolean includeCategoryPathToRoot) {
            this.includeCategoryPathToRoot = Optional.ofNullable(includeCategoryPathToRoot);
            return this;
        }

        public SearchCatalogObjectsRequest build() {
            return new SearchCatalogObjectsRequest(
                    cursor,
                    objectTypes,
                    includeDeletedObjects,
                    includeRelatedObjects,
                    beginTime,
                    query,
                    limit,
                    includeCategoryPathToRoot,
                    additionalProperties);
        }
    }
}
