/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GiftCardActivityTransferBalanceFrom.Builder.class)
public final class GiftCardActivityTransferBalanceFrom {
    private final String transferToGiftCardId;

    private final Money amountMoney;

    private final Map<String, Object> additionalProperties;

    private GiftCardActivityTransferBalanceFrom(
            String transferToGiftCardId, Money amountMoney, Map<String, Object> additionalProperties) {
        this.transferToGiftCardId = transferToGiftCardId;
        this.amountMoney = amountMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the gift card to which the specified amount was transferred.
     */
    @JsonProperty("transfer_to_gift_card_id")
    public String getTransferToGiftCardId() {
        return transferToGiftCardId;
    }

    /**
     * @return The amount deducted from the gift card for the transfer. This value is a positive integer.
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GiftCardActivityTransferBalanceFrom
                && equalTo((GiftCardActivityTransferBalanceFrom) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GiftCardActivityTransferBalanceFrom other) {
        return transferToGiftCardId.equals(other.transferToGiftCardId) && amountMoney.equals(other.amountMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.transferToGiftCardId, this.amountMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TransferToGiftCardIdStage builder() {
        return new Builder();
    }

    public interface TransferToGiftCardIdStage {
        AmountMoneyStage transferToGiftCardId(@NotNull String transferToGiftCardId);

        Builder from(GiftCardActivityTransferBalanceFrom other);
    }

    public interface AmountMoneyStage {
        _FinalStage amountMoney(@NotNull Money amountMoney);
    }

    public interface _FinalStage {
        GiftCardActivityTransferBalanceFrom build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TransferToGiftCardIdStage, AmountMoneyStage, _FinalStage {
        private String transferToGiftCardId;

        private Money amountMoney;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GiftCardActivityTransferBalanceFrom other) {
            transferToGiftCardId(other.getTransferToGiftCardId());
            amountMoney(other.getAmountMoney());
            return this;
        }

        /**
         * <p>The ID of the gift card to which the specified amount was transferred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transfer_to_gift_card_id")
        public AmountMoneyStage transferToGiftCardId(@NotNull String transferToGiftCardId) {
            this.transferToGiftCardId =
                    Objects.requireNonNull(transferToGiftCardId, "transferToGiftCardId must not be null");
            return this;
        }

        /**
         * <p>The amount deducted from the gift card for the transfer. This value is a positive integer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public _FinalStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        @java.lang.Override
        public GiftCardActivityTransferBalanceFrom build() {
            return new GiftCardActivityTransferBalanceFrom(transferToGiftCardId, amountMoney, additionalProperties);
        }
    }
}
