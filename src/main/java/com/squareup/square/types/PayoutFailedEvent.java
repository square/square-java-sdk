/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayoutFailedEvent.Builder.class)
public final class PayoutFailedEvent {
    private final Optional<String> merchantId;

    private final Optional<String> locationId;

    private final Optional<String> type;

    private final Optional<String> eventId;

    private final Optional<String> createdAt;

    private final Optional<PayoutFailedEventData> data;

    private final Map<String, Object> additionalProperties;

    private PayoutFailedEvent(
            Optional<String> merchantId,
            Optional<String> locationId,
            Optional<String> type,
            Optional<String> eventId,
            Optional<String> createdAt,
            Optional<PayoutFailedEventData> data,
            Map<String, Object> additionalProperties) {
        this.merchantId = merchantId;
        this.locationId = locationId;
        this.type = type;
        this.eventId = eventId;
        this.createdAt = createdAt;
        this.data = data;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the target merchant associated with the event.
     */
    @JsonIgnore
    public Optional<String> getMerchantId() {
        if (merchantId == null) {
            return Optional.empty();
        }
        return merchantId;
    }

    /**
     * @return The ID of the target location associated with the event.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The type of event that this represents, <code>payout.failed</code>.
     */
    @JsonIgnore
    public Optional<String> getType() {
        if (type == null) {
            return Optional.empty();
        }
        return type;
    }

    /**
     * @return A unique ID for the event.
     */
    @JsonIgnore
    public Optional<String> getEventId() {
        if (eventId == null) {
            return Optional.empty();
        }
        return eventId;
    }

    /**
     * @return The timestamp of when the event was verified, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Data associated with the event.
     */
    @JsonProperty("data")
    public Optional<PayoutFailedEventData> getData() {
        return data;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_id")
    private Optional<String> _getMerchantId() {
        return merchantId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("type")
    private Optional<String> _getType() {
        return type;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("event_id")
    private Optional<String> _getEventId() {
        return eventId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayoutFailedEvent && equalTo((PayoutFailedEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayoutFailedEvent other) {
        return merchantId.equals(other.merchantId)
                && locationId.equals(other.locationId)
                && type.equals(other.type)
                && eventId.equals(other.eventId)
                && createdAt.equals(other.createdAt)
                && data.equals(other.data);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.merchantId, this.locationId, this.type, this.eventId, this.createdAt, this.data);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> merchantId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> eventId = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<PayoutFailedEventData> data = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayoutFailedEvent other) {
            merchantId(other.getMerchantId());
            locationId(other.getLocationId());
            type(other.getType());
            eventId(other.getEventId());
            createdAt(other.getCreatedAt());
            data(other.getData());
            return this;
        }

        /**
         * <p>The ID of the target merchant associated with the event.</p>
         */
        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Nullable<String> merchantId) {
            if (merchantId.isNull()) {
                this.merchantId = null;
            } else if (merchantId.isEmpty()) {
                this.merchantId = Optional.empty();
            } else {
                this.merchantId = Optional.of(merchantId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the target location associated with the event.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The type of event that this represents, <code>payout.failed</code>.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Nullable<String> type) {
            if (type.isNull()) {
                this.type = null;
            } else if (type.isEmpty()) {
                this.type = Optional.empty();
            } else {
                this.type = Optional.of(type.get());
            }
            return this;
        }

        /**
         * <p>A unique ID for the event.</p>
         */
        @JsonSetter(value = "event_id", nulls = Nulls.SKIP)
        public Builder eventId(Optional<String> eventId) {
            this.eventId = eventId;
            return this;
        }

        public Builder eventId(String eventId) {
            this.eventId = Optional.ofNullable(eventId);
            return this;
        }

        public Builder eventId(Nullable<String> eventId) {
            if (eventId.isNull()) {
                this.eventId = null;
            } else if (eventId.isEmpty()) {
                this.eventId = Optional.empty();
            } else {
                this.eventId = Optional.of(eventId.get());
            }
            return this;
        }

        /**
         * <p>The timestamp of when the event was verified, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Data associated with the event.</p>
         */
        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<PayoutFailedEventData> data) {
            this.data = data;
            return this;
        }

        public Builder data(PayoutFailedEventData data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        public PayoutFailedEvent build() {
            return new PayoutFailedEvent(merchantId, locationId, type, eventId, createdAt, data, additionalProperties);
        }
    }
}
