/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQueryItemsForModifierList.Builder.class)
public final class CatalogQueryItemsForModifierList {
    private final List<String> modifierListIds;

    private final Map<String, Object> additionalProperties;

    private CatalogQueryItemsForModifierList(List<String> modifierListIds, Map<String, Object> additionalProperties) {
        this.modifierListIds = modifierListIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A set of <code>CatalogModifierList</code> IDs to be used to find associated <code>CatalogItem</code>s.
     */
    @JsonProperty("modifier_list_ids")
    public List<String> getModifierListIds() {
        return modifierListIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQueryItemsForModifierList && equalTo((CatalogQueryItemsForModifierList) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQueryItemsForModifierList other) {
        return modifierListIds.equals(other.modifierListIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.modifierListIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> modifierListIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogQueryItemsForModifierList other) {
            modifierListIds(other.getModifierListIds());
            return this;
        }

        /**
         * <p>A set of <code>CatalogModifierList</code> IDs to be used to find associated <code>CatalogItem</code>s.</p>
         */
        @JsonSetter(value = "modifier_list_ids", nulls = Nulls.SKIP)
        public Builder modifierListIds(List<String> modifierListIds) {
            this.modifierListIds.clear();
            this.modifierListIds.addAll(modifierListIds);
            return this;
        }

        public Builder addModifierListIds(String modifierListIds) {
            this.modifierListIds.add(modifierListIds);
            return this;
        }

        public Builder addAllModifierListIds(List<String> modifierListIds) {
            this.modifierListIds.addAll(modifierListIds);
            return this;
        }

        public CatalogQueryItemsForModifierList build() {
            return new CatalogQueryItemsForModifierList(modifierListIds, additionalProperties);
        }
    }
}
