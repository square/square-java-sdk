/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQueryText.Builder.class)
public final class CatalogQueryText {
    private final List<String> keywords;

    private final Map<String, Object> additionalProperties;

    private CatalogQueryText(List<String> keywords, Map<String, Object> additionalProperties) {
        this.keywords = keywords;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 alphanumeric characters are ignored.
     */
    @JsonProperty("keywords")
    public List<String> getKeywords() {
        return keywords;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQueryText && equalTo((CatalogQueryText) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQueryText other) {
        return keywords.equals(other.keywords);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.keywords);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> keywords = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogQueryText other) {
            keywords(other.getKeywords());
            return this;
        }

        @JsonSetter(value = "keywords", nulls = Nulls.SKIP)
        public Builder keywords(List<String> keywords) {
            this.keywords.clear();
            this.keywords.addAll(keywords);
            return this;
        }

        public Builder addKeywords(String keywords) {
            this.keywords.add(keywords);
            return this;
        }

        public Builder addAllKeywords(List<String> keywords) {
            this.keywords.addAll(keywords);
            return this;
        }

        public CatalogQueryText build() {
            return new CatalogQueryText(keywords, additionalProperties);
        }
    }
}
