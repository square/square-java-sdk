/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogItemOptionForItem.Builder.class)
public final class CatalogItemOptionForItem {
    private final Optional<String> itemOptionId;

    private final Map<String, Object> additionalProperties;

    private CatalogItemOptionForItem(Optional<String> itemOptionId, Map<String, Object> additionalProperties) {
        this.itemOptionId = itemOptionId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.
     */
    @JsonIgnore
    public Optional<String> getItemOptionId() {
        if (itemOptionId == null) {
            return Optional.empty();
        }
        return itemOptionId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("item_option_id")
    private Optional<String> _getItemOptionId() {
        return itemOptionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogItemOptionForItem && equalTo((CatalogItemOptionForItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogItemOptionForItem other) {
        return itemOptionId.equals(other.itemOptionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.itemOptionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> itemOptionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogItemOptionForItem other) {
            itemOptionId(other.getItemOptionId());
            return this;
        }

        @JsonSetter(value = "item_option_id", nulls = Nulls.SKIP)
        public Builder itemOptionId(Optional<String> itemOptionId) {
            this.itemOptionId = itemOptionId;
            return this;
        }

        public Builder itemOptionId(String itemOptionId) {
            this.itemOptionId = Optional.ofNullable(itemOptionId);
            return this;
        }

        public Builder itemOptionId(Nullable<String> itemOptionId) {
            if (itemOptionId.isNull()) {
                this.itemOptionId = null;
            } else if (itemOptionId.isEmpty()) {
                this.itemOptionId = Optional.empty();
            } else {
                this.itemOptionId = Optional.of(itemOptionId.get());
            }
            return this;
        }

        public CatalogItemOptionForItem build() {
            return new CatalogItemOptionForItem(itemOptionId, additionalProperties);
        }
    }
}
