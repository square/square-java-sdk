/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchAvailabilityQuery.Builder.class)
public final class SearchAvailabilityQuery {
    private final SearchAvailabilityFilter filter;

    private final Map<String, Object> additionalProperties;

    private SearchAvailabilityQuery(SearchAvailabilityFilter filter, Map<String, Object> additionalProperties) {
        this.filter = filter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The query filter to search for buyer-accessible availabilities of existing bookings.
     */
    @JsonProperty("filter")
    public SearchAvailabilityFilter getFilter() {
        return filter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchAvailabilityQuery && equalTo((SearchAvailabilityQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchAvailabilityQuery other) {
        return filter.equals(other.filter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FilterStage builder() {
        return new Builder();
    }

    public interface FilterStage {
        /**
         * <p>The query filter to search for buyer-accessible availabilities of existing bookings.</p>
         */
        _FinalStage filter(@NotNull SearchAvailabilityFilter filter);

        Builder from(SearchAvailabilityQuery other);
    }

    public interface _FinalStage {
        SearchAvailabilityQuery build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FilterStage, _FinalStage {
        private SearchAvailabilityFilter filter;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchAvailabilityQuery other) {
            filter(other.getFilter());
            return this;
        }

        /**
         * <p>The query filter to search for buyer-accessible availabilities of existing bookings.</p>
         * <p>The query filter to search for buyer-accessible availabilities of existing bookings.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("filter")
        public _FinalStage filter(@NotNull SearchAvailabilityFilter filter) {
            this.filter = Objects.requireNonNull(filter, "filter must not be null");
            return this;
        }

        @java.lang.Override
        public SearchAvailabilityQuery build() {
            return new SearchAvailabilityQuery(filter, additionalProperties);
        }
    }
}
