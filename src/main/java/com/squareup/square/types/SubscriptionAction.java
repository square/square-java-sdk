/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionAction.Builder.class)
public final class SubscriptionAction {
    private final Optional<String> id;

    private final Optional<SubscriptionActionType> type;

    private final Optional<String> effectiveDate;

    private final Optional<Integer> monthlyBillingAnchorDate;

    private final Optional<List<Phase>> phases;

    private final Optional<String> newPlanVariationId;

    private final Map<String, Object> additionalProperties;

    private SubscriptionAction(
            Optional<String> id,
            Optional<SubscriptionActionType> type,
            Optional<String> effectiveDate,
            Optional<Integer> monthlyBillingAnchorDate,
            Optional<List<Phase>> phases,
            Optional<String> newPlanVariationId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.effectiveDate = effectiveDate;
        this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
        this.phases = phases;
        this.newPlanVariationId = newPlanVariationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of an action scoped to a subscription.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The type of the action.
     * See <a href="#type-subscriptionactiontype">SubscriptionActionType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<SubscriptionActionType> getType() {
        return type;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date when the action occurs on the subscription.
     */
    @JsonIgnore
    public Optional<String> getEffectiveDate() {
        if (effectiveDate == null) {
            return Optional.empty();
        }
        return effectiveDate;
    }

    /**
     * @return The new billing anchor day value, for a <code>CHANGE_BILLING_ANCHOR_DATE</code> action.
     */
    @JsonIgnore
    public Optional<Integer> getMonthlyBillingAnchorDate() {
        if (monthlyBillingAnchorDate == null) {
            return Optional.empty();
        }
        return monthlyBillingAnchorDate;
    }

    /**
     * @return A list of Phases, to pass phase-specific information used in the swap.
     */
    @JsonIgnore
    public Optional<List<Phase>> getPhases() {
        if (phases == null) {
            return Optional.empty();
        }
        return phases;
    }

    /**
     * @return The target subscription plan variation that a subscription switches to, for a <code>SWAP_PLAN</code> action.
     */
    @JsonIgnore
    public Optional<String> getNewPlanVariationId() {
        if (newPlanVariationId == null) {
            return Optional.empty();
        }
        return newPlanVariationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("effective_date")
    private Optional<String> _getEffectiveDate() {
        return effectiveDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("monthly_billing_anchor_date")
    private Optional<Integer> _getMonthlyBillingAnchorDate() {
        return monthlyBillingAnchorDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phases")
    private Optional<List<Phase>> _getPhases() {
        return phases;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("new_plan_variation_id")
    private Optional<String> _getNewPlanVariationId() {
        return newPlanVariationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionAction && equalTo((SubscriptionAction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionAction other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && effectiveDate.equals(other.effectiveDate)
                && monthlyBillingAnchorDate.equals(other.monthlyBillingAnchorDate)
                && phases.equals(other.phases)
                && newPlanVariationId.equals(other.newPlanVariationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.type,
                this.effectiveDate,
                this.monthlyBillingAnchorDate,
                this.phases,
                this.newPlanVariationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<SubscriptionActionType> type = Optional.empty();

        private Optional<String> effectiveDate = Optional.empty();

        private Optional<Integer> monthlyBillingAnchorDate = Optional.empty();

        private Optional<List<Phase>> phases = Optional.empty();

        private Optional<String> newPlanVariationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SubscriptionAction other) {
            id(other.getId());
            type(other.getType());
            effectiveDate(other.getEffectiveDate());
            monthlyBillingAnchorDate(other.getMonthlyBillingAnchorDate());
            phases(other.getPhases());
            newPlanVariationId(other.getNewPlanVariationId());
            return this;
        }

        /**
         * <p>The ID of an action scoped to a subscription.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The type of the action.
         * See <a href="#type-subscriptionactiontype">SubscriptionActionType</a> for possible values</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<SubscriptionActionType> type) {
            this.type = type;
            return this;
        }

        public Builder type(SubscriptionActionType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date when the action occurs on the subscription.</p>
         */
        @JsonSetter(value = "effective_date", nulls = Nulls.SKIP)
        public Builder effectiveDate(Optional<String> effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }

        public Builder effectiveDate(String effectiveDate) {
            this.effectiveDate = Optional.ofNullable(effectiveDate);
            return this;
        }

        public Builder effectiveDate(Nullable<String> effectiveDate) {
            if (effectiveDate.isNull()) {
                this.effectiveDate = null;
            } else if (effectiveDate.isEmpty()) {
                this.effectiveDate = Optional.empty();
            } else {
                this.effectiveDate = Optional.of(effectiveDate.get());
            }
            return this;
        }

        /**
         * <p>The new billing anchor day value, for a <code>CHANGE_BILLING_ANCHOR_DATE</code> action.</p>
         */
        @JsonSetter(value = "monthly_billing_anchor_date", nulls = Nulls.SKIP)
        public Builder monthlyBillingAnchorDate(Optional<Integer> monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
            return this;
        }

        public Builder monthlyBillingAnchorDate(Integer monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = Optional.ofNullable(monthlyBillingAnchorDate);
            return this;
        }

        public Builder monthlyBillingAnchorDate(Nullable<Integer> monthlyBillingAnchorDate) {
            if (monthlyBillingAnchorDate.isNull()) {
                this.monthlyBillingAnchorDate = null;
            } else if (monthlyBillingAnchorDate.isEmpty()) {
                this.monthlyBillingAnchorDate = Optional.empty();
            } else {
                this.monthlyBillingAnchorDate = Optional.of(monthlyBillingAnchorDate.get());
            }
            return this;
        }

        /**
         * <p>A list of Phases, to pass phase-specific information used in the swap.</p>
         */
        @JsonSetter(value = "phases", nulls = Nulls.SKIP)
        public Builder phases(Optional<List<Phase>> phases) {
            this.phases = phases;
            return this;
        }

        public Builder phases(List<Phase> phases) {
            this.phases = Optional.ofNullable(phases);
            return this;
        }

        public Builder phases(Nullable<List<Phase>> phases) {
            if (phases.isNull()) {
                this.phases = null;
            } else if (phases.isEmpty()) {
                this.phases = Optional.empty();
            } else {
                this.phases = Optional.of(phases.get());
            }
            return this;
        }

        /**
         * <p>The target subscription plan variation that a subscription switches to, for a <code>SWAP_PLAN</code> action.</p>
         */
        @JsonSetter(value = "new_plan_variation_id", nulls = Nulls.SKIP)
        public Builder newPlanVariationId(Optional<String> newPlanVariationId) {
            this.newPlanVariationId = newPlanVariationId;
            return this;
        }

        public Builder newPlanVariationId(String newPlanVariationId) {
            this.newPlanVariationId = Optional.ofNullable(newPlanVariationId);
            return this;
        }

        public Builder newPlanVariationId(Nullable<String> newPlanVariationId) {
            if (newPlanVariationId.isNull()) {
                this.newPlanVariationId = null;
            } else if (newPlanVariationId.isEmpty()) {
                this.newPlanVariationId = Optional.empty();
            } else {
                this.newPlanVariationId = Optional.of(newPlanVariationId.get());
            }
            return this;
        }

        public SubscriptionAction build() {
            return new SubscriptionAction(
                    id,
                    type,
                    effectiveDate,
                    monthlyBillingAnchorDate,
                    phases,
                    newPlanVariationId,
                    additionalProperties);
        }
    }
}
