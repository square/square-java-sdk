/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpsertSnippetRequest.Builder.class)
public final class UpsertSnippetRequest {
    private final String siteId;

    private final Snippet snippet;

    private final Map<String, Object> additionalProperties;

    private UpsertSnippetRequest(String siteId, Snippet snippet, Map<String, Object> additionalProperties) {
        this.siteId = siteId;
        this.snippet = snippet;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the site where you want to add or update the snippet.
     */
    @JsonProperty("site_id")
    public String getSiteId() {
        return siteId;
    }

    /**
     * @return The snippet for the site.
     */
    @JsonProperty("snippet")
    public Snippet getSnippet() {
        return snippet;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpsertSnippetRequest && equalTo((UpsertSnippetRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpsertSnippetRequest other) {
        return siteId.equals(other.siteId) && snippet.equals(other.snippet);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.siteId, this.snippet);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SiteIdStage builder() {
        return new Builder();
    }

    public interface SiteIdStage {
        /**
         * <p>The ID of the site where you want to add or update the snippet.</p>
         */
        SnippetStage siteId(@NotNull String siteId);

        Builder from(UpsertSnippetRequest other);
    }

    public interface SnippetStage {
        /**
         * <p>The snippet for the site.</p>
         */
        _FinalStage snippet(@NotNull Snippet snippet);
    }

    public interface _FinalStage {
        UpsertSnippetRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SiteIdStage, SnippetStage, _FinalStage {
        private String siteId;

        private Snippet snippet;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpsertSnippetRequest other) {
            siteId(other.getSiteId());
            snippet(other.getSnippet());
            return this;
        }

        /**
         * <p>The ID of the site where you want to add or update the snippet.</p>
         * <p>The ID of the site where you want to add or update the snippet.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("site_id")
        public SnippetStage siteId(@NotNull String siteId) {
            this.siteId = Objects.requireNonNull(siteId, "siteId must not be null");
            return this;
        }

        /**
         * <p>The snippet for the site.</p>
         * <p>The snippet for the site.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("snippet")
        public _FinalStage snippet(@NotNull Snippet snippet) {
            this.snippet = Objects.requireNonNull(snippet, "snippet must not be null");
            return this;
        }

        @java.lang.Override
        public UpsertSnippetRequest build() {
            return new UpsertSnippetRequest(siteId, snippet, additionalProperties);
        }
    }
}
