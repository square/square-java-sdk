/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SquareAccountDetails.Builder.class)
public final class SquareAccountDetails {
    private final Optional<String> paymentSourceToken;

    private final Optional<List<Error>> errors;

    private final Map<String, Object> additionalProperties;

    private SquareAccountDetails(
            Optional<String> paymentSourceToken,
            Optional<List<Error>> errors,
            Map<String, Object> additionalProperties) {
        this.paymentSourceToken = paymentSourceToken;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the payment source used for this payment.
     */
    @JsonIgnore
    public Optional<String> getPaymentSourceToken() {
        if (paymentSourceToken == null) {
            return Optional.empty();
        }
        return paymentSourceToken;
    }

    /**
     * @return Information about errors encountered during the request.
     */
    @JsonIgnore
    public Optional<List<Error>> getErrors() {
        if (errors == null) {
            return Optional.empty();
        }
        return errors;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_source_token")
    private Optional<String> _getPaymentSourceToken() {
        return paymentSourceToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("errors")
    private Optional<List<Error>> _getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SquareAccountDetails && equalTo((SquareAccountDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SquareAccountDetails other) {
        return paymentSourceToken.equals(other.paymentSourceToken) && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentSourceToken, this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> paymentSourceToken = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SquareAccountDetails other) {
            paymentSourceToken(other.getPaymentSourceToken());
            errors(other.getErrors());
            return this;
        }

        /**
         * <p>Unique identifier for the payment source used for this payment.</p>
         */
        @JsonSetter(value = "payment_source_token", nulls = Nulls.SKIP)
        public Builder paymentSourceToken(Optional<String> paymentSourceToken) {
            this.paymentSourceToken = paymentSourceToken;
            return this;
        }

        public Builder paymentSourceToken(String paymentSourceToken) {
            this.paymentSourceToken = Optional.ofNullable(paymentSourceToken);
            return this;
        }

        public Builder paymentSourceToken(Nullable<String> paymentSourceToken) {
            if (paymentSourceToken.isNull()) {
                this.paymentSourceToken = null;
            } else if (paymentSourceToken.isEmpty()) {
                this.paymentSourceToken = Optional.empty();
            } else {
                this.paymentSourceToken = Optional.of(paymentSourceToken.get());
            }
            return this;
        }

        /**
         * <p>Information about errors encountered during the request.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Nullable<List<Error>> errors) {
            if (errors.isNull()) {
                this.errors = null;
            } else if (errors.isEmpty()) {
                this.errors = Optional.empty();
            } else {
                this.errors = Optional.of(errors.get());
            }
            return this;
        }

        public SquareAccountDetails build() {
            return new SquareAccountDetails(paymentSourceToken, errors, additionalProperties);
        }
    }
}
