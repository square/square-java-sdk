/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Job.Builder.class)
public final class Job {
    private final Optional<String> id;

    private final Optional<String> title;

    private final Optional<Boolean> isTipEligible;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<Integer> version;

    private final Map<String, Object> additionalProperties;

    private Job(
            Optional<String> id,
            Optional<String> title,
            Optional<Boolean> isTipEligible,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<Integer> version,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.title = title;
        this.isTipEligible = isTipEligible;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <strong>Read only</strong> The unique Square-assigned ID of the job. If you need a job ID for an API request,
     * call <a href="api-endpoint:Team-ListJobs">ListJobs</a> or use the ID returned when you created the job.
     * You can also get job IDs from a team member's wage setting.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The title of the job.
     */
    @JsonIgnore
    public Optional<String> getTitle() {
        if (title == null) {
            return Optional.empty();
        }
        return title;
    }

    /**
     * @return Indicates whether team members can earn tips for the job.
     */
    @JsonIgnore
    public Optional<Boolean> getIsTipEligible() {
        if (isTipEligible == null) {
            return Optional.empty();
        }
        return isTipEligible;
    }

    /**
     * @return The timestamp when the job was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the job was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return <strong>Read only</strong> The current version of the job. Include this field in <code>UpdateJob</code> requests to enable
     * <a href="https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency">optimistic concurrency</a>
     * control and avoid overwrites from concurrent requests. Requests fail if the provided version doesn't
     * match the server version at the time of the request.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("title")
    private Optional<String> _getTitle() {
        return title;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_tip_eligible")
    private Optional<Boolean> _getIsTipEligible() {
        return isTipEligible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Job && equalTo((Job) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Job other) {
        return id.equals(other.id)
                && title.equals(other.title)
                && isTipEligible.equals(other.isTipEligible)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.title, this.isTipEligible, this.createdAt, this.updatedAt, this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Optional<Boolean> isTipEligible = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Job other) {
            id(other.getId());
            title(other.getTitle());
            isTipEligible(other.getIsTipEligible());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            version(other.getVersion());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Nullable<String> title) {
            if (title.isNull()) {
                this.title = null;
            } else if (title.isEmpty()) {
                this.title = Optional.empty();
            } else {
                this.title = Optional.of(title.get());
            }
            return this;
        }

        @JsonSetter(value = "is_tip_eligible", nulls = Nulls.SKIP)
        public Builder isTipEligible(Optional<Boolean> isTipEligible) {
            this.isTipEligible = isTipEligible;
            return this;
        }

        public Builder isTipEligible(Boolean isTipEligible) {
            this.isTipEligible = Optional.ofNullable(isTipEligible);
            return this;
        }

        public Builder isTipEligible(Nullable<Boolean> isTipEligible) {
            if (isTipEligible.isNull()) {
                this.isTipEligible = null;
            } else if (isTipEligible.isEmpty()) {
                this.isTipEligible = Optional.empty();
            } else {
                this.isTipEligible = Optional.of(isTipEligible.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Job build() {
            return new Job(id, title, isTipEligible, createdAt, updatedAt, version, additionalProperties);
        }
    }
}
