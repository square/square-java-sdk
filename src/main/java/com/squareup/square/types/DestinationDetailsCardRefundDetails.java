/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DestinationDetailsCardRefundDetails.Builder.class)
public final class DestinationDetailsCardRefundDetails {
    private final Optional<Card> card;

    private final Optional<String> entryMethod;

    private final Optional<String> authResultCode;

    private final Map<String, Object> additionalProperties;

    private DestinationDetailsCardRefundDetails(
            Optional<Card> card,
            Optional<String> entryMethod,
            Optional<String> authResultCode,
            Map<String, Object> additionalProperties) {
        this.card = card;
        this.entryMethod = entryMethod;
        this.authResultCode = authResultCode;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The card's non-confidential details.
     */
    @JsonProperty("card")
    public Optional<Card> getCard() {
        return card;
    }

    /**
     * @return The method used to enter the card's details for the refund. The method can be
     * <code>KEYED</code>, <code>SWIPED</code>, <code>EMV</code>, <code>ON_FILE</code>, or <code>CONTACTLESS</code>.
     */
    @JsonIgnore
    public Optional<String> getEntryMethod() {
        if (entryMethod == null) {
            return Optional.empty();
        }
        return entryMethod;
    }

    /**
     * @return The authorization code provided by the issuer when a refund is approved.
     */
    @JsonIgnore
    public Optional<String> getAuthResultCode() {
        if (authResultCode == null) {
            return Optional.empty();
        }
        return authResultCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("entry_method")
    private Optional<String> _getEntryMethod() {
        return entryMethod;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("auth_result_code")
    private Optional<String> _getAuthResultCode() {
        return authResultCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DestinationDetailsCardRefundDetails
                && equalTo((DestinationDetailsCardRefundDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DestinationDetailsCardRefundDetails other) {
        return card.equals(other.card)
                && entryMethod.equals(other.entryMethod)
                && authResultCode.equals(other.authResultCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.card, this.entryMethod, this.authResultCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Card> card = Optional.empty();

        private Optional<String> entryMethod = Optional.empty();

        private Optional<String> authResultCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DestinationDetailsCardRefundDetails other) {
            card(other.getCard());
            entryMethod(other.getEntryMethod());
            authResultCode(other.getAuthResultCode());
            return this;
        }

        /**
         * <p>The card's non-confidential details.</p>
         */
        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<Card> card) {
            this.card = card;
            return this;
        }

        public Builder card(Card card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        /**
         * <p>The method used to enter the card's details for the refund. The method can be
         * <code>KEYED</code>, <code>SWIPED</code>, <code>EMV</code>, <code>ON_FILE</code>, or <code>CONTACTLESS</code>.</p>
         */
        @JsonSetter(value = "entry_method", nulls = Nulls.SKIP)
        public Builder entryMethod(Optional<String> entryMethod) {
            this.entryMethod = entryMethod;
            return this;
        }

        public Builder entryMethod(String entryMethod) {
            this.entryMethod = Optional.ofNullable(entryMethod);
            return this;
        }

        public Builder entryMethod(Nullable<String> entryMethod) {
            if (entryMethod.isNull()) {
                this.entryMethod = null;
            } else if (entryMethod.isEmpty()) {
                this.entryMethod = Optional.empty();
            } else {
                this.entryMethod = Optional.of(entryMethod.get());
            }
            return this;
        }

        /**
         * <p>The authorization code provided by the issuer when a refund is approved.</p>
         */
        @JsonSetter(value = "auth_result_code", nulls = Nulls.SKIP)
        public Builder authResultCode(Optional<String> authResultCode) {
            this.authResultCode = authResultCode;
            return this;
        }

        public Builder authResultCode(String authResultCode) {
            this.authResultCode = Optional.ofNullable(authResultCode);
            return this;
        }

        public Builder authResultCode(Nullable<String> authResultCode) {
            if (authResultCode.isNull()) {
                this.authResultCode = null;
            } else if (authResultCode.isEmpty()) {
                this.authResultCode = Optional.empty();
            } else {
                this.authResultCode = Optional.of(authResultCode.get());
            }
            return this;
        }

        public DestinationDetailsCardRefundDetails build() {
            return new DestinationDetailsCardRefundDetails(card, entryMethod, authResultCode, additionalProperties);
        }
    }
}
