/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RegisterDomainRequest.Builder.class)
public final class RegisterDomainRequest {
    private final String domainName;

    private final Map<String, Object> additionalProperties;

    private RegisterDomainRequest(String domainName, Map<String, Object> additionalProperties) {
        this.domainName = domainName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A domain name as described in RFC-1034 that will be registered with ApplePay.
     */
    @JsonProperty("domain_name")
    public String getDomainName() {
        return domainName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RegisterDomainRequest && equalTo((RegisterDomainRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RegisterDomainRequest other) {
        return domainName.equals(other.domainName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.domainName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DomainNameStage builder() {
        return new Builder();
    }

    public interface DomainNameStage {
        /**
         * <p>A domain name as described in RFC-1034 that will be registered with ApplePay.</p>
         */
        _FinalStage domainName(@NotNull String domainName);

        Builder from(RegisterDomainRequest other);
    }

    public interface _FinalStage {
        RegisterDomainRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DomainNameStage, _FinalStage {
        private String domainName;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RegisterDomainRequest other) {
            domainName(other.getDomainName());
            return this;
        }

        /**
         * <p>A domain name as described in RFC-1034 that will be registered with ApplePay.</p>
         * <p>A domain name as described in RFC-1034 that will be registered with ApplePay.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("domain_name")
        public _FinalStage domainName(@NotNull String domainName) {
            this.domainName = Objects.requireNonNull(domainName, "domainName must not be null");
            return this;
        }

        @java.lang.Override
        public RegisterDomainRequest build() {
            return new RegisterDomainRequest(domainName, additionalProperties);
        }
    }
}
