/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogCategory.Builder.class)
public final class CatalogCategory {
    private final Optional<String> name;

    private final Optional<List<String>> imageIds;

    private final Optional<CatalogCategoryType> categoryType;

    private final Optional<CatalogObjectCategory> parentCategory;

    private final Optional<Boolean> isTopLevel;

    private final Optional<List<String>> channels;

    private final Optional<List<String>> availabilityPeriodIds;

    private final Optional<Boolean> onlineVisibility;

    private final Optional<String> rootCategory;

    private final Optional<CatalogEcomSeoData> ecomSeoData;

    private final Optional<List<CategoryPathToRootNode>> pathToRoot;

    private final Map<String, Object> additionalProperties;

    private CatalogCategory(
            Optional<String> name,
            Optional<List<String>> imageIds,
            Optional<CatalogCategoryType> categoryType,
            Optional<CatalogObjectCategory> parentCategory,
            Optional<Boolean> isTopLevel,
            Optional<List<String>> channels,
            Optional<List<String>> availabilityPeriodIds,
            Optional<Boolean> onlineVisibility,
            Optional<String> rootCategory,
            Optional<CatalogEcomSeoData> ecomSeoData,
            Optional<List<CategoryPathToRootNode>> pathToRoot,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.imageIds = imageIds;
        this.categoryType = categoryType;
        this.parentCategory = parentCategory;
        this.isTopLevel = isTopLevel;
        this.channels = channels;
        this.availabilityPeriodIds = availabilityPeriodIds;
        this.onlineVisibility = onlineVisibility;
        this.rootCategory = rootCategory;
        this.ecomSeoData = ecomSeoData;
        this.pathToRoot = pathToRoot;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The IDs of images associated with this <code>CatalogCategory</code> instance.
     * Currently these images are not displayed by Square, but are free to be displayed in 3rd party applications.
     */
    @JsonIgnore
    public Optional<List<String>> getImageIds() {
        if (imageIds == null) {
            return Optional.empty();
        }
        return imageIds;
    }

    /**
     * @return The type of the category.
     * See <a href="#type-catalogcategorytype">CatalogCategoryType</a> for possible values
     */
    @JsonProperty("category_type")
    public Optional<CatalogCategoryType> getCategoryType() {
        return categoryType;
    }

    /**
     * @return The ID of the parent category of this category instance.
     */
    @JsonProperty("parent_category")
    public Optional<CatalogObjectCategory> getParentCategory() {
        return parentCategory;
    }

    /**
     * @return Indicates whether a category is a top level category, which does not have any parent_category.
     */
    @JsonIgnore
    public Optional<Boolean> getIsTopLevel() {
        if (isTopLevel == null) {
            return Optional.empty();
        }
        return isTopLevel;
    }

    /**
     * @return A list of IDs representing channels, such as a Square Online site, where the category can be made visible.
     */
    @JsonIgnore
    public Optional<List<String>> getChannels() {
        if (channels == null) {
            return Optional.empty();
        }
        return channels;
    }

    /**
     * @return The IDs of the <code>CatalogAvailabilityPeriod</code> objects associated with the category.
     */
    @JsonIgnore
    public Optional<List<String>> getAvailabilityPeriodIds() {
        if (availabilityPeriodIds == null) {
            return Optional.empty();
        }
        return availabilityPeriodIds;
    }

    /**
     * @return Indicates whether the category is visible (<code>true</code>) or hidden (<code>false</code>) on all of the seller's Square Online sites.
     */
    @JsonIgnore
    public Optional<Boolean> getOnlineVisibility() {
        if (onlineVisibility == null) {
            return Optional.empty();
        }
        return onlineVisibility;
    }

    /**
     * @return The top-level category in a category hierarchy.
     */
    @JsonProperty("root_category")
    public Optional<String> getRootCategory() {
        return rootCategory;
    }

    /**
     * @return The SEO data for a seller's Square Online store.
     */
    @JsonProperty("ecom_seo_data")
    public Optional<CatalogEcomSeoData> getEcomSeoData() {
        return ecomSeoData;
    }

    /**
     * @return The path from the category to its root category. The first node of the path is the parent of the category
     * and the last is the root category. The path is empty if the category is a root category.
     */
    @JsonIgnore
    public Optional<List<CategoryPathToRootNode>> getPathToRoot() {
        if (pathToRoot == null) {
            return Optional.empty();
        }
        return pathToRoot;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("image_ids")
    private Optional<List<String>> _getImageIds() {
        return imageIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_top_level")
    private Optional<Boolean> _getIsTopLevel() {
        return isTopLevel;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("channels")
    private Optional<List<String>> _getChannels() {
        return channels;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("availability_period_ids")
    private Optional<List<String>> _getAvailabilityPeriodIds() {
        return availabilityPeriodIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("online_visibility")
    private Optional<Boolean> _getOnlineVisibility() {
        return onlineVisibility;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("path_to_root")
    private Optional<List<CategoryPathToRootNode>> _getPathToRoot() {
        return pathToRoot;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogCategory && equalTo((CatalogCategory) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogCategory other) {
        return name.equals(other.name)
                && imageIds.equals(other.imageIds)
                && categoryType.equals(other.categoryType)
                && parentCategory.equals(other.parentCategory)
                && isTopLevel.equals(other.isTopLevel)
                && channels.equals(other.channels)
                && availabilityPeriodIds.equals(other.availabilityPeriodIds)
                && onlineVisibility.equals(other.onlineVisibility)
                && rootCategory.equals(other.rootCategory)
                && ecomSeoData.equals(other.ecomSeoData)
                && pathToRoot.equals(other.pathToRoot);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.imageIds,
                this.categoryType,
                this.parentCategory,
                this.isTopLevel,
                this.channels,
                this.availabilityPeriodIds,
                this.onlineVisibility,
                this.rootCategory,
                this.ecomSeoData,
                this.pathToRoot);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<List<String>> imageIds = Optional.empty();

        private Optional<CatalogCategoryType> categoryType = Optional.empty();

        private Optional<CatalogObjectCategory> parentCategory = Optional.empty();

        private Optional<Boolean> isTopLevel = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        private Optional<List<String>> availabilityPeriodIds = Optional.empty();

        private Optional<Boolean> onlineVisibility = Optional.empty();

        private Optional<String> rootCategory = Optional.empty();

        private Optional<CatalogEcomSeoData> ecomSeoData = Optional.empty();

        private Optional<List<CategoryPathToRootNode>> pathToRoot = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogCategory other) {
            name(other.getName());
            imageIds(other.getImageIds());
            categoryType(other.getCategoryType());
            parentCategory(other.getParentCategory());
            isTopLevel(other.getIsTopLevel());
            channels(other.getChannels());
            availabilityPeriodIds(other.getAvailabilityPeriodIds());
            onlineVisibility(other.getOnlineVisibility());
            rootCategory(other.getRootCategory());
            ecomSeoData(other.getEcomSeoData());
            pathToRoot(other.getPathToRoot());
            return this;
        }

        /**
         * <p>The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The IDs of images associated with this <code>CatalogCategory</code> instance.
         * Currently these images are not displayed by Square, but are free to be displayed in 3rd party applications.</p>
         */
        @JsonSetter(value = "image_ids", nulls = Nulls.SKIP)
        public Builder imageIds(Optional<List<String>> imageIds) {
            this.imageIds = imageIds;
            return this;
        }

        public Builder imageIds(List<String> imageIds) {
            this.imageIds = Optional.ofNullable(imageIds);
            return this;
        }

        public Builder imageIds(Nullable<List<String>> imageIds) {
            if (imageIds.isNull()) {
                this.imageIds = null;
            } else if (imageIds.isEmpty()) {
                this.imageIds = Optional.empty();
            } else {
                this.imageIds = Optional.of(imageIds.get());
            }
            return this;
        }

        /**
         * <p>The type of the category.
         * See <a href="#type-catalogcategorytype">CatalogCategoryType</a> for possible values</p>
         */
        @JsonSetter(value = "category_type", nulls = Nulls.SKIP)
        public Builder categoryType(Optional<CatalogCategoryType> categoryType) {
            this.categoryType = categoryType;
            return this;
        }

        public Builder categoryType(CatalogCategoryType categoryType) {
            this.categoryType = Optional.ofNullable(categoryType);
            return this;
        }

        /**
         * <p>The ID of the parent category of this category instance.</p>
         */
        @JsonSetter(value = "parent_category", nulls = Nulls.SKIP)
        public Builder parentCategory(Optional<CatalogObjectCategory> parentCategory) {
            this.parentCategory = parentCategory;
            return this;
        }

        public Builder parentCategory(CatalogObjectCategory parentCategory) {
            this.parentCategory = Optional.ofNullable(parentCategory);
            return this;
        }

        /**
         * <p>Indicates whether a category is a top level category, which does not have any parent_category.</p>
         */
        @JsonSetter(value = "is_top_level", nulls = Nulls.SKIP)
        public Builder isTopLevel(Optional<Boolean> isTopLevel) {
            this.isTopLevel = isTopLevel;
            return this;
        }

        public Builder isTopLevel(Boolean isTopLevel) {
            this.isTopLevel = Optional.ofNullable(isTopLevel);
            return this;
        }

        public Builder isTopLevel(Nullable<Boolean> isTopLevel) {
            if (isTopLevel.isNull()) {
                this.isTopLevel = null;
            } else if (isTopLevel.isEmpty()) {
                this.isTopLevel = Optional.empty();
            } else {
                this.isTopLevel = Optional.of(isTopLevel.get());
            }
            return this;
        }

        /**
         * <p>A list of IDs representing channels, such as a Square Online site, where the category can be made visible.</p>
         */
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public Builder channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        public Builder channels(List<String> channels) {
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Nullable<List<String>> channels) {
            if (channels.isNull()) {
                this.channels = null;
            } else if (channels.isEmpty()) {
                this.channels = Optional.empty();
            } else {
                this.channels = Optional.of(channels.get());
            }
            return this;
        }

        /**
         * <p>The IDs of the <code>CatalogAvailabilityPeriod</code> objects associated with the category.</p>
         */
        @JsonSetter(value = "availability_period_ids", nulls = Nulls.SKIP)
        public Builder availabilityPeriodIds(Optional<List<String>> availabilityPeriodIds) {
            this.availabilityPeriodIds = availabilityPeriodIds;
            return this;
        }

        public Builder availabilityPeriodIds(List<String> availabilityPeriodIds) {
            this.availabilityPeriodIds = Optional.ofNullable(availabilityPeriodIds);
            return this;
        }

        public Builder availabilityPeriodIds(Nullable<List<String>> availabilityPeriodIds) {
            if (availabilityPeriodIds.isNull()) {
                this.availabilityPeriodIds = null;
            } else if (availabilityPeriodIds.isEmpty()) {
                this.availabilityPeriodIds = Optional.empty();
            } else {
                this.availabilityPeriodIds = Optional.of(availabilityPeriodIds.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether the category is visible (<code>true</code>) or hidden (<code>false</code>) on all of the seller's Square Online sites.</p>
         */
        @JsonSetter(value = "online_visibility", nulls = Nulls.SKIP)
        public Builder onlineVisibility(Optional<Boolean> onlineVisibility) {
            this.onlineVisibility = onlineVisibility;
            return this;
        }

        public Builder onlineVisibility(Boolean onlineVisibility) {
            this.onlineVisibility = Optional.ofNullable(onlineVisibility);
            return this;
        }

        public Builder onlineVisibility(Nullable<Boolean> onlineVisibility) {
            if (onlineVisibility.isNull()) {
                this.onlineVisibility = null;
            } else if (onlineVisibility.isEmpty()) {
                this.onlineVisibility = Optional.empty();
            } else {
                this.onlineVisibility = Optional.of(onlineVisibility.get());
            }
            return this;
        }

        /**
         * <p>The top-level category in a category hierarchy.</p>
         */
        @JsonSetter(value = "root_category", nulls = Nulls.SKIP)
        public Builder rootCategory(Optional<String> rootCategory) {
            this.rootCategory = rootCategory;
            return this;
        }

        public Builder rootCategory(String rootCategory) {
            this.rootCategory = Optional.ofNullable(rootCategory);
            return this;
        }

        /**
         * <p>The SEO data for a seller's Square Online store.</p>
         */
        @JsonSetter(value = "ecom_seo_data", nulls = Nulls.SKIP)
        public Builder ecomSeoData(Optional<CatalogEcomSeoData> ecomSeoData) {
            this.ecomSeoData = ecomSeoData;
            return this;
        }

        public Builder ecomSeoData(CatalogEcomSeoData ecomSeoData) {
            this.ecomSeoData = Optional.ofNullable(ecomSeoData);
            return this;
        }

        /**
         * <p>The path from the category to its root category. The first node of the path is the parent of the category
         * and the last is the root category. The path is empty if the category is a root category.</p>
         */
        @JsonSetter(value = "path_to_root", nulls = Nulls.SKIP)
        public Builder pathToRoot(Optional<List<CategoryPathToRootNode>> pathToRoot) {
            this.pathToRoot = pathToRoot;
            return this;
        }

        public Builder pathToRoot(List<CategoryPathToRootNode> pathToRoot) {
            this.pathToRoot = Optional.ofNullable(pathToRoot);
            return this;
        }

        public Builder pathToRoot(Nullable<List<CategoryPathToRootNode>> pathToRoot) {
            if (pathToRoot.isNull()) {
                this.pathToRoot = null;
            } else if (pathToRoot.isEmpty()) {
                this.pathToRoot = Optional.empty();
            } else {
                this.pathToRoot = Optional.of(pathToRoot.get());
            }
            return this;
        }

        public CatalogCategory build() {
            return new CatalogCategory(
                    name,
                    imageIds,
                    categoryType,
                    parentCategory,
                    isTopLevel,
                    channels,
                    availabilityPeriodIds,
                    onlineVisibility,
                    rootCategory,
                    ecomSeoData,
                    pathToRoot,
                    additionalProperties);
        }
    }
}
