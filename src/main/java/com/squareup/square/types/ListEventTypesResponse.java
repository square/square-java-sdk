/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListEventTypesResponse.Builder.class)
public final class ListEventTypesResponse {
    private final Optional<List<Error>> errors;

    private final Optional<List<String>> eventTypes;

    private final Optional<List<EventTypeMetadata>> metadata;

    private final Map<String, Object> additionalProperties;

    private ListEventTypesResponse(
            Optional<List<Error>> errors,
            Optional<List<String>> eventTypes,
            Optional<List<EventTypeMetadata>> metadata,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.eventTypes = eventTypes;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information on errors encountered during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The list of event types.
     */
    @JsonProperty("event_types")
    public Optional<List<String>> getEventTypes() {
        return eventTypes;
    }

    /**
     * @return Contains the metadata of an event type. For more information, see <a href="entity:EventTypeMetadata">EventTypeMetadata</a>.
     */
    @JsonProperty("metadata")
    public Optional<List<EventTypeMetadata>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListEventTypesResponse && equalTo((ListEventTypesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListEventTypesResponse other) {
        return errors.equals(other.errors) && eventTypes.equals(other.eventTypes) && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.eventTypes, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<List<String>> eventTypes = Optional.empty();

        private Optional<List<EventTypeMetadata>> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListEventTypesResponse other) {
            errors(other.getErrors());
            eventTypes(other.getEventTypes());
            metadata(other.getMetadata());
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "event_types", nulls = Nulls.SKIP)
        public Builder eventTypes(Optional<List<String>> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(List<String> eventTypes) {
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<List<EventTypeMetadata>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(List<EventTypeMetadata> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public ListEventTypesResponse build() {
            return new ListEventTypesResponse(errors, eventTypes, metadata, additionalProperties);
        }
    }
}
