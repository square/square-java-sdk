/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppointmentSegment.Builder.class)
public final class AppointmentSegment {
    private final Optional<Integer> durationMinutes;

    private final Optional<String> serviceVariationId;

    private final String teamMemberId;

    private final Optional<Long> serviceVariationVersion;

    private final Optional<Integer> intermissionMinutes;

    private final Optional<Boolean> anyTeamMember;

    private final Optional<List<String>> resourceIds;

    private final Map<String, Object> additionalProperties;

    private AppointmentSegment(
            Optional<Integer> durationMinutes,
            Optional<String> serviceVariationId,
            String teamMemberId,
            Optional<Long> serviceVariationVersion,
            Optional<Integer> intermissionMinutes,
            Optional<Boolean> anyTeamMember,
            Optional<List<String>> resourceIds,
            Map<String, Object> additionalProperties) {
        this.durationMinutes = durationMinutes;
        this.serviceVariationId = serviceVariationId;
        this.teamMemberId = teamMemberId;
        this.serviceVariationVersion = serviceVariationVersion;
        this.intermissionMinutes = intermissionMinutes;
        this.anyTeamMember = anyTeamMember;
        this.resourceIds = resourceIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The time span in minutes of an appointment segment.
     */
    @JsonIgnore
    public Optional<Integer> getDurationMinutes() {
        if (durationMinutes == null) {
            return Optional.empty();
        }
        return durationMinutes;
    }

    /**
     * @return The ID of the <a href="entity:CatalogItemVariation">CatalogItemVariation</a> object representing the service booked in this segment.
     */
    @JsonIgnore
    public Optional<String> getServiceVariationId() {
        if (serviceVariationId == null) {
            return Optional.empty();
        }
        return serviceVariationId;
    }

    /**
     * @return The ID of the <a href="entity:TeamMember">TeamMember</a> object representing the team member booked in this segment.
     */
    @JsonProperty("team_member_id")
    public String getTeamMemberId() {
        return teamMemberId;
    }

    /**
     * @return The current version of the item variation representing the service booked in this segment.
     */
    @JsonIgnore
    public Optional<Long> getServiceVariationVersion() {
        if (serviceVariationVersion == null) {
            return Optional.empty();
        }
        return serviceVariationVersion;
    }

    /**
     * @return Time between the end of this segment and the beginning of the subsequent segment.
     */
    @JsonProperty("intermission_minutes")
    public Optional<Integer> getIntermissionMinutes() {
        return intermissionMinutes;
    }

    /**
     * @return Whether the customer accepts any team member, instead of a specific one, to serve this segment.
     */
    @JsonProperty("any_team_member")
    public Optional<Boolean> getAnyTeamMember() {
        return anyTeamMember;
    }

    /**
     * @return The IDs of the seller-accessible resources used for this appointment segment.
     */
    @JsonProperty("resource_ids")
    public Optional<List<String>> getResourceIds() {
        return resourceIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("duration_minutes")
    private Optional<Integer> _getDurationMinutes() {
        return durationMinutes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("service_variation_id")
    private Optional<String> _getServiceVariationId() {
        return serviceVariationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("service_variation_version")
    private Optional<Long> _getServiceVariationVersion() {
        return serviceVariationVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppointmentSegment && equalTo((AppointmentSegment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppointmentSegment other) {
        return durationMinutes.equals(other.durationMinutes)
                && serviceVariationId.equals(other.serviceVariationId)
                && teamMemberId.equals(other.teamMemberId)
                && serviceVariationVersion.equals(other.serviceVariationVersion)
                && intermissionMinutes.equals(other.intermissionMinutes)
                && anyTeamMember.equals(other.anyTeamMember)
                && resourceIds.equals(other.resourceIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.durationMinutes,
                this.serviceVariationId,
                this.teamMemberId,
                this.serviceVariationVersion,
                this.intermissionMinutes,
                this.anyTeamMember,
                this.resourceIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TeamMemberIdStage builder() {
        return new Builder();
    }

    public interface TeamMemberIdStage {
        _FinalStage teamMemberId(@NotNull String teamMemberId);

        Builder from(AppointmentSegment other);
    }

    public interface _FinalStage {
        AppointmentSegment build();

        _FinalStage durationMinutes(Optional<Integer> durationMinutes);

        _FinalStage durationMinutes(Integer durationMinutes);

        _FinalStage durationMinutes(Nullable<Integer> durationMinutes);

        _FinalStage serviceVariationId(Optional<String> serviceVariationId);

        _FinalStage serviceVariationId(String serviceVariationId);

        _FinalStage serviceVariationId(Nullable<String> serviceVariationId);

        _FinalStage serviceVariationVersion(Optional<Long> serviceVariationVersion);

        _FinalStage serviceVariationVersion(Long serviceVariationVersion);

        _FinalStage serviceVariationVersion(Nullable<Long> serviceVariationVersion);

        _FinalStage intermissionMinutes(Optional<Integer> intermissionMinutes);

        _FinalStage intermissionMinutes(Integer intermissionMinutes);

        _FinalStage anyTeamMember(Optional<Boolean> anyTeamMember);

        _FinalStage anyTeamMember(Boolean anyTeamMember);

        _FinalStage resourceIds(Optional<List<String>> resourceIds);

        _FinalStage resourceIds(List<String> resourceIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TeamMemberIdStage, _FinalStage {
        private String teamMemberId;

        private Optional<List<String>> resourceIds = Optional.empty();

        private Optional<Boolean> anyTeamMember = Optional.empty();

        private Optional<Integer> intermissionMinutes = Optional.empty();

        private Optional<Long> serviceVariationVersion = Optional.empty();

        private Optional<String> serviceVariationId = Optional.empty();

        private Optional<Integer> durationMinutes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AppointmentSegment other) {
            durationMinutes(other.getDurationMinutes());
            serviceVariationId(other.getServiceVariationId());
            teamMemberId(other.getTeamMemberId());
            serviceVariationVersion(other.getServiceVariationVersion());
            intermissionMinutes(other.getIntermissionMinutes());
            anyTeamMember(other.getAnyTeamMember());
            resourceIds(other.getResourceIds());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:TeamMember">TeamMember</a> object representing the team member booked in this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("team_member_id")
        public _FinalStage teamMemberId(@NotNull String teamMemberId) {
            this.teamMemberId = Objects.requireNonNull(teamMemberId, "teamMemberId must not be null");
            return this;
        }

        /**
         * <p>The IDs of the seller-accessible resources used for this appointment segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage resourceIds(List<String> resourceIds) {
            this.resourceIds = Optional.ofNullable(resourceIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "resource_ids", nulls = Nulls.SKIP)
        public _FinalStage resourceIds(Optional<List<String>> resourceIds) {
            this.resourceIds = resourceIds;
            return this;
        }

        /**
         * <p>Whether the customer accepts any team member, instead of a specific one, to serve this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage anyTeamMember(Boolean anyTeamMember) {
            this.anyTeamMember = Optional.ofNullable(anyTeamMember);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "any_team_member", nulls = Nulls.SKIP)
        public _FinalStage anyTeamMember(Optional<Boolean> anyTeamMember) {
            this.anyTeamMember = anyTeamMember;
            return this;
        }

        /**
         * <p>Time between the end of this segment and the beginning of the subsequent segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage intermissionMinutes(Integer intermissionMinutes) {
            this.intermissionMinutes = Optional.ofNullable(intermissionMinutes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "intermission_minutes", nulls = Nulls.SKIP)
        public _FinalStage intermissionMinutes(Optional<Integer> intermissionMinutes) {
            this.intermissionMinutes = intermissionMinutes;
            return this;
        }

        /**
         * <p>The current version of the item variation representing the service booked in this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceVariationVersion(Nullable<Long> serviceVariationVersion) {
            if (serviceVariationVersion.isNull()) {
                this.serviceVariationVersion = null;
            } else if (serviceVariationVersion.isEmpty()) {
                this.serviceVariationVersion = Optional.empty();
            } else {
                this.serviceVariationVersion = Optional.of(serviceVariationVersion.get());
            }
            return this;
        }

        /**
         * <p>The current version of the item variation representing the service booked in this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceVariationVersion(Long serviceVariationVersion) {
            this.serviceVariationVersion = Optional.ofNullable(serviceVariationVersion);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "service_variation_version", nulls = Nulls.SKIP)
        public _FinalStage serviceVariationVersion(Optional<Long> serviceVariationVersion) {
            this.serviceVariationVersion = serviceVariationVersion;
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:CatalogItemVariation">CatalogItemVariation</a> object representing the service booked in this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceVariationId(Nullable<String> serviceVariationId) {
            if (serviceVariationId.isNull()) {
                this.serviceVariationId = null;
            } else if (serviceVariationId.isEmpty()) {
                this.serviceVariationId = Optional.empty();
            } else {
                this.serviceVariationId = Optional.of(serviceVariationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:CatalogItemVariation">CatalogItemVariation</a> object representing the service booked in this segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceVariationId(String serviceVariationId) {
            this.serviceVariationId = Optional.ofNullable(serviceVariationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "service_variation_id", nulls = Nulls.SKIP)
        public _FinalStage serviceVariationId(Optional<String> serviceVariationId) {
            this.serviceVariationId = serviceVariationId;
            return this;
        }

        /**
         * <p>The time span in minutes of an appointment segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage durationMinutes(Nullable<Integer> durationMinutes) {
            if (durationMinutes.isNull()) {
                this.durationMinutes = null;
            } else if (durationMinutes.isEmpty()) {
                this.durationMinutes = Optional.empty();
            } else {
                this.durationMinutes = Optional.of(durationMinutes.get());
            }
            return this;
        }

        /**
         * <p>The time span in minutes of an appointment segment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage durationMinutes(Integer durationMinutes) {
            this.durationMinutes = Optional.ofNullable(durationMinutes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "duration_minutes", nulls = Nulls.SKIP)
        public _FinalStage durationMinutes(Optional<Integer> durationMinutes) {
            this.durationMinutes = durationMinutes;
            return this;
        }

        @java.lang.Override
        public AppointmentSegment build() {
            return new AppointmentSegment(
                    durationMinutes,
                    serviceVariationId,
                    teamMemberId,
                    serviceVariationVersion,
                    intermissionMinutes,
                    anyTeamMember,
                    resourceIds,
                    additionalProperties);
        }
    }
}
