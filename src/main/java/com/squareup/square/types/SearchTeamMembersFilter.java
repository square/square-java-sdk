/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchTeamMembersFilter.Builder.class)
public final class SearchTeamMembersFilter {
    private final Optional<List<String>> locationIds;

    private final Optional<TeamMemberStatus> status;

    private final Optional<Boolean> isOwner;

    private final Map<String, Object> additionalProperties;

    private SearchTeamMembersFilter(
            Optional<List<String>> locationIds,
            Optional<TeamMemberStatus> status,
            Optional<Boolean> isOwner,
            Map<String, Object> additionalProperties) {
        this.locationIds = locationIds;
        this.status = status;
        this.isOwner = isOwner;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When present, filters by team members assigned to the specified locations.
     * When empty, includes team members assigned to any location.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return When present, filters by team members who match the given status.
     * When empty, includes team members of all statuses.
     * See <a href="#type-teammemberstatus">TeamMemberStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<TeamMemberStatus> getStatus() {
        return status;
    }

    /**
     * @return When present and set to true, returns the team member who is the owner of the Square account.
     */
    @JsonIgnore
    public Optional<Boolean> getIsOwner() {
        if (isOwner == null) {
            return Optional.empty();
        }
        return isOwner;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_owner")
    private Optional<Boolean> _getIsOwner() {
        return isOwner;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchTeamMembersFilter && equalTo((SearchTeamMembersFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchTeamMembersFilter other) {
        return locationIds.equals(other.locationIds) && status.equals(other.status) && isOwner.equals(other.isOwner);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationIds, this.status, this.isOwner);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<TeamMemberStatus> status = Optional.empty();

        private Optional<Boolean> isOwner = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchTeamMembersFilter other) {
            locationIds(other.getLocationIds());
            status(other.getStatus());
            isOwner(other.getIsOwner());
            return this;
        }

        /**
         * <p>When present, filters by team members assigned to the specified locations.
         * When empty, includes team members assigned to any location.</p>
         */
        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        /**
         * <p>When present, filters by team members who match the given status.
         * When empty, includes team members of all statuses.
         * See <a href="#type-teammemberstatus">TeamMemberStatus</a> for possible values</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TeamMemberStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TeamMemberStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>When present and set to true, returns the team member who is the owner of the Square account.</p>
         */
        @JsonSetter(value = "is_owner", nulls = Nulls.SKIP)
        public Builder isOwner(Optional<Boolean> isOwner) {
            this.isOwner = isOwner;
            return this;
        }

        public Builder isOwner(Boolean isOwner) {
            this.isOwner = Optional.ofNullable(isOwner);
            return this;
        }

        public Builder isOwner(Nullable<Boolean> isOwner) {
            if (isOwner.isNull()) {
                this.isOwner = null;
            } else if (isOwner.isEmpty()) {
                this.isOwner = Optional.empty();
            } else {
                this.isOwner = Optional.of(isOwner.get());
            }
            return this;
        }

        public SearchTeamMembersFilter build() {
            return new SearchTeamMembersFilter(locationIds, status, isOwner, additionalProperties);
        }
    }
}
