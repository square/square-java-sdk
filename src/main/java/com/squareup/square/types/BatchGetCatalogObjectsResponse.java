/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchGetCatalogObjectsResponse.Builder.class)
public final class BatchGetCatalogObjectsResponse {
    private final Optional<List<Error>> errors;

    private final Optional<List<CatalogObject>> objects;

    private final Optional<List<CatalogObject>> relatedObjects;

    private final Map<String, Object> additionalProperties;

    private BatchGetCatalogObjectsResponse(
            Optional<List<Error>> errors,
            Optional<List<CatalogObject>> objects,
            Optional<List<CatalogObject>> relatedObjects,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.objects = objects;
        this.relatedObjects = relatedObjects;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return A list of <a href="entity:CatalogObject">CatalogObject</a>s returned.
     */
    @JsonProperty("objects")
    public Optional<List<CatalogObject>> getObjects() {
        return objects;
    }

    /**
     * @return A list of <a href="entity:CatalogObject">CatalogObject</a>s referenced by the object in the <code>objects</code> field.
     */
    @JsonProperty("related_objects")
    public Optional<List<CatalogObject>> getRelatedObjects() {
        return relatedObjects;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchGetCatalogObjectsResponse && equalTo((BatchGetCatalogObjectsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchGetCatalogObjectsResponse other) {
        return errors.equals(other.errors)
                && objects.equals(other.objects)
                && relatedObjects.equals(other.relatedObjects);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.objects, this.relatedObjects);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<List<CatalogObject>> objects = Optional.empty();

        private Optional<List<CatalogObject>> relatedObjects = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchGetCatalogObjectsResponse other) {
            errors(other.getErrors());
            objects(other.getObjects());
            relatedObjects(other.getRelatedObjects());
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "objects", nulls = Nulls.SKIP)
        public Builder objects(Optional<List<CatalogObject>> objects) {
            this.objects = objects;
            return this;
        }

        public Builder objects(List<CatalogObject> objects) {
            this.objects = Optional.ofNullable(objects);
            return this;
        }

        @JsonSetter(value = "related_objects", nulls = Nulls.SKIP)
        public Builder relatedObjects(Optional<List<CatalogObject>> relatedObjects) {
            this.relatedObjects = relatedObjects;
            return this;
        }

        public Builder relatedObjects(List<CatalogObject> relatedObjects) {
            this.relatedObjects = Optional.ofNullable(relatedObjects);
            return this;
        }

        public BatchGetCatalogObjectsResponse build() {
            return new BatchGetCatalogObjectsResponse(errors, objects, relatedObjects, additionalProperties);
        }
    }
}
