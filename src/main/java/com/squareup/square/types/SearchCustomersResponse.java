/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchCustomersResponse.Builder.class)
public final class SearchCustomersResponse {
    private final Optional<List<Error>> errors;

    private final Optional<List<Customer>> customers;

    private final Optional<String> cursor;

    private final Optional<Long> count;

    private final Map<String, Object> additionalProperties;

    private SearchCustomersResponse(
            Optional<List<Error>> errors,
            Optional<List<Customer>> customers,
            Optional<String> cursor,
            Optional<Long> count,
            Map<String, Object> additionalProperties) {
        this.errors = errors;
        this.customers = customers;
        this.cursor = cursor;
        this.count = count;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any errors that occurred during the request.
     */
    @JsonProperty("errors")
    public Optional<List<Error>> getErrors() {
        return errors;
    }

    /**
     * @return The customer profiles that match the search query. If any search condition is not met, the result is an empty object (<code>{}</code>).
     * Only customer profiles with public information (<code>given_name</code>, <code>family_name</code>, <code>company_name</code>, <code>email_address</code>, or <code>phone_number</code>)
     * are included in the response.
     */
    @JsonProperty("customers")
    public Optional<List<Customer>> getCustomers() {
        return customers;
    }

    /**
     * @return A pagination cursor that can be used during subsequent calls
     * to <code>SearchCustomers</code> to retrieve the next set of results associated
     * with the original query. Pagination cursors are only present when
     * a request succeeds and additional results are available.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return The total count of customers associated with the Square account that match the search query. Only customer profiles with
     * public information (<code>given_name</code>, <code>family_name</code>, <code>company_name</code>, <code>email_address</code>, or <code>phone_number</code>) are counted. This field is
     * present only if <code>count</code> is set to <code>true</code> in the request.
     */
    @JsonProperty("count")
    public Optional<Long> getCount() {
        return count;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchCustomersResponse && equalTo((SearchCustomersResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchCustomersResponse other) {
        return errors.equals(other.errors)
                && customers.equals(other.customers)
                && cursor.equals(other.cursor)
                && count.equals(other.count);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errors, this.customers, this.cursor, this.count);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Error>> errors = Optional.empty();

        private Optional<List<Customer>> customers = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<Long> count = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchCustomersResponse other) {
            errors(other.getErrors());
            customers(other.getCustomers());
            cursor(other.getCursor());
            count(other.getCount());
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        @JsonSetter(value = "customers", nulls = Nulls.SKIP)
        public Builder customers(Optional<List<Customer>> customers) {
            this.customers = customers;
            return this;
        }

        public Builder customers(List<Customer> customers) {
            this.customers = Optional.ofNullable(customers);
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        @JsonSetter(value = "count", nulls = Nulls.SKIP)
        public Builder count(Optional<Long> count) {
            this.count = count;
            return this;
        }

        public Builder count(Long count) {
            this.count = Optional.ofNullable(count);
            return this;
        }

        public SearchCustomersResponse build() {
            return new SearchCustomersResponse(errors, customers, cursor, count, additionalProperties);
        }
    }
}
