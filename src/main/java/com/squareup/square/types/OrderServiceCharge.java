/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderServiceCharge.Builder.class)
public final class OrderServiceCharge {
    private final Optional<String> uid;

    private final Optional<String> name;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Optional<String> percentage;

    private final Optional<Money> amountMoney;

    private final Optional<Money> appliedMoney;

    private final Optional<Money> totalMoney;

    private final Optional<Money> totalTaxMoney;

    private final Optional<OrderServiceChargeCalculationPhase> calculationPhase;

    private final Optional<Boolean> taxable;

    private final Optional<List<OrderLineItemAppliedTax>> appliedTaxes;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<OrderServiceChargeType> type;

    private final Optional<OrderServiceChargeTreatmentType> treatmentType;

    private final Optional<OrderServiceChargeScope> scope;

    private final Map<String, Object> additionalProperties;

    private OrderServiceCharge(
            Optional<String> uid,
            Optional<String> name,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Optional<String> percentage,
            Optional<Money> amountMoney,
            Optional<Money> appliedMoney,
            Optional<Money> totalMoney,
            Optional<Money> totalTaxMoney,
            Optional<OrderServiceChargeCalculationPhase> calculationPhase,
            Optional<Boolean> taxable,
            Optional<List<OrderLineItemAppliedTax>> appliedTaxes,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<OrderServiceChargeType> type,
            Optional<OrderServiceChargeTreatmentType> treatmentType,
            Optional<OrderServiceChargeScope> scope,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.name = name;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.percentage = percentage;
        this.amountMoney = amountMoney;
        this.appliedMoney = appliedMoney;
        this.totalMoney = totalMoney;
        this.totalTaxMoney = totalTaxMoney;
        this.calculationPhase = calculationPhase;
        this.taxable = taxable;
        this.appliedTaxes = appliedTaxes;
        this.metadata = metadata;
        this.type = type;
        this.treatmentType = treatmentType;
        this.scope = scope;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the service charge only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The name of the service charge.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The catalog object ID referencing the service charge <a href="entity:CatalogObject">CatalogObject</a>.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this service charge references.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    /**
     * @return The service charge percentage as a string representation of a
     * decimal number. For example, <code>&quot;7.25&quot;</code> indicates a service charge of 7.25%.
     * <p>Exactly 1 of <code>percentage</code> or <code>amount_money</code> should be set.</p>
     */
    @JsonIgnore
    public Optional<String> getPercentage() {
        if (percentage == null) {
            return Optional.empty();
        }
        return percentage;
    }

    /**
     * @return The amount of a non-percentage-based service charge.
     * <p>Exactly one of <code>percentage</code> or <code>amount_money</code> should be set.</p>
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The amount of money applied to the order by the service charge,
     * including any inclusive tax amounts, as calculated by Square.
     * <ul>
     * <li>For fixed-amount service charges, <code>applied_money</code> is equal to <code>amount_money</code>.</li>
     * <li>For percentage-based service charges, <code>applied_money</code> is the money
     * calculated using the percentage.</li>
     * </ul>
     */
    @JsonProperty("applied_money")
    public Optional<Money> getAppliedMoney() {
        return appliedMoney;
    }

    /**
     * @return The total amount of money to collect for the service charge.
     * <p><strong>Note</strong>: If an inclusive tax is applied to the service charge,
     * <code>total_money</code> does not equal <code>applied_money</code> plus <code>total_tax_money</code>
     * because the inclusive tax amount is already included in both
     * <code>applied_money</code> and <code>total_tax_money</code>.</p>
     */
    @JsonProperty("total_money")
    public Optional<Money> getTotalMoney() {
        return totalMoney;
    }

    /**
     * @return The total amount of tax money to collect for the service charge.
     */
    @JsonProperty("total_tax_money")
    public Optional<Money> getTotalTaxMoney() {
        return totalTaxMoney;
    }

    /**
     * @return The calculation phase at which to apply the service charge.
     * See <a href="#type-orderservicechargecalculationphase">OrderServiceChargeCalculationPhase</a> for possible values
     */
    @JsonProperty("calculation_phase")
    public Optional<OrderServiceChargeCalculationPhase> getCalculationPhase() {
        return calculationPhase;
    }

    /**
     * @return Indicates whether the service charge can be taxed. If set to <code>true</code>,
     * order-level taxes automatically apply to the service charge. Note that
     * service charges calculated in the <code>TOTAL_PHASE</code> cannot be marked as taxable.
     */
    @JsonIgnore
    public Optional<Boolean> getTaxable() {
        if (taxable == null) {
            return Optional.empty();
        }
        return taxable;
    }

    /**
     * @return The list of references to the taxes applied to this service charge. Each
     * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
     * <code>OrderLineItemTax</code> that is being applied to this service charge. On reads, the amount applied
     * is populated.
     * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every taxable service charge
     * for all <code>ORDER</code> scoped taxes that are added to the order. <code>OrderLineItemAppliedTax</code> records
     * for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax to apply to any taxable
     * service charge. Taxable service charges have the <code>taxable</code> field set to <code>true</code> and calculated
     * in the <code>SUBTOTAL_PHASE</code>.</p>
     * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedTax>> getAppliedTaxes() {
        if (appliedTaxes == null) {
            return Optional.empty();
        }
        return appliedTaxes;
    }

    /**
     * @return Application-defined data attached to this service charge. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * <p>Keys written by applications must be 60 characters or less and must be in the character set
     * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.</p>
     * <p>Values have a maximum length of 255 characters.</p>
     * <p>An application can have up to 10 entries per metadata field.</p>
     * <p>Entries written by applications are private and can only be read or modified by the same
     * application.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
     */
    @JsonIgnore
    public Optional<Map<String, Optional<String>>> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    /**
     * @return The type of the service charge.
     * See <a href="#type-orderservicechargetype">OrderServiceChargeType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<OrderServiceChargeType> getType() {
        return type;
    }

    /**
     * @return The treatment type of the service charge.
     * See <a href="#type-orderservicechargetreatmenttype">OrderServiceChargeTreatmentType</a> for possible values
     */
    @JsonProperty("treatment_type")
    public Optional<OrderServiceChargeTreatmentType> getTreatmentType() {
        return treatmentType;
    }

    /**
     * @return Indicates the level at which the apportioned service charge applies. For <code>ORDER</code>
     * scoped service charges, Square generates references in <code>applied_service_charges</code> on
     * all order line items that do not have them. For <code>LINE_ITEM</code> scoped service charges,
     * the service charge only applies to line items with a service charge reference in their
     * <code>applied_service_charges</code> field.
     * <p>This field is immutable. To change the scope of an apportioned service charge, you must delete
     * the apportioned service charge and re-add it as a new apportioned service charge.
     * See <a href="#type-orderservicechargescope">OrderServiceChargeScope</a> for possible values</p>
     */
    @JsonProperty("scope")
    public Optional<OrderServiceChargeScope> getScope() {
        return scope;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("percentage")
    private Optional<String> _getPercentage() {
        return percentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("taxable")
    private Optional<Boolean> _getTaxable() {
        return taxable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_taxes")
    private Optional<List<OrderLineItemAppliedTax>> _getAppliedTaxes() {
        return appliedTaxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Map<String, Optional<String>>> _getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderServiceCharge && equalTo((OrderServiceCharge) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderServiceCharge other) {
        return uid.equals(other.uid)
                && name.equals(other.name)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion)
                && percentage.equals(other.percentage)
                && amountMoney.equals(other.amountMoney)
                && appliedMoney.equals(other.appliedMoney)
                && totalMoney.equals(other.totalMoney)
                && totalTaxMoney.equals(other.totalTaxMoney)
                && calculationPhase.equals(other.calculationPhase)
                && taxable.equals(other.taxable)
                && appliedTaxes.equals(other.appliedTaxes)
                && metadata.equals(other.metadata)
                && type.equals(other.type)
                && treatmentType.equals(other.treatmentType)
                && scope.equals(other.scope);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.name,
                this.catalogObjectId,
                this.catalogVersion,
                this.percentage,
                this.amountMoney,
                this.appliedMoney,
                this.totalMoney,
                this.totalTaxMoney,
                this.calculationPhase,
                this.taxable,
                this.appliedTaxes,
                this.metadata,
                this.type,
                this.treatmentType,
                this.scope);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        private Optional<String> percentage = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<Money> appliedMoney = Optional.empty();

        private Optional<Money> totalMoney = Optional.empty();

        private Optional<Money> totalTaxMoney = Optional.empty();

        private Optional<OrderServiceChargeCalculationPhase> calculationPhase = Optional.empty();

        private Optional<Boolean> taxable = Optional.empty();

        private Optional<List<OrderLineItemAppliedTax>> appliedTaxes = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<OrderServiceChargeType> type = Optional.empty();

        private Optional<OrderServiceChargeTreatmentType> treatmentType = Optional.empty();

        private Optional<OrderServiceChargeScope> scope = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderServiceCharge other) {
            uid(other.getUid());
            name(other.getName());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            percentage(other.getPercentage());
            amountMoney(other.getAmountMoney());
            appliedMoney(other.getAppliedMoney());
            totalMoney(other.getTotalMoney());
            totalTaxMoney(other.getTotalTaxMoney());
            calculationPhase(other.getCalculationPhase());
            taxable(other.getTaxable());
            appliedTaxes(other.getAppliedTaxes());
            metadata(other.getMetadata());
            type(other.getType());
            treatmentType(other.getTreatmentType());
            scope(other.getScope());
            return this;
        }

        /**
         * <p>A unique ID that identifies the service charge only within this order.</p>
         */
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>The name of the service charge.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The catalog object ID referencing the service charge <a href="entity:CatalogObject">CatalogObject</a>.</p>
         */
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The version of the catalog object that this service charge references.</p>
         */
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public Builder catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        public Builder catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        public Builder catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        /**
         * <p>The service charge percentage as a string representation of a
         * decimal number. For example, <code>&quot;7.25&quot;</code> indicates a service charge of 7.25%.</p>
         * <p>Exactly 1 of <code>percentage</code> or <code>amount_money</code> should be set.</p>
         */
        @JsonSetter(value = "percentage", nulls = Nulls.SKIP)
        public Builder percentage(Optional<String> percentage) {
            this.percentage = percentage;
            return this;
        }

        public Builder percentage(String percentage) {
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        public Builder percentage(Nullable<String> percentage) {
            if (percentage.isNull()) {
                this.percentage = null;
            } else if (percentage.isEmpty()) {
                this.percentage = Optional.empty();
            } else {
                this.percentage = Optional.of(percentage.get());
            }
            return this;
        }

        /**
         * <p>The amount of a non-percentage-based service charge.</p>
         * <p>Exactly one of <code>percentage</code> or <code>amount_money</code> should be set.</p>
         */
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The amount of money applied to the order by the service charge,
         * including any inclusive tax amounts, as calculated by Square.</p>
         * <ul>
         * <li>For fixed-amount service charges, <code>applied_money</code> is equal to <code>amount_money</code>.</li>
         * <li>For percentage-based service charges, <code>applied_money</code> is the money
         * calculated using the percentage.</li>
         * </ul>
         */
        @JsonSetter(value = "applied_money", nulls = Nulls.SKIP)
        public Builder appliedMoney(Optional<Money> appliedMoney) {
            this.appliedMoney = appliedMoney;
            return this;
        }

        public Builder appliedMoney(Money appliedMoney) {
            this.appliedMoney = Optional.ofNullable(appliedMoney);
            return this;
        }

        /**
         * <p>The total amount of money to collect for the service charge.</p>
         * <p><strong>Note</strong>: If an inclusive tax is applied to the service charge,
         * <code>total_money</code> does not equal <code>applied_money</code> plus <code>total_tax_money</code>
         * because the inclusive tax amount is already included in both
         * <code>applied_money</code> and <code>total_tax_money</code>.</p>
         */
        @JsonSetter(value = "total_money", nulls = Nulls.SKIP)
        public Builder totalMoney(Optional<Money> totalMoney) {
            this.totalMoney = totalMoney;
            return this;
        }

        public Builder totalMoney(Money totalMoney) {
            this.totalMoney = Optional.ofNullable(totalMoney);
            return this;
        }

        /**
         * <p>The total amount of tax money to collect for the service charge.</p>
         */
        @JsonSetter(value = "total_tax_money", nulls = Nulls.SKIP)
        public Builder totalTaxMoney(Optional<Money> totalTaxMoney) {
            this.totalTaxMoney = totalTaxMoney;
            return this;
        }

        public Builder totalTaxMoney(Money totalTaxMoney) {
            this.totalTaxMoney = Optional.ofNullable(totalTaxMoney);
            return this;
        }

        /**
         * <p>The calculation phase at which to apply the service charge.
         * See <a href="#type-orderservicechargecalculationphase">OrderServiceChargeCalculationPhase</a> for possible values</p>
         */
        @JsonSetter(value = "calculation_phase", nulls = Nulls.SKIP)
        public Builder calculationPhase(Optional<OrderServiceChargeCalculationPhase> calculationPhase) {
            this.calculationPhase = calculationPhase;
            return this;
        }

        public Builder calculationPhase(OrderServiceChargeCalculationPhase calculationPhase) {
            this.calculationPhase = Optional.ofNullable(calculationPhase);
            return this;
        }

        /**
         * <p>Indicates whether the service charge can be taxed. If set to <code>true</code>,
         * order-level taxes automatically apply to the service charge. Note that
         * service charges calculated in the <code>TOTAL_PHASE</code> cannot be marked as taxable.</p>
         */
        @JsonSetter(value = "taxable", nulls = Nulls.SKIP)
        public Builder taxable(Optional<Boolean> taxable) {
            this.taxable = taxable;
            return this;
        }

        public Builder taxable(Boolean taxable) {
            this.taxable = Optional.ofNullable(taxable);
            return this;
        }

        public Builder taxable(Nullable<Boolean> taxable) {
            if (taxable.isNull()) {
                this.taxable = null;
            } else if (taxable.isEmpty()) {
                this.taxable = Optional.empty();
            } else {
                this.taxable = Optional.of(taxable.get());
            }
            return this;
        }

        /**
         * <p>The list of references to the taxes applied to this service charge. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderLineItemTax</code> that is being applied to this service charge. On reads, the amount applied
         * is populated.</p>
         * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every taxable service charge
         * for all <code>ORDER</code> scoped taxes that are added to the order. <code>OrderLineItemAppliedTax</code> records
         * for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax to apply to any taxable
         * service charge. Taxable service charges have the <code>taxable</code> field set to <code>true</code> and calculated
         * in the <code>SUBTOTAL_PHASE</code>.</p>
         * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
         */
        @JsonSetter(value = "applied_taxes", nulls = Nulls.SKIP)
        public Builder appliedTaxes(Optional<List<OrderLineItemAppliedTax>> appliedTaxes) {
            this.appliedTaxes = appliedTaxes;
            return this;
        }

        public Builder appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
            this.appliedTaxes = Optional.ofNullable(appliedTaxes);
            return this;
        }

        public Builder appliedTaxes(Nullable<List<OrderLineItemAppliedTax>> appliedTaxes) {
            if (appliedTaxes.isNull()) {
                this.appliedTaxes = null;
            } else if (appliedTaxes.isEmpty()) {
                this.appliedTaxes = Optional.empty();
            } else {
                this.appliedTaxes = Optional.of(appliedTaxes.get());
            }
            return this;
        }

        /**
         * <p>Application-defined data attached to this service charge. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Nullable<Map<String, Optional<String>>> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        /**
         * <p>The type of the service charge.
         * See <a href="#type-orderservicechargetype">OrderServiceChargeType</a> for possible values</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<OrderServiceChargeType> type) {
            this.type = type;
            return this;
        }

        public Builder type(OrderServiceChargeType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The treatment type of the service charge.
         * See <a href="#type-orderservicechargetreatmenttype">OrderServiceChargeTreatmentType</a> for possible values</p>
         */
        @JsonSetter(value = "treatment_type", nulls = Nulls.SKIP)
        public Builder treatmentType(Optional<OrderServiceChargeTreatmentType> treatmentType) {
            this.treatmentType = treatmentType;
            return this;
        }

        public Builder treatmentType(OrderServiceChargeTreatmentType treatmentType) {
            this.treatmentType = Optional.ofNullable(treatmentType);
            return this;
        }

        /**
         * <p>Indicates the level at which the apportioned service charge applies. For <code>ORDER</code>
         * scoped service charges, Square generates references in <code>applied_service_charges</code> on
         * all order line items that do not have them. For <code>LINE_ITEM</code> scoped service charges,
         * the service charge only applies to line items with a service charge reference in their
         * <code>applied_service_charges</code> field.</p>
         * <p>This field is immutable. To change the scope of an apportioned service charge, you must delete
         * the apportioned service charge and re-add it as a new apportioned service charge.
         * See <a href="#type-orderservicechargescope">OrderServiceChargeScope</a> for possible values</p>
         */
        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public Builder scope(Optional<OrderServiceChargeScope> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(OrderServiceChargeScope scope) {
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        public OrderServiceCharge build() {
            return new OrderServiceCharge(
                    uid,
                    name,
                    catalogObjectId,
                    catalogVersion,
                    percentage,
                    amountMoney,
                    appliedMoney,
                    totalMoney,
                    totalTaxMoney,
                    calculationPhase,
                    taxable,
                    appliedTaxes,
                    metadata,
                    type,
                    treatmentType,
                    scope,
                    additionalProperties);
        }
    }
}
