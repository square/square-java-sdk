/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RevokeTokenRequest.Builder.class)
public final class RevokeTokenRequest {
    private final Optional<String> clientId;

    private final Optional<String> accessToken;

    private final Optional<String> merchantId;

    private final Optional<Boolean> revokeOnlyAccessToken;

    private final Map<String, Object> additionalProperties;

    private RevokeTokenRequest(
            Optional<String> clientId,
            Optional<String> accessToken,
            Optional<String> merchantId,
            Optional<Boolean> revokeOnlyAccessToken,
            Map<String, Object> additionalProperties) {
        this.clientId = clientId;
        this.accessToken = accessToken;
        this.merchantId = merchantId;
        this.revokeOnlyAccessToken = revokeOnlyAccessToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-issued ID for your application, which is available on the <strong>OAuth</strong> page in the
     * <a href="https://developer.squareup.com/apps">Developer Dashboard</a>.
     */
    @JsonIgnore
    public Optional<String> getClientId() {
        if (clientId == null) {
            return Optional.empty();
        }
        return clientId;
    }

    /**
     * @return The access token of the merchant whose token you want to revoke.
     * Do not provide a value for <code>merchant_id</code> if you provide this parameter.
     */
    @JsonIgnore
    public Optional<String> getAccessToken() {
        if (accessToken == null) {
            return Optional.empty();
        }
        return accessToken;
    }

    /**
     * @return The ID of the merchant whose token you want to revoke.
     * Do not provide a value for <code>access_token</code> if you provide this parameter.
     */
    @JsonIgnore
    public Optional<String> getMerchantId() {
        if (merchantId == null) {
            return Optional.empty();
        }
        return merchantId;
    }

    /**
     * @return If <code>true</code>, terminate the given single access token, but do not
     * terminate the entire authorization.
     * Default: <code>false</code>
     */
    @JsonIgnore
    public Optional<Boolean> getRevokeOnlyAccessToken() {
        if (revokeOnlyAccessToken == null) {
            return Optional.empty();
        }
        return revokeOnlyAccessToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("client_id")
    private Optional<String> _getClientId() {
        return clientId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("access_token")
    private Optional<String> _getAccessToken() {
        return accessToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_id")
    private Optional<String> _getMerchantId() {
        return merchantId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("revoke_only_access_token")
    private Optional<Boolean> _getRevokeOnlyAccessToken() {
        return revokeOnlyAccessToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RevokeTokenRequest && equalTo((RevokeTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RevokeTokenRequest other) {
        return clientId.equals(other.clientId)
                && accessToken.equals(other.accessToken)
                && merchantId.equals(other.merchantId)
                && revokeOnlyAccessToken.equals(other.revokeOnlyAccessToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.clientId, this.accessToken, this.merchantId, this.revokeOnlyAccessToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> clientId = Optional.empty();

        private Optional<String> accessToken = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<Boolean> revokeOnlyAccessToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RevokeTokenRequest other) {
            clientId(other.getClientId());
            accessToken(other.getAccessToken());
            merchantId(other.getMerchantId());
            revokeOnlyAccessToken(other.getRevokeOnlyAccessToken());
            return this;
        }

        @JsonSetter(value = "client_id", nulls = Nulls.SKIP)
        public Builder clientId(Optional<String> clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        public Builder clientId(Nullable<String> clientId) {
            if (clientId.isNull()) {
                this.clientId = null;
            } else if (clientId.isEmpty()) {
                this.clientId = Optional.empty();
            } else {
                this.clientId = Optional.of(clientId.get());
            }
            return this;
        }

        @JsonSetter(value = "access_token", nulls = Nulls.SKIP)
        public Builder accessToken(Optional<String> accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        public Builder accessToken(String accessToken) {
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        public Builder accessToken(Nullable<String> accessToken) {
            if (accessToken.isNull()) {
                this.accessToken = null;
            } else if (accessToken.isEmpty()) {
                this.accessToken = Optional.empty();
            } else {
                this.accessToken = Optional.of(accessToken.get());
            }
            return this;
        }

        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Nullable<String> merchantId) {
            if (merchantId.isNull()) {
                this.merchantId = null;
            } else if (merchantId.isEmpty()) {
                this.merchantId = Optional.empty();
            } else {
                this.merchantId = Optional.of(merchantId.get());
            }
            return this;
        }

        @JsonSetter(value = "revoke_only_access_token", nulls = Nulls.SKIP)
        public Builder revokeOnlyAccessToken(Optional<Boolean> revokeOnlyAccessToken) {
            this.revokeOnlyAccessToken = revokeOnlyAccessToken;
            return this;
        }

        public Builder revokeOnlyAccessToken(Boolean revokeOnlyAccessToken) {
            this.revokeOnlyAccessToken = Optional.ofNullable(revokeOnlyAccessToken);
            return this;
        }

        public Builder revokeOnlyAccessToken(Nullable<Boolean> revokeOnlyAccessToken) {
            if (revokeOnlyAccessToken.isNull()) {
                this.revokeOnlyAccessToken = null;
            } else if (revokeOnlyAccessToken.isEmpty()) {
                this.revokeOnlyAccessToken = Optional.empty();
            } else {
                this.revokeOnlyAccessToken = Optional.of(revokeOnlyAccessToken.get());
            }
            return this;
        }

        public RevokeTokenRequest build() {
            return new RevokeTokenRequest(
                    clientId, accessToken, merchantId, revokeOnlyAccessToken, additionalProperties);
        }
    }
}
