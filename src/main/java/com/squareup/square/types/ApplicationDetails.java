/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationDetails.Builder.class)
public final class ApplicationDetails {
    private final Optional<ApplicationDetailsExternalSquareProduct> squareProduct;

    private final Optional<String> applicationId;

    private final Map<String, Object> additionalProperties;

    private ApplicationDetails(
            Optional<ApplicationDetailsExternalSquareProduct> squareProduct,
            Optional<String> applicationId,
            Map<String, Object> additionalProperties) {
        this.squareProduct = squareProduct;
        this.applicationId = applicationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square product, such as Square Point of Sale (POS),
     * Square Invoices, or Square Virtual Terminal.
     * See <a href="#type-externalsquareproduct">ExternalSquareProduct</a> for possible values
     */
    @JsonProperty("square_product")
    public Optional<ApplicationDetailsExternalSquareProduct> getSquareProduct() {
        return squareProduct;
    }

    /**
     * @return The Square ID assigned to the application used to take the payment.
     * Application developers can use this information to identify payments that
     * their application processed.
     * For example, if a developer uses a custom application to process payments,
     * this field contains the application ID from the Developer Dashboard.
     * If a seller uses a <a href="https://developer.squareup.com/docs/app-marketplace">Square App Marketplace</a>
     * application to process payments, the field contains the corresponding application ID.
     */
    @JsonIgnore
    public Optional<String> getApplicationId() {
        if (applicationId == null) {
            return Optional.empty();
        }
        return applicationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("application_id")
    private Optional<String> _getApplicationId() {
        return applicationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationDetails && equalTo((ApplicationDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationDetails other) {
        return squareProduct.equals(other.squareProduct) && applicationId.equals(other.applicationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.squareProduct, this.applicationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ApplicationDetailsExternalSquareProduct> squareProduct = Optional.empty();

        private Optional<String> applicationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationDetails other) {
            squareProduct(other.getSquareProduct());
            applicationId(other.getApplicationId());
            return this;
        }

        @JsonSetter(value = "square_product", nulls = Nulls.SKIP)
        public Builder squareProduct(Optional<ApplicationDetailsExternalSquareProduct> squareProduct) {
            this.squareProduct = squareProduct;
            return this;
        }

        public Builder squareProduct(ApplicationDetailsExternalSquareProduct squareProduct) {
            this.squareProduct = Optional.ofNullable(squareProduct);
            return this;
        }

        @JsonSetter(value = "application_id", nulls = Nulls.SKIP)
        public Builder applicationId(Optional<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        public Builder applicationId(Nullable<String> applicationId) {
            if (applicationId.isNull()) {
                this.applicationId = null;
            } else if (applicationId.isEmpty()) {
                this.applicationId = Optional.empty();
            } else {
                this.applicationId = Optional.of(applicationId.get());
            }
            return this;
        }

        public ApplicationDetails build() {
            return new ApplicationDetails(squareProduct, applicationId, additionalProperties);
        }
    }
}
