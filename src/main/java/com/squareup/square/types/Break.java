/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Break.Builder.class)
public final class Break {
    private final Optional<String> id;

    private final String startAt;

    private final Optional<String> endAt;

    private final String breakTypeId;

    private final String name;

    private final String expectedDuration;

    private final boolean isPaid;

    private final Map<String, Object> additionalProperties;

    private Break(
            Optional<String> id,
            String startAt,
            Optional<String> endAt,
            String breakTypeId,
            String name,
            String expectedDuration,
            boolean isPaid,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.startAt = startAt;
        this.endAt = endAt;
        this.breakTypeId = breakTypeId;
        this.name = name;
        this.expectedDuration = expectedDuration;
        this.isPaid = isPaid;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The UUID for this object.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
     * the minute is respected; seconds are truncated.
     */
    @JsonProperty("start_at")
    public String getStartAt() {
        return startAt;
    }

    /**
     * @return RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
     * the minute is respected; seconds are truncated.
     */
    @JsonIgnore
    public Optional<String> getEndAt() {
        if (endAt == null) {
            return Optional.empty();
        }
        return endAt;
    }

    /**
     * @return The <a href="entity:BreakType">BreakType</a> that this break was templated on.
     */
    @JsonProperty("break_type_id")
    public String getBreakTypeId() {
        return breakTypeId;
    }

    /**
     * @return A human-readable name.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
     * the break.
     * <p>Example for break expected duration of 15 minutes: PT15M</p>
     */
    @JsonProperty("expected_duration")
    public String getExpectedDuration() {
        return expectedDuration;
    }

    /**
     * @return Whether this break counts towards time worked for compensation
     * purposes.
     */
    @JsonProperty("is_paid")
    public boolean getIsPaid() {
        return isPaid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_at")
    private Optional<String> _getEndAt() {
        return endAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Break && equalTo((Break) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Break other) {
        return id.equals(other.id)
                && startAt.equals(other.startAt)
                && endAt.equals(other.endAt)
                && breakTypeId.equals(other.breakTypeId)
                && name.equals(other.name)
                && expectedDuration.equals(other.expectedDuration)
                && isPaid == other.isPaid;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.startAt, this.endAt, this.breakTypeId, this.name, this.expectedDuration, this.isPaid);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StartAtStage builder() {
        return new Builder();
    }

    public interface StartAtStage {
        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         */
        BreakTypeIdStage startAt(@NotNull String startAt);

        Builder from(Break other);
    }

    public interface BreakTypeIdStage {
        /**
         * <p>The <a href="entity:BreakType">BreakType</a> that this break was templated on.</p>
         */
        NameStage breakTypeId(@NotNull String breakTypeId);
    }

    public interface NameStage {
        /**
         * <p>A human-readable name.</p>
         */
        ExpectedDurationStage name(@NotNull String name);
    }

    public interface ExpectedDurationStage {
        /**
         * <p>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
         * the break.</p>
         * <p>Example for break expected duration of 15 minutes: PT15M</p>
         */
        IsPaidStage expectedDuration(@NotNull String expectedDuration);
    }

    public interface IsPaidStage {
        /**
         * <p>Whether this break counts towards time worked for compensation
         * purposes.</p>
         */
        _FinalStage isPaid(boolean isPaid);
    }

    public interface _FinalStage {
        Break build();

        /**
         * <p>The UUID for this object.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         */
        _FinalStage endAt(Optional<String> endAt);

        _FinalStage endAt(String endAt);

        _FinalStage endAt(Nullable<String> endAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StartAtStage, BreakTypeIdStage, NameStage, ExpectedDurationStage, IsPaidStage, _FinalStage {
        private String startAt;

        private String breakTypeId;

        private String name;

        private String expectedDuration;

        private boolean isPaid;

        private Optional<String> endAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Break other) {
            id(other.getId());
            startAt(other.getStartAt());
            endAt(other.getEndAt());
            breakTypeId(other.getBreakTypeId());
            name(other.getName());
            expectedDuration(other.getExpectedDuration());
            isPaid(other.getIsPaid());
            return this;
        }

        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("start_at")
        public BreakTypeIdStage startAt(@NotNull String startAt) {
            this.startAt = Objects.requireNonNull(startAt, "startAt must not be null");
            return this;
        }

        /**
         * <p>The <a href="entity:BreakType">BreakType</a> that this break was templated on.</p>
         * <p>The <a href="entity:BreakType">BreakType</a> that this break was templated on.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("break_type_id")
        public NameStage breakTypeId(@NotNull String breakTypeId) {
            this.breakTypeId = Objects.requireNonNull(breakTypeId, "breakTypeId must not be null");
            return this;
        }

        /**
         * <p>A human-readable name.</p>
         * <p>A human-readable name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public ExpectedDurationStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
         * the break.</p>
         * <p>Example for break expected duration of 15 minutes: PT15M</p>
         * <p>Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
         * the break.</p>
         * <p>Example for break expected duration of 15 minutes: PT15M</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expected_duration")
        public IsPaidStage expectedDuration(@NotNull String expectedDuration) {
            this.expectedDuration = Objects.requireNonNull(expectedDuration, "expectedDuration must not be null");
            return this;
        }

        /**
         * <p>Whether this break counts towards time worked for compensation
         * purposes.</p>
         * <p>Whether this break counts towards time worked for compensation
         * purposes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("is_paid")
        public _FinalStage isPaid(boolean isPaid) {
            this.isPaid = isPaid;
            return this;
        }

        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endAt(Nullable<String> endAt) {
            if (endAt.isNull()) {
                this.endAt = null;
            } else if (endAt.isEmpty()) {
                this.endAt = Optional.empty();
            } else {
                this.endAt = Optional.of(endAt.get());
            }
            return this;
        }

        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endAt(String endAt) {
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        /**
         * <p>RFC 3339; follows the same timezone information as the <a href="entity:Timecard">timecard</a>. Precision up to
         * the minute is respected; seconds are truncated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "end_at", nulls = Nulls.SKIP)
        public _FinalStage endAt(Optional<String> endAt) {
            this.endAt = endAt;
            return this;
        }

        /**
         * <p>The UUID for this object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The UUID for this object.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Break build() {
            return new Break(id, startAt, endAt, breakTypeId, name, expectedDuration, isPaid, additionalProperties);
        }
    }
}
