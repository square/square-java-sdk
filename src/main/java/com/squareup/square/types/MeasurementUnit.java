/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MeasurementUnit.Builder.class)
public final class MeasurementUnit {
    private final Optional<MeasurementUnitCustom> customUnit;

    private final Optional<MeasurementUnitArea> areaUnit;

    private final Optional<MeasurementUnitLength> lengthUnit;

    private final Optional<MeasurementUnitVolume> volumeUnit;

    private final Optional<MeasurementUnitWeight> weightUnit;

    private final Optional<String> genericUnit;

    private final Optional<MeasurementUnitTime> timeUnit;

    private final Optional<MeasurementUnitUnitType> type;

    private final Map<String, Object> additionalProperties;

    private MeasurementUnit(
            Optional<MeasurementUnitCustom> customUnit,
            Optional<MeasurementUnitArea> areaUnit,
            Optional<MeasurementUnitLength> lengthUnit,
            Optional<MeasurementUnitVolume> volumeUnit,
            Optional<MeasurementUnitWeight> weightUnit,
            Optional<String> genericUnit,
            Optional<MeasurementUnitTime> timeUnit,
            Optional<MeasurementUnitUnitType> type,
            Map<String, Object> additionalProperties) {
        this.customUnit = customUnit;
        this.areaUnit = areaUnit;
        this.lengthUnit = lengthUnit;
        this.volumeUnit = volumeUnit;
        this.weightUnit = weightUnit;
        this.genericUnit = genericUnit;
        this.timeUnit = timeUnit;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A custom unit of measurement defined by the seller using the Point of Sale
     * app or ad-hoc as an order line item.
     */
    @JsonProperty("custom_unit")
    public Optional<MeasurementUnitCustom> getCustomUnit() {
        return customUnit;
    }

    /**
     * @return Represents a standard area unit.
     * See <a href="#type-measurementunitarea">MeasurementUnitArea</a> for possible values
     */
    @JsonProperty("area_unit")
    public Optional<MeasurementUnitArea> getAreaUnit() {
        return areaUnit;
    }

    /**
     * @return Represents a standard length unit.
     * See <a href="#type-measurementunitlength">MeasurementUnitLength</a> for possible values
     */
    @JsonProperty("length_unit")
    public Optional<MeasurementUnitLength> getLengthUnit() {
        return lengthUnit;
    }

    /**
     * @return Represents a standard volume unit.
     * See <a href="#type-measurementunitvolume">MeasurementUnitVolume</a> for possible values
     */
    @JsonProperty("volume_unit")
    public Optional<MeasurementUnitVolume> getVolumeUnit() {
        return volumeUnit;
    }

    /**
     * @return Represents a standard unit of weight or mass.
     * See <a href="#type-measurementunitweight">MeasurementUnitWeight</a> for possible values
     */
    @JsonProperty("weight_unit")
    public Optional<MeasurementUnitWeight> getWeightUnit() {
        return weightUnit;
    }

    /**
     * @return Reserved for API integrations that lack the ability to specify a real measurement unit
     * See <a href="#type-measurementunitgeneric">MeasurementUnitGeneric</a> for possible values
     */
    @JsonProperty("generic_unit")
    public Optional<String> getGenericUnit() {
        return genericUnit;
    }

    /**
     * @return Represents a standard unit of time.
     * See <a href="#type-measurementunittime">MeasurementUnitTime</a> for possible values
     */
    @JsonProperty("time_unit")
    public Optional<MeasurementUnitTime> getTimeUnit() {
        return timeUnit;
    }

    /**
     * @return Represents the type of the measurement unit.
     * See <a href="#type-measurementunitunittype">MeasurementUnitUnitType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<MeasurementUnitUnitType> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MeasurementUnit && equalTo((MeasurementUnit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MeasurementUnit other) {
        return customUnit.equals(other.customUnit)
                && areaUnit.equals(other.areaUnit)
                && lengthUnit.equals(other.lengthUnit)
                && volumeUnit.equals(other.volumeUnit)
                && weightUnit.equals(other.weightUnit)
                && genericUnit.equals(other.genericUnit)
                && timeUnit.equals(other.timeUnit)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customUnit,
                this.areaUnit,
                this.lengthUnit,
                this.volumeUnit,
                this.weightUnit,
                this.genericUnit,
                this.timeUnit,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MeasurementUnitCustom> customUnit = Optional.empty();

        private Optional<MeasurementUnitArea> areaUnit = Optional.empty();

        private Optional<MeasurementUnitLength> lengthUnit = Optional.empty();

        private Optional<MeasurementUnitVolume> volumeUnit = Optional.empty();

        private Optional<MeasurementUnitWeight> weightUnit = Optional.empty();

        private Optional<String> genericUnit = Optional.empty();

        private Optional<MeasurementUnitTime> timeUnit = Optional.empty();

        private Optional<MeasurementUnitUnitType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MeasurementUnit other) {
            customUnit(other.getCustomUnit());
            areaUnit(other.getAreaUnit());
            lengthUnit(other.getLengthUnit());
            volumeUnit(other.getVolumeUnit());
            weightUnit(other.getWeightUnit());
            genericUnit(other.getGenericUnit());
            timeUnit(other.getTimeUnit());
            type(other.getType());
            return this;
        }

        @JsonSetter(value = "custom_unit", nulls = Nulls.SKIP)
        public Builder customUnit(Optional<MeasurementUnitCustom> customUnit) {
            this.customUnit = customUnit;
            return this;
        }

        public Builder customUnit(MeasurementUnitCustom customUnit) {
            this.customUnit = Optional.ofNullable(customUnit);
            return this;
        }

        @JsonSetter(value = "area_unit", nulls = Nulls.SKIP)
        public Builder areaUnit(Optional<MeasurementUnitArea> areaUnit) {
            this.areaUnit = areaUnit;
            return this;
        }

        public Builder areaUnit(MeasurementUnitArea areaUnit) {
            this.areaUnit = Optional.ofNullable(areaUnit);
            return this;
        }

        @JsonSetter(value = "length_unit", nulls = Nulls.SKIP)
        public Builder lengthUnit(Optional<MeasurementUnitLength> lengthUnit) {
            this.lengthUnit = lengthUnit;
            return this;
        }

        public Builder lengthUnit(MeasurementUnitLength lengthUnit) {
            this.lengthUnit = Optional.ofNullable(lengthUnit);
            return this;
        }

        @JsonSetter(value = "volume_unit", nulls = Nulls.SKIP)
        public Builder volumeUnit(Optional<MeasurementUnitVolume> volumeUnit) {
            this.volumeUnit = volumeUnit;
            return this;
        }

        public Builder volumeUnit(MeasurementUnitVolume volumeUnit) {
            this.volumeUnit = Optional.ofNullable(volumeUnit);
            return this;
        }

        @JsonSetter(value = "weight_unit", nulls = Nulls.SKIP)
        public Builder weightUnit(Optional<MeasurementUnitWeight> weightUnit) {
            this.weightUnit = weightUnit;
            return this;
        }

        public Builder weightUnit(MeasurementUnitWeight weightUnit) {
            this.weightUnit = Optional.ofNullable(weightUnit);
            return this;
        }

        @JsonSetter(value = "generic_unit", nulls = Nulls.SKIP)
        public Builder genericUnit(Optional<String> genericUnit) {
            this.genericUnit = genericUnit;
            return this;
        }

        public Builder genericUnit(String genericUnit) {
            this.genericUnit = Optional.ofNullable(genericUnit);
            return this;
        }

        @JsonSetter(value = "time_unit", nulls = Nulls.SKIP)
        public Builder timeUnit(Optional<MeasurementUnitTime> timeUnit) {
            this.timeUnit = timeUnit;
            return this;
        }

        public Builder timeUnit(MeasurementUnitTime timeUnit) {
            this.timeUnit = Optional.ofNullable(timeUnit);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<MeasurementUnitUnitType> type) {
            this.type = type;
            return this;
        }

        public Builder type(MeasurementUnitUnitType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public MeasurementUnit build() {
            return new MeasurementUnit(
                    customUnit,
                    areaUnit,
                    lengthUnit,
                    volumeUnit,
                    weightUnit,
                    genericUnit,
                    timeUnit,
                    type,
                    additionalProperties);
        }
    }
}
