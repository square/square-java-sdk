/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogTimePeriod.Builder.class)
public final class CatalogTimePeriod {
    private final Optional<String> event;

    private final Map<String, Object> additionalProperties;

    private CatalogTimePeriod(Optional<String> event, Map<String, Object> additionalProperties) {
        this.event = event;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An iCalendar (RFC 5545) <a href="https://tools.ietf.org/html/rfc5545#section-3.6.1">event</a>, which
     * specifies the name, timing, duration and recurrence of this time period.
     * <p>Example:</p>
     * <pre><code>DTSTART:20190707T180000
     * DURATION:P2H
     * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
     * </code></pre>
     * <p>Only <code>SUMMARY</code>, <code>DTSTART</code>, <code>DURATION</code> and <code>RRULE</code> fields are supported.
     * <code>DTSTART</code> must be in local (unzoned) time format. Note that while <code>BEGIN:VEVENT</code>
     * and <code>END:VEVENT</code> is not required in the request. The response will always
     * include them.</p>
     */
    @JsonIgnore
    public Optional<String> getEvent() {
        if (event == null) {
            return Optional.empty();
        }
        return event;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("event")
    private Optional<String> _getEvent() {
        return event;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogTimePeriod && equalTo((CatalogTimePeriod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogTimePeriod other) {
        return event.equals(other.event);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.event);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> event = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogTimePeriod other) {
            event(other.getEvent());
            return this;
        }

        /**
         * <p>An iCalendar (RFC 5545) <a href="https://tools.ietf.org/html/rfc5545#section-3.6.1">event</a>, which
         * specifies the name, timing, duration and recurrence of this time period.</p>
         * <p>Example:</p>
         * <pre><code>DTSTART:20190707T180000
         * DURATION:P2H
         * RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
         * </code></pre>
         * <p>Only <code>SUMMARY</code>, <code>DTSTART</code>, <code>DURATION</code> and <code>RRULE</code> fields are supported.
         * <code>DTSTART</code> must be in local (unzoned) time format. Note that while <code>BEGIN:VEVENT</code>
         * and <code>END:VEVENT</code> is not required in the request. The response will always
         * include them.</p>
         */
        @JsonSetter(value = "event", nulls = Nulls.SKIP)
        public Builder event(Optional<String> event) {
            this.event = event;
            return this;
        }

        public Builder event(String event) {
            this.event = Optional.ofNullable(event);
            return this;
        }

        public Builder event(Nullable<String> event) {
            if (event.isNull()) {
                this.event = null;
            } else if (event.isEmpty()) {
                this.event = Optional.empty();
            } else {
                this.event = Optional.of(event.get());
            }
            return this;
        }

        public CatalogTimePeriod build() {
            return new CatalogTimePeriod(event, additionalProperties);
        }
    }
}
