/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalRefundQueryFilter.Builder.class)
public final class TerminalRefundQueryFilter {
    private final Optional<String> deviceId;

    private final Optional<TimeRange> createdAt;

    private final Optional<String> status;

    private final Map<String, Object> additionalProperties;

    private TerminalRefundQueryFilter(
            Optional<String> deviceId,
            Optional<TimeRange> createdAt,
            Optional<String> status,
            Map<String, Object> additionalProperties) {
        this.deviceId = deviceId;
        this.createdAt = createdAt;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <code>TerminalRefund</code> objects associated with a specific device. If no device is specified, then all
     * <code>TerminalRefund</code> objects for the signed-in account are displayed.
     */
    @JsonIgnore
    public Optional<String> getDeviceId() {
        if (deviceId == null) {
            return Optional.empty();
        }
        return deviceId;
    }

    /**
     * @return The timestamp for the beginning of the reporting period, in RFC 3339 format. Inclusive.
     * Default value: The current time minus one day.
     * Note that <code>TerminalRefund</code>s are available for 30 days after creation.
     */
    @JsonProperty("created_at")
    public Optional<TimeRange> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Filtered results with the desired status of the <code>TerminalRefund</code>.
     * Options: <code>PENDING</code>, <code>IN_PROGRESS</code>, <code>CANCEL_REQUESTED</code>, <code>CANCELED</code>, or <code>COMPLETED</code>.
     */
    @JsonIgnore
    public Optional<String> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("device_id")
    private Optional<String> _getDeviceId() {
        return deviceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status")
    private Optional<String> _getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalRefundQueryFilter && equalTo((TerminalRefundQueryFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalRefundQueryFilter other) {
        return deviceId.equals(other.deviceId) && createdAt.equals(other.createdAt) && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.deviceId, this.createdAt, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> deviceId = Optional.empty();

        private Optional<TimeRange> createdAt = Optional.empty();

        private Optional<String> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TerminalRefundQueryFilter other) {
            deviceId(other.getDeviceId());
            createdAt(other.getCreatedAt());
            status(other.getStatus());
            return this;
        }

        @JsonSetter(value = "device_id", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        public Builder deviceId(Nullable<String> deviceId) {
            if (deviceId.isNull()) {
                this.deviceId = null;
            } else if (deviceId.isEmpty()) {
                this.deviceId = Optional.empty();
            } else {
                this.deviceId = Optional.of(deviceId.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<TimeRange> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(TimeRange createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<String> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        public TerminalRefundQueryFilter build() {
            return new TerminalRefundQueryFilter(deviceId, createdAt, status, additionalProperties);
        }
    }
}
