/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateInvoiceRequest.Builder.class)
public final class CreateInvoiceRequest {
    private final Invoice invoice;

    private final Optional<String> idempotencyKey;

    private final Map<String, Object> additionalProperties;

    private CreateInvoiceRequest(
            Invoice invoice, Optional<String> idempotencyKey, Map<String, Object> additionalProperties) {
        this.invoice = invoice;
        this.idempotencyKey = idempotencyKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The invoice to create.
     */
    @JsonProperty("invoice")
    public Invoice getInvoice() {
        return invoice;
    }

    /**
     * @return A unique string that identifies the <code>CreateInvoice</code> request. If you do not
     * provide <code>idempotency_key</code> (or provide an empty string as the value), the endpoint
     * treats each request as independent.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateInvoiceRequest && equalTo((CreateInvoiceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateInvoiceRequest other) {
        return invoice.equals(other.invoice) && idempotencyKey.equals(other.idempotencyKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.invoice, this.idempotencyKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceStage builder() {
        return new Builder();
    }

    public interface InvoiceStage {
        _FinalStage invoice(@NotNull Invoice invoice);

        Builder from(CreateInvoiceRequest other);
    }

    public interface _FinalStage {
        CreateInvoiceRequest build();

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InvoiceStage, _FinalStage {
        private Invoice invoice;

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateInvoiceRequest other) {
            invoice(other.getInvoice());
            idempotencyKey(other.getIdempotencyKey());
            return this;
        }

        /**
         * <p>The invoice to create.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("invoice")
        public _FinalStage invoice(@NotNull Invoice invoice) {
            this.invoice = Objects.requireNonNull(invoice, "invoice must not be null");
            return this;
        }

        /**
         * <p>A unique string that identifies the <code>CreateInvoice</code> request. If you do not
         * provide <code>idempotency_key</code> (or provide an empty string as the value), the endpoint
         * treats each request as independent.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public CreateInvoiceRequest build() {
            return new CreateInvoiceRequest(invoice, idempotencyKey, additionalProperties);
        }
    }
}
