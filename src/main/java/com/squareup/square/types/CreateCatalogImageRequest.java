/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCatalogImageRequest.Builder.class)
public final class CreateCatalogImageRequest {
    private final String idempotencyKey;

    private final Optional<String> objectId;

    private final CatalogObject image;

    private final Optional<Boolean> isPrimary;

    private final Map<String, Object> additionalProperties;

    private CreateCatalogImageRequest(
            String idempotencyKey,
            Optional<String> objectId,
            CatalogObject image,
            Optional<Boolean> isPrimary,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.objectId = objectId;
        this.image = image;
        this.isPrimary = isPrimary;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string that identifies this CreateCatalogImage request.
     * Keys can be any valid string but must be unique for every CreateCatalogImage request.
     * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return Unique ID of the <code>CatalogObject</code> to attach this <code>CatalogImage</code> object to. Leave this
     * field empty to create unattached images, for example if you are building an integration
     * where an image can be attached to catalog items at a later time.
     */
    @JsonProperty("object_id")
    public Optional<String> getObjectId() {
        return objectId;
    }

    /**
     * @return The new <code>CatalogObject</code> of the <code>IMAGE</code> type, namely, a <code>CatalogImage</code> object, to encapsulate the specified image file.
     */
    @JsonProperty("image")
    public CatalogObject getImage() {
        return image;
    }

    /**
     * @return If this is set to <code>true</code>, the image created will be the primary, or first image of the object referenced by <code>object_id</code>.
     * If the <code>CatalogObject</code> already has a primary <code>CatalogImage</code>, setting this field to <code>true</code> will replace the primary image.
     * If this is set to <code>false</code> and you use the Square API version 2021-12-15 or later, the image id will be appended to the list of <code>image_ids</code> on the object.
     * <p>With Square API version 2021-12-15 or later, the default value is <code>false</code>. Otherwise, the effective default value is <code>true</code>.</p>
     */
    @JsonProperty("is_primary")
    public Optional<Boolean> getIsPrimary() {
        return isPrimary;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCatalogImageRequest && equalTo((CreateCatalogImageRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCatalogImageRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && objectId.equals(other.objectId)
                && image.equals(other.image)
                && isPrimary.equals(other.isPrimary);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.objectId, this.image, this.isPrimary);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        ImageStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(CreateCatalogImageRequest other);
    }

    public interface ImageStage {
        _FinalStage image(@NotNull CatalogObject image);
    }

    public interface _FinalStage {
        CreateCatalogImageRequest build();

        _FinalStage objectId(Optional<String> objectId);

        _FinalStage objectId(String objectId);

        _FinalStage isPrimary(Optional<Boolean> isPrimary);

        _FinalStage isPrimary(Boolean isPrimary);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, ImageStage, _FinalStage {
        private String idempotencyKey;

        private CatalogObject image;

        private Optional<Boolean> isPrimary = Optional.empty();

        private Optional<String> objectId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateCatalogImageRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            objectId(other.getObjectId());
            image(other.getImage());
            isPrimary(other.getIsPrimary());
            return this;
        }

        /**
         * <p>A unique string that identifies this CreateCatalogImage request.
         * Keys can be any valid string but must be unique for every CreateCatalogImage request.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public ImageStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The new <code>CatalogObject</code> of the <code>IMAGE</code> type, namely, a <code>CatalogImage</code> object, to encapsulate the specified image file.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("image")
        public _FinalStage image(@NotNull CatalogObject image) {
            this.image = Objects.requireNonNull(image, "image must not be null");
            return this;
        }

        /**
         * <p>If this is set to <code>true</code>, the image created will be the primary, or first image of the object referenced by <code>object_id</code>.
         * If the <code>CatalogObject</code> already has a primary <code>CatalogImage</code>, setting this field to <code>true</code> will replace the primary image.
         * If this is set to <code>false</code> and you use the Square API version 2021-12-15 or later, the image id will be appended to the list of <code>image_ids</code> on the object.</p>
         * <p>With Square API version 2021-12-15 or later, the default value is <code>false</code>. Otherwise, the effective default value is <code>true</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isPrimary(Boolean isPrimary) {
            this.isPrimary = Optional.ofNullable(isPrimary);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "is_primary", nulls = Nulls.SKIP)
        public _FinalStage isPrimary(Optional<Boolean> isPrimary) {
            this.isPrimary = isPrimary;
            return this;
        }

        /**
         * <p>Unique ID of the <code>CatalogObject</code> to attach this <code>CatalogImage</code> object to. Leave this
         * field empty to create unattached images, for example if you are building an integration
         * where an image can be attached to catalog items at a later time.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage objectId(String objectId) {
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "object_id", nulls = Nulls.SKIP)
        public _FinalStage objectId(Optional<String> objectId) {
            this.objectId = objectId;
            return this;
        }

        @java.lang.Override
        public CreateCatalogImageRequest build() {
            return new CreateCatalogImageRequest(idempotencyKey, objectId, image, isPrimary, additionalProperties);
        }
    }
}
