/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PrePopulatedData.Builder.class)
public final class PrePopulatedData {
    private final Optional<String> buyerEmail;

    private final Optional<String> buyerPhoneNumber;

    private final Optional<Address> buyerAddress;

    private final Map<String, Object> additionalProperties;

    private PrePopulatedData(
            Optional<String> buyerEmail,
            Optional<String> buyerPhoneNumber,
            Optional<Address> buyerAddress,
            Map<String, Object> additionalProperties) {
        this.buyerEmail = buyerEmail;
        this.buyerPhoneNumber = buyerPhoneNumber;
        this.buyerAddress = buyerAddress;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The buyer email to prepopulate in the payment form.
     */
    @JsonIgnore
    public Optional<String> getBuyerEmail() {
        if (buyerEmail == null) {
            return Optional.empty();
        }
        return buyerEmail;
    }

    /**
     * @return The buyer phone number to prepopulate in the payment form.
     */
    @JsonIgnore
    public Optional<String> getBuyerPhoneNumber() {
        if (buyerPhoneNumber == null) {
            return Optional.empty();
        }
        return buyerPhoneNumber;
    }

    /**
     * @return The buyer address to prepopulate in the payment form.
     */
    @JsonProperty("buyer_address")
    public Optional<Address> getBuyerAddress() {
        return buyerAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("buyer_email")
    private Optional<String> _getBuyerEmail() {
        return buyerEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("buyer_phone_number")
    private Optional<String> _getBuyerPhoneNumber() {
        return buyerPhoneNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PrePopulatedData && equalTo((PrePopulatedData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PrePopulatedData other) {
        return buyerEmail.equals(other.buyerEmail)
                && buyerPhoneNumber.equals(other.buyerPhoneNumber)
                && buyerAddress.equals(other.buyerAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.buyerEmail, this.buyerPhoneNumber, this.buyerAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> buyerEmail = Optional.empty();

        private Optional<String> buyerPhoneNumber = Optional.empty();

        private Optional<Address> buyerAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PrePopulatedData other) {
            buyerEmail(other.getBuyerEmail());
            buyerPhoneNumber(other.getBuyerPhoneNumber());
            buyerAddress(other.getBuyerAddress());
            return this;
        }

        @JsonSetter(value = "buyer_email", nulls = Nulls.SKIP)
        public Builder buyerEmail(Optional<String> buyerEmail) {
            this.buyerEmail = buyerEmail;
            return this;
        }

        public Builder buyerEmail(String buyerEmail) {
            this.buyerEmail = Optional.ofNullable(buyerEmail);
            return this;
        }

        public Builder buyerEmail(Nullable<String> buyerEmail) {
            if (buyerEmail.isNull()) {
                this.buyerEmail = null;
            } else if (buyerEmail.isEmpty()) {
                this.buyerEmail = Optional.empty();
            } else {
                this.buyerEmail = Optional.of(buyerEmail.get());
            }
            return this;
        }

        @JsonSetter(value = "buyer_phone_number", nulls = Nulls.SKIP)
        public Builder buyerPhoneNumber(Optional<String> buyerPhoneNumber) {
            this.buyerPhoneNumber = buyerPhoneNumber;
            return this;
        }

        public Builder buyerPhoneNumber(String buyerPhoneNumber) {
            this.buyerPhoneNumber = Optional.ofNullable(buyerPhoneNumber);
            return this;
        }

        public Builder buyerPhoneNumber(Nullable<String> buyerPhoneNumber) {
            if (buyerPhoneNumber.isNull()) {
                this.buyerPhoneNumber = null;
            } else if (buyerPhoneNumber.isEmpty()) {
                this.buyerPhoneNumber = Optional.empty();
            } else {
                this.buyerPhoneNumber = Optional.of(buyerPhoneNumber.get());
            }
            return this;
        }

        @JsonSetter(value = "buyer_address", nulls = Nulls.SKIP)
        public Builder buyerAddress(Optional<Address> buyerAddress) {
            this.buyerAddress = buyerAddress;
            return this;
        }

        public Builder buyerAddress(Address buyerAddress) {
            this.buyerAddress = Optional.ofNullable(buyerAddress);
            return this;
        }

        public PrePopulatedData build() {
            return new PrePopulatedData(buyerEmail, buyerPhoneNumber, buyerAddress, additionalProperties);
        }
    }
}
