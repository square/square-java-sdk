/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutOptions.Builder.class)
public final class CheckoutOptions {
    private final Optional<Boolean> allowTipping;

    private final Optional<List<CustomField>> customFields;

    private final Optional<String> subscriptionPlanId;

    private final Optional<String> redirectUrl;

    private final Optional<String> merchantSupportEmail;

    private final Optional<Boolean> askForShippingAddress;

    private final Optional<AcceptedPaymentMethods> acceptedPaymentMethods;

    private final Optional<Money> appFeeMoney;

    private final Optional<ShippingFee> shippingFee;

    private final Optional<Boolean> enableCoupon;

    private final Optional<Boolean> enableLoyalty;

    private final Map<String, Object> additionalProperties;

    private CheckoutOptions(
            Optional<Boolean> allowTipping,
            Optional<List<CustomField>> customFields,
            Optional<String> subscriptionPlanId,
            Optional<String> redirectUrl,
            Optional<String> merchantSupportEmail,
            Optional<Boolean> askForShippingAddress,
            Optional<AcceptedPaymentMethods> acceptedPaymentMethods,
            Optional<Money> appFeeMoney,
            Optional<ShippingFee> shippingFee,
            Optional<Boolean> enableCoupon,
            Optional<Boolean> enableLoyalty,
            Map<String, Object> additionalProperties) {
        this.allowTipping = allowTipping;
        this.customFields = customFields;
        this.subscriptionPlanId = subscriptionPlanId;
        this.redirectUrl = redirectUrl;
        this.merchantSupportEmail = merchantSupportEmail;
        this.askForShippingAddress = askForShippingAddress;
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.appFeeMoney = appFeeMoney;
        this.shippingFee = shippingFee;
        this.enableCoupon = enableCoupon;
        this.enableLoyalty = enableLoyalty;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the payment allows tipping.
     */
    @JsonIgnore
    public Optional<Boolean> getAllowTipping() {
        if (allowTipping == null) {
            return Optional.empty();
        }
        return allowTipping;
    }

    /**
     * @return The custom fields requesting information from the buyer.
     */
    @JsonIgnore
    public Optional<List<CustomField>> getCustomFields() {
        if (customFields == null) {
            return Optional.empty();
        }
        return customFields;
    }

    /**
     * @return The ID of the subscription plan for the buyer to pay and subscribe.
     * For more information, see <a href="https://developer.squareup.com/docs/checkout-api/subscription-plan-checkout">Subscription Plan Checkout</a>.
     */
    @JsonIgnore
    public Optional<String> getSubscriptionPlanId() {
        if (subscriptionPlanId == null) {
            return Optional.empty();
        }
        return subscriptionPlanId;
    }

    /**
     * @return The confirmation page URL to redirect the buyer to after Square processes the payment.
     */
    @JsonIgnore
    public Optional<String> getRedirectUrl() {
        if (redirectUrl == null) {
            return Optional.empty();
        }
        return redirectUrl;
    }

    /**
     * @return The email address that buyers can use to contact the seller.
     */
    @JsonIgnore
    public Optional<String> getMerchantSupportEmail() {
        if (merchantSupportEmail == null) {
            return Optional.empty();
        }
        return merchantSupportEmail;
    }

    /**
     * @return Indicates whether to include the address fields in the payment form.
     */
    @JsonIgnore
    public Optional<Boolean> getAskForShippingAddress() {
        if (askForShippingAddress == null) {
            return Optional.empty();
        }
        return askForShippingAddress;
    }

    /**
     * @return The methods allowed for buyers during checkout.
     */
    @JsonProperty("accepted_payment_methods")
    public Optional<AcceptedPaymentMethods> getAcceptedPaymentMethods() {
        return acceptedPaymentMethods;
    }

    /**
     * @return The amount of money that the developer is taking as a fee for facilitating the payment on behalf of the seller.
     * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
     * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-data-types/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
     * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller. For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
     * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/collect-fees/additional-considerations#permissions">Permissions</a>.</p>
     */
    @JsonProperty("app_fee_money")
    public Optional<Money> getAppFeeMoney() {
        return appFeeMoney;
    }

    /**
     * @return The fee associated with shipping to be applied to the <code>Order</code> as a service charge.
     */
    @JsonProperty("shipping_fee")
    public Optional<ShippingFee> getShippingFee() {
        return shippingFee;
    }

    /**
     * @return Indicates whether to include the <code>Add coupon</code> section for the buyer to provide a Square marketing coupon in the payment form.
     */
    @JsonIgnore
    public Optional<Boolean> getEnableCoupon() {
        if (enableCoupon == null) {
            return Optional.empty();
        }
        return enableCoupon;
    }

    /**
     * @return Indicates whether to include the <code>REWARDS</code> section for the buyer to opt in to loyalty, redeem rewards in the payment form, or both.
     */
    @JsonIgnore
    public Optional<Boolean> getEnableLoyalty() {
        if (enableLoyalty == null) {
            return Optional.empty();
        }
        return enableLoyalty;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("allow_tipping")
    private Optional<Boolean> _getAllowTipping() {
        return allowTipping;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("custom_fields")
    private Optional<List<CustomField>> _getCustomFields() {
        return customFields;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("subscription_plan_id")
    private Optional<String> _getSubscriptionPlanId() {
        return subscriptionPlanId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("redirect_url")
    private Optional<String> _getRedirectUrl() {
        return redirectUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_support_email")
    private Optional<String> _getMerchantSupportEmail() {
        return merchantSupportEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ask_for_shipping_address")
    private Optional<Boolean> _getAskForShippingAddress() {
        return askForShippingAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enable_coupon")
    private Optional<Boolean> _getEnableCoupon() {
        return enableCoupon;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enable_loyalty")
    private Optional<Boolean> _getEnableLoyalty() {
        return enableLoyalty;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutOptions && equalTo((CheckoutOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutOptions other) {
        return allowTipping.equals(other.allowTipping)
                && customFields.equals(other.customFields)
                && subscriptionPlanId.equals(other.subscriptionPlanId)
                && redirectUrl.equals(other.redirectUrl)
                && merchantSupportEmail.equals(other.merchantSupportEmail)
                && askForShippingAddress.equals(other.askForShippingAddress)
                && acceptedPaymentMethods.equals(other.acceptedPaymentMethods)
                && appFeeMoney.equals(other.appFeeMoney)
                && shippingFee.equals(other.shippingFee)
                && enableCoupon.equals(other.enableCoupon)
                && enableLoyalty.equals(other.enableLoyalty);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.allowTipping,
                this.customFields,
                this.subscriptionPlanId,
                this.redirectUrl,
                this.merchantSupportEmail,
                this.askForShippingAddress,
                this.acceptedPaymentMethods,
                this.appFeeMoney,
                this.shippingFee,
                this.enableCoupon,
                this.enableLoyalty);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> allowTipping = Optional.empty();

        private Optional<List<CustomField>> customFields = Optional.empty();

        private Optional<String> subscriptionPlanId = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Optional<String> merchantSupportEmail = Optional.empty();

        private Optional<Boolean> askForShippingAddress = Optional.empty();

        private Optional<AcceptedPaymentMethods> acceptedPaymentMethods = Optional.empty();

        private Optional<Money> appFeeMoney = Optional.empty();

        private Optional<ShippingFee> shippingFee = Optional.empty();

        private Optional<Boolean> enableCoupon = Optional.empty();

        private Optional<Boolean> enableLoyalty = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutOptions other) {
            allowTipping(other.getAllowTipping());
            customFields(other.getCustomFields());
            subscriptionPlanId(other.getSubscriptionPlanId());
            redirectUrl(other.getRedirectUrl());
            merchantSupportEmail(other.getMerchantSupportEmail());
            askForShippingAddress(other.getAskForShippingAddress());
            acceptedPaymentMethods(other.getAcceptedPaymentMethods());
            appFeeMoney(other.getAppFeeMoney());
            shippingFee(other.getShippingFee());
            enableCoupon(other.getEnableCoupon());
            enableLoyalty(other.getEnableLoyalty());
            return this;
        }

        /**
         * <p>Indicates whether the payment allows tipping.</p>
         */
        @JsonSetter(value = "allow_tipping", nulls = Nulls.SKIP)
        public Builder allowTipping(Optional<Boolean> allowTipping) {
            this.allowTipping = allowTipping;
            return this;
        }

        public Builder allowTipping(Boolean allowTipping) {
            this.allowTipping = Optional.ofNullable(allowTipping);
            return this;
        }

        public Builder allowTipping(Nullable<Boolean> allowTipping) {
            if (allowTipping.isNull()) {
                this.allowTipping = null;
            } else if (allowTipping.isEmpty()) {
                this.allowTipping = Optional.empty();
            } else {
                this.allowTipping = Optional.of(allowTipping.get());
            }
            return this;
        }

        /**
         * <p>The custom fields requesting information from the buyer.</p>
         */
        @JsonSetter(value = "custom_fields", nulls = Nulls.SKIP)
        public Builder customFields(Optional<List<CustomField>> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder customFields(List<CustomField> customFields) {
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Nullable<List<CustomField>> customFields) {
            if (customFields.isNull()) {
                this.customFields = null;
            } else if (customFields.isEmpty()) {
                this.customFields = Optional.empty();
            } else {
                this.customFields = Optional.of(customFields.get());
            }
            return this;
        }

        /**
         * <p>The ID of the subscription plan for the buyer to pay and subscribe.
         * For more information, see <a href="https://developer.squareup.com/docs/checkout-api/subscription-plan-checkout">Subscription Plan Checkout</a>.</p>
         */
        @JsonSetter(value = "subscription_plan_id", nulls = Nulls.SKIP)
        public Builder subscriptionPlanId(Optional<String> subscriptionPlanId) {
            this.subscriptionPlanId = subscriptionPlanId;
            return this;
        }

        public Builder subscriptionPlanId(String subscriptionPlanId) {
            this.subscriptionPlanId = Optional.ofNullable(subscriptionPlanId);
            return this;
        }

        public Builder subscriptionPlanId(Nullable<String> subscriptionPlanId) {
            if (subscriptionPlanId.isNull()) {
                this.subscriptionPlanId = null;
            } else if (subscriptionPlanId.isEmpty()) {
                this.subscriptionPlanId = Optional.empty();
            } else {
                this.subscriptionPlanId = Optional.of(subscriptionPlanId.get());
            }
            return this;
        }

        /**
         * <p>The confirmation page URL to redirect the buyer to after Square processes the payment.</p>
         */
        @JsonSetter(value = "redirect_url", nulls = Nulls.SKIP)
        public Builder redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        public Builder redirectUrl(Nullable<String> redirectUrl) {
            if (redirectUrl.isNull()) {
                this.redirectUrl = null;
            } else if (redirectUrl.isEmpty()) {
                this.redirectUrl = Optional.empty();
            } else {
                this.redirectUrl = Optional.of(redirectUrl.get());
            }
            return this;
        }

        /**
         * <p>The email address that buyers can use to contact the seller.</p>
         */
        @JsonSetter(value = "merchant_support_email", nulls = Nulls.SKIP)
        public Builder merchantSupportEmail(Optional<String> merchantSupportEmail) {
            this.merchantSupportEmail = merchantSupportEmail;
            return this;
        }

        public Builder merchantSupportEmail(String merchantSupportEmail) {
            this.merchantSupportEmail = Optional.ofNullable(merchantSupportEmail);
            return this;
        }

        public Builder merchantSupportEmail(Nullable<String> merchantSupportEmail) {
            if (merchantSupportEmail.isNull()) {
                this.merchantSupportEmail = null;
            } else if (merchantSupportEmail.isEmpty()) {
                this.merchantSupportEmail = Optional.empty();
            } else {
                this.merchantSupportEmail = Optional.of(merchantSupportEmail.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether to include the address fields in the payment form.</p>
         */
        @JsonSetter(value = "ask_for_shipping_address", nulls = Nulls.SKIP)
        public Builder askForShippingAddress(Optional<Boolean> askForShippingAddress) {
            this.askForShippingAddress = askForShippingAddress;
            return this;
        }

        public Builder askForShippingAddress(Boolean askForShippingAddress) {
            this.askForShippingAddress = Optional.ofNullable(askForShippingAddress);
            return this;
        }

        public Builder askForShippingAddress(Nullable<Boolean> askForShippingAddress) {
            if (askForShippingAddress.isNull()) {
                this.askForShippingAddress = null;
            } else if (askForShippingAddress.isEmpty()) {
                this.askForShippingAddress = Optional.empty();
            } else {
                this.askForShippingAddress = Optional.of(askForShippingAddress.get());
            }
            return this;
        }

        /**
         * <p>The methods allowed for buyers during checkout.</p>
         */
        @JsonSetter(value = "accepted_payment_methods", nulls = Nulls.SKIP)
        public Builder acceptedPaymentMethods(Optional<AcceptedPaymentMethods> acceptedPaymentMethods) {
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            return this;
        }

        public Builder acceptedPaymentMethods(AcceptedPaymentMethods acceptedPaymentMethods) {
            this.acceptedPaymentMethods = Optional.ofNullable(acceptedPaymentMethods);
            return this;
        }

        /**
         * <p>The amount of money that the developer is taking as a fee for facilitating the payment on behalf of the seller.</p>
         * <p>The amount cannot be more than 90% of the total amount of the payment.</p>
         * <p>The amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-data-types/working-with-monetary-amounts">Working with Monetary Amounts</a>.</p>
         * <p>The fee currency code must match the currency associated with the seller that is accepting the payment. The application must be from a developer account in the same country and using the same currency code as the seller. For more information about the application fee scenario, see <a href="https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees">Take Payments and Collect Fees</a>.</p>
         * <p>To set this field, <code>PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS</code> OAuth permission is required. For more information, see <a href="https://developer.squareup.com/docs/payments-api/collect-fees/additional-considerations#permissions">Permissions</a>.</p>
         */
        @JsonSetter(value = "app_fee_money", nulls = Nulls.SKIP)
        public Builder appFeeMoney(Optional<Money> appFeeMoney) {
            this.appFeeMoney = appFeeMoney;
            return this;
        }

        public Builder appFeeMoney(Money appFeeMoney) {
            this.appFeeMoney = Optional.ofNullable(appFeeMoney);
            return this;
        }

        /**
         * <p>The fee associated with shipping to be applied to the <code>Order</code> as a service charge.</p>
         */
        @JsonSetter(value = "shipping_fee", nulls = Nulls.SKIP)
        public Builder shippingFee(Optional<ShippingFee> shippingFee) {
            this.shippingFee = shippingFee;
            return this;
        }

        public Builder shippingFee(ShippingFee shippingFee) {
            this.shippingFee = Optional.ofNullable(shippingFee);
            return this;
        }

        /**
         * <p>Indicates whether to include the <code>Add coupon</code> section for the buyer to provide a Square marketing coupon in the payment form.</p>
         */
        @JsonSetter(value = "enable_coupon", nulls = Nulls.SKIP)
        public Builder enableCoupon(Optional<Boolean> enableCoupon) {
            this.enableCoupon = enableCoupon;
            return this;
        }

        public Builder enableCoupon(Boolean enableCoupon) {
            this.enableCoupon = Optional.ofNullable(enableCoupon);
            return this;
        }

        public Builder enableCoupon(Nullable<Boolean> enableCoupon) {
            if (enableCoupon.isNull()) {
                this.enableCoupon = null;
            } else if (enableCoupon.isEmpty()) {
                this.enableCoupon = Optional.empty();
            } else {
                this.enableCoupon = Optional.of(enableCoupon.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether to include the <code>REWARDS</code> section for the buyer to opt in to loyalty, redeem rewards in the payment form, or both.</p>
         */
        @JsonSetter(value = "enable_loyalty", nulls = Nulls.SKIP)
        public Builder enableLoyalty(Optional<Boolean> enableLoyalty) {
            this.enableLoyalty = enableLoyalty;
            return this;
        }

        public Builder enableLoyalty(Boolean enableLoyalty) {
            this.enableLoyalty = Optional.ofNullable(enableLoyalty);
            return this;
        }

        public Builder enableLoyalty(Nullable<Boolean> enableLoyalty) {
            if (enableLoyalty.isNull()) {
                this.enableLoyalty = null;
            } else if (enableLoyalty.isEmpty()) {
                this.enableLoyalty = Optional.empty();
            } else {
                this.enableLoyalty = Optional.of(enableLoyalty.get());
            }
            return this;
        }

        public CheckoutOptions build() {
            return new CheckoutOptions(
                    allowTipping,
                    customFields,
                    subscriptionPlanId,
                    redirectUrl,
                    merchantSupportEmail,
                    askForShippingAddress,
                    acceptedPaymentMethods,
                    appFeeMoney,
                    shippingFee,
                    enableCoupon,
                    enableLoyalty,
                    additionalProperties);
        }
    }
}
