/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Invoice.Builder.class)
public final class Invoice {
    private final Optional<String> id;

    private final Optional<Integer> version;

    private final Optional<String> locationId;

    private final Optional<String> orderId;

    private final Optional<InvoiceRecipient> primaryRecipient;

    private final Optional<List<InvoicePaymentRequest>> paymentRequests;

    private final Optional<InvoiceDeliveryMethod> deliveryMethod;

    private final Optional<String> invoiceNumber;

    private final Optional<String> title;

    private final Optional<String> description;

    private final Optional<String> scheduledAt;

    private final Optional<String> publicUrl;

    private final Optional<Money> nextPaymentAmountMoney;

    private final Optional<InvoiceStatus> status;

    private final Optional<String> timezone;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<InvoiceAcceptedPaymentMethods> acceptedPaymentMethods;

    private final Optional<List<InvoiceCustomField>> customFields;

    private final Optional<String> subscriptionId;

    private final Optional<String> saleOrServiceDate;

    private final Optional<String> paymentConditions;

    private final Optional<Boolean> storePaymentMethodEnabled;

    private final Optional<List<InvoiceAttachment>> attachments;

    private final Map<String, Object> additionalProperties;

    private Invoice(
            Optional<String> id,
            Optional<Integer> version,
            Optional<String> locationId,
            Optional<String> orderId,
            Optional<InvoiceRecipient> primaryRecipient,
            Optional<List<InvoicePaymentRequest>> paymentRequests,
            Optional<InvoiceDeliveryMethod> deliveryMethod,
            Optional<String> invoiceNumber,
            Optional<String> title,
            Optional<String> description,
            Optional<String> scheduledAt,
            Optional<String> publicUrl,
            Optional<Money> nextPaymentAmountMoney,
            Optional<InvoiceStatus> status,
            Optional<String> timezone,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<InvoiceAcceptedPaymentMethods> acceptedPaymentMethods,
            Optional<List<InvoiceCustomField>> customFields,
            Optional<String> subscriptionId,
            Optional<String> saleOrServiceDate,
            Optional<String> paymentConditions,
            Optional<Boolean> storePaymentMethodEnabled,
            Optional<List<InvoiceAttachment>> attachments,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.version = version;
        this.locationId = locationId;
        this.orderId = orderId;
        this.primaryRecipient = primaryRecipient;
        this.paymentRequests = paymentRequests;
        this.deliveryMethod = deliveryMethod;
        this.invoiceNumber = invoiceNumber;
        this.title = title;
        this.description = description;
        this.scheduledAt = scheduledAt;
        this.publicUrl = publicUrl;
        this.nextPaymentAmountMoney = nextPaymentAmountMoney;
        this.status = status;
        this.timezone = timezone;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.customFields = customFields;
        this.subscriptionId = subscriptionId;
        this.saleOrServiceDate = saleOrServiceDate;
        this.paymentConditions = paymentConditions;
        this.storePaymentMethodEnabled = storePaymentMethodEnabled;
        this.attachments = attachments;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the invoice.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The Square-assigned version number, which is incremented each time an update is committed to the invoice.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The ID of the location that this invoice is associated with.
     * <p>If specified in a <code>CreateInvoice</code> request, the value must match the <code>location_id</code> of the associated order.</p>
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The ID of the <a href="entity:Order">order</a> for which the invoice is created.
     * This field is required when creating an invoice, and the order must be in the <code>OPEN</code> state.
     * <p>To view the line items and other information for the associated order, call the
     * <a href="api-endpoint:Orders-RetrieveOrder">RetrieveOrder</a> endpoint using the order ID.</p>
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return The customer who receives the invoice. This customer data is displayed on the invoice and used by Square to deliver the invoice.
     * <p>This field is required to publish an invoice, and it must specify the <code>customer_id</code>.</p>
     */
    @JsonProperty("primary_recipient")
    public Optional<InvoiceRecipient> getPrimaryRecipient() {
        return primaryRecipient;
    }

    /**
     * @return The payment schedule for the invoice, represented by one or more payment requests that
     * define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
     * <ul>
     * <li>One balance</li>
     * <li>One deposit with one balance</li>
     * <li>2–12 installments</li>
     * <li>One deposit with 2–12 installments</li>
     * </ul>
     * <p>This field is required when creating an invoice. It must contain at least one payment request.
     * All payment requests for the invoice must equal the total order amount. For more information, see
     * <a href="https://developer.squareup.com/docs/invoices-api/create-publish-invoices#payment-requests">Configuring payment requests</a>.</p>
     * <p>Adding <code>INSTALLMENT</code> payment requests to an invoice requires an
     * <a href="https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription">Invoices Plus subscription</a>.</p>
     */
    @JsonIgnore
    public Optional<List<InvoicePaymentRequest>> getPaymentRequests() {
        if (paymentRequests == null) {
            return Optional.empty();
        }
        return paymentRequests;
    }

    /**
     * @return The delivery method that Square uses to send the invoice, reminders, and receipts to
     * the customer. After the invoice is published, Square processes the invoice based on the delivery
     * method and payment request settings, either immediately or on the <code>scheduled_at</code> date, if specified.
     * For example, Square might send the invoice or receipt for an automatic payment. For invoices with
     * automatic payments, this field must be set to <code>EMAIL</code>.
     * <p>One of the following is required when creating an invoice:</p>
     * <ul>
     * <li>(Recommended) This <code>delivery_method</code> field. To configure an automatic payment, the
     * <code>automatic_payment_source</code> field of the payment request is also required.</li>
     * <li>The deprecated <code>request_method</code> field of the payment request. Note that <code>invoice</code>
     * objects returned in responses do not include <code>request_method</code>.
     * See <a href="#type-invoicedeliverymethod">InvoiceDeliveryMethod</a> for possible values</li>
     * </ul>
     */
    @JsonProperty("delivery_method")
    public Optional<InvoiceDeliveryMethod> getDeliveryMethod() {
        return deliveryMethod;
    }

    /**
     * @return A user-friendly invoice number that is displayed on the invoice. The value is unique within a location.
     * If not provided when creating an invoice, Square assigns a value.
     * It increments from 1 and is padded with zeros making it 7 characters long
     * (for example, 0000001 and 0000002).
     */
    @JsonIgnore
    public Optional<String> getInvoiceNumber() {
        if (invoiceNumber == null) {
            return Optional.empty();
        }
        return invoiceNumber;
    }

    /**
     * @return The title of the invoice, which is displayed on the invoice.
     */
    @JsonIgnore
    public Optional<String> getTitle() {
        if (title == null) {
            return Optional.empty();
        }
        return title;
    }

    /**
     * @return The description of the invoice, which is displayed on the invoice.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
     * After the invoice is published, Square processes the invoice on the specified date,
     * according to the delivery method and payment request settings.
     * <p>If the field is not set, Square processes the invoice immediately after it is published.</p>
     */
    @JsonIgnore
    public Optional<String> getScheduledAt() {
        if (scheduledAt == null) {
            return Optional.empty();
        }
        return scheduledAt;
    }

    /**
     * @return The URL of the Square-hosted invoice page.
     * After you publish the invoice using the <code>PublishInvoice</code> endpoint, Square hosts the invoice
     * page and returns the page URL in the response.
     */
    @JsonProperty("public_url")
    public Optional<String> getPublicUrl() {
        return publicUrl;
    }

    /**
     * @return The current amount due for the invoice. In addition to the
     * amount due on the next payment request, this includes any overdue payment amounts.
     */
    @JsonProperty("next_payment_amount_money")
    public Optional<Money> getNextPaymentAmountMoney() {
        return nextPaymentAmountMoney;
    }

    /**
     * @return The status of the invoice.
     * See <a href="#type-invoicestatus">InvoiceStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<InvoiceStatus> getStatus() {
        return status;
    }

    /**
     * @return The time zone used to interpret calendar dates on the invoice, such as <code>due_date</code>.
     * When an invoice is created, this field is set to the <code>timezone</code> specified for the seller
     * location. The value cannot be changed.
     * <p>For example, a payment <code>due_date</code> of 2021-03-09 with a <code>timezone</code> of America/Los_Angeles
     * becomes overdue at midnight on March 9 in America/Los_Angeles (which equals a UTC timestamp
     * of 2021-03-10T08:00:00Z).</p>
     */
    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    /**
     * @return The timestamp when the invoice was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the invoice was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The payment methods that customers can use to pay the invoice on the Square-hosted
     * invoice page. This setting is independent of any automatic payment requests for the invoice.
     * <p>This field is required when creating an invoice and must set at least one payment method to <code>true</code>.</p>
     */
    @JsonProperty("accepted_payment_methods")
    public Optional<InvoiceAcceptedPaymentMethods> getAcceptedPaymentMethods() {
        return acceptedPaymentMethods;
    }

    /**
     * @return Additional seller-defined fields that are displayed on the invoice. For more information, see
     * <a href="https://developer.squareup.com/docs/invoices-api/overview#custom-fields">Custom fields</a>.
     * <p>Adding custom fields to an invoice requires an
     * <a href="https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription">Invoices Plus subscription</a>.</p>
     * <p>Max: 2 custom fields</p>
     */
    @JsonIgnore
    public Optional<List<InvoiceCustomField>> getCustomFields() {
        if (customFields == null) {
            return Optional.empty();
        }
        return customFields;
    }

    /**
     * @return The ID of the <a href="entity:Subscription">subscription</a> associated with the invoice.
     * This field is present only on subscription billing invoices.
     */
    @JsonProperty("subscription_id")
    public Optional<String> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return The date of the sale or the date that the service is rendered, in <code>YYYY-MM-DD</code> format.
     * This field can be used to specify a past or future date which is displayed on the invoice.
     */
    @JsonIgnore
    public Optional<String> getSaleOrServiceDate() {
        if (saleOrServiceDate == null) {
            return Optional.empty();
        }
        return saleOrServiceDate;
    }

    /**
     * @return <strong>France only.</strong> The payment terms and conditions that are displayed on the invoice. For more information,
     * see <a href="https://developer.squareup.com/docs/invoices-api/overview#payment-conditions">Payment conditions</a>.
     * <p>For countries other than France, Square returns an <code>INVALID_REQUEST_ERROR</code> with a <code>BAD_REQUEST</code> code and
     * &quot;Payment conditions are not supported for this location's country&quot; detail if this field is included in <code>CreateInvoice</code> or <code>UpdateInvoice</code> requests.</p>
     */
    @JsonIgnore
    public Optional<String> getPaymentConditions() {
        if (paymentConditions == null) {
            return Optional.empty();
        }
        return paymentConditions;
    }

    /**
     * @return Indicates whether to allow a customer to save a credit or debit card as a card on file or a bank transfer as a
     * bank account on file. If <code>true</code>, Square displays a <strong>Save my card on file</strong> or <strong>Save my bank on file</strong> checkbox on the
     * invoice payment page. Stored payment information can be used for future automatic payments. The default value is <code>false</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getStorePaymentMethodEnabled() {
        if (storePaymentMethodEnabled == null) {
            return Optional.empty();
        }
        return storePaymentMethodEnabled;
    }

    /**
     * @return Metadata about the attachments on the invoice. Invoice attachments are managed using the
     * <a href="api-endpoint:Invoices-CreateInvoiceAttachment">CreateInvoiceAttachment</a> and <a href="api-endpoint:Invoices-DeleteInvoiceAttachment">DeleteInvoiceAttachment</a> endpoints.
     */
    @JsonProperty("attachments")
    public Optional<List<InvoiceAttachment>> getAttachments() {
        return attachments;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_requests")
    private Optional<List<InvoicePaymentRequest>> _getPaymentRequests() {
        return paymentRequests;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("invoice_number")
    private Optional<String> _getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("title")
    private Optional<String> _getTitle() {
        return title;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("scheduled_at")
    private Optional<String> _getScheduledAt() {
        return scheduledAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("custom_fields")
    private Optional<List<InvoiceCustomField>> _getCustomFields() {
        return customFields;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sale_or_service_date")
    private Optional<String> _getSaleOrServiceDate() {
        return saleOrServiceDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_conditions")
    private Optional<String> _getPaymentConditions() {
        return paymentConditions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("store_payment_method_enabled")
    private Optional<Boolean> _getStorePaymentMethodEnabled() {
        return storePaymentMethodEnabled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Invoice && equalTo((Invoice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Invoice other) {
        return id.equals(other.id)
                && version.equals(other.version)
                && locationId.equals(other.locationId)
                && orderId.equals(other.orderId)
                && primaryRecipient.equals(other.primaryRecipient)
                && paymentRequests.equals(other.paymentRequests)
                && deliveryMethod.equals(other.deliveryMethod)
                && invoiceNumber.equals(other.invoiceNumber)
                && title.equals(other.title)
                && description.equals(other.description)
                && scheduledAt.equals(other.scheduledAt)
                && publicUrl.equals(other.publicUrl)
                && nextPaymentAmountMoney.equals(other.nextPaymentAmountMoney)
                && status.equals(other.status)
                && timezone.equals(other.timezone)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && acceptedPaymentMethods.equals(other.acceptedPaymentMethods)
                && customFields.equals(other.customFields)
                && subscriptionId.equals(other.subscriptionId)
                && saleOrServiceDate.equals(other.saleOrServiceDate)
                && paymentConditions.equals(other.paymentConditions)
                && storePaymentMethodEnabled.equals(other.storePaymentMethodEnabled)
                && attachments.equals(other.attachments);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.version,
                this.locationId,
                this.orderId,
                this.primaryRecipient,
                this.paymentRequests,
                this.deliveryMethod,
                this.invoiceNumber,
                this.title,
                this.description,
                this.scheduledAt,
                this.publicUrl,
                this.nextPaymentAmountMoney,
                this.status,
                this.timezone,
                this.createdAt,
                this.updatedAt,
                this.acceptedPaymentMethods,
                this.customFields,
                this.subscriptionId,
                this.saleOrServiceDate,
                this.paymentConditions,
                this.storePaymentMethodEnabled,
                this.attachments);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<InvoiceRecipient> primaryRecipient = Optional.empty();

        private Optional<List<InvoicePaymentRequest>> paymentRequests = Optional.empty();

        private Optional<InvoiceDeliveryMethod> deliveryMethod = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> scheduledAt = Optional.empty();

        private Optional<String> publicUrl = Optional.empty();

        private Optional<Money> nextPaymentAmountMoney = Optional.empty();

        private Optional<InvoiceStatus> status = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<InvoiceAcceptedPaymentMethods> acceptedPaymentMethods = Optional.empty();

        private Optional<List<InvoiceCustomField>> customFields = Optional.empty();

        private Optional<String> subscriptionId = Optional.empty();

        private Optional<String> saleOrServiceDate = Optional.empty();

        private Optional<String> paymentConditions = Optional.empty();

        private Optional<Boolean> storePaymentMethodEnabled = Optional.empty();

        private Optional<List<InvoiceAttachment>> attachments = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Invoice other) {
            id(other.getId());
            version(other.getVersion());
            locationId(other.getLocationId());
            orderId(other.getOrderId());
            primaryRecipient(other.getPrimaryRecipient());
            paymentRequests(other.getPaymentRequests());
            deliveryMethod(other.getDeliveryMethod());
            invoiceNumber(other.getInvoiceNumber());
            title(other.getTitle());
            description(other.getDescription());
            scheduledAt(other.getScheduledAt());
            publicUrl(other.getPublicUrl());
            nextPaymentAmountMoney(other.getNextPaymentAmountMoney());
            status(other.getStatus());
            timezone(other.getTimezone());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            acceptedPaymentMethods(other.getAcceptedPaymentMethods());
            customFields(other.getCustomFields());
            subscriptionId(other.getSubscriptionId());
            saleOrServiceDate(other.getSaleOrServiceDate());
            paymentConditions(other.getPaymentConditions());
            storePaymentMethodEnabled(other.getStorePaymentMethodEnabled());
            attachments(other.getAttachments());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        @JsonSetter(value = "primary_recipient", nulls = Nulls.SKIP)
        public Builder primaryRecipient(Optional<InvoiceRecipient> primaryRecipient) {
            this.primaryRecipient = primaryRecipient;
            return this;
        }

        public Builder primaryRecipient(InvoiceRecipient primaryRecipient) {
            this.primaryRecipient = Optional.ofNullable(primaryRecipient);
            return this;
        }

        @JsonSetter(value = "payment_requests", nulls = Nulls.SKIP)
        public Builder paymentRequests(Optional<List<InvoicePaymentRequest>> paymentRequests) {
            this.paymentRequests = paymentRequests;
            return this;
        }

        public Builder paymentRequests(List<InvoicePaymentRequest> paymentRequests) {
            this.paymentRequests = Optional.ofNullable(paymentRequests);
            return this;
        }

        public Builder paymentRequests(Nullable<List<InvoicePaymentRequest>> paymentRequests) {
            if (paymentRequests.isNull()) {
                this.paymentRequests = null;
            } else if (paymentRequests.isEmpty()) {
                this.paymentRequests = Optional.empty();
            } else {
                this.paymentRequests = Optional.of(paymentRequests.get());
            }
            return this;
        }

        @JsonSetter(value = "delivery_method", nulls = Nulls.SKIP)
        public Builder deliveryMethod(Optional<InvoiceDeliveryMethod> deliveryMethod) {
            this.deliveryMethod = deliveryMethod;
            return this;
        }

        public Builder deliveryMethod(InvoiceDeliveryMethod deliveryMethod) {
            this.deliveryMethod = Optional.ofNullable(deliveryMethod);
            return this;
        }

        @JsonSetter(value = "invoice_number", nulls = Nulls.SKIP)
        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        public Builder invoiceNumber(Nullable<String> invoiceNumber) {
            if (invoiceNumber.isNull()) {
                this.invoiceNumber = null;
            } else if (invoiceNumber.isEmpty()) {
                this.invoiceNumber = Optional.empty();
            } else {
                this.invoiceNumber = Optional.of(invoiceNumber.get());
            }
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Nullable<String> title) {
            if (title.isNull()) {
                this.title = null;
            } else if (title.isEmpty()) {
                this.title = Optional.empty();
            } else {
                this.title = Optional.of(title.get());
            }
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        @JsonSetter(value = "scheduled_at", nulls = Nulls.SKIP)
        public Builder scheduledAt(Optional<String> scheduledAt) {
            this.scheduledAt = scheduledAt;
            return this;
        }

        public Builder scheduledAt(String scheduledAt) {
            this.scheduledAt = Optional.ofNullable(scheduledAt);
            return this;
        }

        public Builder scheduledAt(Nullable<String> scheduledAt) {
            if (scheduledAt.isNull()) {
                this.scheduledAt = null;
            } else if (scheduledAt.isEmpty()) {
                this.scheduledAt = Optional.empty();
            } else {
                this.scheduledAt = Optional.of(scheduledAt.get());
            }
            return this;
        }

        @JsonSetter(value = "public_url", nulls = Nulls.SKIP)
        public Builder publicUrl(Optional<String> publicUrl) {
            this.publicUrl = publicUrl;
            return this;
        }

        public Builder publicUrl(String publicUrl) {
            this.publicUrl = Optional.ofNullable(publicUrl);
            return this;
        }

        @JsonSetter(value = "next_payment_amount_money", nulls = Nulls.SKIP)
        public Builder nextPaymentAmountMoney(Optional<Money> nextPaymentAmountMoney) {
            this.nextPaymentAmountMoney = nextPaymentAmountMoney;
            return this;
        }

        public Builder nextPaymentAmountMoney(Money nextPaymentAmountMoney) {
            this.nextPaymentAmountMoney = Optional.ofNullable(nextPaymentAmountMoney);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<InvoiceStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(InvoiceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "accepted_payment_methods", nulls = Nulls.SKIP)
        public Builder acceptedPaymentMethods(Optional<InvoiceAcceptedPaymentMethods> acceptedPaymentMethods) {
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            return this;
        }

        public Builder acceptedPaymentMethods(InvoiceAcceptedPaymentMethods acceptedPaymentMethods) {
            this.acceptedPaymentMethods = Optional.ofNullable(acceptedPaymentMethods);
            return this;
        }

        @JsonSetter(value = "custom_fields", nulls = Nulls.SKIP)
        public Builder customFields(Optional<List<InvoiceCustomField>> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder customFields(List<InvoiceCustomField> customFields) {
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        public Builder customFields(Nullable<List<InvoiceCustomField>> customFields) {
            if (customFields.isNull()) {
                this.customFields = null;
            } else if (customFields.isEmpty()) {
                this.customFields = Optional.empty();
            } else {
                this.customFields = Optional.of(customFields.get());
            }
            return this;
        }

        @JsonSetter(value = "subscription_id", nulls = Nulls.SKIP)
        public Builder subscriptionId(Optional<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        @JsonSetter(value = "sale_or_service_date", nulls = Nulls.SKIP)
        public Builder saleOrServiceDate(Optional<String> saleOrServiceDate) {
            this.saleOrServiceDate = saleOrServiceDate;
            return this;
        }

        public Builder saleOrServiceDate(String saleOrServiceDate) {
            this.saleOrServiceDate = Optional.ofNullable(saleOrServiceDate);
            return this;
        }

        public Builder saleOrServiceDate(Nullable<String> saleOrServiceDate) {
            if (saleOrServiceDate.isNull()) {
                this.saleOrServiceDate = null;
            } else if (saleOrServiceDate.isEmpty()) {
                this.saleOrServiceDate = Optional.empty();
            } else {
                this.saleOrServiceDate = Optional.of(saleOrServiceDate.get());
            }
            return this;
        }

        @JsonSetter(value = "payment_conditions", nulls = Nulls.SKIP)
        public Builder paymentConditions(Optional<String> paymentConditions) {
            this.paymentConditions = paymentConditions;
            return this;
        }

        public Builder paymentConditions(String paymentConditions) {
            this.paymentConditions = Optional.ofNullable(paymentConditions);
            return this;
        }

        public Builder paymentConditions(Nullable<String> paymentConditions) {
            if (paymentConditions.isNull()) {
                this.paymentConditions = null;
            } else if (paymentConditions.isEmpty()) {
                this.paymentConditions = Optional.empty();
            } else {
                this.paymentConditions = Optional.of(paymentConditions.get());
            }
            return this;
        }

        @JsonSetter(value = "store_payment_method_enabled", nulls = Nulls.SKIP)
        public Builder storePaymentMethodEnabled(Optional<Boolean> storePaymentMethodEnabled) {
            this.storePaymentMethodEnabled = storePaymentMethodEnabled;
            return this;
        }

        public Builder storePaymentMethodEnabled(Boolean storePaymentMethodEnabled) {
            this.storePaymentMethodEnabled = Optional.ofNullable(storePaymentMethodEnabled);
            return this;
        }

        public Builder storePaymentMethodEnabled(Nullable<Boolean> storePaymentMethodEnabled) {
            if (storePaymentMethodEnabled.isNull()) {
                this.storePaymentMethodEnabled = null;
            } else if (storePaymentMethodEnabled.isEmpty()) {
                this.storePaymentMethodEnabled = Optional.empty();
            } else {
                this.storePaymentMethodEnabled = Optional.of(storePaymentMethodEnabled.get());
            }
            return this;
        }

        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<InvoiceAttachment>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<InvoiceAttachment> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        public Invoice build() {
            return new Invoice(
                    id,
                    version,
                    locationId,
                    orderId,
                    primaryRecipient,
                    paymentRequests,
                    deliveryMethod,
                    invoiceNumber,
                    title,
                    description,
                    scheduledAt,
                    publicUrl,
                    nextPaymentAmountMoney,
                    status,
                    timezone,
                    createdAt,
                    updatedAt,
                    acceptedPaymentMethods,
                    customFields,
                    subscriptionId,
                    saleOrServiceDate,
                    paymentConditions,
                    storePaymentMethodEnabled,
                    attachments,
                    additionalProperties);
        }
    }
}
