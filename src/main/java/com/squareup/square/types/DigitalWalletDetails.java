/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DigitalWalletDetails.Builder.class)
public final class DigitalWalletDetails {
    private final Optional<String> status;

    private final Optional<String> brand;

    private final Optional<CashAppDetails> cashAppDetails;

    private final Map<String, Object> additionalProperties;

    private DigitalWalletDetails(
            Optional<String> status,
            Optional<String> brand,
            Optional<CashAppDetails> cashAppDetails,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.brand = brand;
        this.cashAppDetails = cashAppDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The status of the <code>WALLET</code> payment. The status can be <code>AUTHORIZED</code>, <code>CAPTURED</code>, <code>VOIDED</code>, or
     * <code>FAILED</code>.
     */
    @JsonIgnore
    public Optional<String> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    /**
     * @return The brand used for the <code>WALLET</code> payment. The brand can be <code>CASH_APP</code>, <code>PAYPAY</code>, <code>ALIPAY</code>,
     * <code>RAKUTEN_PAY</code>, <code>AU_PAY</code>, <code>D_BARAI</code>, <code>MERPAY</code>, <code>WECHAT_PAY</code> or <code>UNKNOWN</code>.
     */
    @JsonIgnore
    public Optional<String> getBrand() {
        if (brand == null) {
            return Optional.empty();
        }
        return brand;
    }

    /**
     * @return Brand-specific details for payments with the <code>brand</code> of <code>CASH_APP</code>.
     */
    @JsonProperty("cash_app_details")
    public Optional<CashAppDetails> getCashAppDetails() {
        return cashAppDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status")
    private Optional<String> _getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("brand")
    private Optional<String> _getBrand() {
        return brand;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DigitalWalletDetails && equalTo((DigitalWalletDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DigitalWalletDetails other) {
        return status.equals(other.status) && brand.equals(other.brand) && cashAppDetails.equals(other.cashAppDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.brand, this.cashAppDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> status = Optional.empty();

        private Optional<String> brand = Optional.empty();

        private Optional<CashAppDetails> cashAppDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DigitalWalletDetails other) {
            status(other.getStatus());
            brand(other.getBrand());
            cashAppDetails(other.getCashAppDetails());
            return this;
        }

        /**
         * <p>The status of the <code>WALLET</code> payment. The status can be <code>AUTHORIZED</code>, <code>CAPTURED</code>, <code>VOIDED</code>, or
         * <code>FAILED</code>.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<String> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        /**
         * <p>The brand used for the <code>WALLET</code> payment. The brand can be <code>CASH_APP</code>, <code>PAYPAY</code>, <code>ALIPAY</code>,
         * <code>RAKUTEN_PAY</code>, <code>AU_PAY</code>, <code>D_BARAI</code>, <code>MERPAY</code>, <code>WECHAT_PAY</code> or <code>UNKNOWN</code>.</p>
         */
        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        public Builder brand(Nullable<String> brand) {
            if (brand.isNull()) {
                this.brand = null;
            } else if (brand.isEmpty()) {
                this.brand = Optional.empty();
            } else {
                this.brand = Optional.of(brand.get());
            }
            return this;
        }

        /**
         * <p>Brand-specific details for payments with the <code>brand</code> of <code>CASH_APP</code>.</p>
         */
        @JsonSetter(value = "cash_app_details", nulls = Nulls.SKIP)
        public Builder cashAppDetails(Optional<CashAppDetails> cashAppDetails) {
            this.cashAppDetails = cashAppDetails;
            return this;
        }

        public Builder cashAppDetails(CashAppDetails cashAppDetails) {
            this.cashAppDetails = Optional.ofNullable(cashAppDetails);
            return this;
        }

        public DigitalWalletDetails build() {
            return new DigitalWalletDetails(status, brand, cashAppDetails, additionalProperties);
        }
    }
}
