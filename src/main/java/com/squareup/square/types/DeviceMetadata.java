/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceMetadata.Builder.class)
public final class DeviceMetadata {
    private final Optional<String> batteryPercentage;

    private final Optional<String> chargingState;

    private final Optional<String> locationId;

    private final Optional<String> merchantId;

    private final Optional<String> networkConnectionType;

    private final Optional<String> paymentRegion;

    private final Optional<String> serialNumber;

    private final Optional<String> osVersion;

    private final Optional<String> appVersion;

    private final Optional<String> wifiNetworkName;

    private final Optional<String> wifiNetworkStrength;

    private final Optional<String> ipAddress;

    private final Map<String, Object> additionalProperties;

    private DeviceMetadata(
            Optional<String> batteryPercentage,
            Optional<String> chargingState,
            Optional<String> locationId,
            Optional<String> merchantId,
            Optional<String> networkConnectionType,
            Optional<String> paymentRegion,
            Optional<String> serialNumber,
            Optional<String> osVersion,
            Optional<String> appVersion,
            Optional<String> wifiNetworkName,
            Optional<String> wifiNetworkStrength,
            Optional<String> ipAddress,
            Map<String, Object> additionalProperties) {
        this.batteryPercentage = batteryPercentage;
        this.chargingState = chargingState;
        this.locationId = locationId;
        this.merchantId = merchantId;
        this.networkConnectionType = networkConnectionType;
        this.paymentRegion = paymentRegion;
        this.serialNumber = serialNumber;
        this.osVersion = osVersion;
        this.appVersion = appVersion;
        this.wifiNetworkName = wifiNetworkName;
        this.wifiNetworkStrength = wifiNetworkStrength;
        this.ipAddress = ipAddress;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Terminal’s remaining battery percentage, between 1-100.
     */
    @JsonIgnore
    public Optional<String> getBatteryPercentage() {
        if (batteryPercentage == null) {
            return Optional.empty();
        }
        return batteryPercentage;
    }

    /**
     * @return The current charging state of the Terminal.
     * Options: <code>CHARGING</code>, <code>NOT_CHARGING</code>
     */
    @JsonIgnore
    public Optional<String> getChargingState() {
        if (chargingState == null) {
            return Optional.empty();
        }
        return chargingState;
    }

    /**
     * @return The ID of the Square seller business location associated with the Terminal.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The ID of the Square merchant account that is currently signed-in to the Terminal.
     */
    @JsonIgnore
    public Optional<String> getMerchantId() {
        if (merchantId == null) {
            return Optional.empty();
        }
        return merchantId;
    }

    /**
     * @return The Terminal’s current network connection type.
     * Options: <code>WIFI</code>, <code>ETHERNET</code>
     */
    @JsonIgnore
    public Optional<String> getNetworkConnectionType() {
        if (networkConnectionType == null) {
            return Optional.empty();
        }
        return networkConnectionType;
    }

    /**
     * @return The country in which the Terminal is authorized to take payments.
     */
    @JsonIgnore
    public Optional<String> getPaymentRegion() {
        if (paymentRegion == null) {
            return Optional.empty();
        }
        return paymentRegion;
    }

    /**
     * @return The unique identifier assigned to the Terminal, which can be found on the lower back
     * of the device.
     */
    @JsonIgnore
    public Optional<String> getSerialNumber() {
        if (serialNumber == null) {
            return Optional.empty();
        }
        return serialNumber;
    }

    /**
     * @return The current version of the Terminal’s operating system.
     */
    @JsonIgnore
    public Optional<String> getOsVersion() {
        if (osVersion == null) {
            return Optional.empty();
        }
        return osVersion;
    }

    /**
     * @return The current version of the application running on the Terminal.
     */
    @JsonIgnore
    public Optional<String> getAppVersion() {
        if (appVersion == null) {
            return Optional.empty();
        }
        return appVersion;
    }

    /**
     * @return The name of the Wi-Fi network to which the Terminal is connected.
     */
    @JsonIgnore
    public Optional<String> getWifiNetworkName() {
        if (wifiNetworkName == null) {
            return Optional.empty();
        }
        return wifiNetworkName;
    }

    /**
     * @return The signal strength of the Wi-FI network connection.
     * Options: <code>POOR</code>, <code>FAIR</code>, <code>GOOD</code>, <code>EXCELLENT</code>
     */
    @JsonIgnore
    public Optional<String> getWifiNetworkStrength() {
        if (wifiNetworkStrength == null) {
            return Optional.empty();
        }
        return wifiNetworkStrength;
    }

    /**
     * @return The IP address of the Terminal.
     */
    @JsonIgnore
    public Optional<String> getIpAddress() {
        if (ipAddress == null) {
            return Optional.empty();
        }
        return ipAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("battery_percentage")
    private Optional<String> _getBatteryPercentage() {
        return batteryPercentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("charging_state")
    private Optional<String> _getChargingState() {
        return chargingState;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_id")
    private Optional<String> _getMerchantId() {
        return merchantId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("network_connection_type")
    private Optional<String> _getNetworkConnectionType() {
        return networkConnectionType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_region")
    private Optional<String> _getPaymentRegion() {
        return paymentRegion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("serial_number")
    private Optional<String> _getSerialNumber() {
        return serialNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("os_version")
    private Optional<String> _getOsVersion() {
        return osVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("app_version")
    private Optional<String> _getAppVersion() {
        return appVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("wifi_network_name")
    private Optional<String> _getWifiNetworkName() {
        return wifiNetworkName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("wifi_network_strength")
    private Optional<String> _getWifiNetworkStrength() {
        return wifiNetworkStrength;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ip_address")
    private Optional<String> _getIpAddress() {
        return ipAddress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceMetadata && equalTo((DeviceMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceMetadata other) {
        return batteryPercentage.equals(other.batteryPercentage)
                && chargingState.equals(other.chargingState)
                && locationId.equals(other.locationId)
                && merchantId.equals(other.merchantId)
                && networkConnectionType.equals(other.networkConnectionType)
                && paymentRegion.equals(other.paymentRegion)
                && serialNumber.equals(other.serialNumber)
                && osVersion.equals(other.osVersion)
                && appVersion.equals(other.appVersion)
                && wifiNetworkName.equals(other.wifiNetworkName)
                && wifiNetworkStrength.equals(other.wifiNetworkStrength)
                && ipAddress.equals(other.ipAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batteryPercentage,
                this.chargingState,
                this.locationId,
                this.merchantId,
                this.networkConnectionType,
                this.paymentRegion,
                this.serialNumber,
                this.osVersion,
                this.appVersion,
                this.wifiNetworkName,
                this.wifiNetworkStrength,
                this.ipAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> batteryPercentage = Optional.empty();

        private Optional<String> chargingState = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<String> networkConnectionType = Optional.empty();

        private Optional<String> paymentRegion = Optional.empty();

        private Optional<String> serialNumber = Optional.empty();

        private Optional<String> osVersion = Optional.empty();

        private Optional<String> appVersion = Optional.empty();

        private Optional<String> wifiNetworkName = Optional.empty();

        private Optional<String> wifiNetworkStrength = Optional.empty();

        private Optional<String> ipAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceMetadata other) {
            batteryPercentage(other.getBatteryPercentage());
            chargingState(other.getChargingState());
            locationId(other.getLocationId());
            merchantId(other.getMerchantId());
            networkConnectionType(other.getNetworkConnectionType());
            paymentRegion(other.getPaymentRegion());
            serialNumber(other.getSerialNumber());
            osVersion(other.getOsVersion());
            appVersion(other.getAppVersion());
            wifiNetworkName(other.getWifiNetworkName());
            wifiNetworkStrength(other.getWifiNetworkStrength());
            ipAddress(other.getIpAddress());
            return this;
        }

        /**
         * <p>The Terminal’s remaining battery percentage, between 1-100.</p>
         */
        @JsonSetter(value = "battery_percentage", nulls = Nulls.SKIP)
        public Builder batteryPercentage(Optional<String> batteryPercentage) {
            this.batteryPercentage = batteryPercentage;
            return this;
        }

        public Builder batteryPercentage(String batteryPercentage) {
            this.batteryPercentage = Optional.ofNullable(batteryPercentage);
            return this;
        }

        public Builder batteryPercentage(Nullable<String> batteryPercentage) {
            if (batteryPercentage.isNull()) {
                this.batteryPercentage = null;
            } else if (batteryPercentage.isEmpty()) {
                this.batteryPercentage = Optional.empty();
            } else {
                this.batteryPercentage = Optional.of(batteryPercentage.get());
            }
            return this;
        }

        /**
         * <p>The current charging state of the Terminal.
         * Options: <code>CHARGING</code>, <code>NOT_CHARGING</code></p>
         */
        @JsonSetter(value = "charging_state", nulls = Nulls.SKIP)
        public Builder chargingState(Optional<String> chargingState) {
            this.chargingState = chargingState;
            return this;
        }

        public Builder chargingState(String chargingState) {
            this.chargingState = Optional.ofNullable(chargingState);
            return this;
        }

        public Builder chargingState(Nullable<String> chargingState) {
            if (chargingState.isNull()) {
                this.chargingState = null;
            } else if (chargingState.isEmpty()) {
                this.chargingState = Optional.empty();
            } else {
                this.chargingState = Optional.of(chargingState.get());
            }
            return this;
        }

        /**
         * <p>The ID of the Square seller business location associated with the Terminal.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the Square merchant account that is currently signed-in to the Terminal.</p>
         */
        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Nullable<String> merchantId) {
            if (merchantId.isNull()) {
                this.merchantId = null;
            } else if (merchantId.isEmpty()) {
                this.merchantId = Optional.empty();
            } else {
                this.merchantId = Optional.of(merchantId.get());
            }
            return this;
        }

        /**
         * <p>The Terminal’s current network connection type.
         * Options: <code>WIFI</code>, <code>ETHERNET</code></p>
         */
        @JsonSetter(value = "network_connection_type", nulls = Nulls.SKIP)
        public Builder networkConnectionType(Optional<String> networkConnectionType) {
            this.networkConnectionType = networkConnectionType;
            return this;
        }

        public Builder networkConnectionType(String networkConnectionType) {
            this.networkConnectionType = Optional.ofNullable(networkConnectionType);
            return this;
        }

        public Builder networkConnectionType(Nullable<String> networkConnectionType) {
            if (networkConnectionType.isNull()) {
                this.networkConnectionType = null;
            } else if (networkConnectionType.isEmpty()) {
                this.networkConnectionType = Optional.empty();
            } else {
                this.networkConnectionType = Optional.of(networkConnectionType.get());
            }
            return this;
        }

        /**
         * <p>The country in which the Terminal is authorized to take payments.</p>
         */
        @JsonSetter(value = "payment_region", nulls = Nulls.SKIP)
        public Builder paymentRegion(Optional<String> paymentRegion) {
            this.paymentRegion = paymentRegion;
            return this;
        }

        public Builder paymentRegion(String paymentRegion) {
            this.paymentRegion = Optional.ofNullable(paymentRegion);
            return this;
        }

        public Builder paymentRegion(Nullable<String> paymentRegion) {
            if (paymentRegion.isNull()) {
                this.paymentRegion = null;
            } else if (paymentRegion.isEmpty()) {
                this.paymentRegion = Optional.empty();
            } else {
                this.paymentRegion = Optional.of(paymentRegion.get());
            }
            return this;
        }

        /**
         * <p>The unique identifier assigned to the Terminal, which can be found on the lower back
         * of the device.</p>
         */
        @JsonSetter(value = "serial_number", nulls = Nulls.SKIP)
        public Builder serialNumber(Optional<String> serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }

        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Optional.ofNullable(serialNumber);
            return this;
        }

        public Builder serialNumber(Nullable<String> serialNumber) {
            if (serialNumber.isNull()) {
                this.serialNumber = null;
            } else if (serialNumber.isEmpty()) {
                this.serialNumber = Optional.empty();
            } else {
                this.serialNumber = Optional.of(serialNumber.get());
            }
            return this;
        }

        /**
         * <p>The current version of the Terminal’s operating system.</p>
         */
        @JsonSetter(value = "os_version", nulls = Nulls.SKIP)
        public Builder osVersion(Optional<String> osVersion) {
            this.osVersion = osVersion;
            return this;
        }

        public Builder osVersion(String osVersion) {
            this.osVersion = Optional.ofNullable(osVersion);
            return this;
        }

        public Builder osVersion(Nullable<String> osVersion) {
            if (osVersion.isNull()) {
                this.osVersion = null;
            } else if (osVersion.isEmpty()) {
                this.osVersion = Optional.empty();
            } else {
                this.osVersion = Optional.of(osVersion.get());
            }
            return this;
        }

        /**
         * <p>The current version of the application running on the Terminal.</p>
         */
        @JsonSetter(value = "app_version", nulls = Nulls.SKIP)
        public Builder appVersion(Optional<String> appVersion) {
            this.appVersion = appVersion;
            return this;
        }

        public Builder appVersion(String appVersion) {
            this.appVersion = Optional.ofNullable(appVersion);
            return this;
        }

        public Builder appVersion(Nullable<String> appVersion) {
            if (appVersion.isNull()) {
                this.appVersion = null;
            } else if (appVersion.isEmpty()) {
                this.appVersion = Optional.empty();
            } else {
                this.appVersion = Optional.of(appVersion.get());
            }
            return this;
        }

        /**
         * <p>The name of the Wi-Fi network to which the Terminal is connected.</p>
         */
        @JsonSetter(value = "wifi_network_name", nulls = Nulls.SKIP)
        public Builder wifiNetworkName(Optional<String> wifiNetworkName) {
            this.wifiNetworkName = wifiNetworkName;
            return this;
        }

        public Builder wifiNetworkName(String wifiNetworkName) {
            this.wifiNetworkName = Optional.ofNullable(wifiNetworkName);
            return this;
        }

        public Builder wifiNetworkName(Nullable<String> wifiNetworkName) {
            if (wifiNetworkName.isNull()) {
                this.wifiNetworkName = null;
            } else if (wifiNetworkName.isEmpty()) {
                this.wifiNetworkName = Optional.empty();
            } else {
                this.wifiNetworkName = Optional.of(wifiNetworkName.get());
            }
            return this;
        }

        /**
         * <p>The signal strength of the Wi-FI network connection.
         * Options: <code>POOR</code>, <code>FAIR</code>, <code>GOOD</code>, <code>EXCELLENT</code></p>
         */
        @JsonSetter(value = "wifi_network_strength", nulls = Nulls.SKIP)
        public Builder wifiNetworkStrength(Optional<String> wifiNetworkStrength) {
            this.wifiNetworkStrength = wifiNetworkStrength;
            return this;
        }

        public Builder wifiNetworkStrength(String wifiNetworkStrength) {
            this.wifiNetworkStrength = Optional.ofNullable(wifiNetworkStrength);
            return this;
        }

        public Builder wifiNetworkStrength(Nullable<String> wifiNetworkStrength) {
            if (wifiNetworkStrength.isNull()) {
                this.wifiNetworkStrength = null;
            } else if (wifiNetworkStrength.isEmpty()) {
                this.wifiNetworkStrength = Optional.empty();
            } else {
                this.wifiNetworkStrength = Optional.of(wifiNetworkStrength.get());
            }
            return this;
        }

        /**
         * <p>The IP address of the Terminal.</p>
         */
        @JsonSetter(value = "ip_address", nulls = Nulls.SKIP)
        public Builder ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        public Builder ipAddress(Nullable<String> ipAddress) {
            if (ipAddress.isNull()) {
                this.ipAddress = null;
            } else if (ipAddress.isEmpty()) {
                this.ipAddress = Optional.empty();
            } else {
                this.ipAddress = Optional.of(ipAddress.get());
            }
            return this;
        }

        public DeviceMetadata build() {
            return new DeviceMetadata(
                    batteryPercentage,
                    chargingState,
                    locationId,
                    merchantId,
                    networkConnectionType,
                    paymentRegion,
                    serialNumber,
                    osVersion,
                    appVersion,
                    wifiNetworkName,
                    wifiNetworkStrength,
                    ipAddress,
                    additionalProperties);
        }
    }
}
