/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutLocationSettingsTipping.Builder.class)
public final class CheckoutLocationSettingsTipping {
    private final Optional<List<Integer>> percentages;

    private final Optional<Boolean> smartTippingEnabled;

    private final Optional<Integer> defaultPercent;

    private final Optional<List<Money>> smartTips;

    private final Optional<Money> defaultSmartTip;

    private final Map<String, Object> additionalProperties;

    private CheckoutLocationSettingsTipping(
            Optional<List<Integer>> percentages,
            Optional<Boolean> smartTippingEnabled,
            Optional<Integer> defaultPercent,
            Optional<List<Money>> smartTips,
            Optional<Money> defaultSmartTip,
            Map<String, Object> additionalProperties) {
        this.percentages = percentages;
        this.smartTippingEnabled = smartTippingEnabled;
        this.defaultPercent = defaultPercent;
        this.smartTips = smartTips;
        this.defaultSmartTip = defaultSmartTip;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Set three custom percentage amounts that buyers can select at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.
     */
    @JsonIgnore
    public Optional<List<Integer>> getPercentages() {
        if (percentages == null) {
            return Optional.empty();
        }
        return percentages;
    }

    /**
     * @return Enables Smart Tip Amounts. If Smart Tip Amounts is enabled, tipping works as follows:
     * If a transaction is less than $10, the available tipping options include No Tip, $1, $2, or $3.
     * If a transaction is $10 or more, the available tipping options include No Tip, 15%, 20%, or 25%.
     * You can set custom percentage amounts with the <code>percentages</code> field.
     */
    @JsonIgnore
    public Optional<Boolean> getSmartTippingEnabled() {
        if (smartTippingEnabled == null) {
            return Optional.empty();
        }
        return smartTippingEnabled;
    }

    /**
     * @return Set the pre-selected percentage amounts that appear at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.
     */
    @JsonIgnore
    public Optional<Integer> getDefaultPercent() {
        if (defaultPercent == null) {
            return Optional.empty();
        }
        return defaultPercent;
    }

    /**
     * @return Show the Smart Tip Amounts for this location.
     */
    @JsonIgnore
    public Optional<List<Money>> getSmartTips() {
        if (smartTips == null) {
            return Optional.empty();
        }
        return smartTips;
    }

    /**
     * @return Set the pre-selected whole amount that appears at checkout when Smart Tip is enabled and the transaction amount is less than $10.
     */
    @JsonProperty("default_smart_tip")
    public Optional<Money> getDefaultSmartTip() {
        return defaultSmartTip;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("percentages")
    private Optional<List<Integer>> _getPercentages() {
        return percentages;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("smart_tipping_enabled")
    private Optional<Boolean> _getSmartTippingEnabled() {
        return smartTippingEnabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("default_percent")
    private Optional<Integer> _getDefaultPercent() {
        return defaultPercent;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("smart_tips")
    private Optional<List<Money>> _getSmartTips() {
        return smartTips;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutLocationSettingsTipping && equalTo((CheckoutLocationSettingsTipping) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutLocationSettingsTipping other) {
        return percentages.equals(other.percentages)
                && smartTippingEnabled.equals(other.smartTippingEnabled)
                && defaultPercent.equals(other.defaultPercent)
                && smartTips.equals(other.smartTips)
                && defaultSmartTip.equals(other.defaultSmartTip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.percentages, this.smartTippingEnabled, this.defaultPercent, this.smartTips, this.defaultSmartTip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Integer>> percentages = Optional.empty();

        private Optional<Boolean> smartTippingEnabled = Optional.empty();

        private Optional<Integer> defaultPercent = Optional.empty();

        private Optional<List<Money>> smartTips = Optional.empty();

        private Optional<Money> defaultSmartTip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutLocationSettingsTipping other) {
            percentages(other.getPercentages());
            smartTippingEnabled(other.getSmartTippingEnabled());
            defaultPercent(other.getDefaultPercent());
            smartTips(other.getSmartTips());
            defaultSmartTip(other.getDefaultSmartTip());
            return this;
        }

        /**
         * <p>Set three custom percentage amounts that buyers can select at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.</p>
         */
        @JsonSetter(value = "percentages", nulls = Nulls.SKIP)
        public Builder percentages(Optional<List<Integer>> percentages) {
            this.percentages = percentages;
            return this;
        }

        public Builder percentages(List<Integer> percentages) {
            this.percentages = Optional.ofNullable(percentages);
            return this;
        }

        public Builder percentages(Nullable<List<Integer>> percentages) {
            if (percentages.isNull()) {
                this.percentages = null;
            } else if (percentages.isEmpty()) {
                this.percentages = Optional.empty();
            } else {
                this.percentages = Optional.of(percentages.get());
            }
            return this;
        }

        /**
         * <p>Enables Smart Tip Amounts. If Smart Tip Amounts is enabled, tipping works as follows:
         * If a transaction is less than $10, the available tipping options include No Tip, $1, $2, or $3.
         * If a transaction is $10 or more, the available tipping options include No Tip, 15%, 20%, or 25%.
         * You can set custom percentage amounts with the <code>percentages</code> field.</p>
         */
        @JsonSetter(value = "smart_tipping_enabled", nulls = Nulls.SKIP)
        public Builder smartTippingEnabled(Optional<Boolean> smartTippingEnabled) {
            this.smartTippingEnabled = smartTippingEnabled;
            return this;
        }

        public Builder smartTippingEnabled(Boolean smartTippingEnabled) {
            this.smartTippingEnabled = Optional.ofNullable(smartTippingEnabled);
            return this;
        }

        public Builder smartTippingEnabled(Nullable<Boolean> smartTippingEnabled) {
            if (smartTippingEnabled.isNull()) {
                this.smartTippingEnabled = null;
            } else if (smartTippingEnabled.isEmpty()) {
                this.smartTippingEnabled = Optional.empty();
            } else {
                this.smartTippingEnabled = Optional.of(smartTippingEnabled.get());
            }
            return this;
        }

        /**
         * <p>Set the pre-selected percentage amounts that appear at checkout. If Smart Tip is enabled, this only applies to transactions totaling $10 or more.</p>
         */
        @JsonSetter(value = "default_percent", nulls = Nulls.SKIP)
        public Builder defaultPercent(Optional<Integer> defaultPercent) {
            this.defaultPercent = defaultPercent;
            return this;
        }

        public Builder defaultPercent(Integer defaultPercent) {
            this.defaultPercent = Optional.ofNullable(defaultPercent);
            return this;
        }

        public Builder defaultPercent(Nullable<Integer> defaultPercent) {
            if (defaultPercent.isNull()) {
                this.defaultPercent = null;
            } else if (defaultPercent.isEmpty()) {
                this.defaultPercent = Optional.empty();
            } else {
                this.defaultPercent = Optional.of(defaultPercent.get());
            }
            return this;
        }

        /**
         * <p>Show the Smart Tip Amounts for this location.</p>
         */
        @JsonSetter(value = "smart_tips", nulls = Nulls.SKIP)
        public Builder smartTips(Optional<List<Money>> smartTips) {
            this.smartTips = smartTips;
            return this;
        }

        public Builder smartTips(List<Money> smartTips) {
            this.smartTips = Optional.ofNullable(smartTips);
            return this;
        }

        public Builder smartTips(Nullable<List<Money>> smartTips) {
            if (smartTips.isNull()) {
                this.smartTips = null;
            } else if (smartTips.isEmpty()) {
                this.smartTips = Optional.empty();
            } else {
                this.smartTips = Optional.of(smartTips.get());
            }
            return this;
        }

        /**
         * <p>Set the pre-selected whole amount that appears at checkout when Smart Tip is enabled and the transaction amount is less than $10.</p>
         */
        @JsonSetter(value = "default_smart_tip", nulls = Nulls.SKIP)
        public Builder defaultSmartTip(Optional<Money> defaultSmartTip) {
            this.defaultSmartTip = defaultSmartTip;
            return this;
        }

        public Builder defaultSmartTip(Money defaultSmartTip) {
            this.defaultSmartTip = Optional.ofNullable(defaultSmartTip);
            return this;
        }

        public CheckoutLocationSettingsTipping build() {
            return new CheckoutLocationSettingsTipping(
                    percentages, smartTippingEnabled, defaultPercent, smartTips, defaultSmartTip, additionalProperties);
        }
    }
}
