/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderReturnTip.Builder.class)
public final class OrderReturnTip {
    private final Optional<String> uid;

    private final Optional<Money> appliedMoney;

    private final Optional<String> sourceTenderUid;

    private final Optional<String> sourceTenderId;

    private final Map<String, Object> additionalProperties;

    private OrderReturnTip(
            Optional<String> uid,
            Optional<Money> appliedMoney,
            Optional<String> sourceTenderUid,
            Optional<String> sourceTenderId,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.appliedMoney = appliedMoney;
        this.sourceTenderUid = sourceTenderUid;
        this.sourceTenderId = sourceTenderId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the tip only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return <h2>The amount of tip being returned</h2>
     */
    @JsonProperty("applied_money")
    public Optional<Money> getAppliedMoney() {
        return appliedMoney;
    }

    /**
     * @return The tender <code>uid</code> from the order that contains the original application of this tip.
     */
    @JsonIgnore
    public Optional<String> getSourceTenderUid() {
        if (sourceTenderUid == null) {
            return Optional.empty();
        }
        return sourceTenderUid;
    }

    /**
     * @return The tender <code>id</code> from the order that contains the original application of this tip.
     */
    @JsonIgnore
    public Optional<String> getSourceTenderId() {
        if (sourceTenderId == null) {
            return Optional.empty();
        }
        return sourceTenderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_tender_uid")
    private Optional<String> _getSourceTenderUid() {
        return sourceTenderUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_tender_id")
    private Optional<String> _getSourceTenderId() {
        return sourceTenderId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderReturnTip && equalTo((OrderReturnTip) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderReturnTip other) {
        return uid.equals(other.uid)
                && appliedMoney.equals(other.appliedMoney)
                && sourceTenderUid.equals(other.sourceTenderUid)
                && sourceTenderId.equals(other.sourceTenderId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.appliedMoney, this.sourceTenderUid, this.sourceTenderId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<Money> appliedMoney = Optional.empty();

        private Optional<String> sourceTenderUid = Optional.empty();

        private Optional<String> sourceTenderId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderReturnTip other) {
            uid(other.getUid());
            appliedMoney(other.getAppliedMoney());
            sourceTenderUid(other.getSourceTenderUid());
            sourceTenderId(other.getSourceTenderId());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        @JsonSetter(value = "applied_money", nulls = Nulls.SKIP)
        public Builder appliedMoney(Optional<Money> appliedMoney) {
            this.appliedMoney = appliedMoney;
            return this;
        }

        public Builder appliedMoney(Money appliedMoney) {
            this.appliedMoney = Optional.ofNullable(appliedMoney);
            return this;
        }

        @JsonSetter(value = "source_tender_uid", nulls = Nulls.SKIP)
        public Builder sourceTenderUid(Optional<String> sourceTenderUid) {
            this.sourceTenderUid = sourceTenderUid;
            return this;
        }

        public Builder sourceTenderUid(String sourceTenderUid) {
            this.sourceTenderUid = Optional.ofNullable(sourceTenderUid);
            return this;
        }

        public Builder sourceTenderUid(Nullable<String> sourceTenderUid) {
            if (sourceTenderUid.isNull()) {
                this.sourceTenderUid = null;
            } else if (sourceTenderUid.isEmpty()) {
                this.sourceTenderUid = Optional.empty();
            } else {
                this.sourceTenderUid = Optional.of(sourceTenderUid.get());
            }
            return this;
        }

        @JsonSetter(value = "source_tender_id", nulls = Nulls.SKIP)
        public Builder sourceTenderId(Optional<String> sourceTenderId) {
            this.sourceTenderId = sourceTenderId;
            return this;
        }

        public Builder sourceTenderId(String sourceTenderId) {
            this.sourceTenderId = Optional.ofNullable(sourceTenderId);
            return this;
        }

        public Builder sourceTenderId(Nullable<String> sourceTenderId) {
            if (sourceTenderId.isNull()) {
                this.sourceTenderId = null;
            } else if (sourceTenderId.isEmpty()) {
                this.sourceTenderId = Optional.empty();
            } else {
                this.sourceTenderId = Optional.of(sourceTenderId.get());
            }
            return this;
        }

        public OrderReturnTip build() {
            return new OrderReturnTip(uid, appliedMoney, sourceTenderUid, sourceTenderId, additionalProperties);
        }
    }
}
