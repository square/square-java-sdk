/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerAddressFilter.Builder.class)
public final class CustomerAddressFilter {
    private final Optional<CustomerTextFilter> postalCode;

    private final Optional<Country> country;

    private final Map<String, Object> additionalProperties;

    private CustomerAddressFilter(
            Optional<CustomerTextFilter> postalCode,
            Optional<Country> country,
            Map<String, Object> additionalProperties) {
        this.postalCode = postalCode;
        this.country = country;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The postal code to search for. Only an <code>exact</code> match is supported.
     */
    @JsonProperty("postal_code")
    public Optional<CustomerTextFilter> getPostalCode() {
        return postalCode;
    }

    /**
     * @return The country code to search for.
     * See <a href="#type-country">Country</a> for possible values
     */
    @JsonProperty("country")
    public Optional<Country> getCountry() {
        return country;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerAddressFilter && equalTo((CustomerAddressFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerAddressFilter other) {
        return postalCode.equals(other.postalCode) && country.equals(other.country);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.postalCode, this.country);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CustomerTextFilter> postalCode = Optional.empty();

        private Optional<Country> country = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerAddressFilter other) {
            postalCode(other.getPostalCode());
            country(other.getCountry());
            return this;
        }

        /**
         * <p>The postal code to search for. Only an <code>exact</code> match is supported.</p>
         */
        @JsonSetter(value = "postal_code", nulls = Nulls.SKIP)
        public Builder postalCode(Optional<CustomerTextFilter> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(CustomerTextFilter postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * <p>The country code to search for.
         * See <a href="#type-country">Country</a> for possible values</p>
         */
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<Country> country) {
            this.country = country;
            return this;
        }

        public Builder country(Country country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        public CustomerAddressFilter build() {
            return new CustomerAddressFilter(postalCode, country, additionalProperties);
        }
    }
}
