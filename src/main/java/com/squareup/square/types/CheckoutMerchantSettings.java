/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutMerchantSettings.Builder.class)
public final class CheckoutMerchantSettings {
    private final Optional<CheckoutMerchantSettingsPaymentMethods> paymentMethods;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private CheckoutMerchantSettings(
            Optional<CheckoutMerchantSettingsPaymentMethods> paymentMethods,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.paymentMethods = paymentMethods;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The set of payment methods accepted for the merchant's account.
     */
    @JsonProperty("payment_methods")
    public Optional<CheckoutMerchantSettingsPaymentMethods> getPaymentMethods() {
        return paymentMethods;
    }

    /**
     * @return The timestamp when the settings were last updated, in RFC 3339 format.
     * Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
     * UTC: 2020-01-26T02:25:34Z
     * Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutMerchantSettings && equalTo((CheckoutMerchantSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutMerchantSettings other) {
        return paymentMethods.equals(other.paymentMethods) && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentMethods, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CheckoutMerchantSettingsPaymentMethods> paymentMethods = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutMerchantSettings other) {
            paymentMethods(other.getPaymentMethods());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The set of payment methods accepted for the merchant's account.</p>
         */
        @JsonSetter(value = "payment_methods", nulls = Nulls.SKIP)
        public Builder paymentMethods(Optional<CheckoutMerchantSettingsPaymentMethods> paymentMethods) {
            this.paymentMethods = paymentMethods;
            return this;
        }

        public Builder paymentMethods(CheckoutMerchantSettingsPaymentMethods paymentMethods) {
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        /**
         * <p>The timestamp when the settings were last updated, in RFC 3339 format.
         * Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
         * UTC: 2020-01-26T02:25:34Z
         * Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public CheckoutMerchantSettings build() {
            return new CheckoutMerchantSettings(paymentMethods, updatedAt, additionalProperties);
        }
    }
}
