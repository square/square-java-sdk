/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRefundsRequest.Builder.class)
public final class ListRefundsRequest {
    private final Optional<String> beginTime;

    private final Optional<String> endTime;

    private final Optional<String> sortOrder;

    private final Optional<String> cursor;

    private final Optional<String> locationId;

    private final Optional<String> status;

    private final Optional<String> sourceType;

    private final Optional<Integer> limit;

    private final Optional<String> updatedAtBeginTime;

    private final Optional<String> updatedAtEndTime;

    private final Optional<ListPaymentRefundsRequestSortField> sortField;

    private final Map<String, Object> additionalProperties;

    private ListRefundsRequest(
            Optional<String> beginTime,
            Optional<String> endTime,
            Optional<String> sortOrder,
            Optional<String> cursor,
            Optional<String> locationId,
            Optional<String> status,
            Optional<String> sourceType,
            Optional<Integer> limit,
            Optional<String> updatedAtBeginTime,
            Optional<String> updatedAtEndTime,
            Optional<ListPaymentRefundsRequestSortField> sortField,
            Map<String, Object> additionalProperties) {
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.sortOrder = sortOrder;
        this.cursor = cursor;
        this.locationId = locationId;
        this.status = status;
        this.sourceType = sourceType;
        this.limit = limit;
        this.updatedAtBeginTime = updatedAtBeginTime;
        this.updatedAtEndTime = updatedAtEndTime;
        this.sortField = sortField;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates the start of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
     * format.  The range is determined using the <code>created_at</code> field for each <code>PaymentRefund</code>.
     * <p>Default: The current time minus one year.</p>
     */
    @JsonIgnore
    public Optional<String> getBeginTime() {
        if (beginTime == null) {
            return Optional.empty();
        }
        return beginTime;
    }

    /**
     * @return Indicates the end of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
     * format.  The range is determined using the <code>created_at</code> field for each <code>PaymentRefund</code>.
     * <p>Default: The current time.</p>
     */
    @JsonIgnore
    public Optional<String> getEndTime() {
        if (endTime == null) {
            return Optional.empty();
        }
        return endTime;
    }

    /**
     * @return The order in which results are listed by <code>PaymentRefund.created_at</code>:
     * <ul>
     * <li><code>ASC</code> - Oldest to newest.</li>
     * <li><code>DESC</code> - Newest to oldest (default).</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<String> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for the original query.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return Limit results to the location supplied. By default, results are returned
     * for all locations associated with the seller.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return If provided, only refunds with the given status are returned.
     * For a list of refund status values, see <a href="entity:PaymentRefund">PaymentRefund</a>.
     * <p>Default: If omitted, refunds are returned regardless of their status.</p>
     */
    @JsonIgnore
    public Optional<String> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    /**
     * @return If provided, only returns refunds whose payments have the indicated source type.
     * Current values include <code>CARD</code>, <code>BANK_ACCOUNT</code>, <code>WALLET</code>, <code>CASH</code>, and <code>EXTERNAL</code>.
     * For information about these payment source types, see
     * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.
     * <p>Default: If omitted, refunds are returned regardless of the source type.</p>
     */
    @JsonIgnore
    public Optional<String> getSourceType() {
        if (sourceType == null) {
            return Optional.empty();
        }
        return sourceType;
    }

    /**
     * @return The maximum number of results to be returned in a single page.
     * <p>It is possible to receive fewer results than the specified limit on a given page.</p>
     * <p>If the supplied value is greater than 100, no more than 100 results are returned.</p>
     * <p>Default: 100</p>
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return Indicates the start of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
     * format.  The range is determined using the <code>updated_at</code> field for each <code>PaymentRefund</code>.
     * <p>Default: If omitted, the time range starts at <code>begin_time</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getUpdatedAtBeginTime() {
        if (updatedAtBeginTime == null) {
            return Optional.empty();
        }
        return updatedAtBeginTime;
    }

    /**
     * @return Indicates the end of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
     * format.  The range is determined using the <code>updated_at</code> field for each <code>PaymentRefund</code>.
     * <p>Default: The current time.</p>
     */
    @JsonIgnore
    public Optional<String> getUpdatedAtEndTime() {
        if (updatedAtEndTime == null) {
            return Optional.empty();
        }
        return updatedAtEndTime;
    }

    /**
     * @return The field used to sort results by. The default is <code>CREATED_AT</code>.
     */
    @JsonIgnore
    public Optional<ListPaymentRefundsRequestSortField> getSortField() {
        if (sortField == null) {
            return Optional.empty();
        }
        return sortField;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("begin_time")
    private Optional<String> _getBeginTime() {
        return beginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_time")
    private Optional<String> _getEndTime() {
        return endTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<String> _getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status")
    private Optional<String> _getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_type")
    private Optional<String> _getSourceType() {
        return sourceType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updated_at_begin_time")
    private Optional<String> _getUpdatedAtBeginTime() {
        return updatedAtBeginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updated_at_end_time")
    private Optional<String> _getUpdatedAtEndTime() {
        return updatedAtEndTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_field")
    private Optional<ListPaymentRefundsRequestSortField> _getSortField() {
        return sortField;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListRefundsRequest && equalTo((ListRefundsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListRefundsRequest other) {
        return beginTime.equals(other.beginTime)
                && endTime.equals(other.endTime)
                && sortOrder.equals(other.sortOrder)
                && cursor.equals(other.cursor)
                && locationId.equals(other.locationId)
                && status.equals(other.status)
                && sourceType.equals(other.sourceType)
                && limit.equals(other.limit)
                && updatedAtBeginTime.equals(other.updatedAtBeginTime)
                && updatedAtEndTime.equals(other.updatedAtEndTime)
                && sortField.equals(other.sortField);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.beginTime,
                this.endTime,
                this.sortOrder,
                this.cursor,
                this.locationId,
                this.status,
                this.sourceType,
                this.limit,
                this.updatedAtBeginTime,
                this.updatedAtEndTime,
                this.sortField);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> beginTime = Optional.empty();

        private Optional<String> endTime = Optional.empty();

        private Optional<String> sortOrder = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<String> sourceType = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> updatedAtBeginTime = Optional.empty();

        private Optional<String> updatedAtEndTime = Optional.empty();

        private Optional<ListPaymentRefundsRequestSortField> sortField = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListRefundsRequest other) {
            beginTime(other.getBeginTime());
            endTime(other.getEndTime());
            sortOrder(other.getSortOrder());
            cursor(other.getCursor());
            locationId(other.getLocationId());
            status(other.getStatus());
            sourceType(other.getSourceType());
            limit(other.getLimit());
            updatedAtBeginTime(other.getUpdatedAtBeginTime());
            updatedAtEndTime(other.getUpdatedAtEndTime());
            sortField(other.getSortField());
            return this;
        }

        /**
         * <p>Indicates the start of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
         * format.  The range is determined using the <code>created_at</code> field for each <code>PaymentRefund</code>.</p>
         * <p>Default: The current time minus one year.</p>
         */
        @JsonSetter(value = "begin_time", nulls = Nulls.SKIP)
        public Builder beginTime(Optional<String> beginTime) {
            this.beginTime = beginTime;
            return this;
        }

        public Builder beginTime(String beginTime) {
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        public Builder beginTime(Nullable<String> beginTime) {
            if (beginTime.isNull()) {
                this.beginTime = null;
            } else if (beginTime.isEmpty()) {
                this.beginTime = Optional.empty();
            } else {
                this.beginTime = Optional.of(beginTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the end of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
         * format.  The range is determined using the <code>created_at</code> field for each <code>PaymentRefund</code>.</p>
         * <p>Default: The current time.</p>
         */
        @JsonSetter(value = "end_time", nulls = Nulls.SKIP)
        public Builder endTime(Optional<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        public Builder endTime(Nullable<String> endTime) {
            if (endTime.isNull()) {
                this.endTime = null;
            } else if (endTime.isEmpty()) {
                this.endTime = Optional.empty();
            } else {
                this.endTime = Optional.of(endTime.get());
            }
            return this;
        }

        /**
         * <p>The order in which results are listed by <code>PaymentRefund.created_at</code>:</p>
         * <ul>
         * <li><code>ASC</code> - Oldest to newest.</li>
         * <li><code>DESC</code> - Newest to oldest (default).</li>
         * </ul>
         */
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<String> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(String sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Nullable<String> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>Limit results to the location supplied. By default, results are returned
         * for all locations associated with the seller.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>If provided, only refunds with the given status are returned.
         * For a list of refund status values, see <a href="entity:PaymentRefund">PaymentRefund</a>.</p>
         * <p>Default: If omitted, refunds are returned regardless of their status.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<String> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        /**
         * <p>If provided, only returns refunds whose payments have the indicated source type.
         * Current values include <code>CARD</code>, <code>BANK_ACCOUNT</code>, <code>WALLET</code>, <code>CASH</code>, and <code>EXTERNAL</code>.
         * For information about these payment source types, see
         * <a href="https://developer.squareup.com/docs/payments-api/take-payments">Take Payments</a>.</p>
         * <p>Default: If omitted, refunds are returned regardless of the source type.</p>
         */
        @JsonSetter(value = "source_type", nulls = Nulls.SKIP)
        public Builder sourceType(Optional<String> sourceType) {
            this.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(String sourceType) {
            this.sourceType = Optional.ofNullable(sourceType);
            return this;
        }

        public Builder sourceType(Nullable<String> sourceType) {
            if (sourceType.isNull()) {
                this.sourceType = null;
            } else if (sourceType.isEmpty()) {
                this.sourceType = Optional.empty();
            } else {
                this.sourceType = Optional.of(sourceType.get());
            }
            return this;
        }

        /**
         * <p>The maximum number of results to be returned in a single page.</p>
         * <p>It is possible to receive fewer results than the specified limit on a given page.</p>
         * <p>If the supplied value is greater than 100, no more than 100 results are returned.</p>
         * <p>Default: 100</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>Indicates the start of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
         * format.  The range is determined using the <code>updated_at</code> field for each <code>PaymentRefund</code>.</p>
         * <p>Default: If omitted, the time range starts at <code>begin_time</code>.</p>
         */
        @JsonSetter(value = "updated_at_begin_time", nulls = Nulls.SKIP)
        public Builder updatedAtBeginTime(Optional<String> updatedAtBeginTime) {
            this.updatedAtBeginTime = updatedAtBeginTime;
            return this;
        }

        public Builder updatedAtBeginTime(String updatedAtBeginTime) {
            this.updatedAtBeginTime = Optional.ofNullable(updatedAtBeginTime);
            return this;
        }

        public Builder updatedAtBeginTime(Nullable<String> updatedAtBeginTime) {
            if (updatedAtBeginTime.isNull()) {
                this.updatedAtBeginTime = null;
            } else if (updatedAtBeginTime.isEmpty()) {
                this.updatedAtBeginTime = Optional.empty();
            } else {
                this.updatedAtBeginTime = Optional.of(updatedAtBeginTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the end of the time range to retrieve each <code>PaymentRefund</code> for, in RFC 3339
         * format.  The range is determined using the <code>updated_at</code> field for each <code>PaymentRefund</code>.</p>
         * <p>Default: The current time.</p>
         */
        @JsonSetter(value = "updated_at_end_time", nulls = Nulls.SKIP)
        public Builder updatedAtEndTime(Optional<String> updatedAtEndTime) {
            this.updatedAtEndTime = updatedAtEndTime;
            return this;
        }

        public Builder updatedAtEndTime(String updatedAtEndTime) {
            this.updatedAtEndTime = Optional.ofNullable(updatedAtEndTime);
            return this;
        }

        public Builder updatedAtEndTime(Nullable<String> updatedAtEndTime) {
            if (updatedAtEndTime.isNull()) {
                this.updatedAtEndTime = null;
            } else if (updatedAtEndTime.isEmpty()) {
                this.updatedAtEndTime = Optional.empty();
            } else {
                this.updatedAtEndTime = Optional.of(updatedAtEndTime.get());
            }
            return this;
        }

        /**
         * <p>The field used to sort results by. The default is <code>CREATED_AT</code>.</p>
         */
        @JsonSetter(value = "sort_field", nulls = Nulls.SKIP)
        public Builder sortField(Optional<ListPaymentRefundsRequestSortField> sortField) {
            this.sortField = sortField;
            return this;
        }

        public Builder sortField(ListPaymentRefundsRequestSortField sortField) {
            this.sortField = Optional.ofNullable(sortField);
            return this;
        }

        public Builder sortField(Nullable<ListPaymentRefundsRequestSortField> sortField) {
            if (sortField.isNull()) {
                this.sortField = null;
            } else if (sortField.isEmpty()) {
                this.sortField = Optional.empty();
            } else {
                this.sortField = Optional.of(sortField.get());
            }
            return this;
        }

        public ListRefundsRequest build() {
            return new ListRefundsRequest(
                    beginTime,
                    endTime,
                    sortOrder,
                    cursor,
                    locationId,
                    status,
                    sourceType,
                    limit,
                    updatedAtBeginTime,
                    updatedAtEndTime,
                    sortField,
                    additionalProperties);
        }
    }
}
