/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ShiftFilter.Builder.class)
public final class ShiftFilter {
    private final Optional<List<String>> locationIds;

    private final Optional<List<String>> employeeIds;

    private final Optional<ShiftFilterStatus> status;

    private final Optional<TimeRange> start;

    private final Optional<TimeRange> end;

    private final Optional<ShiftWorkday> workday;

    private final Optional<List<String>> teamMemberIds;

    private final Map<String, Object> additionalProperties;

    private ShiftFilter(
            Optional<List<String>> locationIds,
            Optional<List<String>> employeeIds,
            Optional<ShiftFilterStatus> status,
            Optional<TimeRange> start,
            Optional<TimeRange> end,
            Optional<ShiftWorkday> workday,
            Optional<List<String>> teamMemberIds,
            Map<String, Object> additionalProperties) {
        this.locationIds = locationIds;
        this.employeeIds = employeeIds;
        this.status = status;
        this.start = start;
        this.end = end;
        this.workday = workday;
        this.teamMemberIds = teamMemberIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Fetch shifts for the specified location.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use <code>team_member_ids</code> instead.
     */
    @JsonIgnore
    public Optional<List<String>> getEmployeeIds() {
        if (employeeIds == null) {
            return Optional.empty();
        }
        return employeeIds;
    }

    /**
     * @return Fetch a <code>Shift</code> instance by <code>Shift.status</code>.
     * See <a href="#type-shiftfilterstatus">ShiftFilterStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<ShiftFilterStatus> getStatus() {
        return status;
    }

    /**
     * @return Fetch <code>Shift</code> instances that start in the time range - Inclusive.
     */
    @JsonProperty("start")
    public Optional<TimeRange> getStart() {
        return start;
    }

    /**
     * @return Fetch the <code>Shift</code> instances that end in the time range - Inclusive.
     */
    @JsonProperty("end")
    public Optional<TimeRange> getEnd() {
        return end;
    }

    /**
     * @return Fetch the <code>Shift</code> instances based on the workday date range.
     */
    @JsonProperty("workday")
    public Optional<ShiftWorkday> getWorkday() {
        return workday;
    }

    /**
     * @return Fetch shifts for the specified team members. Replaced <code>employee_ids</code> at version &quot;2020-08-26&quot;.
     */
    @JsonIgnore
    public Optional<List<String>> getTeamMemberIds() {
        if (teamMemberIds == null) {
            return Optional.empty();
        }
        return teamMemberIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("employee_ids")
    private Optional<List<String>> _getEmployeeIds() {
        return employeeIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_ids")
    private Optional<List<String>> _getTeamMemberIds() {
        return teamMemberIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ShiftFilter && equalTo((ShiftFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ShiftFilter other) {
        return locationIds.equals(other.locationIds)
                && employeeIds.equals(other.employeeIds)
                && status.equals(other.status)
                && start.equals(other.start)
                && end.equals(other.end)
                && workday.equals(other.workday)
                && teamMemberIds.equals(other.teamMemberIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.locationIds,
                this.employeeIds,
                this.status,
                this.start,
                this.end,
                this.workday,
                this.teamMemberIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<List<String>> employeeIds = Optional.empty();

        private Optional<ShiftFilterStatus> status = Optional.empty();

        private Optional<TimeRange> start = Optional.empty();

        private Optional<TimeRange> end = Optional.empty();

        private Optional<ShiftWorkday> workday = Optional.empty();

        private Optional<List<String>> teamMemberIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ShiftFilter other) {
            locationIds(other.getLocationIds());
            employeeIds(other.getEmployeeIds());
            status(other.getStatus());
            start(other.getStart());
            end(other.getEnd());
            workday(other.getWorkday());
            teamMemberIds(other.getTeamMemberIds());
            return this;
        }

        /**
         * <p>Fetch shifts for the specified location.</p>
         */
        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        /**
         * <p>Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use <code>team_member_ids</code> instead.</p>
         */
        @JsonSetter(value = "employee_ids", nulls = Nulls.SKIP)
        public Builder employeeIds(Optional<List<String>> employeeIds) {
            this.employeeIds = employeeIds;
            return this;
        }

        public Builder employeeIds(List<String> employeeIds) {
            this.employeeIds = Optional.ofNullable(employeeIds);
            return this;
        }

        public Builder employeeIds(Nullable<List<String>> employeeIds) {
            if (employeeIds.isNull()) {
                this.employeeIds = null;
            } else if (employeeIds.isEmpty()) {
                this.employeeIds = Optional.empty();
            } else {
                this.employeeIds = Optional.of(employeeIds.get());
            }
            return this;
        }

        /**
         * <p>Fetch a <code>Shift</code> instance by <code>Shift.status</code>.
         * See <a href="#type-shiftfilterstatus">ShiftFilterStatus</a> for possible values</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<ShiftFilterStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(ShiftFilterStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Fetch <code>Shift</code> instances that start in the time range - Inclusive.</p>
         */
        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<TimeRange> start) {
            this.start = start;
            return this;
        }

        public Builder start(TimeRange start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        /**
         * <p>Fetch the <code>Shift</code> instances that end in the time range - Inclusive.</p>
         */
        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<TimeRange> end) {
            this.end = end;
            return this;
        }

        public Builder end(TimeRange end) {
            this.end = Optional.ofNullable(end);
            return this;
        }

        /**
         * <p>Fetch the <code>Shift</code> instances based on the workday date range.</p>
         */
        @JsonSetter(value = "workday", nulls = Nulls.SKIP)
        public Builder workday(Optional<ShiftWorkday> workday) {
            this.workday = workday;
            return this;
        }

        public Builder workday(ShiftWorkday workday) {
            this.workday = Optional.ofNullable(workday);
            return this;
        }

        /**
         * <p>Fetch shifts for the specified team members. Replaced <code>employee_ids</code> at version &quot;2020-08-26&quot;.</p>
         */
        @JsonSetter(value = "team_member_ids", nulls = Nulls.SKIP)
        public Builder teamMemberIds(Optional<List<String>> teamMemberIds) {
            this.teamMemberIds = teamMemberIds;
            return this;
        }

        public Builder teamMemberIds(List<String> teamMemberIds) {
            this.teamMemberIds = Optional.ofNullable(teamMemberIds);
            return this;
        }

        public Builder teamMemberIds(Nullable<List<String>> teamMemberIds) {
            if (teamMemberIds.isNull()) {
                this.teamMemberIds = null;
            } else if (teamMemberIds.isEmpty()) {
                this.teamMemberIds = Optional.empty();
            } else {
                this.teamMemberIds = Optional.of(teamMemberIds.get());
            }
            return this;
        }

        public ShiftFilter build() {
            return new ShiftFilter(
                    locationIds, employeeIds, status, start, end, workday, teamMemberIds, additionalProperties);
        }
    }
}
