/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQuerySet.Builder.class)
public final class CatalogQuerySet {
    private final String attributeName;

    private final List<String> attributeValues;

    private final Map<String, Object> additionalProperties;

    private CatalogQuerySet(
            String attributeName, List<String> attributeValues, Map<String, Object> additionalProperties) {
        this.attributeName = attributeName;
        this.attributeValues = attributeValues;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the attribute to be searched. Matching of the attribute name is exact.
     */
    @JsonProperty("attribute_name")
    public String getAttributeName() {
        return attributeName;
    }

    /**
     * @return The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
     * A maximum of 250 values may be searched in a request.
     */
    @JsonProperty("attribute_values")
    public List<String> getAttributeValues() {
        return attributeValues;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQuerySet && equalTo((CatalogQuerySet) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQuerySet other) {
        return attributeName.equals(other.attributeName) && attributeValues.equals(other.attributeValues);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attributeName, this.attributeValues);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AttributeNameStage builder() {
        return new Builder();
    }

    public interface AttributeNameStage {
        /**
         * <p>The name of the attribute to be searched. Matching of the attribute name is exact.</p>
         */
        _FinalStage attributeName(@NotNull String attributeName);

        Builder from(CatalogQuerySet other);
    }

    public interface _FinalStage {
        CatalogQuerySet build();

        /**
         * <p>The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
         * A maximum of 250 values may be searched in a request.</p>
         */
        _FinalStage attributeValues(List<String> attributeValues);

        _FinalStage addAttributeValues(String attributeValues);

        _FinalStage addAllAttributeValues(List<String> attributeValues);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AttributeNameStage, _FinalStage {
        private String attributeName;

        private List<String> attributeValues = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogQuerySet other) {
            attributeName(other.getAttributeName());
            attributeValues(other.getAttributeValues());
            return this;
        }

        /**
         * <p>The name of the attribute to be searched. Matching of the attribute name is exact.</p>
         * <p>The name of the attribute to be searched. Matching of the attribute name is exact.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("attribute_name")
        public _FinalStage attributeName(@NotNull String attributeName) {
            this.attributeName = Objects.requireNonNull(attributeName, "attributeName must not be null");
            return this;
        }

        /**
         * <p>The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
         * A maximum of 250 values may be searched in a request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllAttributeValues(List<String> attributeValues) {
            this.attributeValues.addAll(attributeValues);
            return this;
        }

        /**
         * <p>The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
         * A maximum of 250 values may be searched in a request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAttributeValues(String attributeValues) {
            this.attributeValues.add(attributeValues);
            return this;
        }

        /**
         * <p>The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
         * A maximum of 250 values may be searched in a request.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "attribute_values", nulls = Nulls.SKIP)
        public _FinalStage attributeValues(List<String> attributeValues) {
            this.attributeValues.clear();
            this.attributeValues.addAll(attributeValues);
            return this;
        }

        @java.lang.Override
        public CatalogQuerySet build() {
            return new CatalogQuerySet(attributeName, attributeValues, additionalProperties);
        }
    }
}
