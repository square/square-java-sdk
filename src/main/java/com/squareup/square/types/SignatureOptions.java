/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SignatureOptions.Builder.class)
public final class SignatureOptions {
    private final String title;

    private final String body;

    private final Optional<List<SignatureImage>> signature;

    private final Map<String, Object> additionalProperties;

    private SignatureOptions(
            String title,
            String body,
            Optional<List<SignatureImage>> signature,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.body = body;
        this.signature = signature;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The title text to display in the signature capture flow on the Terminal.
     */
    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return The body text to display in the signature capture flow on the Terminal.
     */
    @JsonProperty("body")
    public String getBody() {
        return body;
    }

    /**
     * @return An image representation of the collected signature.
     */
    @JsonProperty("signature")
    public Optional<List<SignatureImage>> getSignature() {
        return signature;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SignatureOptions && equalTo((SignatureOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SignatureOptions other) {
        return title.equals(other.title) && body.equals(other.body) && signature.equals(other.signature);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.title, this.body, this.signature);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        /**
         * <p>The title text to display in the signature capture flow on the Terminal.</p>
         */
        BodyStage title(@NotNull String title);

        Builder from(SignatureOptions other);
    }

    public interface BodyStage {
        /**
         * <p>The body text to display in the signature capture flow on the Terminal.</p>
         */
        _FinalStage body(@NotNull String body);
    }

    public interface _FinalStage {
        SignatureOptions build();

        /**
         * <p>An image representation of the collected signature.</p>
         */
        _FinalStage signature(Optional<List<SignatureImage>> signature);

        _FinalStage signature(List<SignatureImage> signature);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TitleStage, BodyStage, _FinalStage {
        private String title;

        private String body;

        private Optional<List<SignatureImage>> signature = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SignatureOptions other) {
            title(other.getTitle());
            body(other.getBody());
            signature(other.getSignature());
            return this;
        }

        /**
         * <p>The title text to display in the signature capture flow on the Terminal.</p>
         * <p>The title text to display in the signature capture flow on the Terminal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public BodyStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>The body text to display in the signature capture flow on the Terminal.</p>
         * <p>The body text to display in the signature capture flow on the Terminal.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull String body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        /**
         * <p>An image representation of the collected signature.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage signature(List<SignatureImage> signature) {
            this.signature = Optional.ofNullable(signature);
            return this;
        }

        /**
         * <p>An image representation of the collected signature.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "signature", nulls = Nulls.SKIP)
        public _FinalStage signature(Optional<List<SignatureImage>> signature) {
            this.signature = signature;
            return this;
        }

        @java.lang.Override
        public SignatureOptions build() {
            return new SignatureOptions(title, body, signature, additionalProperties);
        }
    }
}
