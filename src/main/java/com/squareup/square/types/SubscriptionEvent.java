/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionEvent.Builder.class)
public final class SubscriptionEvent {
    private final String id;

    private final SubscriptionEventSubscriptionEventType subscriptionEventType;

    private final String effectiveDate;

    private final Optional<Integer> monthlyBillingAnchorDate;

    private final Optional<SubscriptionEventInfo> info;

    private final Optional<List<Phase>> phases;

    private final String planVariationId;

    private final Map<String, Object> additionalProperties;

    private SubscriptionEvent(
            String id,
            SubscriptionEventSubscriptionEventType subscriptionEventType,
            String effectiveDate,
            Optional<Integer> monthlyBillingAnchorDate,
            Optional<SubscriptionEventInfo> info,
            Optional<List<Phase>> phases,
            String planVariationId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.subscriptionEventType = subscriptionEventType;
        this.effectiveDate = effectiveDate;
        this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
        this.info = info;
        this.phases = phases;
        this.planVariationId = planVariationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the subscription event.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Type of the subscription event.
     * See <a href="#type-subscriptioneventsubscriptioneventtype">SubscriptionEventSubscriptionEventType</a> for possible values
     */
    @JsonProperty("subscription_event_type")
    public SubscriptionEventSubscriptionEventType getSubscriptionEventType() {
        return subscriptionEventType;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) when the subscription event occurred.
     */
    @JsonProperty("effective_date")
    public String getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * @return The day-of-the-month the billing anchor date was changed to, if applicable.
     */
    @JsonProperty("monthly_billing_anchor_date")
    public Optional<Integer> getMonthlyBillingAnchorDate() {
        return monthlyBillingAnchorDate;
    }

    /**
     * @return Additional information about the subscription event.
     */
    @JsonProperty("info")
    public Optional<SubscriptionEventInfo> getInfo() {
        return info;
    }

    /**
     * @return A list of Phases, to pass phase-specific information used in the swap.
     */
    @JsonIgnore
    public Optional<List<Phase>> getPhases() {
        if (phases == null) {
            return Optional.empty();
        }
        return phases;
    }

    /**
     * @return The ID of the subscription plan variation associated with the subscription.
     */
    @JsonProperty("plan_variation_id")
    public String getPlanVariationId() {
        return planVariationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phases")
    private Optional<List<Phase>> _getPhases() {
        return phases;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionEvent && equalTo((SubscriptionEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionEvent other) {
        return id.equals(other.id)
                && subscriptionEventType.equals(other.subscriptionEventType)
                && effectiveDate.equals(other.effectiveDate)
                && monthlyBillingAnchorDate.equals(other.monthlyBillingAnchorDate)
                && info.equals(other.info)
                && phases.equals(other.phases)
                && planVariationId.equals(other.planVariationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.subscriptionEventType,
                this.effectiveDate,
                this.monthlyBillingAnchorDate,
                this.info,
                this.phases,
                this.planVariationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The ID of the subscription event.</p>
         */
        SubscriptionEventTypeStage id(@NotNull String id);

        Builder from(SubscriptionEvent other);
    }

    public interface SubscriptionEventTypeStage {
        /**
         * <p>Type of the subscription event.
         * See <a href="#type-subscriptioneventsubscriptioneventtype">SubscriptionEventSubscriptionEventType</a> for possible values</p>
         */
        EffectiveDateStage subscriptionEventType(@NotNull SubscriptionEventSubscriptionEventType subscriptionEventType);
    }

    public interface EffectiveDateStage {
        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) when the subscription event occurred.</p>
         */
        PlanVariationIdStage effectiveDate(@NotNull String effectiveDate);
    }

    public interface PlanVariationIdStage {
        /**
         * <p>The ID of the subscription plan variation associated with the subscription.</p>
         */
        _FinalStage planVariationId(@NotNull String planVariationId);
    }

    public interface _FinalStage {
        SubscriptionEvent build();

        /**
         * <p>The day-of-the-month the billing anchor date was changed to, if applicable.</p>
         */
        _FinalStage monthlyBillingAnchorDate(Optional<Integer> monthlyBillingAnchorDate);

        _FinalStage monthlyBillingAnchorDate(Integer monthlyBillingAnchorDate);

        /**
         * <p>Additional information about the subscription event.</p>
         */
        _FinalStage info(Optional<SubscriptionEventInfo> info);

        _FinalStage info(SubscriptionEventInfo info);

        /**
         * <p>A list of Phases, to pass phase-specific information used in the swap.</p>
         */
        _FinalStage phases(Optional<List<Phase>> phases);

        _FinalStage phases(List<Phase> phases);

        _FinalStage phases(Nullable<List<Phase>> phases);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, SubscriptionEventTypeStage, EffectiveDateStage, PlanVariationIdStage, _FinalStage {
        private String id;

        private SubscriptionEventSubscriptionEventType subscriptionEventType;

        private String effectiveDate;

        private String planVariationId;

        private Optional<List<Phase>> phases = Optional.empty();

        private Optional<SubscriptionEventInfo> info = Optional.empty();

        private Optional<Integer> monthlyBillingAnchorDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubscriptionEvent other) {
            id(other.getId());
            subscriptionEventType(other.getSubscriptionEventType());
            effectiveDate(other.getEffectiveDate());
            monthlyBillingAnchorDate(other.getMonthlyBillingAnchorDate());
            info(other.getInfo());
            phases(other.getPhases());
            planVariationId(other.getPlanVariationId());
            return this;
        }

        /**
         * <p>The ID of the subscription event.</p>
         * <p>The ID of the subscription event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public SubscriptionEventTypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Type of the subscription event.
         * See <a href="#type-subscriptioneventsubscriptioneventtype">SubscriptionEventSubscriptionEventType</a> for possible values</p>
         * <p>Type of the subscription event.
         * See <a href="#type-subscriptioneventsubscriptioneventtype">SubscriptionEventSubscriptionEventType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subscription_event_type")
        public EffectiveDateStage subscriptionEventType(
                @NotNull SubscriptionEventSubscriptionEventType subscriptionEventType) {
            this.subscriptionEventType =
                    Objects.requireNonNull(subscriptionEventType, "subscriptionEventType must not be null");
            return this;
        }

        /**
         * <p>The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) when the subscription event occurred.</p>
         * <p>The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) when the subscription event occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("effective_date")
        public PlanVariationIdStage effectiveDate(@NotNull String effectiveDate) {
            this.effectiveDate = Objects.requireNonNull(effectiveDate, "effectiveDate must not be null");
            return this;
        }

        /**
         * <p>The ID of the subscription plan variation associated with the subscription.</p>
         * <p>The ID of the subscription plan variation associated with the subscription.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("plan_variation_id")
        public _FinalStage planVariationId(@NotNull String planVariationId) {
            this.planVariationId = Objects.requireNonNull(planVariationId, "planVariationId must not be null");
            return this;
        }

        /**
         * <p>A list of Phases, to pass phase-specific information used in the swap.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phases(Nullable<List<Phase>> phases) {
            if (phases.isNull()) {
                this.phases = null;
            } else if (phases.isEmpty()) {
                this.phases = Optional.empty();
            } else {
                this.phases = Optional.of(phases.get());
            }
            return this;
        }

        /**
         * <p>A list of Phases, to pass phase-specific information used in the swap.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phases(List<Phase> phases) {
            this.phases = Optional.ofNullable(phases);
            return this;
        }

        /**
         * <p>A list of Phases, to pass phase-specific information used in the swap.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "phases", nulls = Nulls.SKIP)
        public _FinalStage phases(Optional<List<Phase>> phases) {
            this.phases = phases;
            return this;
        }

        /**
         * <p>Additional information about the subscription event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage info(SubscriptionEventInfo info) {
            this.info = Optional.ofNullable(info);
            return this;
        }

        /**
         * <p>Additional information about the subscription event.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "info", nulls = Nulls.SKIP)
        public _FinalStage info(Optional<SubscriptionEventInfo> info) {
            this.info = info;
            return this;
        }

        /**
         * <p>The day-of-the-month the billing anchor date was changed to, if applicable.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage monthlyBillingAnchorDate(Integer monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = Optional.ofNullable(monthlyBillingAnchorDate);
            return this;
        }

        /**
         * <p>The day-of-the-month the billing anchor date was changed to, if applicable.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "monthly_billing_anchor_date", nulls = Nulls.SKIP)
        public _FinalStage monthlyBillingAnchorDate(Optional<Integer> monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
            return this;
        }

        @java.lang.Override
        public SubscriptionEvent build() {
            return new SubscriptionEvent(
                    id,
                    subscriptionEventType,
                    effectiveDate,
                    monthlyBillingAnchorDate,
                    info,
                    phases,
                    planVariationId,
                    additionalProperties);
        }
    }
}
