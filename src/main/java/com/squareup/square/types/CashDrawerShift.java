/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CashDrawerShift.Builder.class)
public final class CashDrawerShift {
    private final Optional<String> id;

    private final Optional<CashDrawerShiftState> state;

    private final Optional<String> openedAt;

    private final Optional<String> endedAt;

    private final Optional<String> closedAt;

    private final Optional<String> description;

    private final Optional<Money> openedCashMoney;

    private final Optional<Money> cashPaymentMoney;

    private final Optional<Money> cashRefundsMoney;

    private final Optional<Money> cashPaidInMoney;

    private final Optional<Money> cashPaidOutMoney;

    private final Optional<Money> expectedCashMoney;

    private final Optional<Money> closedCashMoney;

    private final Optional<CashDrawerDevice> device;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> locationId;

    private final Optional<List<String>> teamMemberIds;

    private final Optional<String> openingTeamMemberId;

    private final Optional<String> endingTeamMemberId;

    private final Optional<String> closingTeamMemberId;

    private final Map<String, Object> additionalProperties;

    private CashDrawerShift(
            Optional<String> id,
            Optional<CashDrawerShiftState> state,
            Optional<String> openedAt,
            Optional<String> endedAt,
            Optional<String> closedAt,
            Optional<String> description,
            Optional<Money> openedCashMoney,
            Optional<Money> cashPaymentMoney,
            Optional<Money> cashRefundsMoney,
            Optional<Money> cashPaidInMoney,
            Optional<Money> cashPaidOutMoney,
            Optional<Money> expectedCashMoney,
            Optional<Money> closedCashMoney,
            Optional<CashDrawerDevice> device,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> locationId,
            Optional<List<String>> teamMemberIds,
            Optional<String> openingTeamMemberId,
            Optional<String> endingTeamMemberId,
            Optional<String> closingTeamMemberId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.state = state;
        this.openedAt = openedAt;
        this.endedAt = endedAt;
        this.closedAt = closedAt;
        this.description = description;
        this.openedCashMoney = openedCashMoney;
        this.cashPaymentMoney = cashPaymentMoney;
        this.cashRefundsMoney = cashRefundsMoney;
        this.cashPaidInMoney = cashPaidInMoney;
        this.cashPaidOutMoney = cashPaidOutMoney;
        this.expectedCashMoney = expectedCashMoney;
        this.closedCashMoney = closedCashMoney;
        this.device = device;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.locationId = locationId;
        this.teamMemberIds = teamMemberIds;
        this.openingTeamMemberId = openingTeamMemberId;
        this.endingTeamMemberId = endingTeamMemberId;
        this.closingTeamMemberId = closingTeamMemberId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The shift unique ID.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The shift current state.
     * See <a href="#type-cashdrawershiftstate">CashDrawerShiftState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<CashDrawerShiftState> getState() {
        return state;
    }

    /**
     * @return The time when the shift began, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getOpenedAt() {
        if (openedAt == null) {
            return Optional.empty();
        }
        return openedAt;
    }

    /**
     * @return The time when the shift ended, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getEndedAt() {
        if (endedAt == null) {
            return Optional.empty();
        }
        return endedAt;
    }

    /**
     * @return The time when the shift was closed, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getClosedAt() {
        if (closedAt == null) {
            return Optional.empty();
        }
        return closedAt;
    }

    /**
     * @return The free-form text description of a cash drawer by an employee.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The amount of money in the cash drawer at the start of the shift.
     * The amount must be greater than or equal to zero.
     */
    @JsonProperty("opened_cash_money")
    public Optional<Money> getOpenedCashMoney() {
        return openedCashMoney;
    }

    /**
     * @return The amount of money added to the cash drawer from cash payments.
     * This is computed by summing all events with the types CASH_TENDER_PAYMENT and
     * CASH_TENDER_CANCELED_PAYMENT. The amount is always greater than or equal to
     * zero.
     */
    @JsonProperty("cash_payment_money")
    public Optional<Money> getCashPaymentMoney() {
        return cashPaymentMoney;
    }

    /**
     * @return The amount of money removed from the cash drawer from cash refunds.
     * It is computed by summing the events of type CASH_TENDER_REFUND. The amount
     * is always greater than or equal to zero.
     */
    @JsonProperty("cash_refunds_money")
    public Optional<Money> getCashRefundsMoney() {
        return cashRefundsMoney;
    }

    /**
     * @return The amount of money added to the cash drawer for reasons other than cash
     * payments. It is computed by summing the events of type PAID_IN. The amount is
     * always greater than or equal to zero.
     */
    @JsonProperty("cash_paid_in_money")
    public Optional<Money> getCashPaidInMoney() {
        return cashPaidInMoney;
    }

    /**
     * @return The amount of money removed from the cash drawer for reasons other than
     * cash refunds. It is computed by summing the events of type PAID_OUT. The amount
     * is always greater than or equal to zero.
     */
    @JsonProperty("cash_paid_out_money")
    public Optional<Money> getCashPaidOutMoney() {
        return cashPaidOutMoney;
    }

    /**
     * @return The amount of money that should be in the cash drawer at the end of the
     * shift, based on the shift's other money amounts.
     * This can be negative if employees have not correctly recorded all the events
     * on the cash drawer.
     * cash_paid_out_money is a summation of amounts from cash_payment_money (zero
     * or positive), cash_refunds_money (zero or negative), cash_paid_in_money (zero
     * or positive), and cash_paid_out_money (zero or negative) event types.
     */
    @JsonProperty("expected_cash_money")
    public Optional<Money> getExpectedCashMoney() {
        return expectedCashMoney;
    }

    /**
     * @return The amount of money found in the cash drawer at the end of the shift
     * by an auditing employee. The amount should be positive.
     */
    @JsonProperty("closed_cash_money")
    public Optional<Money> getClosedCashMoney() {
        return closedCashMoney;
    }

    /**
     * @return The device running Square Point of Sale that was connected to the cash drawer.
     */
    @JsonProperty("device")
    public Optional<CashDrawerDevice> getDevice() {
        return device;
    }

    /**
     * @return The shift start time in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The shift updated at time in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the location the cash drawer shift belongs to.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    /**
     * @return The IDs of all team members that were logged into Square Point of Sale at any
     * point while the cash drawer shift was open.
     */
    @JsonProperty("team_member_ids")
    public Optional<List<String>> getTeamMemberIds() {
        return teamMemberIds;
    }

    /**
     * @return The ID of the team member that started the cash drawer shift.
     */
    @JsonProperty("opening_team_member_id")
    public Optional<String> getOpeningTeamMemberId() {
        return openingTeamMemberId;
    }

    /**
     * @return The ID of the team member that ended the cash drawer shift.
     */
    @JsonProperty("ending_team_member_id")
    public Optional<String> getEndingTeamMemberId() {
        return endingTeamMemberId;
    }

    /**
     * @return The ID of the team member that closed the cash drawer shift by auditing
     * the cash drawer contents.
     */
    @JsonProperty("closing_team_member_id")
    public Optional<String> getClosingTeamMemberId() {
        return closingTeamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("opened_at")
    private Optional<String> _getOpenedAt() {
        return openedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ended_at")
    private Optional<String> _getEndedAt() {
        return endedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("closed_at")
    private Optional<String> _getClosedAt() {
        return closedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CashDrawerShift && equalTo((CashDrawerShift) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CashDrawerShift other) {
        return id.equals(other.id)
                && state.equals(other.state)
                && openedAt.equals(other.openedAt)
                && endedAt.equals(other.endedAt)
                && closedAt.equals(other.closedAt)
                && description.equals(other.description)
                && openedCashMoney.equals(other.openedCashMoney)
                && cashPaymentMoney.equals(other.cashPaymentMoney)
                && cashRefundsMoney.equals(other.cashRefundsMoney)
                && cashPaidInMoney.equals(other.cashPaidInMoney)
                && cashPaidOutMoney.equals(other.cashPaidOutMoney)
                && expectedCashMoney.equals(other.expectedCashMoney)
                && closedCashMoney.equals(other.closedCashMoney)
                && device.equals(other.device)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && locationId.equals(other.locationId)
                && teamMemberIds.equals(other.teamMemberIds)
                && openingTeamMemberId.equals(other.openingTeamMemberId)
                && endingTeamMemberId.equals(other.endingTeamMemberId)
                && closingTeamMemberId.equals(other.closingTeamMemberId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.state,
                this.openedAt,
                this.endedAt,
                this.closedAt,
                this.description,
                this.openedCashMoney,
                this.cashPaymentMoney,
                this.cashRefundsMoney,
                this.cashPaidInMoney,
                this.cashPaidOutMoney,
                this.expectedCashMoney,
                this.closedCashMoney,
                this.device,
                this.createdAt,
                this.updatedAt,
                this.locationId,
                this.teamMemberIds,
                this.openingTeamMemberId,
                this.endingTeamMemberId,
                this.closingTeamMemberId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<CashDrawerShiftState> state = Optional.empty();

        private Optional<String> openedAt = Optional.empty();

        private Optional<String> endedAt = Optional.empty();

        private Optional<String> closedAt = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Money> openedCashMoney = Optional.empty();

        private Optional<Money> cashPaymentMoney = Optional.empty();

        private Optional<Money> cashRefundsMoney = Optional.empty();

        private Optional<Money> cashPaidInMoney = Optional.empty();

        private Optional<Money> cashPaidOutMoney = Optional.empty();

        private Optional<Money> expectedCashMoney = Optional.empty();

        private Optional<Money> closedCashMoney = Optional.empty();

        private Optional<CashDrawerDevice> device = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<List<String>> teamMemberIds = Optional.empty();

        private Optional<String> openingTeamMemberId = Optional.empty();

        private Optional<String> endingTeamMemberId = Optional.empty();

        private Optional<String> closingTeamMemberId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CashDrawerShift other) {
            id(other.getId());
            state(other.getState());
            openedAt(other.getOpenedAt());
            endedAt(other.getEndedAt());
            closedAt(other.getClosedAt());
            description(other.getDescription());
            openedCashMoney(other.getOpenedCashMoney());
            cashPaymentMoney(other.getCashPaymentMoney());
            cashRefundsMoney(other.getCashRefundsMoney());
            cashPaidInMoney(other.getCashPaidInMoney());
            cashPaidOutMoney(other.getCashPaidOutMoney());
            expectedCashMoney(other.getExpectedCashMoney());
            closedCashMoney(other.getClosedCashMoney());
            device(other.getDevice());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            locationId(other.getLocationId());
            teamMemberIds(other.getTeamMemberIds());
            openingTeamMemberId(other.getOpeningTeamMemberId());
            endingTeamMemberId(other.getEndingTeamMemberId());
            closingTeamMemberId(other.getClosingTeamMemberId());
            return this;
        }

        /**
         * <p>The shift unique ID.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The shift current state.
         * See <a href="#type-cashdrawershiftstate">CashDrawerShiftState</a> for possible values</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<CashDrawerShiftState> state) {
            this.state = state;
            return this;
        }

        public Builder state(CashDrawerShiftState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>The time when the shift began, in ISO 8601 format.</p>
         */
        @JsonSetter(value = "opened_at", nulls = Nulls.SKIP)
        public Builder openedAt(Optional<String> openedAt) {
            this.openedAt = openedAt;
            return this;
        }

        public Builder openedAt(String openedAt) {
            this.openedAt = Optional.ofNullable(openedAt);
            return this;
        }

        public Builder openedAt(Nullable<String> openedAt) {
            if (openedAt.isNull()) {
                this.openedAt = null;
            } else if (openedAt.isEmpty()) {
                this.openedAt = Optional.empty();
            } else {
                this.openedAt = Optional.of(openedAt.get());
            }
            return this;
        }

        /**
         * <p>The time when the shift ended, in ISO 8601 format.</p>
         */
        @JsonSetter(value = "ended_at", nulls = Nulls.SKIP)
        public Builder endedAt(Optional<String> endedAt) {
            this.endedAt = endedAt;
            return this;
        }

        public Builder endedAt(String endedAt) {
            this.endedAt = Optional.ofNullable(endedAt);
            return this;
        }

        public Builder endedAt(Nullable<String> endedAt) {
            if (endedAt.isNull()) {
                this.endedAt = null;
            } else if (endedAt.isEmpty()) {
                this.endedAt = Optional.empty();
            } else {
                this.endedAt = Optional.of(endedAt.get());
            }
            return this;
        }

        /**
         * <p>The time when the shift was closed, in ISO 8601 format.</p>
         */
        @JsonSetter(value = "closed_at", nulls = Nulls.SKIP)
        public Builder closedAt(Optional<String> closedAt) {
            this.closedAt = closedAt;
            return this;
        }

        public Builder closedAt(String closedAt) {
            this.closedAt = Optional.ofNullable(closedAt);
            return this;
        }

        public Builder closedAt(Nullable<String> closedAt) {
            if (closedAt.isNull()) {
                this.closedAt = null;
            } else if (closedAt.isEmpty()) {
                this.closedAt = Optional.empty();
            } else {
                this.closedAt = Optional.of(closedAt.get());
            }
            return this;
        }

        /**
         * <p>The free-form text description of a cash drawer by an employee.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        /**
         * <p>The amount of money in the cash drawer at the start of the shift.
         * The amount must be greater than or equal to zero.</p>
         */
        @JsonSetter(value = "opened_cash_money", nulls = Nulls.SKIP)
        public Builder openedCashMoney(Optional<Money> openedCashMoney) {
            this.openedCashMoney = openedCashMoney;
            return this;
        }

        public Builder openedCashMoney(Money openedCashMoney) {
            this.openedCashMoney = Optional.ofNullable(openedCashMoney);
            return this;
        }

        /**
         * <p>The amount of money added to the cash drawer from cash payments.
         * This is computed by summing all events with the types CASH_TENDER_PAYMENT and
         * CASH_TENDER_CANCELED_PAYMENT. The amount is always greater than or equal to
         * zero.</p>
         */
        @JsonSetter(value = "cash_payment_money", nulls = Nulls.SKIP)
        public Builder cashPaymentMoney(Optional<Money> cashPaymentMoney) {
            this.cashPaymentMoney = cashPaymentMoney;
            return this;
        }

        public Builder cashPaymentMoney(Money cashPaymentMoney) {
            this.cashPaymentMoney = Optional.ofNullable(cashPaymentMoney);
            return this;
        }

        /**
         * <p>The amount of money removed from the cash drawer from cash refunds.
         * It is computed by summing the events of type CASH_TENDER_REFUND. The amount
         * is always greater than or equal to zero.</p>
         */
        @JsonSetter(value = "cash_refunds_money", nulls = Nulls.SKIP)
        public Builder cashRefundsMoney(Optional<Money> cashRefundsMoney) {
            this.cashRefundsMoney = cashRefundsMoney;
            return this;
        }

        public Builder cashRefundsMoney(Money cashRefundsMoney) {
            this.cashRefundsMoney = Optional.ofNullable(cashRefundsMoney);
            return this;
        }

        /**
         * <p>The amount of money added to the cash drawer for reasons other than cash
         * payments. It is computed by summing the events of type PAID_IN. The amount is
         * always greater than or equal to zero.</p>
         */
        @JsonSetter(value = "cash_paid_in_money", nulls = Nulls.SKIP)
        public Builder cashPaidInMoney(Optional<Money> cashPaidInMoney) {
            this.cashPaidInMoney = cashPaidInMoney;
            return this;
        }

        public Builder cashPaidInMoney(Money cashPaidInMoney) {
            this.cashPaidInMoney = Optional.ofNullable(cashPaidInMoney);
            return this;
        }

        /**
         * <p>The amount of money removed from the cash drawer for reasons other than
         * cash refunds. It is computed by summing the events of type PAID_OUT. The amount
         * is always greater than or equal to zero.</p>
         */
        @JsonSetter(value = "cash_paid_out_money", nulls = Nulls.SKIP)
        public Builder cashPaidOutMoney(Optional<Money> cashPaidOutMoney) {
            this.cashPaidOutMoney = cashPaidOutMoney;
            return this;
        }

        public Builder cashPaidOutMoney(Money cashPaidOutMoney) {
            this.cashPaidOutMoney = Optional.ofNullable(cashPaidOutMoney);
            return this;
        }

        /**
         * <p>The amount of money that should be in the cash drawer at the end of the
         * shift, based on the shift's other money amounts.
         * This can be negative if employees have not correctly recorded all the events
         * on the cash drawer.
         * cash_paid_out_money is a summation of amounts from cash_payment_money (zero
         * or positive), cash_refunds_money (zero or negative), cash_paid_in_money (zero
         * or positive), and cash_paid_out_money (zero or negative) event types.</p>
         */
        @JsonSetter(value = "expected_cash_money", nulls = Nulls.SKIP)
        public Builder expectedCashMoney(Optional<Money> expectedCashMoney) {
            this.expectedCashMoney = expectedCashMoney;
            return this;
        }

        public Builder expectedCashMoney(Money expectedCashMoney) {
            this.expectedCashMoney = Optional.ofNullable(expectedCashMoney);
            return this;
        }

        /**
         * <p>The amount of money found in the cash drawer at the end of the shift
         * by an auditing employee. The amount should be positive.</p>
         */
        @JsonSetter(value = "closed_cash_money", nulls = Nulls.SKIP)
        public Builder closedCashMoney(Optional<Money> closedCashMoney) {
            this.closedCashMoney = closedCashMoney;
            return this;
        }

        public Builder closedCashMoney(Money closedCashMoney) {
            this.closedCashMoney = Optional.ofNullable(closedCashMoney);
            return this;
        }

        /**
         * <p>The device running Square Point of Sale that was connected to the cash drawer.</p>
         */
        @JsonSetter(value = "device", nulls = Nulls.SKIP)
        public Builder device(Optional<CashDrawerDevice> device) {
            this.device = device;
            return this;
        }

        public Builder device(CashDrawerDevice device) {
            this.device = Optional.ofNullable(device);
            return this;
        }

        /**
         * <p>The shift start time in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The shift updated at time in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The ID of the location the cash drawer shift belongs to.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        /**
         * <p>The IDs of all team members that were logged into Square Point of Sale at any
         * point while the cash drawer shift was open.</p>
         */
        @JsonSetter(value = "team_member_ids", nulls = Nulls.SKIP)
        public Builder teamMemberIds(Optional<List<String>> teamMemberIds) {
            this.teamMemberIds = teamMemberIds;
            return this;
        }

        public Builder teamMemberIds(List<String> teamMemberIds) {
            this.teamMemberIds = Optional.ofNullable(teamMemberIds);
            return this;
        }

        /**
         * <p>The ID of the team member that started the cash drawer shift.</p>
         */
        @JsonSetter(value = "opening_team_member_id", nulls = Nulls.SKIP)
        public Builder openingTeamMemberId(Optional<String> openingTeamMemberId) {
            this.openingTeamMemberId = openingTeamMemberId;
            return this;
        }

        public Builder openingTeamMemberId(String openingTeamMemberId) {
            this.openingTeamMemberId = Optional.ofNullable(openingTeamMemberId);
            return this;
        }

        /**
         * <p>The ID of the team member that ended the cash drawer shift.</p>
         */
        @JsonSetter(value = "ending_team_member_id", nulls = Nulls.SKIP)
        public Builder endingTeamMemberId(Optional<String> endingTeamMemberId) {
            this.endingTeamMemberId = endingTeamMemberId;
            return this;
        }

        public Builder endingTeamMemberId(String endingTeamMemberId) {
            this.endingTeamMemberId = Optional.ofNullable(endingTeamMemberId);
            return this;
        }

        /**
         * <p>The ID of the team member that closed the cash drawer shift by auditing
         * the cash drawer contents.</p>
         */
        @JsonSetter(value = "closing_team_member_id", nulls = Nulls.SKIP)
        public Builder closingTeamMemberId(Optional<String> closingTeamMemberId) {
            this.closingTeamMemberId = closingTeamMemberId;
            return this;
        }

        public Builder closingTeamMemberId(String closingTeamMemberId) {
            this.closingTeamMemberId = Optional.ofNullable(closingTeamMemberId);
            return this;
        }

        public CashDrawerShift build() {
            return new CashDrawerShift(
                    id,
                    state,
                    openedAt,
                    endedAt,
                    closedAt,
                    description,
                    openedCashMoney,
                    cashPaymentMoney,
                    cashRefundsMoney,
                    cashPaidInMoney,
                    cashPaidOutMoney,
                    expectedCashMoney,
                    closedCashMoney,
                    device,
                    createdAt,
                    updatedAt,
                    locationId,
                    teamMemberIds,
                    openingTeamMemberId,
                    endingTeamMemberId,
                    closingTeamMemberId,
                    additionalProperties);
        }
    }
}
