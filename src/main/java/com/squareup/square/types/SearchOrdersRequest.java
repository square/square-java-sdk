/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchOrdersRequest.Builder.class)
public final class SearchOrdersRequest {
    private final Optional<List<String>> locationIds;

    private final Optional<String> cursor;

    private final Optional<SearchOrdersQuery> query;

    private final Optional<Integer> limit;

    private final Optional<Boolean> returnEntries;

    private final Map<String, Object> additionalProperties;

    private SearchOrdersRequest(
            Optional<List<String>> locationIds,
            Optional<String> cursor,
            Optional<SearchOrdersQuery> query,
            Optional<Integer> limit,
            Optional<Boolean> returnEntries,
            Map<String, Object> additionalProperties) {
        this.locationIds = locationIds;
        this.cursor = cursor;
        this.query = query;
        this.limit = limit;
        this.returnEntries = returnEntries;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The location IDs for the orders to query. All locations must belong to
     * the same merchant.
     * <p>Max: 10 location IDs.</p>
     */
    @JsonProperty("location_ids")
    public Optional<List<String>> getLocationIds() {
        return locationIds;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for your original query.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return Query conditions used to filter or sort the results. Note that when
     * retrieving additional pages using a cursor, you must use the original query.
     */
    @JsonProperty("query")
    public Optional<SearchOrdersQuery> getQuery() {
        return query;
    }

    /**
     * @return The maximum number of results to be returned in a single page.
     * <p>Default: <code>500</code>
     * Max: <code>1000</code></p>
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return A Boolean that controls the format of the search results. If <code>true</code>,
     * <code>SearchOrders</code> returns <a href="entity:OrderEntry">OrderEntry</a> objects. If <code>false</code>, <code>SearchOrders</code>
     * returns complete order objects.
     * <p>Default: <code>false</code>.</p>
     */
    @JsonProperty("return_entries")
    public Optional<Boolean> getReturnEntries() {
        return returnEntries;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchOrdersRequest && equalTo((SearchOrdersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchOrdersRequest other) {
        return locationIds.equals(other.locationIds)
                && cursor.equals(other.cursor)
                && query.equals(other.query)
                && limit.equals(other.limit)
                && returnEntries.equals(other.returnEntries);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationIds, this.cursor, this.query, this.limit, this.returnEntries);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<SearchOrdersQuery> query = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Boolean> returnEntries = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchOrdersRequest other) {
            locationIds(other.getLocationIds());
            cursor(other.getCursor());
            query(other.getQuery());
            limit(other.getLimit());
            returnEntries(other.getReturnEntries());
            return this;
        }

        /**
         * <p>The location IDs for the orders to query. All locations must belong to
         * the same merchant.</p>
         * <p>Max: 10 location IDs.</p>
         */
        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for your original query.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * <p>Query conditions used to filter or sort the results. Note that when
         * retrieving additional pages using a cursor, you must use the original query.</p>
         */
        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<SearchOrdersQuery> query) {
            this.query = query;
            return this;
        }

        public Builder query(SearchOrdersQuery query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * <p>The maximum number of results to be returned in a single page.</p>
         * <p>Default: <code>500</code>
         * Max: <code>1000</code></p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>A Boolean that controls the format of the search results. If <code>true</code>,
         * <code>SearchOrders</code> returns <a href="entity:OrderEntry">OrderEntry</a> objects. If <code>false</code>, <code>SearchOrders</code>
         * returns complete order objects.</p>
         * <p>Default: <code>false</code>.</p>
         */
        @JsonSetter(value = "return_entries", nulls = Nulls.SKIP)
        public Builder returnEntries(Optional<Boolean> returnEntries) {
            this.returnEntries = returnEntries;
            return this;
        }

        public Builder returnEntries(Boolean returnEntries) {
            this.returnEntries = Optional.ofNullable(returnEntries);
            return this;
        }

        public SearchOrdersRequest build() {
            return new SearchOrdersRequest(locationIds, cursor, query, limit, returnEntries, additionalProperties);
        }
    }
}
