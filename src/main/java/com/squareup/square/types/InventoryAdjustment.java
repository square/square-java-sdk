/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InventoryAdjustment.Builder.class)
public final class InventoryAdjustment {
    private final Optional<String> id;

    private final Optional<String> referenceId;

    private final Optional<InventoryState> fromState;

    private final Optional<InventoryState> toState;

    private final Optional<String> locationId;

    private final Optional<String> catalogObjectId;

    private final Optional<String> catalogObjectType;

    private final Optional<String> quantity;

    private final Optional<Money> totalPriceMoney;

    private final Optional<String> occurredAt;

    private final Optional<String> createdAt;

    private final Optional<SourceApplication> source;

    private final Optional<String> employeeId;

    private final Optional<String> teamMemberId;

    private final Optional<String> transactionId;

    private final Optional<String> refundId;

    private final Optional<String> purchaseOrderId;

    private final Optional<String> goodsReceiptId;

    private final Optional<InventoryAdjustmentGroup> adjustmentGroup;

    private final Map<String, Object> additionalProperties;

    private InventoryAdjustment(
            Optional<String> id,
            Optional<String> referenceId,
            Optional<InventoryState> fromState,
            Optional<InventoryState> toState,
            Optional<String> locationId,
            Optional<String> catalogObjectId,
            Optional<String> catalogObjectType,
            Optional<String> quantity,
            Optional<Money> totalPriceMoney,
            Optional<String> occurredAt,
            Optional<String> createdAt,
            Optional<SourceApplication> source,
            Optional<String> employeeId,
            Optional<String> teamMemberId,
            Optional<String> transactionId,
            Optional<String> refundId,
            Optional<String> purchaseOrderId,
            Optional<String> goodsReceiptId,
            Optional<InventoryAdjustmentGroup> adjustmentGroup,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.referenceId = referenceId;
        this.fromState = fromState;
        this.toState = toState;
        this.locationId = locationId;
        this.catalogObjectId = catalogObjectId;
        this.catalogObjectType = catalogObjectType;
        this.quantity = quantity;
        this.totalPriceMoney = totalPriceMoney;
        this.occurredAt = occurredAt;
        this.createdAt = createdAt;
        this.source = source;
        this.employeeId = employeeId;
        this.teamMemberId = teamMemberId;
        this.transactionId = transactionId;
        this.refundId = refundId;
        this.purchaseOrderId = purchaseOrderId;
        this.goodsReceiptId = goodsReceiptId;
        this.adjustmentGroup = adjustmentGroup;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID generated by Square for the
     * <code>InventoryAdjustment</code>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return An optional ID provided by the application to tie the
     * <code>InventoryAdjustment</code> to an external
     * system.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The <a href="entity:InventoryState">inventory state</a> of the related quantity
     * of items before the adjustment.
     * See <a href="#type-inventorystate">InventoryState</a> for possible values
     */
    @JsonProperty("from_state")
    public Optional<InventoryState> getFromState() {
        return fromState;
    }

    /**
     * @return The <a href="entity:InventoryState">inventory state</a> of the related quantity
     * of items after the adjustment.
     * See <a href="#type-inventorystate">InventoryState</a> for possible values
     */
    @JsonProperty("to_state")
    public Optional<InventoryState> getToState() {
        return toState;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Location">Location</a> where the related
     * quantity of items is being tracked.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The Square-generated ID of the
     * <a href="entity:CatalogObject">CatalogObject</a> being tracked.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The <a href="entity:CatalogObjectType">type</a> of the <a href="entity:CatalogObject">CatalogObject</a> being tracked.
     * <p>The Inventory API supports setting and reading the <code>&quot;catalog_object_type&quot;: &quot;ITEM_VARIATION&quot;</code> field value.
     * In addition, it can also read the <code>&quot;catalog_object_type&quot;: &quot;ITEM&quot;</code> field value that is set by the Square Restaurants app.</p>
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectType() {
        if (catalogObjectType == null) {
            return Optional.empty();
        }
        return catalogObjectType;
    }

    /**
     * @return The number of items affected by the adjustment as a decimal string.
     * Can support up to 5 digits after the decimal point.
     */
    @JsonIgnore
    public Optional<String> getQuantity() {
        if (quantity == null) {
            return Optional.empty();
        }
        return quantity;
    }

    /**
     * @return The total price paid for goods associated with the
     * adjustment. Present if and only if <code>to_state</code> is <code>SOLD</code>. Always
     * non-negative.
     */
    @JsonProperty("total_price_money")
    public Optional<Money> getTotalPriceMoney() {
        return totalPriceMoney;
    }

    /**
     * @return A client-generated RFC 3339-formatted timestamp that indicates when
     * the inventory adjustment took place. For inventory adjustment updates, the <code>occurred_at</code>
     * timestamp cannot be older than 24 hours or in the future relative to the
     * time of the request.
     */
    @JsonIgnore
    public Optional<String> getOccurredAt() {
        if (occurredAt == null) {
            return Optional.empty();
        }
        return occurredAt;
    }

    /**
     * @return An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Information about the application that caused the
     * inventory adjustment.
     */
    @JsonProperty("source")
    public Optional<SourceApplication> getSource() {
        return source;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Employee">Employee</a> responsible for the
     * inventory adjustment.
     */
    @JsonIgnore
    public Optional<String> getEmployeeId() {
        if (employeeId == null) {
            return Optional.empty();
        }
        return employeeId;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:TeamMember">Team Member</a> responsible for the
     * inventory adjustment.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Transaction">Transaction</a> that
     * caused the adjustment. Only relevant for payment-related state
     * transitions.
     */
    @JsonProperty("transaction_id")
    public Optional<String> getTransactionId() {
        return transactionId;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Refund">Refund</a> that
     * caused the adjustment. Only relevant for refund-related state
     * transitions.
     */
    @JsonProperty("refund_id")
    public Optional<String> getRefundId() {
        return refundId;
    }

    /**
     * @return The Square-generated ID of the purchase order that caused the
     * adjustment. Only relevant for state transitions from the Square for Retail
     * app.
     */
    @JsonProperty("purchase_order_id")
    public Optional<String> getPurchaseOrderId() {
        return purchaseOrderId;
    }

    /**
     * @return The Square-generated ID of the goods receipt that caused the
     * adjustment. Only relevant for state transitions from the Square for Retail
     * app.
     */
    @JsonProperty("goods_receipt_id")
    public Optional<String> getGoodsReceiptId() {
        return goodsReceiptId;
    }

    /**
     * @return An adjustment group bundling the related adjustments of item variations through stock conversions in a single inventory event.
     */
    @JsonProperty("adjustment_group")
    public Optional<InventoryAdjustmentGroup> getAdjustmentGroup() {
        return adjustmentGroup;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_type")
    private Optional<String> _getCatalogObjectType() {
        return catalogObjectType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity")
    private Optional<String> _getQuantity() {
        return quantity;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("occurred_at")
    private Optional<String> _getOccurredAt() {
        return occurredAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("employee_id")
    private Optional<String> _getEmployeeId() {
        return employeeId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InventoryAdjustment && equalTo((InventoryAdjustment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InventoryAdjustment other) {
        return id.equals(other.id)
                && referenceId.equals(other.referenceId)
                && fromState.equals(other.fromState)
                && toState.equals(other.toState)
                && locationId.equals(other.locationId)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogObjectType.equals(other.catalogObjectType)
                && quantity.equals(other.quantity)
                && totalPriceMoney.equals(other.totalPriceMoney)
                && occurredAt.equals(other.occurredAt)
                && createdAt.equals(other.createdAt)
                && source.equals(other.source)
                && employeeId.equals(other.employeeId)
                && teamMemberId.equals(other.teamMemberId)
                && transactionId.equals(other.transactionId)
                && refundId.equals(other.refundId)
                && purchaseOrderId.equals(other.purchaseOrderId)
                && goodsReceiptId.equals(other.goodsReceiptId)
                && adjustmentGroup.equals(other.adjustmentGroup);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.referenceId,
                this.fromState,
                this.toState,
                this.locationId,
                this.catalogObjectId,
                this.catalogObjectType,
                this.quantity,
                this.totalPriceMoney,
                this.occurredAt,
                this.createdAt,
                this.source,
                this.employeeId,
                this.teamMemberId,
                this.transactionId,
                this.refundId,
                this.purchaseOrderId,
                this.goodsReceiptId,
                this.adjustmentGroup);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<InventoryState> fromState = Optional.empty();

        private Optional<InventoryState> toState = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<String> catalogObjectType = Optional.empty();

        private Optional<String> quantity = Optional.empty();

        private Optional<Money> totalPriceMoney = Optional.empty();

        private Optional<String> occurredAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<SourceApplication> source = Optional.empty();

        private Optional<String> employeeId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> refundId = Optional.empty();

        private Optional<String> purchaseOrderId = Optional.empty();

        private Optional<String> goodsReceiptId = Optional.empty();

        private Optional<InventoryAdjustmentGroup> adjustmentGroup = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InventoryAdjustment other) {
            id(other.getId());
            referenceId(other.getReferenceId());
            fromState(other.getFromState());
            toState(other.getToState());
            locationId(other.getLocationId());
            catalogObjectId(other.getCatalogObjectId());
            catalogObjectType(other.getCatalogObjectType());
            quantity(other.getQuantity());
            totalPriceMoney(other.getTotalPriceMoney());
            occurredAt(other.getOccurredAt());
            createdAt(other.getCreatedAt());
            source(other.getSource());
            employeeId(other.getEmployeeId());
            teamMemberId(other.getTeamMemberId());
            transactionId(other.getTransactionId());
            refundId(other.getRefundId());
            purchaseOrderId(other.getPurchaseOrderId());
            goodsReceiptId(other.getGoodsReceiptId());
            adjustmentGroup(other.getAdjustmentGroup());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        @JsonSetter(value = "from_state", nulls = Nulls.SKIP)
        public Builder fromState(Optional<InventoryState> fromState) {
            this.fromState = fromState;
            return this;
        }

        public Builder fromState(InventoryState fromState) {
            this.fromState = Optional.ofNullable(fromState);
            return this;
        }

        @JsonSetter(value = "to_state", nulls = Nulls.SKIP)
        public Builder toState(Optional<InventoryState> toState) {
            this.toState = toState;
            return this;
        }

        public Builder toState(InventoryState toState) {
            this.toState = Optional.ofNullable(toState);
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        @JsonSetter(value = "catalog_object_type", nulls = Nulls.SKIP)
        public Builder catalogObjectType(Optional<String> catalogObjectType) {
            this.catalogObjectType = catalogObjectType;
            return this;
        }

        public Builder catalogObjectType(String catalogObjectType) {
            this.catalogObjectType = Optional.ofNullable(catalogObjectType);
            return this;
        }

        public Builder catalogObjectType(Nullable<String> catalogObjectType) {
            if (catalogObjectType.isNull()) {
                this.catalogObjectType = null;
            } else if (catalogObjectType.isEmpty()) {
                this.catalogObjectType = Optional.empty();
            } else {
                this.catalogObjectType = Optional.of(catalogObjectType.get());
            }
            return this;
        }

        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<String> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(String quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        public Builder quantity(Nullable<String> quantity) {
            if (quantity.isNull()) {
                this.quantity = null;
            } else if (quantity.isEmpty()) {
                this.quantity = Optional.empty();
            } else {
                this.quantity = Optional.of(quantity.get());
            }
            return this;
        }

        @JsonSetter(value = "total_price_money", nulls = Nulls.SKIP)
        public Builder totalPriceMoney(Optional<Money> totalPriceMoney) {
            this.totalPriceMoney = totalPriceMoney;
            return this;
        }

        public Builder totalPriceMoney(Money totalPriceMoney) {
            this.totalPriceMoney = Optional.ofNullable(totalPriceMoney);
            return this;
        }

        @JsonSetter(value = "occurred_at", nulls = Nulls.SKIP)
        public Builder occurredAt(Optional<String> occurredAt) {
            this.occurredAt = occurredAt;
            return this;
        }

        public Builder occurredAt(String occurredAt) {
            this.occurredAt = Optional.ofNullable(occurredAt);
            return this;
        }

        public Builder occurredAt(Nullable<String> occurredAt) {
            if (occurredAt.isNull()) {
                this.occurredAt = null;
            } else if (occurredAt.isEmpty()) {
                this.occurredAt = Optional.empty();
            } else {
                this.occurredAt = Optional.of(occurredAt.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<SourceApplication> source) {
            this.source = source;
            return this;
        }

        public Builder source(SourceApplication source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "employee_id", nulls = Nulls.SKIP)
        public Builder employeeId(Optional<String> employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        public Builder employeeId(Nullable<String> employeeId) {
            if (employeeId.isNull()) {
                this.employeeId = null;
            } else if (employeeId.isEmpty()) {
                this.employeeId = Optional.empty();
            } else {
                this.employeeId = Optional.of(employeeId.get());
            }
            return this;
        }

        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        @JsonSetter(value = "transaction_id", nulls = Nulls.SKIP)
        public Builder transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public Builder transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        @JsonSetter(value = "refund_id", nulls = Nulls.SKIP)
        public Builder refundId(Optional<String> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(String refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        @JsonSetter(value = "purchase_order_id", nulls = Nulls.SKIP)
        public Builder purchaseOrderId(Optional<String> purchaseOrderId) {
            this.purchaseOrderId = purchaseOrderId;
            return this;
        }

        public Builder purchaseOrderId(String purchaseOrderId) {
            this.purchaseOrderId = Optional.ofNullable(purchaseOrderId);
            return this;
        }

        @JsonSetter(value = "goods_receipt_id", nulls = Nulls.SKIP)
        public Builder goodsReceiptId(Optional<String> goodsReceiptId) {
            this.goodsReceiptId = goodsReceiptId;
            return this;
        }

        public Builder goodsReceiptId(String goodsReceiptId) {
            this.goodsReceiptId = Optional.ofNullable(goodsReceiptId);
            return this;
        }

        @JsonSetter(value = "adjustment_group", nulls = Nulls.SKIP)
        public Builder adjustmentGroup(Optional<InventoryAdjustmentGroup> adjustmentGroup) {
            this.adjustmentGroup = adjustmentGroup;
            return this;
        }

        public Builder adjustmentGroup(InventoryAdjustmentGroup adjustmentGroup) {
            this.adjustmentGroup = Optional.ofNullable(adjustmentGroup);
            return this;
        }

        public InventoryAdjustment build() {
            return new InventoryAdjustment(
                    id,
                    referenceId,
                    fromState,
                    toState,
                    locationId,
                    catalogObjectId,
                    catalogObjectType,
                    quantity,
                    totalPriceMoney,
                    occurredAt,
                    createdAt,
                    source,
                    employeeId,
                    teamMemberId,
                    transactionId,
                    refundId,
                    purchaseOrderId,
                    goodsReceiptId,
                    adjustmentGroup,
                    additionalProperties);
        }
    }
}
