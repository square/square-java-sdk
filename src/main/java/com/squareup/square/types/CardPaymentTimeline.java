/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardPaymentTimeline.Builder.class)
public final class CardPaymentTimeline {
    private final Optional<String> authorizedAt;

    private final Optional<String> capturedAt;

    private final Optional<String> voidedAt;

    private final Map<String, Object> additionalProperties;

    private CardPaymentTimeline(
            Optional<String> authorizedAt,
            Optional<String> capturedAt,
            Optional<String> voidedAt,
            Map<String, Object> additionalProperties) {
        this.authorizedAt = authorizedAt;
        this.capturedAt = capturedAt;
        this.voidedAt = voidedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The timestamp when the payment was authorized, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getAuthorizedAt() {
        if (authorizedAt == null) {
            return Optional.empty();
        }
        return authorizedAt;
    }

    /**
     * @return The timestamp when the payment was captured, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getCapturedAt() {
        if (capturedAt == null) {
            return Optional.empty();
        }
        return capturedAt;
    }

    /**
     * @return The timestamp when the payment was voided, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getVoidedAt() {
        if (voidedAt == null) {
            return Optional.empty();
        }
        return voidedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("authorized_at")
    private Optional<String> _getAuthorizedAt() {
        return authorizedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("captured_at")
    private Optional<String> _getCapturedAt() {
        return capturedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("voided_at")
    private Optional<String> _getVoidedAt() {
        return voidedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardPaymentTimeline && equalTo((CardPaymentTimeline) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardPaymentTimeline other) {
        return authorizedAt.equals(other.authorizedAt)
                && capturedAt.equals(other.capturedAt)
                && voidedAt.equals(other.voidedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.authorizedAt, this.capturedAt, this.voidedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> authorizedAt = Optional.empty();

        private Optional<String> capturedAt = Optional.empty();

        private Optional<String> voidedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardPaymentTimeline other) {
            authorizedAt(other.getAuthorizedAt());
            capturedAt(other.getCapturedAt());
            voidedAt(other.getVoidedAt());
            return this;
        }

        /**
         * <p>The timestamp when the payment was authorized, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "authorized_at", nulls = Nulls.SKIP)
        public Builder authorizedAt(Optional<String> authorizedAt) {
            this.authorizedAt = authorizedAt;
            return this;
        }

        public Builder authorizedAt(String authorizedAt) {
            this.authorizedAt = Optional.ofNullable(authorizedAt);
            return this;
        }

        public Builder authorizedAt(Nullable<String> authorizedAt) {
            if (authorizedAt.isNull()) {
                this.authorizedAt = null;
            } else if (authorizedAt.isEmpty()) {
                this.authorizedAt = Optional.empty();
            } else {
                this.authorizedAt = Optional.of(authorizedAt.get());
            }
            return this;
        }

        /**
         * <p>The timestamp when the payment was captured, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "captured_at", nulls = Nulls.SKIP)
        public Builder capturedAt(Optional<String> capturedAt) {
            this.capturedAt = capturedAt;
            return this;
        }

        public Builder capturedAt(String capturedAt) {
            this.capturedAt = Optional.ofNullable(capturedAt);
            return this;
        }

        public Builder capturedAt(Nullable<String> capturedAt) {
            if (capturedAt.isNull()) {
                this.capturedAt = null;
            } else if (capturedAt.isEmpty()) {
                this.capturedAt = Optional.empty();
            } else {
                this.capturedAt = Optional.of(capturedAt.get());
            }
            return this;
        }

        /**
         * <p>The timestamp when the payment was voided, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "voided_at", nulls = Nulls.SKIP)
        public Builder voidedAt(Optional<String> voidedAt) {
            this.voidedAt = voidedAt;
            return this;
        }

        public Builder voidedAt(String voidedAt) {
            this.voidedAt = Optional.ofNullable(voidedAt);
            return this;
        }

        public Builder voidedAt(Nullable<String> voidedAt) {
            if (voidedAt.isNull()) {
                this.voidedAt = null;
            } else if (voidedAt.isEmpty()) {
                this.voidedAt = Optional.empty();
            } else {
                this.voidedAt = Optional.of(voidedAt.get());
            }
            return this;
        }

        public CardPaymentTimeline build() {
            return new CardPaymentTimeline(authorizedAt, capturedAt, voidedAt, additionalProperties);
        }
    }
}
