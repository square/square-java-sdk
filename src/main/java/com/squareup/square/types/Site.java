/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Site.Builder.class)
public final class Site {
    private final Optional<String> id;

    private final Optional<String> siteTitle;

    private final Optional<String> domain;

    private final Optional<Boolean> isPublished;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private Site(
            Optional<String> id,
            Optional<String> siteTitle,
            Optional<String> domain,
            Optional<Boolean> isPublished,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.siteTitle = siteTitle;
        this.domain = domain;
        this.isPublished = isPublished;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the site.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The title of the site.
     */
    @JsonIgnore
    public Optional<String> getSiteTitle() {
        if (siteTitle == null) {
            return Optional.empty();
        }
        return siteTitle;
    }

    /**
     * @return The domain of the site (without the protocol). For example, <code>mysite1.square.site</code>.
     */
    @JsonIgnore
    public Optional<String> getDomain() {
        if (domain == null) {
            return Optional.empty();
        }
        return domain;
    }

    /**
     * @return Indicates whether the site is published.
     */
    @JsonIgnore
    public Optional<Boolean> getIsPublished() {
        if (isPublished == null) {
            return Optional.empty();
        }
        return isPublished;
    }

    /**
     * @return The timestamp of when the site was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the site was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("site_title")
    private Optional<String> _getSiteTitle() {
        return siteTitle;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("domain")
    private Optional<String> _getDomain() {
        return domain;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_published")
    private Optional<Boolean> _getIsPublished() {
        return isPublished;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Site && equalTo((Site) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Site other) {
        return id.equals(other.id)
                && siteTitle.equals(other.siteTitle)
                && domain.equals(other.domain)
                && isPublished.equals(other.isPublished)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.siteTitle, this.domain, this.isPublished, this.createdAt, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> siteTitle = Optional.empty();

        private Optional<String> domain = Optional.empty();

        private Optional<Boolean> isPublished = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Site other) {
            id(other.getId());
            siteTitle(other.getSiteTitle());
            domain(other.getDomain());
            isPublished(other.getIsPublished());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "site_title", nulls = Nulls.SKIP)
        public Builder siteTitle(Optional<String> siteTitle) {
            this.siteTitle = siteTitle;
            return this;
        }

        public Builder siteTitle(String siteTitle) {
            this.siteTitle = Optional.ofNullable(siteTitle);
            return this;
        }

        public Builder siteTitle(Nullable<String> siteTitle) {
            if (siteTitle.isNull()) {
                this.siteTitle = null;
            } else if (siteTitle.isEmpty()) {
                this.siteTitle = Optional.empty();
            } else {
                this.siteTitle = Optional.of(siteTitle.get());
            }
            return this;
        }

        @JsonSetter(value = "domain", nulls = Nulls.SKIP)
        public Builder domain(Optional<String> domain) {
            this.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        public Builder domain(Nullable<String> domain) {
            if (domain.isNull()) {
                this.domain = null;
            } else if (domain.isEmpty()) {
                this.domain = Optional.empty();
            } else {
                this.domain = Optional.of(domain.get());
            }
            return this;
        }

        @JsonSetter(value = "is_published", nulls = Nulls.SKIP)
        public Builder isPublished(Optional<Boolean> isPublished) {
            this.isPublished = isPublished;
            return this;
        }

        public Builder isPublished(Boolean isPublished) {
            this.isPublished = Optional.ofNullable(isPublished);
            return this;
        }

        public Builder isPublished(Nullable<Boolean> isPublished) {
            if (isPublished.isNull()) {
                this.isPublished = null;
            } else if (isPublished.isEmpty()) {
                this.isPublished = Optional.empty();
            } else {
                this.isPublished = Optional.of(isPublished.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Site build() {
            return new Site(id, siteTitle, domain, isPublished, createdAt, updatedAt, additionalProperties);
        }
    }
}
