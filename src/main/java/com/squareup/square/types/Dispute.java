/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Dispute.Builder.class)
public final class Dispute {
    private final Optional<String> disputeId;

    private final Optional<String> id;

    private final Optional<Money> amountMoney;

    private final Optional<DisputeReason> reason;

    private final Optional<DisputeState> state;

    private final Optional<String> dueAt;

    private final Optional<DisputedPayment> disputedPayment;

    private final Optional<List<String>> evidenceIds;

    private final Optional<CardBrand> cardBrand;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> brandDisputeId;

    private final Optional<String> reportedDate;

    private final Optional<String> reportedAt;

    private final Optional<Integer> version;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private Dispute(
            Optional<String> disputeId,
            Optional<String> id,
            Optional<Money> amountMoney,
            Optional<DisputeReason> reason,
            Optional<DisputeState> state,
            Optional<String> dueAt,
            Optional<DisputedPayment> disputedPayment,
            Optional<List<String>> evidenceIds,
            Optional<CardBrand> cardBrand,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> brandDisputeId,
            Optional<String> reportedDate,
            Optional<String> reportedAt,
            Optional<Integer> version,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.disputeId = disputeId;
        this.id = id;
        this.amountMoney = amountMoney;
        this.reason = reason;
        this.state = state;
        this.dueAt = dueAt;
        this.disputedPayment = disputedPayment;
        this.evidenceIds = evidenceIds;
        this.cardBrand = cardBrand;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.brandDisputeId = brandDisputeId;
        this.reportedDate = reportedDate;
        this.reportedAt = reportedAt;
        this.version = version;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID for this <code>Dispute</code>, generated by Square.
     */
    @JsonIgnore
    public Optional<String> getDisputeId() {
        if (disputeId == null) {
            return Optional.empty();
        }
        return disputeId;
    }

    /**
     * @return The unique ID for this <code>Dispute</code>, generated by Square.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The disputed amount, which can be less than the total transaction amount.
     * For instance, if multiple items were purchased but the cardholder only initiates a dispute over some of the items.
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The reason why the cardholder initiated the dispute.
     * See <a href="#type-disputereason">DisputeReason</a> for possible values
     */
    @JsonProperty("reason")
    public Optional<DisputeReason> getReason() {
        return reason;
    }

    /**
     * @return The current state of this dispute.
     * See <a href="#type-disputestate">DisputeState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<DisputeState> getState() {
        return state;
    }

    /**
     * @return The deadline by which the seller must respond to the dispute, in <a href="https://developer.squareup.com/docs/build-basics/common-data-types/working-with-dates">RFC 3339 format</a>.
     */
    @JsonIgnore
    public Optional<String> getDueAt() {
        if (dueAt == null) {
            return Optional.empty();
        }
        return dueAt;
    }

    /**
     * @return The payment challenged in this dispute.
     */
    @JsonProperty("disputed_payment")
    public Optional<DisputedPayment> getDisputedPayment() {
        return disputedPayment;
    }

    /**
     * @return The IDs of the evidence associated with the dispute.
     */
    @JsonIgnore
    public Optional<List<String>> getEvidenceIds() {
        if (evidenceIds == null) {
            return Optional.empty();
        }
        return evidenceIds;
    }

    /**
     * @return The card brand used in the disputed payment.
     * See <a href="#type-cardbrand">CardBrand</a> for possible values
     */
    @JsonProperty("card_brand")
    public Optional<CardBrand> getCardBrand() {
        return cardBrand;
    }

    /**
     * @return The timestamp when the dispute was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the dispute was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The ID of the dispute in the card brand system, generated by the card brand.
     */
    @JsonIgnore
    public Optional<String> getBrandDisputeId() {
        if (brandDisputeId == null) {
            return Optional.empty();
        }
        return brandDisputeId;
    }

    /**
     * @return The timestamp when the dispute was reported, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getReportedDate() {
        if (reportedDate == null) {
            return Optional.empty();
        }
        return reportedDate;
    }

    /**
     * @return The timestamp when the dispute was reported, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getReportedAt() {
        if (reportedAt == null) {
            return Optional.empty();
        }
        return reportedAt;
    }

    /**
     * @return The current version of the <code>Dispute</code>.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The ID of the location where the dispute originated.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("dispute_id")
    private Optional<String> _getDisputeId() {
        return disputeId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("due_at")
    private Optional<String> _getDueAt() {
        return dueAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("evidence_ids")
    private Optional<List<String>> _getEvidenceIds() {
        return evidenceIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("brand_dispute_id")
    private Optional<String> _getBrandDisputeId() {
        return brandDisputeId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reported_date")
    private Optional<String> _getReportedDate() {
        return reportedDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reported_at")
    private Optional<String> _getReportedAt() {
        return reportedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Dispute && equalTo((Dispute) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Dispute other) {
        return disputeId.equals(other.disputeId)
                && id.equals(other.id)
                && amountMoney.equals(other.amountMoney)
                && reason.equals(other.reason)
                && state.equals(other.state)
                && dueAt.equals(other.dueAt)
                && disputedPayment.equals(other.disputedPayment)
                && evidenceIds.equals(other.evidenceIds)
                && cardBrand.equals(other.cardBrand)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && brandDisputeId.equals(other.brandDisputeId)
                && reportedDate.equals(other.reportedDate)
                && reportedAt.equals(other.reportedAt)
                && version.equals(other.version)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.disputeId,
                this.id,
                this.amountMoney,
                this.reason,
                this.state,
                this.dueAt,
                this.disputedPayment,
                this.evidenceIds,
                this.cardBrand,
                this.createdAt,
                this.updatedAt,
                this.brandDisputeId,
                this.reportedDate,
                this.reportedAt,
                this.version,
                this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> disputeId = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<DisputeReason> reason = Optional.empty();

        private Optional<DisputeState> state = Optional.empty();

        private Optional<String> dueAt = Optional.empty();

        private Optional<DisputedPayment> disputedPayment = Optional.empty();

        private Optional<List<String>> evidenceIds = Optional.empty();

        private Optional<CardBrand> cardBrand = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> brandDisputeId = Optional.empty();

        private Optional<String> reportedDate = Optional.empty();

        private Optional<String> reportedAt = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Dispute other) {
            disputeId(other.getDisputeId());
            id(other.getId());
            amountMoney(other.getAmountMoney());
            reason(other.getReason());
            state(other.getState());
            dueAt(other.getDueAt());
            disputedPayment(other.getDisputedPayment());
            evidenceIds(other.getEvidenceIds());
            cardBrand(other.getCardBrand());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            brandDisputeId(other.getBrandDisputeId());
            reportedDate(other.getReportedDate());
            reportedAt(other.getReportedAt());
            version(other.getVersion());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The unique ID for this <code>Dispute</code>, generated by Square.</p>
         */
        @JsonSetter(value = "dispute_id", nulls = Nulls.SKIP)
        public Builder disputeId(Optional<String> disputeId) {
            this.disputeId = disputeId;
            return this;
        }

        public Builder disputeId(String disputeId) {
            this.disputeId = Optional.ofNullable(disputeId);
            return this;
        }

        public Builder disputeId(Nullable<String> disputeId) {
            if (disputeId.isNull()) {
                this.disputeId = null;
            } else if (disputeId.isEmpty()) {
                this.disputeId = Optional.empty();
            } else {
                this.disputeId = Optional.of(disputeId.get());
            }
            return this;
        }

        /**
         * <p>The unique ID for this <code>Dispute</code>, generated by Square.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The disputed amount, which can be less than the total transaction amount.
         * For instance, if multiple items were purchased but the cardholder only initiates a dispute over some of the items.</p>
         */
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The reason why the cardholder initiated the dispute.
         * See <a href="#type-disputereason">DisputeReason</a> for possible values</p>
         */
        @JsonSetter(value = "reason", nulls = Nulls.SKIP)
        public Builder reason(Optional<DisputeReason> reason) {
            this.reason = reason;
            return this;
        }

        public Builder reason(DisputeReason reason) {
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * <p>The current state of this dispute.
         * See <a href="#type-disputestate">DisputeState</a> for possible values</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<DisputeState> state) {
            this.state = state;
            return this;
        }

        public Builder state(DisputeState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>The deadline by which the seller must respond to the dispute, in <a href="https://developer.squareup.com/docs/build-basics/common-data-types/working-with-dates">RFC 3339 format</a>.</p>
         */
        @JsonSetter(value = "due_at", nulls = Nulls.SKIP)
        public Builder dueAt(Optional<String> dueAt) {
            this.dueAt = dueAt;
            return this;
        }

        public Builder dueAt(String dueAt) {
            this.dueAt = Optional.ofNullable(dueAt);
            return this;
        }

        public Builder dueAt(Nullable<String> dueAt) {
            if (dueAt.isNull()) {
                this.dueAt = null;
            } else if (dueAt.isEmpty()) {
                this.dueAt = Optional.empty();
            } else {
                this.dueAt = Optional.of(dueAt.get());
            }
            return this;
        }

        /**
         * <p>The payment challenged in this dispute.</p>
         */
        @JsonSetter(value = "disputed_payment", nulls = Nulls.SKIP)
        public Builder disputedPayment(Optional<DisputedPayment> disputedPayment) {
            this.disputedPayment = disputedPayment;
            return this;
        }

        public Builder disputedPayment(DisputedPayment disputedPayment) {
            this.disputedPayment = Optional.ofNullable(disputedPayment);
            return this;
        }

        /**
         * <p>The IDs of the evidence associated with the dispute.</p>
         */
        @JsonSetter(value = "evidence_ids", nulls = Nulls.SKIP)
        public Builder evidenceIds(Optional<List<String>> evidenceIds) {
            this.evidenceIds = evidenceIds;
            return this;
        }

        public Builder evidenceIds(List<String> evidenceIds) {
            this.evidenceIds = Optional.ofNullable(evidenceIds);
            return this;
        }

        public Builder evidenceIds(Nullable<List<String>> evidenceIds) {
            if (evidenceIds.isNull()) {
                this.evidenceIds = null;
            } else if (evidenceIds.isEmpty()) {
                this.evidenceIds = Optional.empty();
            } else {
                this.evidenceIds = Optional.of(evidenceIds.get());
            }
            return this;
        }

        /**
         * <p>The card brand used in the disputed payment.
         * See <a href="#type-cardbrand">CardBrand</a> for possible values</p>
         */
        @JsonSetter(value = "card_brand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<CardBrand> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(CardBrand cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        /**
         * <p>The timestamp when the dispute was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp when the dispute was last updated, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The ID of the dispute in the card brand system, generated by the card brand.</p>
         */
        @JsonSetter(value = "brand_dispute_id", nulls = Nulls.SKIP)
        public Builder brandDisputeId(Optional<String> brandDisputeId) {
            this.brandDisputeId = brandDisputeId;
            return this;
        }

        public Builder brandDisputeId(String brandDisputeId) {
            this.brandDisputeId = Optional.ofNullable(brandDisputeId);
            return this;
        }

        public Builder brandDisputeId(Nullable<String> brandDisputeId) {
            if (brandDisputeId.isNull()) {
                this.brandDisputeId = null;
            } else if (brandDisputeId.isEmpty()) {
                this.brandDisputeId = Optional.empty();
            } else {
                this.brandDisputeId = Optional.of(brandDisputeId.get());
            }
            return this;
        }

        /**
         * <p>The timestamp when the dispute was reported, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "reported_date", nulls = Nulls.SKIP)
        public Builder reportedDate(Optional<String> reportedDate) {
            this.reportedDate = reportedDate;
            return this;
        }

        public Builder reportedDate(String reportedDate) {
            this.reportedDate = Optional.ofNullable(reportedDate);
            return this;
        }

        public Builder reportedDate(Nullable<String> reportedDate) {
            if (reportedDate.isNull()) {
                this.reportedDate = null;
            } else if (reportedDate.isEmpty()) {
                this.reportedDate = Optional.empty();
            } else {
                this.reportedDate = Optional.of(reportedDate.get());
            }
            return this;
        }

        /**
         * <p>The timestamp when the dispute was reported, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "reported_at", nulls = Nulls.SKIP)
        public Builder reportedAt(Optional<String> reportedAt) {
            this.reportedAt = reportedAt;
            return this;
        }

        public Builder reportedAt(String reportedAt) {
            this.reportedAt = Optional.ofNullable(reportedAt);
            return this;
        }

        public Builder reportedAt(Nullable<String> reportedAt) {
            if (reportedAt.isNull()) {
                this.reportedAt = null;
            } else if (reportedAt.isEmpty()) {
                this.reportedAt = Optional.empty();
            } else {
                this.reportedAt = Optional.of(reportedAt.get());
            }
            return this;
        }

        /**
         * <p>The current version of the <code>Dispute</code>.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The ID of the location where the dispute originated.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        public Dispute build() {
            return new Dispute(
                    disputeId,
                    id,
                    amountMoney,
                    reason,
                    state,
                    dueAt,
                    disputedPayment,
                    evidenceIds,
                    cardBrand,
                    createdAt,
                    updatedAt,
                    brandDisputeId,
                    reportedDate,
                    reportedAt,
                    version,
                    locationId,
                    additionalProperties);
        }
    }
}
