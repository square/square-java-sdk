/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateEvidenceFileDisputesRequest.Builder.class)
public final class CreateEvidenceFileDisputesRequest {
    private final Optional<File> imageFile;

    private final String disputeId;

    private final Optional<CreateDisputeEvidenceFileRequest> request;

    private final Map<String, Object> additionalProperties;

    private CreateEvidenceFileDisputesRequest(
            Optional<File> imageFile,
            String disputeId,
            Optional<CreateDisputeEvidenceFileRequest> request,
            Map<String, Object> additionalProperties) {
        this.imageFile = imageFile;
        this.disputeId = disputeId;
        this.request = request;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("image_file")
    public Optional<File> getImageFile() {
        return imageFile;
    }

    /**
     * @return The ID of the dispute for which you want to upload evidence.
     */
    @JsonProperty("dispute_id")
    public String getDisputeId() {
        return disputeId;
    }

    @JsonProperty("request")
    public Optional<CreateDisputeEvidenceFileRequest> getRequest() {
        return request;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateEvidenceFileDisputesRequest && equalTo((CreateEvidenceFileDisputesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateEvidenceFileDisputesRequest other) {
        return imageFile.equals(other.imageFile) && disputeId.equals(other.disputeId) && request.equals(other.request);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.imageFile, this.disputeId, this.request);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DisputeIdStage builder() {
        return new Builder();
    }

    public interface DisputeIdStage {
        /**
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         */
        _FinalStage disputeId(@NotNull String disputeId);

        Builder from(CreateEvidenceFileDisputesRequest other);
    }

    public interface _FinalStage {
        CreateEvidenceFileDisputesRequest build();

        _FinalStage imageFile(Optional<File> imageFile);

        _FinalStage imageFile(File imageFile);

        _FinalStage request(Optional<CreateDisputeEvidenceFileRequest> request);

        _FinalStage request(CreateDisputeEvidenceFileRequest request);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DisputeIdStage, _FinalStage {
        private String disputeId;

        private Optional<CreateDisputeEvidenceFileRequest> request = Optional.empty();

        private Optional<File> imageFile = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateEvidenceFileDisputesRequest other) {
            imageFile(other.getImageFile());
            disputeId(other.getDisputeId());
            request(other.getRequest());
            return this;
        }

        /**
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         * <p>The ID of the dispute for which you want to upload evidence.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dispute_id")
        public _FinalStage disputeId(@NotNull String disputeId) {
            this.disputeId = Objects.requireNonNull(disputeId, "disputeId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage request(CreateDisputeEvidenceFileRequest request) {
            this.request = Optional.ofNullable(request);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "request", nulls = Nulls.SKIP)
        public _FinalStage request(Optional<CreateDisputeEvidenceFileRequest> request) {
            this.request = request;
            return this;
        }

        @java.lang.Override
        public _FinalStage imageFile(File imageFile) {
            this.imageFile = Optional.ofNullable(imageFile);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "image_file", nulls = Nulls.SKIP)
        public _FinalStage imageFile(Optional<File> imageFile) {
            this.imageFile = imageFile;
            return this;
        }

        @java.lang.Override
        public CreateEvidenceFileDisputesRequest build() {
            return new CreateEvidenceFileDisputesRequest(imageFile, disputeId, request, additionalProperties);
        }
    }
}
