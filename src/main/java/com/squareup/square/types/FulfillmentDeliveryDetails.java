/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FulfillmentDeliveryDetails.Builder.class)
public final class FulfillmentDeliveryDetails {
    private final Optional<FulfillmentRecipient> recipient;

    private final Optional<FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType> scheduleType;

    private final Optional<String> placedAt;

    private final Optional<String> deliverAt;

    private final Optional<String> prepTimeDuration;

    private final Optional<String> deliveryWindowDuration;

    private final Optional<String> note;

    private final Optional<String> completedAt;

    private final Optional<String> inProgressAt;

    private final Optional<String> rejectedAt;

    private final Optional<String> readyAt;

    private final Optional<String> deliveredAt;

    private final Optional<String> canceledAt;

    private final Optional<String> cancelReason;

    private final Optional<String> courierPickupAt;

    private final Optional<String> courierPickupWindowDuration;

    private final Optional<Boolean> isNoContactDelivery;

    private final Optional<String> dropoffNotes;

    private final Optional<String> courierProviderName;

    private final Optional<String> courierSupportPhoneNumber;

    private final Optional<String> squareDeliveryId;

    private final Optional<String> externalDeliveryId;

    private final Optional<Boolean> managedDelivery;

    private final Map<String, Object> additionalProperties;

    private FulfillmentDeliveryDetails(
            Optional<FulfillmentRecipient> recipient,
            Optional<FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType> scheduleType,
            Optional<String> placedAt,
            Optional<String> deliverAt,
            Optional<String> prepTimeDuration,
            Optional<String> deliveryWindowDuration,
            Optional<String> note,
            Optional<String> completedAt,
            Optional<String> inProgressAt,
            Optional<String> rejectedAt,
            Optional<String> readyAt,
            Optional<String> deliveredAt,
            Optional<String> canceledAt,
            Optional<String> cancelReason,
            Optional<String> courierPickupAt,
            Optional<String> courierPickupWindowDuration,
            Optional<Boolean> isNoContactDelivery,
            Optional<String> dropoffNotes,
            Optional<String> courierProviderName,
            Optional<String> courierSupportPhoneNumber,
            Optional<String> squareDeliveryId,
            Optional<String> externalDeliveryId,
            Optional<Boolean> managedDelivery,
            Map<String, Object> additionalProperties) {
        this.recipient = recipient;
        this.scheduleType = scheduleType;
        this.placedAt = placedAt;
        this.deliverAt = deliverAt;
        this.prepTimeDuration = prepTimeDuration;
        this.deliveryWindowDuration = deliveryWindowDuration;
        this.note = note;
        this.completedAt = completedAt;
        this.inProgressAt = inProgressAt;
        this.rejectedAt = rejectedAt;
        this.readyAt = readyAt;
        this.deliveredAt = deliveredAt;
        this.canceledAt = canceledAt;
        this.cancelReason = cancelReason;
        this.courierPickupAt = courierPickupAt;
        this.courierPickupWindowDuration = courierPickupWindowDuration;
        this.isNoContactDelivery = isNoContactDelivery;
        this.dropoffNotes = dropoffNotes;
        this.courierProviderName = courierProviderName;
        this.courierSupportPhoneNumber = courierSupportPhoneNumber;
        this.squareDeliveryId = squareDeliveryId;
        this.externalDeliveryId = externalDeliveryId;
        this.managedDelivery = managedDelivery;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The contact information for the person to receive the fulfillment.
     */
    @JsonProperty("recipient")
    public Optional<FulfillmentRecipient> getRecipient() {
        return recipient;
    }

    /**
     * @return Indicates the fulfillment delivery schedule type. If <code>SCHEDULED</code>, then
     * <code>deliver_at</code> is required. If <code>ASAP</code>, then <code>prep_time_duration</code> is required. The default is <code>SCHEDULED</code>.
     * See <a href="#type-orderfulfillmentdeliverydetailsscheduletype">OrderFulfillmentDeliveryDetailsScheduleType</a> for possible values
     */
    @JsonProperty("schedule_type")
    public Optional<FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType> getScheduleType() {
        return scheduleType;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was placed.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     * <p>Must be in RFC 3339 timestamp format, e.g., &quot;2016-09-04T23:59:33.123Z&quot;.</p>
     */
    @JsonProperty("placed_at")
    public Optional<String> getPlacedAt() {
        return placedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * that represents the start of the delivery period.
     * When the fulfillment <code>schedule_type</code> is <code>ASAP</code>, the field is automatically
     * set to the current time plus the <code>prep_time_duration</code>.
     * Otherwise, the application can set this field while the fulfillment <code>state</code> is
     * <code>PROPOSED</code>, <code>RESERVED</code>, or <code>PREPARED</code> (any time before the
     * terminal state such as <code>COMPLETED</code>, <code>CANCELED</code>, and <code>FAILED</code>).
     * <p>The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
     */
    @JsonIgnore
    public Optional<String> getDeliverAt() {
        if (deliverAt == null) {
            return Optional.empty();
        }
        return deliverAt;
    }

    /**
     * @return The duration of time it takes to prepare and deliver this fulfillment.
     * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).
     */
    @JsonIgnore
    public Optional<String> getPrepTimeDuration() {
        if (prepTimeDuration == null) {
            return Optional.empty();
        }
        return prepTimeDuration;
    }

    /**
     * @return The time period after <code>deliver_at</code> in which to deliver the order.
     * Applications can set this field when the fulfillment <code>state</code> is
     * <code>PROPOSED</code>, <code>RESERVED</code>, or <code>PREPARED</code> (any time before the terminal state
     * such as <code>COMPLETED</code>, <code>CANCELED</code>, and <code>FAILED</code>).
     * <p>The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
     */
    @JsonIgnore
    public Optional<String> getDeliveryWindowDuration() {
        if (deliveryWindowDuration == null) {
            return Optional.empty();
        }
        return deliveryWindowDuration;
    }

    /**
     * @return Provides additional instructions about the delivery fulfillment.
     * It is displayed in the Square Point of Sale application and set by the API.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicates when the seller completed the fulfillment.
     * This field is automatically set when  fulfillment <code>state</code> changes to <code>COMPLETED</code>.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonIgnore
    public Optional<String> getCompletedAt() {
        if (completedAt == null) {
            return Optional.empty();
        }
        return completedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicates when the seller started processing the fulfillment.
     * This field is automatically set when the fulfillment <code>state</code> changes to <code>RESERVED</code>.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("in_progress_at")
    public Optional<String> getInProgressAt() {
        return inProgressAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was rejected. This field is
     * automatically set when the fulfillment <code>state</code> changes to <code>FAILED</code>.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("rejected_at")
    public Optional<String> getRejectedAt() {
        return rejectedAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the seller marked the fulfillment as ready for
     * courier pickup. This field is automatically set when the fulfillment <code>state</code> changes
     * to PREPARED.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("ready_at")
    public Optional<String> getReadyAt() {
        return readyAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was delivered to the recipient.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonProperty("delivered_at")
    public Optional<String> getDeliveredAt() {
        return deliveredAt;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the fulfillment was canceled. This field is automatically
     * set when the fulfillment <code>state</code> changes to <code>CANCELED</code>.
     * <p>The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
     */
    @JsonProperty("canceled_at")
    public Optional<String> getCanceledAt() {
        return canceledAt;
    }

    /**
     * @return The delivery cancellation reason. Max length: 100 characters.
     */
    @JsonIgnore
    public Optional<String> getCancelReason() {
        if (cancelReason == null) {
            return Optional.empty();
        }
        return cancelReason;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when an order can be picked up by the courier for delivery.
     * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonIgnore
    public Optional<String> getCourierPickupAt() {
        if (courierPickupAt == null) {
            return Optional.empty();
        }
        return courierPickupAt;
    }

    /**
     * @return The time period after <code>courier_pickup_at</code> in which the courier should pick up the order.
     * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).
     */
    @JsonIgnore
    public Optional<String> getCourierPickupWindowDuration() {
        if (courierPickupWindowDuration == null) {
            return Optional.empty();
        }
        return courierPickupWindowDuration;
    }

    /**
     * @return Whether the delivery is preferred to be no contact.
     */
    @JsonIgnore
    public Optional<Boolean> getIsNoContactDelivery() {
        if (isNoContactDelivery == null) {
            return Optional.empty();
        }
        return isNoContactDelivery;
    }

    /**
     * @return A note to provide additional instructions about how to deliver the order.
     */
    @JsonIgnore
    public Optional<String> getDropoffNotes() {
        if (dropoffNotes == null) {
            return Optional.empty();
        }
        return dropoffNotes;
    }

    /**
     * @return The name of the courier provider.
     */
    @JsonIgnore
    public Optional<String> getCourierProviderName() {
        if (courierProviderName == null) {
            return Optional.empty();
        }
        return courierProviderName;
    }

    /**
     * @return The support phone number of the courier.
     */
    @JsonIgnore
    public Optional<String> getCourierSupportPhoneNumber() {
        if (courierSupportPhoneNumber == null) {
            return Optional.empty();
        }
        return courierSupportPhoneNumber;
    }

    /**
     * @return The identifier for the delivery created by Square.
     */
    @JsonIgnore
    public Optional<String> getSquareDeliveryId() {
        if (squareDeliveryId == null) {
            return Optional.empty();
        }
        return squareDeliveryId;
    }

    /**
     * @return The identifier for the delivery created by the third-party courier service.
     */
    @JsonIgnore
    public Optional<String> getExternalDeliveryId() {
        if (externalDeliveryId == null) {
            return Optional.empty();
        }
        return externalDeliveryId;
    }

    /**
     * @return The flag to indicate the delivery is managed by a third party (ie DoorDash), which means
     * we may not receive all recipient information for PII purposes.
     */
    @JsonIgnore
    public Optional<Boolean> getManagedDelivery() {
        if (managedDelivery == null) {
            return Optional.empty();
        }
        return managedDelivery;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("deliver_at")
    private Optional<String> _getDeliverAt() {
        return deliverAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("prep_time_duration")
    private Optional<String> _getPrepTimeDuration() {
        return prepTimeDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("delivery_window_duration")
    private Optional<String> _getDeliveryWindowDuration() {
        return deliveryWindowDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("completed_at")
    private Optional<String> _getCompletedAt() {
        return completedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cancel_reason")
    private Optional<String> _getCancelReason() {
        return cancelReason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("courier_pickup_at")
    private Optional<String> _getCourierPickupAt() {
        return courierPickupAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("courier_pickup_window_duration")
    private Optional<String> _getCourierPickupWindowDuration() {
        return courierPickupWindowDuration;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_no_contact_delivery")
    private Optional<Boolean> _getIsNoContactDelivery() {
        return isNoContactDelivery;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("dropoff_notes")
    private Optional<String> _getDropoffNotes() {
        return dropoffNotes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("courier_provider_name")
    private Optional<String> _getCourierProviderName() {
        return courierProviderName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("courier_support_phone_number")
    private Optional<String> _getCourierSupportPhoneNumber() {
        return courierSupportPhoneNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("square_delivery_id")
    private Optional<String> _getSquareDeliveryId() {
        return squareDeliveryId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("external_delivery_id")
    private Optional<String> _getExternalDeliveryId() {
        return externalDeliveryId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("managed_delivery")
    private Optional<Boolean> _getManagedDelivery() {
        return managedDelivery;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FulfillmentDeliveryDetails && equalTo((FulfillmentDeliveryDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FulfillmentDeliveryDetails other) {
        return recipient.equals(other.recipient)
                && scheduleType.equals(other.scheduleType)
                && placedAt.equals(other.placedAt)
                && deliverAt.equals(other.deliverAt)
                && prepTimeDuration.equals(other.prepTimeDuration)
                && deliveryWindowDuration.equals(other.deliveryWindowDuration)
                && note.equals(other.note)
                && completedAt.equals(other.completedAt)
                && inProgressAt.equals(other.inProgressAt)
                && rejectedAt.equals(other.rejectedAt)
                && readyAt.equals(other.readyAt)
                && deliveredAt.equals(other.deliveredAt)
                && canceledAt.equals(other.canceledAt)
                && cancelReason.equals(other.cancelReason)
                && courierPickupAt.equals(other.courierPickupAt)
                && courierPickupWindowDuration.equals(other.courierPickupWindowDuration)
                && isNoContactDelivery.equals(other.isNoContactDelivery)
                && dropoffNotes.equals(other.dropoffNotes)
                && courierProviderName.equals(other.courierProviderName)
                && courierSupportPhoneNumber.equals(other.courierSupportPhoneNumber)
                && squareDeliveryId.equals(other.squareDeliveryId)
                && externalDeliveryId.equals(other.externalDeliveryId)
                && managedDelivery.equals(other.managedDelivery);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.recipient,
                this.scheduleType,
                this.placedAt,
                this.deliverAt,
                this.prepTimeDuration,
                this.deliveryWindowDuration,
                this.note,
                this.completedAt,
                this.inProgressAt,
                this.rejectedAt,
                this.readyAt,
                this.deliveredAt,
                this.canceledAt,
                this.cancelReason,
                this.courierPickupAt,
                this.courierPickupWindowDuration,
                this.isNoContactDelivery,
                this.dropoffNotes,
                this.courierProviderName,
                this.courierSupportPhoneNumber,
                this.squareDeliveryId,
                this.externalDeliveryId,
                this.managedDelivery);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<FulfillmentRecipient> recipient = Optional.empty();

        private Optional<FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType> scheduleType =
                Optional.empty();

        private Optional<String> placedAt = Optional.empty();

        private Optional<String> deliverAt = Optional.empty();

        private Optional<String> prepTimeDuration = Optional.empty();

        private Optional<String> deliveryWindowDuration = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<String> completedAt = Optional.empty();

        private Optional<String> inProgressAt = Optional.empty();

        private Optional<String> rejectedAt = Optional.empty();

        private Optional<String> readyAt = Optional.empty();

        private Optional<String> deliveredAt = Optional.empty();

        private Optional<String> canceledAt = Optional.empty();

        private Optional<String> cancelReason = Optional.empty();

        private Optional<String> courierPickupAt = Optional.empty();

        private Optional<String> courierPickupWindowDuration = Optional.empty();

        private Optional<Boolean> isNoContactDelivery = Optional.empty();

        private Optional<String> dropoffNotes = Optional.empty();

        private Optional<String> courierProviderName = Optional.empty();

        private Optional<String> courierSupportPhoneNumber = Optional.empty();

        private Optional<String> squareDeliveryId = Optional.empty();

        private Optional<String> externalDeliveryId = Optional.empty();

        private Optional<Boolean> managedDelivery = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FulfillmentDeliveryDetails other) {
            recipient(other.getRecipient());
            scheduleType(other.getScheduleType());
            placedAt(other.getPlacedAt());
            deliverAt(other.getDeliverAt());
            prepTimeDuration(other.getPrepTimeDuration());
            deliveryWindowDuration(other.getDeliveryWindowDuration());
            note(other.getNote());
            completedAt(other.getCompletedAt());
            inProgressAt(other.getInProgressAt());
            rejectedAt(other.getRejectedAt());
            readyAt(other.getReadyAt());
            deliveredAt(other.getDeliveredAt());
            canceledAt(other.getCanceledAt());
            cancelReason(other.getCancelReason());
            courierPickupAt(other.getCourierPickupAt());
            courierPickupWindowDuration(other.getCourierPickupWindowDuration());
            isNoContactDelivery(other.getIsNoContactDelivery());
            dropoffNotes(other.getDropoffNotes());
            courierProviderName(other.getCourierProviderName());
            courierSupportPhoneNumber(other.getCourierSupportPhoneNumber());
            squareDeliveryId(other.getSquareDeliveryId());
            externalDeliveryId(other.getExternalDeliveryId());
            managedDelivery(other.getManagedDelivery());
            return this;
        }

        /**
         * <p>The contact information for the person to receive the fulfillment.</p>
         */
        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<FulfillmentRecipient> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(FulfillmentRecipient recipient) {
            this.recipient = Optional.ofNullable(recipient);
            return this;
        }

        /**
         * <p>Indicates the fulfillment delivery schedule type. If <code>SCHEDULED</code>, then
         * <code>deliver_at</code> is required. If <code>ASAP</code>, then <code>prep_time_duration</code> is required. The default is <code>SCHEDULED</code>.
         * See <a href="#type-orderfulfillmentdeliverydetailsscheduletype">OrderFulfillmentDeliveryDetailsScheduleType</a> for possible values</p>
         */
        @JsonSetter(value = "schedule_type", nulls = Nulls.SKIP)
        public Builder scheduleType(
                Optional<FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType> scheduleType) {
            this.scheduleType = scheduleType;
            return this;
        }

        public Builder scheduleType(
                FulfillmentDeliveryDetailsOrderFulfillmentDeliveryDetailsScheduleType scheduleType) {
            this.scheduleType = Optional.ofNullable(scheduleType);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was placed.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         * <p>Must be in RFC 3339 timestamp format, e.g., &quot;2016-09-04T23:59:33.123Z&quot;.</p>
         */
        @JsonSetter(value = "placed_at", nulls = Nulls.SKIP)
        public Builder placedAt(Optional<String> placedAt) {
            this.placedAt = placedAt;
            return this;
        }

        public Builder placedAt(String placedAt) {
            this.placedAt = Optional.ofNullable(placedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * that represents the start of the delivery period.
         * When the fulfillment <code>schedule_type</code> is <code>ASAP</code>, the field is automatically
         * set to the current time plus the <code>prep_time_duration</code>.
         * Otherwise, the application can set this field while the fulfillment <code>state</code> is
         * <code>PROPOSED</code>, <code>RESERVED</code>, or <code>PREPARED</code> (any time before the
         * terminal state such as <code>COMPLETED</code>, <code>CANCELED</code>, and <code>FAILED</code>).</p>
         * <p>The timestamp must be in RFC 3339 format
         * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "deliver_at", nulls = Nulls.SKIP)
        public Builder deliverAt(Optional<String> deliverAt) {
            this.deliverAt = deliverAt;
            return this;
        }

        public Builder deliverAt(String deliverAt) {
            this.deliverAt = Optional.ofNullable(deliverAt);
            return this;
        }

        public Builder deliverAt(Nullable<String> deliverAt) {
            if (deliverAt.isNull()) {
                this.deliverAt = null;
            } else if (deliverAt.isEmpty()) {
                this.deliverAt = Optional.empty();
            } else {
                this.deliverAt = Optional.of(deliverAt.get());
            }
            return this;
        }

        /**
         * <p>The duration of time it takes to prepare and deliver this fulfillment.
         * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
         */
        @JsonSetter(value = "prep_time_duration", nulls = Nulls.SKIP)
        public Builder prepTimeDuration(Optional<String> prepTimeDuration) {
            this.prepTimeDuration = prepTimeDuration;
            return this;
        }

        public Builder prepTimeDuration(String prepTimeDuration) {
            this.prepTimeDuration = Optional.ofNullable(prepTimeDuration);
            return this;
        }

        public Builder prepTimeDuration(Nullable<String> prepTimeDuration) {
            if (prepTimeDuration.isNull()) {
                this.prepTimeDuration = null;
            } else if (prepTimeDuration.isEmpty()) {
                this.prepTimeDuration = Optional.empty();
            } else {
                this.prepTimeDuration = Optional.of(prepTimeDuration.get());
            }
            return this;
        }

        /**
         * <p>The time period after <code>deliver_at</code> in which to deliver the order.
         * Applications can set this field when the fulfillment <code>state</code> is
         * <code>PROPOSED</code>, <code>RESERVED</code>, or <code>PREPARED</code> (any time before the terminal state
         * such as <code>COMPLETED</code>, <code>CANCELED</code>, and <code>FAILED</code>).</p>
         * <p>The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
         */
        @JsonSetter(value = "delivery_window_duration", nulls = Nulls.SKIP)
        public Builder deliveryWindowDuration(Optional<String> deliveryWindowDuration) {
            this.deliveryWindowDuration = deliveryWindowDuration;
            return this;
        }

        public Builder deliveryWindowDuration(String deliveryWindowDuration) {
            this.deliveryWindowDuration = Optional.ofNullable(deliveryWindowDuration);
            return this;
        }

        public Builder deliveryWindowDuration(Nullable<String> deliveryWindowDuration) {
            if (deliveryWindowDuration.isNull()) {
                this.deliveryWindowDuration = null;
            } else if (deliveryWindowDuration.isEmpty()) {
                this.deliveryWindowDuration = Optional.empty();
            } else {
                this.deliveryWindowDuration = Optional.of(deliveryWindowDuration.get());
            }
            return this;
        }

        /**
         * <p>Provides additional instructions about the delivery fulfillment.
         * It is displayed in the Square Point of Sale application and set by the API.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        public Builder note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicates when the seller completed the fulfillment.
         * This field is automatically set when  fulfillment <code>state</code> changes to <code>COMPLETED</code>.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "completed_at", nulls = Nulls.SKIP)
        public Builder completedAt(Optional<String> completedAt) {
            this.completedAt = completedAt;
            return this;
        }

        public Builder completedAt(String completedAt) {
            this.completedAt = Optional.ofNullable(completedAt);
            return this;
        }

        public Builder completedAt(Nullable<String> completedAt) {
            if (completedAt.isNull()) {
                this.completedAt = null;
            } else if (completedAt.isEmpty()) {
                this.completedAt = Optional.empty();
            } else {
                this.completedAt = Optional.of(completedAt.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicates when the seller started processing the fulfillment.
         * This field is automatically set when the fulfillment <code>state</code> changes to <code>RESERVED</code>.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "in_progress_at", nulls = Nulls.SKIP)
        public Builder inProgressAt(Optional<String> inProgressAt) {
            this.inProgressAt = inProgressAt;
            return this;
        }

        public Builder inProgressAt(String inProgressAt) {
            this.inProgressAt = Optional.ofNullable(inProgressAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was rejected. This field is
         * automatically set when the fulfillment <code>state</code> changes to <code>FAILED</code>.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "rejected_at", nulls = Nulls.SKIP)
        public Builder rejectedAt(Optional<String> rejectedAt) {
            this.rejectedAt = rejectedAt;
            return this;
        }

        public Builder rejectedAt(String rejectedAt) {
            this.rejectedAt = Optional.ofNullable(rejectedAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the seller marked the fulfillment as ready for
         * courier pickup. This field is automatically set when the fulfillment <code>state</code> changes
         * to PREPARED.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "ready_at", nulls = Nulls.SKIP)
        public Builder readyAt(Optional<String> readyAt) {
            this.readyAt = readyAt;
            return this;
        }

        public Builder readyAt(String readyAt) {
            this.readyAt = Optional.ofNullable(readyAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was delivered to the recipient.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "delivered_at", nulls = Nulls.SKIP)
        public Builder deliveredAt(Optional<String> deliveredAt) {
            this.deliveredAt = deliveredAt;
            return this;
        }

        public Builder deliveredAt(String deliveredAt) {
            this.deliveredAt = Optional.ofNullable(deliveredAt);
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when the fulfillment was canceled. This field is automatically
         * set when the fulfillment <code>state</code> changes to <code>CANCELED</code>.</p>
         * <p>The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "canceled_at", nulls = Nulls.SKIP)
        public Builder canceledAt(Optional<String> canceledAt) {
            this.canceledAt = canceledAt;
            return this;
        }

        public Builder canceledAt(String canceledAt) {
            this.canceledAt = Optional.ofNullable(canceledAt);
            return this;
        }

        /**
         * <p>The delivery cancellation reason. Max length: 100 characters.</p>
         */
        @JsonSetter(value = "cancel_reason", nulls = Nulls.SKIP)
        public Builder cancelReason(Optional<String> cancelReason) {
            this.cancelReason = cancelReason;
            return this;
        }

        public Builder cancelReason(String cancelReason) {
            this.cancelReason = Optional.ofNullable(cancelReason);
            return this;
        }

        public Builder cancelReason(Nullable<String> cancelReason) {
            if (cancelReason.isNull()) {
                this.cancelReason = null;
            } else if (cancelReason.isEmpty()) {
                this.cancelReason = Optional.empty();
            } else {
                this.cancelReason = Optional.of(cancelReason.get());
            }
            return this;
        }

        /**
         * <p>The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
         * indicating when an order can be picked up by the courier for delivery.
         * The timestamp must be in RFC 3339 format (for example, &quot;2016-09-04T23:59:33.123Z&quot;).</p>
         */
        @JsonSetter(value = "courier_pickup_at", nulls = Nulls.SKIP)
        public Builder courierPickupAt(Optional<String> courierPickupAt) {
            this.courierPickupAt = courierPickupAt;
            return this;
        }

        public Builder courierPickupAt(String courierPickupAt) {
            this.courierPickupAt = Optional.ofNullable(courierPickupAt);
            return this;
        }

        public Builder courierPickupAt(Nullable<String> courierPickupAt) {
            if (courierPickupAt.isNull()) {
                this.courierPickupAt = null;
            } else if (courierPickupAt.isEmpty()) {
                this.courierPickupAt = Optional.empty();
            } else {
                this.courierPickupAt = Optional.of(courierPickupAt.get());
            }
            return this;
        }

        /**
         * <p>The time period after <code>courier_pickup_at</code> in which the courier should pick up the order.
         * The duration must be in RFC 3339 format (for example, &quot;P1W3D&quot;).</p>
         */
        @JsonSetter(value = "courier_pickup_window_duration", nulls = Nulls.SKIP)
        public Builder courierPickupWindowDuration(Optional<String> courierPickupWindowDuration) {
            this.courierPickupWindowDuration = courierPickupWindowDuration;
            return this;
        }

        public Builder courierPickupWindowDuration(String courierPickupWindowDuration) {
            this.courierPickupWindowDuration = Optional.ofNullable(courierPickupWindowDuration);
            return this;
        }

        public Builder courierPickupWindowDuration(Nullable<String> courierPickupWindowDuration) {
            if (courierPickupWindowDuration.isNull()) {
                this.courierPickupWindowDuration = null;
            } else if (courierPickupWindowDuration.isEmpty()) {
                this.courierPickupWindowDuration = Optional.empty();
            } else {
                this.courierPickupWindowDuration = Optional.of(courierPickupWindowDuration.get());
            }
            return this;
        }

        /**
         * <p>Whether the delivery is preferred to be no contact.</p>
         */
        @JsonSetter(value = "is_no_contact_delivery", nulls = Nulls.SKIP)
        public Builder isNoContactDelivery(Optional<Boolean> isNoContactDelivery) {
            this.isNoContactDelivery = isNoContactDelivery;
            return this;
        }

        public Builder isNoContactDelivery(Boolean isNoContactDelivery) {
            this.isNoContactDelivery = Optional.ofNullable(isNoContactDelivery);
            return this;
        }

        public Builder isNoContactDelivery(Nullable<Boolean> isNoContactDelivery) {
            if (isNoContactDelivery.isNull()) {
                this.isNoContactDelivery = null;
            } else if (isNoContactDelivery.isEmpty()) {
                this.isNoContactDelivery = Optional.empty();
            } else {
                this.isNoContactDelivery = Optional.of(isNoContactDelivery.get());
            }
            return this;
        }

        /**
         * <p>A note to provide additional instructions about how to deliver the order.</p>
         */
        @JsonSetter(value = "dropoff_notes", nulls = Nulls.SKIP)
        public Builder dropoffNotes(Optional<String> dropoffNotes) {
            this.dropoffNotes = dropoffNotes;
            return this;
        }

        public Builder dropoffNotes(String dropoffNotes) {
            this.dropoffNotes = Optional.ofNullable(dropoffNotes);
            return this;
        }

        public Builder dropoffNotes(Nullable<String> dropoffNotes) {
            if (dropoffNotes.isNull()) {
                this.dropoffNotes = null;
            } else if (dropoffNotes.isEmpty()) {
                this.dropoffNotes = Optional.empty();
            } else {
                this.dropoffNotes = Optional.of(dropoffNotes.get());
            }
            return this;
        }

        /**
         * <p>The name of the courier provider.</p>
         */
        @JsonSetter(value = "courier_provider_name", nulls = Nulls.SKIP)
        public Builder courierProviderName(Optional<String> courierProviderName) {
            this.courierProviderName = courierProviderName;
            return this;
        }

        public Builder courierProviderName(String courierProviderName) {
            this.courierProviderName = Optional.ofNullable(courierProviderName);
            return this;
        }

        public Builder courierProviderName(Nullable<String> courierProviderName) {
            if (courierProviderName.isNull()) {
                this.courierProviderName = null;
            } else if (courierProviderName.isEmpty()) {
                this.courierProviderName = Optional.empty();
            } else {
                this.courierProviderName = Optional.of(courierProviderName.get());
            }
            return this;
        }

        /**
         * <p>The support phone number of the courier.</p>
         */
        @JsonSetter(value = "courier_support_phone_number", nulls = Nulls.SKIP)
        public Builder courierSupportPhoneNumber(Optional<String> courierSupportPhoneNumber) {
            this.courierSupportPhoneNumber = courierSupportPhoneNumber;
            return this;
        }

        public Builder courierSupportPhoneNumber(String courierSupportPhoneNumber) {
            this.courierSupportPhoneNumber = Optional.ofNullable(courierSupportPhoneNumber);
            return this;
        }

        public Builder courierSupportPhoneNumber(Nullable<String> courierSupportPhoneNumber) {
            if (courierSupportPhoneNumber.isNull()) {
                this.courierSupportPhoneNumber = null;
            } else if (courierSupportPhoneNumber.isEmpty()) {
                this.courierSupportPhoneNumber = Optional.empty();
            } else {
                this.courierSupportPhoneNumber = Optional.of(courierSupportPhoneNumber.get());
            }
            return this;
        }

        /**
         * <p>The identifier for the delivery created by Square.</p>
         */
        @JsonSetter(value = "square_delivery_id", nulls = Nulls.SKIP)
        public Builder squareDeliveryId(Optional<String> squareDeliveryId) {
            this.squareDeliveryId = squareDeliveryId;
            return this;
        }

        public Builder squareDeliveryId(String squareDeliveryId) {
            this.squareDeliveryId = Optional.ofNullable(squareDeliveryId);
            return this;
        }

        public Builder squareDeliveryId(Nullable<String> squareDeliveryId) {
            if (squareDeliveryId.isNull()) {
                this.squareDeliveryId = null;
            } else if (squareDeliveryId.isEmpty()) {
                this.squareDeliveryId = Optional.empty();
            } else {
                this.squareDeliveryId = Optional.of(squareDeliveryId.get());
            }
            return this;
        }

        /**
         * <p>The identifier for the delivery created by the third-party courier service.</p>
         */
        @JsonSetter(value = "external_delivery_id", nulls = Nulls.SKIP)
        public Builder externalDeliveryId(Optional<String> externalDeliveryId) {
            this.externalDeliveryId = externalDeliveryId;
            return this;
        }

        public Builder externalDeliveryId(String externalDeliveryId) {
            this.externalDeliveryId = Optional.ofNullable(externalDeliveryId);
            return this;
        }

        public Builder externalDeliveryId(Nullable<String> externalDeliveryId) {
            if (externalDeliveryId.isNull()) {
                this.externalDeliveryId = null;
            } else if (externalDeliveryId.isEmpty()) {
                this.externalDeliveryId = Optional.empty();
            } else {
                this.externalDeliveryId = Optional.of(externalDeliveryId.get());
            }
            return this;
        }

        /**
         * <p>The flag to indicate the delivery is managed by a third party (ie DoorDash), which means
         * we may not receive all recipient information for PII purposes.</p>
         */
        @JsonSetter(value = "managed_delivery", nulls = Nulls.SKIP)
        public Builder managedDelivery(Optional<Boolean> managedDelivery) {
            this.managedDelivery = managedDelivery;
            return this;
        }

        public Builder managedDelivery(Boolean managedDelivery) {
            this.managedDelivery = Optional.ofNullable(managedDelivery);
            return this;
        }

        public Builder managedDelivery(Nullable<Boolean> managedDelivery) {
            if (managedDelivery.isNull()) {
                this.managedDelivery = null;
            } else if (managedDelivery.isEmpty()) {
                this.managedDelivery = Optional.empty();
            } else {
                this.managedDelivery = Optional.of(managedDelivery.get());
            }
            return this;
        }

        public FulfillmentDeliveryDetails build() {
            return new FulfillmentDeliveryDetails(
                    recipient,
                    scheduleType,
                    placedAt,
                    deliverAt,
                    prepTimeDuration,
                    deliveryWindowDuration,
                    note,
                    completedAt,
                    inProgressAt,
                    rejectedAt,
                    readyAt,
                    deliveredAt,
                    canceledAt,
                    cancelReason,
                    courierPickupAt,
                    courierPickupWindowDuration,
                    isNoContactDelivery,
                    dropoffNotes,
                    courierProviderName,
                    courierSupportPhoneNumber,
                    squareDeliveryId,
                    externalDeliveryId,
                    managedDelivery,
                    additionalProperties);
        }
    }
}
