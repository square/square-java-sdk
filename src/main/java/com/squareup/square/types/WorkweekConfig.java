/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WorkweekConfig.Builder.class)
public final class WorkweekConfig {
    private final Optional<String> id;

    private final Weekday startOfWeek;

    private final String startOfDayLocalTime;

    private final Optional<Integer> version;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private WorkweekConfig(
            Optional<String> id,
            Weekday startOfWeek,
            String startOfDayLocalTime,
            Optional<Integer> version,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.startOfWeek = startOfWeek;
        this.startOfDayLocalTime = startOfDayLocalTime;
        this.version = version;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The UUID for this object.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The day of the week on which a business week starts for
     * compensation purposes.
     * See <a href="#type-weekday">Weekday</a> for possible values
     */
    @JsonProperty("start_of_week")
    public Weekday getStartOfWeek() {
        return startOfWeek;
    }

    /**
     * @return The local time at which a business week starts. Represented as a
     * string in <code>HH:MM</code> format (<code>HH:MM:SS</code> is also accepted, but seconds are
     * truncated).
     */
    @JsonProperty("start_of_day_local_time")
    public String getStartOfDayLocalTime() {
        return startOfDayLocalTime;
    }

    /**
     * @return Used for resolving concurrency issues. The request fails if the version
     * provided does not match the server version at the time of the request. If not provided,
     * Square executes a blind write; potentially overwriting data from another
     * write.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return A read-only timestamp in RFC 3339 format; presented in UTC.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return A read-only timestamp in RFC 3339 format; presented in UTC.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WorkweekConfig && equalTo((WorkweekConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WorkweekConfig other) {
        return id.equals(other.id)
                && startOfWeek.equals(other.startOfWeek)
                && startOfDayLocalTime.equals(other.startOfDayLocalTime)
                && version.equals(other.version)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.startOfWeek, this.startOfDayLocalTime, this.version, this.createdAt, this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StartOfWeekStage builder() {
        return new Builder();
    }

    public interface StartOfWeekStage {
        StartOfDayLocalTimeStage startOfWeek(@NotNull Weekday startOfWeek);

        Builder from(WorkweekConfig other);
    }

    public interface StartOfDayLocalTimeStage {
        _FinalStage startOfDayLocalTime(@NotNull String startOfDayLocalTime);
    }

    public interface _FinalStage {
        WorkweekConfig build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage version(Optional<Integer> version);

        _FinalStage version(Integer version);

        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StartOfWeekStage, StartOfDayLocalTimeStage, _FinalStage {
        private Weekday startOfWeek;

        private String startOfDayLocalTime;

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WorkweekConfig other) {
            id(other.getId());
            startOfWeek(other.getStartOfWeek());
            startOfDayLocalTime(other.getStartOfDayLocalTime());
            version(other.getVersion());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        /**
         * <p>The day of the week on which a business week starts for
         * compensation purposes.
         * See <a href="#type-weekday">Weekday</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("start_of_week")
        public StartOfDayLocalTimeStage startOfWeek(@NotNull Weekday startOfWeek) {
            this.startOfWeek = Objects.requireNonNull(startOfWeek, "startOfWeek must not be null");
            return this;
        }

        /**
         * <p>The local time at which a business week starts. Represented as a
         * string in <code>HH:MM</code> format (<code>HH:MM:SS</code> is also accepted, but seconds are
         * truncated).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("start_of_day_local_time")
        public _FinalStage startOfDayLocalTime(@NotNull String startOfDayLocalTime) {
            this.startOfDayLocalTime =
                    Objects.requireNonNull(startOfDayLocalTime, "startOfDayLocalTime must not be null");
            return this;
        }

        /**
         * <p>A read-only timestamp in RFC 3339 format; presented in UTC.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>A read-only timestamp in RFC 3339 format; presented in UTC.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Used for resolving concurrency issues. The request fails if the version
         * provided does not match the server version at the time of the request. If not provided,
         * Square executes a blind write; potentially overwriting data from another
         * write.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>The UUID for this object.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public WorkweekConfig build() {
            return new WorkweekConfig(
                    id, startOfWeek, startOfDayLocalTime, version, createdAt, updatedAt, additionalProperties);
        }
    }
}
