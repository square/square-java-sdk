/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class TerminalActionActionType {
    public static final TerminalActionActionType PING = new TerminalActionActionType(Value.PING, "PING");

    public static final TerminalActionActionType SELECT = new TerminalActionActionType(Value.SELECT, "SELECT");

    public static final TerminalActionActionType SIGNATURE = new TerminalActionActionType(Value.SIGNATURE, "SIGNATURE");

    public static final TerminalActionActionType DATA_COLLECTION =
            new TerminalActionActionType(Value.DATA_COLLECTION, "DATA_COLLECTION");

    public static final TerminalActionActionType CONFIRMATION =
            new TerminalActionActionType(Value.CONFIRMATION, "CONFIRMATION");

    public static final TerminalActionActionType SAVE_CARD = new TerminalActionActionType(Value.SAVE_CARD, "SAVE_CARD");

    public static final TerminalActionActionType RECEIPT = new TerminalActionActionType(Value.RECEIPT, "RECEIPT");

    public static final TerminalActionActionType QR_CODE = new TerminalActionActionType(Value.QR_CODE, "QR_CODE");

    private final Value value;

    private final String string;

    TerminalActionActionType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof TerminalActionActionType
                        && this.string.equals(((TerminalActionActionType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case PING:
                return visitor.visitPing();
            case SELECT:
                return visitor.visitSelect();
            case SIGNATURE:
                return visitor.visitSignature();
            case DATA_COLLECTION:
                return visitor.visitDataCollection();
            case CONFIRMATION:
                return visitor.visitConfirmation();
            case SAVE_CARD:
                return visitor.visitSaveCard();
            case RECEIPT:
                return visitor.visitReceipt();
            case QR_CODE:
                return visitor.visitQrCode();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static TerminalActionActionType valueOf(String value) {
        switch (value) {
            case "PING":
                return PING;
            case "SELECT":
                return SELECT;
            case "SIGNATURE":
                return SIGNATURE;
            case "DATA_COLLECTION":
                return DATA_COLLECTION;
            case "CONFIRMATION":
                return CONFIRMATION;
            case "SAVE_CARD":
                return SAVE_CARD;
            case "RECEIPT":
                return RECEIPT;
            case "QR_CODE":
                return QR_CODE;
            default:
                return new TerminalActionActionType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        QR_CODE,

        PING,

        SAVE_CARD,

        SIGNATURE,

        CONFIRMATION,

        RECEIPT,

        DATA_COLLECTION,

        SELECT,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitQrCode();

        T visitPing();

        T visitSaveCard();

        T visitSignature();

        T visitConfirmation();

        T visitReceipt();

        T visitDataCollection();

        T visitSelect();

        T visitUnknown(String unknownType);
    }
}
