/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QuickPay.Builder.class)
public final class QuickPay {
    private final String name;

    private final Money priceMoney;

    private final String locationId;

    private final Map<String, Object> additionalProperties;

    private QuickPay(String name, Money priceMoney, String locationId, Map<String, Object> additionalProperties) {
        this.name = name;
        this.priceMoney = priceMoney;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ad hoc item name. In the resulting <code>Order</code>, this name appears as the line item name.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The price of the item.
     */
    @JsonProperty("price_money")
    public Money getPriceMoney() {
        return priceMoney;
    }

    /**
     * @return The ID of the business location the checkout is associated with.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QuickPay && equalTo((QuickPay) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QuickPay other) {
        return name.equals(other.name) && priceMoney.equals(other.priceMoney) && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.priceMoney, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        /**
         * <p>The ad hoc item name. In the resulting <code>Order</code>, this name appears as the line item name.</p>
         */
        PriceMoneyStage name(@NotNull String name);

        Builder from(QuickPay other);
    }

    public interface PriceMoneyStage {
        /**
         * <p>The price of the item.</p>
         */
        LocationIdStage priceMoney(@NotNull Money priceMoney);
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the business location the checkout is associated with.</p>
         */
        _FinalStage locationId(@NotNull String locationId);
    }

    public interface _FinalStage {
        QuickPay build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, PriceMoneyStage, LocationIdStage, _FinalStage {
        private String name;

        private Money priceMoney;

        private String locationId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(QuickPay other) {
            name(other.getName());
            priceMoney(other.getPriceMoney());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The ad hoc item name. In the resulting <code>Order</code>, this name appears as the line item name.</p>
         * <p>The ad hoc item name. In the resulting <code>Order</code>, this name appears as the line item name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public PriceMoneyStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The price of the item.</p>
         * <p>The price of the item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("price_money")
        public LocationIdStage priceMoney(@NotNull Money priceMoney) {
            this.priceMoney = Objects.requireNonNull(priceMoney, "priceMoney must not be null");
            return this;
        }

        /**
         * <p>The ID of the business location the checkout is associated with.</p>
         * <p>The ID of the business location the checkout is associated with.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        @java.lang.Override
        public QuickPay build() {
            return new QuickPay(name, priceMoney, locationId, additionalProperties);
        }
    }
}
