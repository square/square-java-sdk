/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogCustomAttributeDefinitionSelectionConfig.Builder.class)
public final class CatalogCustomAttributeDefinitionSelectionConfig {
    private final Optional<Integer> maxAllowedSelections;

    private final Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
            allowedSelections;

    private final Map<String, Object> additionalProperties;

    private CatalogCustomAttributeDefinitionSelectionConfig(
            Optional<Integer> maxAllowedSelections,
            Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>> allowedSelections,
            Map<String, Object> additionalProperties) {
        this.maxAllowedSelections = maxAllowedSelections;
        this.allowedSelections = allowedSelections;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The maximum number of selections that can be set. The maximum value for this
     * attribute is 100. The default value is 1. The value can be modified, but changing the value will not
     * affect existing custom attribute values on objects. Clients need to
     * handle custom attributes with more selected values than allowed by this limit.
     */
    @JsonIgnore
    public Optional<Integer> getMaxAllowedSelections() {
        if (maxAllowedSelections == null) {
            return Optional.empty();
        }
        return maxAllowedSelections;
    }

    /**
     * @return The set of valid <code>CatalogCustomAttributeSelections</code>. Up to a maximum of 100
     * selections can be defined. Can be modified.
     */
    @JsonIgnore
    public Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
            getAllowedSelections() {
        if (allowedSelections == null) {
            return Optional.empty();
        }
        return allowedSelections;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("max_allowed_selections")
    private Optional<Integer> _getMaxAllowedSelections() {
        return maxAllowedSelections;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("allowed_selections")
    private Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
            _getAllowedSelections() {
        return allowedSelections;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogCustomAttributeDefinitionSelectionConfig
                && equalTo((CatalogCustomAttributeDefinitionSelectionConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogCustomAttributeDefinitionSelectionConfig other) {
        return maxAllowedSelections.equals(other.maxAllowedSelections)
                && allowedSelections.equals(other.allowedSelections);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.maxAllowedSelections, this.allowedSelections);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> maxAllowedSelections = Optional.empty();

        private Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
                allowedSelections = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogCustomAttributeDefinitionSelectionConfig other) {
            maxAllowedSelections(other.getMaxAllowedSelections());
            allowedSelections(other.getAllowedSelections());
            return this;
        }

        /**
         * <p>The maximum number of selections that can be set. The maximum value for this
         * attribute is 100. The default value is 1. The value can be modified, but changing the value will not
         * affect existing custom attribute values on objects. Clients need to
         * handle custom attributes with more selected values than allowed by this limit.</p>
         */
        @JsonSetter(value = "max_allowed_selections", nulls = Nulls.SKIP)
        public Builder maxAllowedSelections(Optional<Integer> maxAllowedSelections) {
            this.maxAllowedSelections = maxAllowedSelections;
            return this;
        }

        public Builder maxAllowedSelections(Integer maxAllowedSelections) {
            this.maxAllowedSelections = Optional.ofNullable(maxAllowedSelections);
            return this;
        }

        public Builder maxAllowedSelections(Nullable<Integer> maxAllowedSelections) {
            if (maxAllowedSelections.isNull()) {
                this.maxAllowedSelections = null;
            } else if (maxAllowedSelections.isEmpty()) {
                this.maxAllowedSelections = Optional.empty();
            } else {
                this.maxAllowedSelections = Optional.of(maxAllowedSelections.get());
            }
            return this;
        }

        /**
         * <p>The set of valid <code>CatalogCustomAttributeSelections</code>. Up to a maximum of 100
         * selections can be defined. Can be modified.</p>
         */
        @JsonSetter(value = "allowed_selections", nulls = Nulls.SKIP)
        public Builder allowedSelections(
                Optional<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
                        allowedSelections) {
            this.allowedSelections = allowedSelections;
            return this;
        }

        public Builder allowedSelections(
                List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection> allowedSelections) {
            this.allowedSelections = Optional.ofNullable(allowedSelections);
            return this;
        }

        public Builder allowedSelections(
                Nullable<List<CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection>>
                        allowedSelections) {
            if (allowedSelections.isNull()) {
                this.allowedSelections = null;
            } else if (allowedSelections.isEmpty()) {
                this.allowedSelections = Optional.empty();
            } else {
                this.allowedSelections = Optional.of(allowedSelections.get());
            }
            return this;
        }

        public CatalogCustomAttributeDefinitionSelectionConfig build() {
            return new CatalogCustomAttributeDefinitionSelectionConfig(
                    maxAllowedSelections, allowedSelections, additionalProperties);
        }
    }
}
