/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CancelBookingRequest.Builder.class)
public final class CancelBookingRequest {
    private final String bookingId;

    private final Optional<String> idempotencyKey;

    private final Optional<Integer> bookingVersion;

    private final Map<String, Object> additionalProperties;

    private CancelBookingRequest(
            String bookingId,
            Optional<String> idempotencyKey,
            Optional<Integer> bookingVersion,
            Map<String, Object> additionalProperties) {
        this.bookingId = bookingId;
        this.idempotencyKey = idempotencyKey;
        this.bookingVersion = bookingVersion;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-cancelled booking.
     */
    @JsonProperty("booking_id")
    public String getBookingId() {
        return bookingId;
    }

    /**
     * @return A unique key to make this request an idempotent operation.
     */
    @JsonIgnore
    public Optional<String> getIdempotencyKey() {
        if (idempotencyKey == null) {
            return Optional.empty();
        }
        return idempotencyKey;
    }

    /**
     * @return The revision number for the booking used for optimistic concurrency.
     */
    @JsonIgnore
    public Optional<Integer> getBookingVersion() {
        if (bookingVersion == null) {
            return Optional.empty();
        }
        return bookingVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("idempotency_key")
    private Optional<String> _getIdempotencyKey() {
        return idempotencyKey;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("booking_version")
    private Optional<Integer> _getBookingVersion() {
        return bookingVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CancelBookingRequest && equalTo((CancelBookingRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CancelBookingRequest other) {
        return bookingId.equals(other.bookingId)
                && idempotencyKey.equals(other.idempotencyKey)
                && bookingVersion.equals(other.bookingVersion);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bookingId, this.idempotencyKey, this.bookingVersion);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BookingIdStage builder() {
        return new Builder();
    }

    public interface BookingIdStage {
        /**
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-cancelled booking.</p>
         */
        _FinalStage bookingId(@NotNull String bookingId);

        Builder from(CancelBookingRequest other);
    }

    public interface _FinalStage {
        CancelBookingRequest build();

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         */
        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        _FinalStage idempotencyKey(Nullable<String> idempotencyKey);

        /**
         * <p>The revision number for the booking used for optimistic concurrency.</p>
         */
        _FinalStage bookingVersion(Optional<Integer> bookingVersion);

        _FinalStage bookingVersion(Integer bookingVersion);

        _FinalStage bookingVersion(Nullable<Integer> bookingVersion);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BookingIdStage, _FinalStage {
        private String bookingId;

        private Optional<Integer> bookingVersion = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CancelBookingRequest other) {
            bookingId(other.getBookingId());
            idempotencyKey(other.getIdempotencyKey());
            bookingVersion(other.getBookingVersion());
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-cancelled booking.</p>
         * <p>The ID of the <a href="entity:Booking">Booking</a> object representing the to-be-cancelled booking.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("booking_id")
        public _FinalStage bookingId(@NotNull String bookingId) {
            this.bookingId = Objects.requireNonNull(bookingId, "bookingId must not be null");
            return this;
        }

        /**
         * <p>The revision number for the booking used for optimistic concurrency.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bookingVersion(Nullable<Integer> bookingVersion) {
            if (bookingVersion.isNull()) {
                this.bookingVersion = null;
            } else if (bookingVersion.isEmpty()) {
                this.bookingVersion = Optional.empty();
            } else {
                this.bookingVersion = Optional.of(bookingVersion.get());
            }
            return this;
        }

        /**
         * <p>The revision number for the booking used for optimistic concurrency.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bookingVersion(Integer bookingVersion) {
            this.bookingVersion = Optional.ofNullable(bookingVersion);
            return this;
        }

        /**
         * <p>The revision number for the booking used for optimistic concurrency.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "booking_version", nulls = Nulls.SKIP)
        public _FinalStage bookingVersion(Optional<Integer> bookingVersion) {
            this.bookingVersion = bookingVersion;
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(Nullable<String> idempotencyKey) {
            if (idempotencyKey.isNull()) {
                this.idempotencyKey = null;
            } else if (idempotencyKey.isEmpty()) {
                this.idempotencyKey = Optional.empty();
            } else {
                this.idempotencyKey = Optional.of(idempotencyKey.get());
            }
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>A unique key to make this request an idempotent operation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public CancelBookingRequest build() {
            return new CancelBookingRequest(bookingId, idempotencyKey, bookingVersion, additionalProperties);
        }
    }
}
