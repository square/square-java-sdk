/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogTax.Builder.class)
public final class CatalogTax {
    private final Optional<String> name;

    private final Optional<TaxCalculationPhase> calculationPhase;

    private final Optional<TaxInclusionType> inclusionType;

    private final Optional<String> percentage;

    private final Optional<Boolean> appliesToCustomAmounts;

    private final Optional<Boolean> enabled;

    private final Optional<String> appliesToProductSetId;

    private final Map<String, Object> additionalProperties;

    private CatalogTax(
            Optional<String> name,
            Optional<TaxCalculationPhase> calculationPhase,
            Optional<TaxInclusionType> inclusionType,
            Optional<String> percentage,
            Optional<Boolean> appliesToCustomAmounts,
            Optional<Boolean> enabled,
            Optional<String> appliesToProductSetId,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.calculationPhase = calculationPhase;
        this.inclusionType = inclusionType;
        this.percentage = percentage;
        this.appliesToCustomAmounts = appliesToCustomAmounts;
        this.enabled = enabled;
        this.appliesToProductSetId = appliesToProductSetId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Whether the tax is calculated based on a payment's subtotal or total.
     * See <a href="#type-taxcalculationphase">TaxCalculationPhase</a> for possible values
     */
    @JsonProperty("calculation_phase")
    public Optional<TaxCalculationPhase> getCalculationPhase() {
        return calculationPhase;
    }

    /**
     * @return Whether the tax is <code>ADDITIVE</code> or <code>INCLUSIVE</code>.
     * See <a href="#type-taxinclusiontype">TaxInclusionType</a> for possible values
     */
    @JsonProperty("inclusion_type")
    public Optional<TaxInclusionType> getInclusionType() {
        return inclusionType;
    }

    /**
     * @return The percentage of the tax in decimal form, using a <code>'.'</code> as the decimal separator and without a <code>'%'</code> sign.
     * A value of <code>7.5</code> corresponds to 7.5%. For a location-specific tax rate, contact the tax authority of the location or a tax consultant.
     */
    @JsonIgnore
    public Optional<String> getPercentage() {
        if (percentage == null) {
            return Optional.empty();
        }
        return percentage;
    }

    /**
     * @return If <code>true</code>, the fee applies to custom amounts entered into the Square Point of Sale
     * app that are not associated with a particular <code>CatalogItem</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getAppliesToCustomAmounts() {
        if (appliesToCustomAmounts == null) {
            return Optional.empty();
        }
        return appliesToCustomAmounts;
    }

    /**
     * @return A Boolean flag to indicate whether the tax is displayed as enabled (<code>true</code>) in the Square Point of Sale app or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getEnabled() {
        if (enabled == null) {
            return Optional.empty();
        }
        return enabled;
    }

    /**
     * @return The ID of a <code>CatalogProductSet</code> object. If set, the tax is applicable to all products in the product set.
     */
    @JsonIgnore
    public Optional<String> getAppliesToProductSetId() {
        if (appliesToProductSetId == null) {
            return Optional.empty();
        }
        return appliesToProductSetId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("percentage")
    private Optional<String> _getPercentage() {
        return percentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applies_to_custom_amounts")
    private Optional<Boolean> _getAppliesToCustomAmounts() {
        return appliesToCustomAmounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enabled")
    private Optional<Boolean> _getEnabled() {
        return enabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applies_to_product_set_id")
    private Optional<String> _getAppliesToProductSetId() {
        return appliesToProductSetId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogTax && equalTo((CatalogTax) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogTax other) {
        return name.equals(other.name)
                && calculationPhase.equals(other.calculationPhase)
                && inclusionType.equals(other.inclusionType)
                && percentage.equals(other.percentage)
                && appliesToCustomAmounts.equals(other.appliesToCustomAmounts)
                && enabled.equals(other.enabled)
                && appliesToProductSetId.equals(other.appliesToProductSetId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.calculationPhase,
                this.inclusionType,
                this.percentage,
                this.appliesToCustomAmounts,
                this.enabled,
                this.appliesToProductSetId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<TaxCalculationPhase> calculationPhase = Optional.empty();

        private Optional<TaxInclusionType> inclusionType = Optional.empty();

        private Optional<String> percentage = Optional.empty();

        private Optional<Boolean> appliesToCustomAmounts = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<String> appliesToProductSetId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogTax other) {
            name(other.getName());
            calculationPhase(other.getCalculationPhase());
            inclusionType(other.getInclusionType());
            percentage(other.getPercentage());
            appliesToCustomAmounts(other.getAppliesToCustomAmounts());
            enabled(other.getEnabled());
            appliesToProductSetId(other.getAppliesToProductSetId());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "calculation_phase", nulls = Nulls.SKIP)
        public Builder calculationPhase(Optional<TaxCalculationPhase> calculationPhase) {
            this.calculationPhase = calculationPhase;
            return this;
        }

        public Builder calculationPhase(TaxCalculationPhase calculationPhase) {
            this.calculationPhase = Optional.ofNullable(calculationPhase);
            return this;
        }

        @JsonSetter(value = "inclusion_type", nulls = Nulls.SKIP)
        public Builder inclusionType(Optional<TaxInclusionType> inclusionType) {
            this.inclusionType = inclusionType;
            return this;
        }

        public Builder inclusionType(TaxInclusionType inclusionType) {
            this.inclusionType = Optional.ofNullable(inclusionType);
            return this;
        }

        @JsonSetter(value = "percentage", nulls = Nulls.SKIP)
        public Builder percentage(Optional<String> percentage) {
            this.percentage = percentage;
            return this;
        }

        public Builder percentage(String percentage) {
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        public Builder percentage(Nullable<String> percentage) {
            if (percentage.isNull()) {
                this.percentage = null;
            } else if (percentage.isEmpty()) {
                this.percentage = Optional.empty();
            } else {
                this.percentage = Optional.of(percentage.get());
            }
            return this;
        }

        @JsonSetter(value = "applies_to_custom_amounts", nulls = Nulls.SKIP)
        public Builder appliesToCustomAmounts(Optional<Boolean> appliesToCustomAmounts) {
            this.appliesToCustomAmounts = appliesToCustomAmounts;
            return this;
        }

        public Builder appliesToCustomAmounts(Boolean appliesToCustomAmounts) {
            this.appliesToCustomAmounts = Optional.ofNullable(appliesToCustomAmounts);
            return this;
        }

        public Builder appliesToCustomAmounts(Nullable<Boolean> appliesToCustomAmounts) {
            if (appliesToCustomAmounts.isNull()) {
                this.appliesToCustomAmounts = null;
            } else if (appliesToCustomAmounts.isEmpty()) {
                this.appliesToCustomAmounts = Optional.empty();
            } else {
                this.appliesToCustomAmounts = Optional.of(appliesToCustomAmounts.get());
            }
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Nullable<Boolean> enabled) {
            if (enabled.isNull()) {
                this.enabled = null;
            } else if (enabled.isEmpty()) {
                this.enabled = Optional.empty();
            } else {
                this.enabled = Optional.of(enabled.get());
            }
            return this;
        }

        @JsonSetter(value = "applies_to_product_set_id", nulls = Nulls.SKIP)
        public Builder appliesToProductSetId(Optional<String> appliesToProductSetId) {
            this.appliesToProductSetId = appliesToProductSetId;
            return this;
        }

        public Builder appliesToProductSetId(String appliesToProductSetId) {
            this.appliesToProductSetId = Optional.ofNullable(appliesToProductSetId);
            return this;
        }

        public Builder appliesToProductSetId(Nullable<String> appliesToProductSetId) {
            if (appliesToProductSetId.isNull()) {
                this.appliesToProductSetId = null;
            } else if (appliesToProductSetId.isEmpty()) {
                this.appliesToProductSetId = Optional.empty();
            } else {
                this.appliesToProductSetId = Optional.of(appliesToProductSetId.get());
            }
            return this;
        }

        public CatalogTax build() {
            return new CatalogTax(
                    name,
                    calculationPhase,
                    inclusionType,
                    percentage,
                    appliesToCustomAmounts,
                    enabled,
                    appliesToProductSetId,
                    additionalProperties);
        }
    }
}
