/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerCreationSourceFilter.Builder.class)
public final class CustomerCreationSourceFilter {
    private final Optional<List<CustomerCreationSource>> values;

    private final Optional<CustomerInclusionExclusion> rule;

    private final Map<String, Object> additionalProperties;

    private CustomerCreationSourceFilter(
            Optional<List<CustomerCreationSource>> values,
            Optional<CustomerInclusionExclusion> rule,
            Map<String, Object> additionalProperties) {
        this.values = values;
        this.rule = rule;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The list of creation sources used as filtering criteria.
     * See <a href="#type-customercreationsource">CustomerCreationSource</a> for possible values
     */
    @JsonIgnore
    public Optional<List<CustomerCreationSource>> getValues() {
        if (values == null) {
            return Optional.empty();
        }
        return values;
    }

    /**
     * @return Indicates whether a customer profile matching the filter criteria
     * should be included in the result or excluded from the result.
     * <p>Default: <code>INCLUDE</code>.
     * See <a href="#type-customerinclusionexclusion">CustomerInclusionExclusion</a> for possible values</p>
     */
    @JsonProperty("rule")
    public Optional<CustomerInclusionExclusion> getRule() {
        return rule;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("values")
    private Optional<List<CustomerCreationSource>> _getValues() {
        return values;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerCreationSourceFilter && equalTo((CustomerCreationSourceFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerCreationSourceFilter other) {
        return values.equals(other.values) && rule.equals(other.rule);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.values, this.rule);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CustomerCreationSource>> values = Optional.empty();

        private Optional<CustomerInclusionExclusion> rule = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerCreationSourceFilter other) {
            values(other.getValues());
            rule(other.getRule());
            return this;
        }

        @JsonSetter(value = "values", nulls = Nulls.SKIP)
        public Builder values(Optional<List<CustomerCreationSource>> values) {
            this.values = values;
            return this;
        }

        public Builder values(List<CustomerCreationSource> values) {
            this.values = Optional.ofNullable(values);
            return this;
        }

        public Builder values(Nullable<List<CustomerCreationSource>> values) {
            if (values.isNull()) {
                this.values = null;
            } else if (values.isEmpty()) {
                this.values = Optional.empty();
            } else {
                this.values = Optional.of(values.get());
            }
            return this;
        }

        @JsonSetter(value = "rule", nulls = Nulls.SKIP)
        public Builder rule(Optional<CustomerInclusionExclusion> rule) {
            this.rule = rule;
            return this;
        }

        public Builder rule(CustomerInclusionExclusion rule) {
            this.rule = Optional.ofNullable(rule);
            return this;
        }

        public CustomerCreationSourceFilter build() {
            return new CustomerCreationSourceFilter(values, rule, additionalProperties);
        }
    }
}
