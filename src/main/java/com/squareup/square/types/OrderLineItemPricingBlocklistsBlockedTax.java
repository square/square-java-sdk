/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItemPricingBlocklistsBlockedTax.Builder.class)
public final class OrderLineItemPricingBlocklistsBlockedTax {
    private final Optional<String> uid;

    private final Optional<String> taxUid;

    private final Optional<String> taxCatalogObjectId;

    private final Map<String, Object> additionalProperties;

    private OrderLineItemPricingBlocklistsBlockedTax(
            Optional<String> uid,
            Optional<String> taxUid,
            Optional<String> taxCatalogObjectId,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.taxUid = taxUid;
        this.taxCatalogObjectId = taxCatalogObjectId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID of the <code>BlockedTax</code> within the order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The <code>uid</code> of the tax that should be blocked. Use this field to block
     * ad hoc taxes. For catalog, taxes use the <code>tax_catalog_object_id</code> field.
     */
    @JsonIgnore
    public Optional<String> getTaxUid() {
        if (taxUid == null) {
            return Optional.empty();
        }
        return taxUid;
    }

    /**
     * @return The <code>catalog_object_id</code> of the tax that should be blocked.
     * Use this field to block catalog taxes. For ad hoc taxes, use the
     * <code>tax_uid</code> field.
     */
    @JsonIgnore
    public Optional<String> getTaxCatalogObjectId() {
        if (taxCatalogObjectId == null) {
            return Optional.empty();
        }
        return taxCatalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tax_uid")
    private Optional<String> _getTaxUid() {
        return taxUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tax_catalog_object_id")
    private Optional<String> _getTaxCatalogObjectId() {
        return taxCatalogObjectId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItemPricingBlocklistsBlockedTax
                && equalTo((OrderLineItemPricingBlocklistsBlockedTax) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItemPricingBlocklistsBlockedTax other) {
        return uid.equals(other.uid)
                && taxUid.equals(other.taxUid)
                && taxCatalogObjectId.equals(other.taxCatalogObjectId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.taxUid, this.taxCatalogObjectId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> taxUid = Optional.empty();

        private Optional<String> taxCatalogObjectId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineItemPricingBlocklistsBlockedTax other) {
            uid(other.getUid());
            taxUid(other.getTaxUid());
            taxCatalogObjectId(other.getTaxCatalogObjectId());
            return this;
        }

        /**
         * <p>A unique ID of the <code>BlockedTax</code> within the order.</p>
         */
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>The <code>uid</code> of the tax that should be blocked. Use this field to block
         * ad hoc taxes. For catalog, taxes use the <code>tax_catalog_object_id</code> field.</p>
         */
        @JsonSetter(value = "tax_uid", nulls = Nulls.SKIP)
        public Builder taxUid(Optional<String> taxUid) {
            this.taxUid = taxUid;
            return this;
        }

        public Builder taxUid(String taxUid) {
            this.taxUid = Optional.ofNullable(taxUid);
            return this;
        }

        public Builder taxUid(Nullable<String> taxUid) {
            if (taxUid.isNull()) {
                this.taxUid = null;
            } else if (taxUid.isEmpty()) {
                this.taxUid = Optional.empty();
            } else {
                this.taxUid = Optional.of(taxUid.get());
            }
            return this;
        }

        /**
         * <p>The <code>catalog_object_id</code> of the tax that should be blocked.
         * Use this field to block catalog taxes. For ad hoc taxes, use the
         * <code>tax_uid</code> field.</p>
         */
        @JsonSetter(value = "tax_catalog_object_id", nulls = Nulls.SKIP)
        public Builder taxCatalogObjectId(Optional<String> taxCatalogObjectId) {
            this.taxCatalogObjectId = taxCatalogObjectId;
            return this;
        }

        public Builder taxCatalogObjectId(String taxCatalogObjectId) {
            this.taxCatalogObjectId = Optional.ofNullable(taxCatalogObjectId);
            return this;
        }

        public Builder taxCatalogObjectId(Nullable<String> taxCatalogObjectId) {
            if (taxCatalogObjectId.isNull()) {
                this.taxCatalogObjectId = null;
            } else if (taxCatalogObjectId.isEmpty()) {
                this.taxCatalogObjectId = Optional.empty();
            } else {
                this.taxCatalogObjectId = Optional.of(taxCatalogObjectId.get());
            }
            return this;
        }

        public OrderLineItemPricingBlocklistsBlockedTax build() {
            return new OrderLineItemPricingBlocklistsBlockedTax(uid, taxUid, taxCatalogObjectId, additionalProperties);
        }
    }
}
