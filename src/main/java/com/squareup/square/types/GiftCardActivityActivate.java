/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GiftCardActivityActivate.Builder.class)
public final class GiftCardActivityActivate {
    private final Optional<Money> amountMoney;

    private final Optional<String> orderId;

    private final Optional<String> lineItemUid;

    private final Optional<String> referenceId;

    private final Optional<List<String>> buyerPaymentInstrumentIds;

    private final Map<String, Object> additionalProperties;

    private GiftCardActivityActivate(
            Optional<Money> amountMoney,
            Optional<String> orderId,
            Optional<String> lineItemUid,
            Optional<String> referenceId,
            Optional<List<String>> buyerPaymentInstrumentIds,
            Map<String, Object> additionalProperties) {
        this.amountMoney = amountMoney;
        this.orderId = orderId;
        this.lineItemUid = lineItemUid;
        this.referenceId = referenceId;
        this.buyerPaymentInstrumentIds = buyerPaymentInstrumentIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount added to the gift card. This value is a positive integer.
     * <p>Applications that use a custom order processing system must specify this amount in the
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.</p>
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The ID of the <a href="entity:Order">order</a> that contains the <code>GIFT_CARD</code> line item.
     * <p>Applications that use the Square Orders API to process orders must specify the order ID
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.</p>
     */
    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return The UID of the <code>GIFT_CARD</code> line item in the order that represents the gift card purchase.
     * <p>Applications that use the Square Orders API to process orders must specify the line item UID
     * in the <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.</p>
     */
    @JsonIgnore
    public Optional<String> getLineItemUid() {
        if (lineItemUid == null) {
            return Optional.empty();
        }
        return lineItemUid;
    }

    /**
     * @return A client-specified ID that associates the gift card activity with an entity in another system.
     * <p>Applications that use a custom order processing system can use this field to track information
     * related to an order or payment.</p>
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The payment instrument IDs used to process the gift card purchase, such as a credit card ID
     * or bank account ID.
     * <p>Applications that use a custom order processing system must specify payment instrument IDs in
     * the <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.
     * Square uses this information to perform compliance checks.</p>
     * <p>For applications that use the Square Orders API to process payments, Square has the necessary
     * instrument IDs to perform compliance checks.</p>
     * <p>Each buyer payment instrument ID can contain a maximum of 255 characters.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getBuyerPaymentInstrumentIds() {
        if (buyerPaymentInstrumentIds == null) {
            return Optional.empty();
        }
        return buyerPaymentInstrumentIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("order_id")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("line_item_uid")
    private Optional<String> _getLineItemUid() {
        return lineItemUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("buyer_payment_instrument_ids")
    private Optional<List<String>> _getBuyerPaymentInstrumentIds() {
        return buyerPaymentInstrumentIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GiftCardActivityActivate && equalTo((GiftCardActivityActivate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GiftCardActivityActivate other) {
        return amountMoney.equals(other.amountMoney)
                && orderId.equals(other.orderId)
                && lineItemUid.equals(other.lineItemUid)
                && referenceId.equals(other.referenceId)
                && buyerPaymentInstrumentIds.equals(other.buyerPaymentInstrumentIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amountMoney, this.orderId, this.lineItemUid, this.referenceId, this.buyerPaymentInstrumentIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Money> amountMoney = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> lineItemUid = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<List<String>> buyerPaymentInstrumentIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GiftCardActivityActivate other) {
            amountMoney(other.getAmountMoney());
            orderId(other.getOrderId());
            lineItemUid(other.getLineItemUid());
            referenceId(other.getReferenceId());
            buyerPaymentInstrumentIds(other.getBuyerPaymentInstrumentIds());
            return this;
        }

        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        @JsonSetter(value = "order_id", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        @JsonSetter(value = "line_item_uid", nulls = Nulls.SKIP)
        public Builder lineItemUid(Optional<String> lineItemUid) {
            this.lineItemUid = lineItemUid;
            return this;
        }

        public Builder lineItemUid(String lineItemUid) {
            this.lineItemUid = Optional.ofNullable(lineItemUid);
            return this;
        }

        public Builder lineItemUid(Nullable<String> lineItemUid) {
            if (lineItemUid.isNull()) {
                this.lineItemUid = null;
            } else if (lineItemUid.isEmpty()) {
                this.lineItemUid = Optional.empty();
            } else {
                this.lineItemUid = Optional.of(lineItemUid.get());
            }
            return this;
        }

        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        @JsonSetter(value = "buyer_payment_instrument_ids", nulls = Nulls.SKIP)
        public Builder buyerPaymentInstrumentIds(Optional<List<String>> buyerPaymentInstrumentIds) {
            this.buyerPaymentInstrumentIds = buyerPaymentInstrumentIds;
            return this;
        }

        public Builder buyerPaymentInstrumentIds(List<String> buyerPaymentInstrumentIds) {
            this.buyerPaymentInstrumentIds = Optional.ofNullable(buyerPaymentInstrumentIds);
            return this;
        }

        public Builder buyerPaymentInstrumentIds(Nullable<List<String>> buyerPaymentInstrumentIds) {
            if (buyerPaymentInstrumentIds.isNull()) {
                this.buyerPaymentInstrumentIds = null;
            } else if (buyerPaymentInstrumentIds.isEmpty()) {
                this.buyerPaymentInstrumentIds = Optional.empty();
            } else {
                this.buyerPaymentInstrumentIds = Optional.of(buyerPaymentInstrumentIds.get());
            }
            return this;
        }

        public GiftCardActivityActivate build() {
            return new GiftCardActivityActivate(
                    amountMoney, orderId, lineItemUid, referenceId, buyerPaymentInstrumentIds, additionalProperties);
        }
    }
}
