/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardForgottenEventCard.Builder.class)
public final class CardForgottenEventCard {
    private final Optional<String> id;

    private final Optional<String> customerId;

    private final Optional<Boolean> enabled;

    private final Optional<String> referenceId;

    private final Optional<Long> version;

    private final Optional<String> merchantId;

    private final Map<String, Object> additionalProperties;

    private CardForgottenEventCard(
            Optional<String> id,
            Optional<String> customerId,
            Optional<Boolean> enabled,
            Optional<String> referenceId,
            Optional<Long> version,
            Optional<String> merchantId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.customerId = customerId;
        this.enabled = enabled;
        this.referenceId = referenceId;
        this.version = version;
        this.merchantId = merchantId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique ID for this card. Generated by Square.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of a customer created using the Customers API associated with the card.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return Indicates whether or not a card can be used for payments.
     */
    @JsonIgnore
    public Optional<Boolean> getEnabled() {
        if (enabled == null) {
            return Optional.empty();
        }
        return enabled;
    }

    /**
     * @return An optional user-defined reference ID that associates this card with
     * another entity in an external system. For example, a customer ID from an
     * external customer management system.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return Current version number of the card. Increments with each card update. Requests to update an
     * existing Card object will be rejected unless the version in the request matches the current
     * version for the Card.
     */
    @JsonProperty("version")
    public Optional<Long> getVersion() {
        return version;
    }

    /**
     * @return The ID of the merchant associated with the card.
     */
    @JsonIgnore
    public Optional<String> getMerchantId() {
        if (merchantId == null) {
            return Optional.empty();
        }
        return merchantId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enabled")
    private Optional<Boolean> _getEnabled() {
        return enabled;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_id")
    private Optional<String> _getMerchantId() {
        return merchantId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardForgottenEventCard && equalTo((CardForgottenEventCard) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardForgottenEventCard other) {
        return id.equals(other.id)
                && customerId.equals(other.customerId)
                && enabled.equals(other.enabled)
                && referenceId.equals(other.referenceId)
                && version.equals(other.version)
                && merchantId.equals(other.merchantId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.customerId, this.enabled, this.referenceId, this.version, this.merchantId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<Long> version = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardForgottenEventCard other) {
            id(other.getId());
            customerId(other.getCustomerId());
            enabled(other.getEnabled());
            referenceId(other.getReferenceId());
            version(other.getVersion());
            merchantId(other.getMerchantId());
            return this;
        }

        /**
         * <p>Unique ID for this card. Generated by Square.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The ID of a customer created using the Customers API associated with the card.</p>
         */
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether or not a card can be used for payments.</p>
         */
        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        public Builder enabled(Nullable<Boolean> enabled) {
            if (enabled.isNull()) {
                this.enabled = null;
            } else if (enabled.isEmpty()) {
                this.enabled = Optional.empty();
            } else {
                this.enabled = Optional.of(enabled.get());
            }
            return this;
        }

        /**
         * <p>An optional user-defined reference ID that associates this card with
         * another entity in an external system. For example, a customer ID from an
         * external customer management system.</p>
         */
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>Current version number of the card. Increments with each card update. Requests to update an
         * existing Card object will be rejected unless the version in the request matches the current
         * version for the Card.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Long> version) {
            this.version = version;
            return this;
        }

        public Builder version(Long version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The ID of the merchant associated with the card.</p>
         */
        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        public Builder merchantId(Nullable<String> merchantId) {
            if (merchantId.isNull()) {
                this.merchantId = null;
            } else if (merchantId.isEmpty()) {
                this.merchantId = Optional.empty();
            } else {
                this.merchantId = Optional.of(merchantId.get());
            }
            return this;
        }

        public CardForgottenEventCard build() {
            return new CardForgottenEventCard(
                    id, customerId, enabled, referenceId, version, merchantId, additionalProperties);
        }
    }
}
