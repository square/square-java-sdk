/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckoutMerchantSettingsPaymentMethods.Builder.class)
public final class CheckoutMerchantSettingsPaymentMethods {
    private final Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> applePay;

    private final Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> googlePay;

    private final Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> cashApp;

    private final Optional<CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay> afterpayClearpay;

    private final Map<String, Object> additionalProperties;

    private CheckoutMerchantSettingsPaymentMethods(
            Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> applePay,
            Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> googlePay,
            Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> cashApp,
            Optional<CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay> afterpayClearpay,
            Map<String, Object> additionalProperties) {
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.cashApp = cashApp;
        this.afterpayClearpay = afterpayClearpay;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("apple_pay")
    public Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> getApplePay() {
        return applePay;
    }

    @JsonProperty("google_pay")
    public Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> getGooglePay() {
        return googlePay;
    }

    @JsonProperty("cash_app")
    public Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> getCashApp() {
        return cashApp;
    }

    @JsonProperty("afterpay_clearpay")
    public Optional<CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay> getAfterpayClearpay() {
        return afterpayClearpay;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckoutMerchantSettingsPaymentMethods
                && equalTo((CheckoutMerchantSettingsPaymentMethods) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckoutMerchantSettingsPaymentMethods other) {
        return applePay.equals(other.applePay)
                && googlePay.equals(other.googlePay)
                && cashApp.equals(other.cashApp)
                && afterpayClearpay.equals(other.afterpayClearpay);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.applePay, this.googlePay, this.cashApp, this.afterpayClearpay);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> applePay = Optional.empty();

        private Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> googlePay = Optional.empty();

        private Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> cashApp = Optional.empty();

        private Optional<CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay> afterpayClearpay = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CheckoutMerchantSettingsPaymentMethods other) {
            applePay(other.getApplePay());
            googlePay(other.getGooglePay());
            cashApp(other.getCashApp());
            afterpayClearpay(other.getAfterpayClearpay());
            return this;
        }

        @JsonSetter(value = "apple_pay", nulls = Nulls.SKIP)
        public Builder applePay(Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> applePay) {
            this.applePay = applePay;
            return this;
        }

        public Builder applePay(CheckoutMerchantSettingsPaymentMethodsPaymentMethod applePay) {
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        @JsonSetter(value = "google_pay", nulls = Nulls.SKIP)
        public Builder googlePay(Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> googlePay) {
            this.googlePay = googlePay;
            return this;
        }

        public Builder googlePay(CheckoutMerchantSettingsPaymentMethodsPaymentMethod googlePay) {
            this.googlePay = Optional.ofNullable(googlePay);
            return this;
        }

        @JsonSetter(value = "cash_app", nulls = Nulls.SKIP)
        public Builder cashApp(Optional<CheckoutMerchantSettingsPaymentMethodsPaymentMethod> cashApp) {
            this.cashApp = cashApp;
            return this;
        }

        public Builder cashApp(CheckoutMerchantSettingsPaymentMethodsPaymentMethod cashApp) {
            this.cashApp = Optional.ofNullable(cashApp);
            return this;
        }

        @JsonSetter(value = "afterpay_clearpay", nulls = Nulls.SKIP)
        public Builder afterpayClearpay(
                Optional<CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay> afterpayClearpay) {
            this.afterpayClearpay = afterpayClearpay;
            return this;
        }

        public Builder afterpayClearpay(CheckoutMerchantSettingsPaymentMethodsAfterpayClearpay afterpayClearpay) {
            this.afterpayClearpay = Optional.ofNullable(afterpayClearpay);
            return this;
        }

        public CheckoutMerchantSettingsPaymentMethods build() {
            return new CheckoutMerchantSettingsPaymentMethods(
                    applePay, googlePay, cashApp, afterpayClearpay, additionalProperties);
        }
    }
}
