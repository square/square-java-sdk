/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchEventsFilter.Builder.class)
public final class SearchEventsFilter {
    private final Optional<List<String>> eventTypes;

    private final Optional<List<String>> merchantIds;

    private final Optional<List<String>> locationIds;

    private final Optional<TimeRange> createdAt;

    private final Map<String, Object> additionalProperties;

    private SearchEventsFilter(
            Optional<List<String>> eventTypes,
            Optional<List<String>> merchantIds,
            Optional<List<String>> locationIds,
            Optional<TimeRange> createdAt,
            Map<String, Object> additionalProperties) {
        this.eventTypes = eventTypes;
        this.merchantIds = merchantIds;
        this.locationIds = locationIds;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter events by event types.
     */
    @JsonIgnore
    public Optional<List<String>> getEventTypes() {
        if (eventTypes == null) {
            return Optional.empty();
        }
        return eventTypes;
    }

    /**
     * @return Filter events by merchant.
     */
    @JsonIgnore
    public Optional<List<String>> getMerchantIds() {
        if (merchantIds == null) {
            return Optional.empty();
        }
        return merchantIds;
    }

    /**
     * @return Filter events by location.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return Filter events by when they were created.
     */
    @JsonProperty("created_at")
    public Optional<TimeRange> getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("event_types")
    private Optional<List<String>> _getEventTypes() {
        return eventTypes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_ids")
    private Optional<List<String>> _getMerchantIds() {
        return merchantIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchEventsFilter && equalTo((SearchEventsFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchEventsFilter other) {
        return eventTypes.equals(other.eventTypes)
                && merchantIds.equals(other.merchantIds)
                && locationIds.equals(other.locationIds)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventTypes, this.merchantIds, this.locationIds, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> eventTypes = Optional.empty();

        private Optional<List<String>> merchantIds = Optional.empty();

        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<TimeRange> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchEventsFilter other) {
            eventTypes(other.getEventTypes());
            merchantIds(other.getMerchantIds());
            locationIds(other.getLocationIds());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "event_types", nulls = Nulls.SKIP)
        public Builder eventTypes(Optional<List<String>> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(List<String> eventTypes) {
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        public Builder eventTypes(Nullable<List<String>> eventTypes) {
            if (eventTypes.isNull()) {
                this.eventTypes = null;
            } else if (eventTypes.isEmpty()) {
                this.eventTypes = Optional.empty();
            } else {
                this.eventTypes = Optional.of(eventTypes.get());
            }
            return this;
        }

        @JsonSetter(value = "merchant_ids", nulls = Nulls.SKIP)
        public Builder merchantIds(Optional<List<String>> merchantIds) {
            this.merchantIds = merchantIds;
            return this;
        }

        public Builder merchantIds(List<String> merchantIds) {
            this.merchantIds = Optional.ofNullable(merchantIds);
            return this;
        }

        public Builder merchantIds(Nullable<List<String>> merchantIds) {
            if (merchantIds.isNull()) {
                this.merchantIds = null;
            } else if (merchantIds.isEmpty()) {
                this.merchantIds = Optional.empty();
            } else {
                this.merchantIds = Optional.of(merchantIds.get());
            }
            return this;
        }

        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<TimeRange> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(TimeRange createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public SearchEventsFilter build() {
            return new SearchEventsFilter(eventTypes, merchantIds, locationIds, createdAt, additionalProperties);
        }
    }
}
