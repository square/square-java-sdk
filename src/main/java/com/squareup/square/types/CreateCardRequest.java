/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCardRequest.Builder.class)
public final class CreateCardRequest {
    private final String idempotencyKey;

    private final String sourceId;

    private final Optional<String> verificationToken;

    private final Card card;

    private final Map<String, Object> additionalProperties;

    private CreateCardRequest(
            String idempotencyKey,
            String sourceId,
            Optional<String> verificationToken,
            Card card,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.sourceId = sourceId;
        this.verificationToken = verificationToken;
        this.card = card;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string that identifies this CreateCard request. Keys can be
     * any valid string and must be unique for every request.
     * <p>Max: 45 characters</p>
     * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
     */
    @JsonProperty("source_id")
    public String getSourceId() {
        return sourceId;
    }

    /**
     * @return An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
     * Verification tokens encapsulate customer device information and 3-D Secure
     * challenge results to indicate that Square has verified the buyer identity.
     * <p>See the <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
     */
    @JsonProperty("verification_token")
    public Optional<String> getVerificationToken() {
        return verificationToken;
    }

    /**
     * @return Payment details associated with the card to be stored.
     */
    @JsonProperty("card")
    public Card getCard() {
        return card;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCardRequest && equalTo((CreateCardRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCardRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && sourceId.equals(other.sourceId)
                && verificationToken.equals(other.verificationToken)
                && card.equals(other.card);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.sourceId, this.verificationToken, this.card);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        SourceIdStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(CreateCardRequest other);
    }

    public interface SourceIdStage {
        CardStage sourceId(@NotNull String sourceId);
    }

    public interface CardStage {
        _FinalStage card(@NotNull Card card);
    }

    public interface _FinalStage {
        CreateCardRequest build();

        _FinalStage verificationToken(Optional<String> verificationToken);

        _FinalStage verificationToken(String verificationToken);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, SourceIdStage, CardStage, _FinalStage {
        private String idempotencyKey;

        private String sourceId;

        private Card card;

        private Optional<String> verificationToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateCardRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            sourceId(other.getSourceId());
            verificationToken(other.getVerificationToken());
            card(other.getCard());
            return this;
        }

        /**
         * <p>A unique string that identifies this CreateCard request. Keys can be
         * any valid string and must be unique for every request.</p>
         * <p>Max: 45 characters</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public SourceIdStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source_id")
        public CardStage sourceId(@NotNull String sourceId) {
            this.sourceId = Objects.requireNonNull(sourceId, "sourceId must not be null");
            return this;
        }

        /**
         * <p>Payment details associated with the card to be stored.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("card")
        public _FinalStage card(@NotNull Card card) {
            this.card = Objects.requireNonNull(card, "card must not be null");
            return this;
        }

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         * <p>See the <a href="https://developer.squareup.com/docs/sca-overview">SCA Overview</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage verificationToken(String verificationToken) {
            this.verificationToken = Optional.ofNullable(verificationToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "verification_token", nulls = Nulls.SKIP)
        public _FinalStage verificationToken(Optional<String> verificationToken) {
            this.verificationToken = verificationToken;
            return this;
        }

        @java.lang.Override
        public CreateCardRequest build() {
            return new CreateCardRequest(idempotencyKey, sourceId, verificationToken, card, additionalProperties);
        }
    }
}
