/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItemPricingBlocklistsBlockedDiscount.Builder.class)
public final class OrderLineItemPricingBlocklistsBlockedDiscount {
    private final Optional<String> uid;

    private final Optional<String> discountUid;

    private final Optional<String> discountCatalogObjectId;

    private final Map<String, Object> additionalProperties;

    private OrderLineItemPricingBlocklistsBlockedDiscount(
            Optional<String> uid,
            Optional<String> discountUid,
            Optional<String> discountCatalogObjectId,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.discountUid = discountUid;
        this.discountCatalogObjectId = discountCatalogObjectId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID of the <code>BlockedDiscount</code> within the order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The <code>uid</code> of the discount that should be blocked. Use this field to block
     * ad hoc discounts. For catalog discounts, use the <code>discount_catalog_object_id</code> field.
     */
    @JsonIgnore
    public Optional<String> getDiscountUid() {
        if (discountUid == null) {
            return Optional.empty();
        }
        return discountUid;
    }

    /**
     * @return The <code>catalog_object_id</code> of the discount that should be blocked.
     * Use this field to block catalog discounts. For ad hoc discounts, use the
     * <code>discount_uid</code> field.
     */
    @JsonIgnore
    public Optional<String> getDiscountCatalogObjectId() {
        if (discountCatalogObjectId == null) {
            return Optional.empty();
        }
        return discountCatalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("discount_uid")
    private Optional<String> _getDiscountUid() {
        return discountUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("discount_catalog_object_id")
    private Optional<String> _getDiscountCatalogObjectId() {
        return discountCatalogObjectId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItemPricingBlocklistsBlockedDiscount
                && equalTo((OrderLineItemPricingBlocklistsBlockedDiscount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItemPricingBlocklistsBlockedDiscount other) {
        return uid.equals(other.uid)
                && discountUid.equals(other.discountUid)
                && discountCatalogObjectId.equals(other.discountCatalogObjectId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.uid, this.discountUid, this.discountCatalogObjectId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> discountUid = Optional.empty();

        private Optional<String> discountCatalogObjectId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderLineItemPricingBlocklistsBlockedDiscount other) {
            uid(other.getUid());
            discountUid(other.getDiscountUid());
            discountCatalogObjectId(other.getDiscountCatalogObjectId());
            return this;
        }

        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        @JsonSetter(value = "discount_uid", nulls = Nulls.SKIP)
        public Builder discountUid(Optional<String> discountUid) {
            this.discountUid = discountUid;
            return this;
        }

        public Builder discountUid(String discountUid) {
            this.discountUid = Optional.ofNullable(discountUid);
            return this;
        }

        public Builder discountUid(Nullable<String> discountUid) {
            if (discountUid.isNull()) {
                this.discountUid = null;
            } else if (discountUid.isEmpty()) {
                this.discountUid = Optional.empty();
            } else {
                this.discountUid = Optional.of(discountUid.get());
            }
            return this;
        }

        @JsonSetter(value = "discount_catalog_object_id", nulls = Nulls.SKIP)
        public Builder discountCatalogObjectId(Optional<String> discountCatalogObjectId) {
            this.discountCatalogObjectId = discountCatalogObjectId;
            return this;
        }

        public Builder discountCatalogObjectId(String discountCatalogObjectId) {
            this.discountCatalogObjectId = Optional.ofNullable(discountCatalogObjectId);
            return this;
        }

        public Builder discountCatalogObjectId(Nullable<String> discountCatalogObjectId) {
            if (discountCatalogObjectId.isNull()) {
                this.discountCatalogObjectId = null;
            } else if (discountCatalogObjectId.isEmpty()) {
                this.discountCatalogObjectId = Optional.empty();
            } else {
                this.discountCatalogObjectId = Optional.of(discountCatalogObjectId.get());
            }
            return this;
        }

        public OrderLineItemPricingBlocklistsBlockedDiscount build() {
            return new OrderLineItemPricingBlocklistsBlockedDiscount(
                    uid, discountUid, discountCatalogObjectId, additionalProperties);
        }
    }
}
