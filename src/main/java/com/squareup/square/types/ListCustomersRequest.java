/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListCustomersRequest.Builder.class)
public final class ListCustomersRequest {
    private final Optional<String> cursor;

    private final Optional<Integer> limit;

    private final Optional<CustomerSortField> sortField;

    private final Optional<SortOrder> sortOrder;

    private final Optional<Boolean> count;

    private final Map<String, Object> additionalProperties;

    private ListCustomersRequest(
            Optional<String> cursor,
            Optional<Integer> limit,
            Optional<CustomerSortField> sortField,
            Optional<SortOrder> sortOrder,
            Optional<Boolean> count,
            Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.limit = limit;
        this.sortField = sortField;
        this.sortOrder = sortOrder;
        this.count = count;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for your original query.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
     * If the specified limit is less than 1 or greater than 100, Square returns a <code>400 VALUE_TOO_LOW</code> or <code>400 VALUE_TOO_HIGH</code> error. The default value is 100.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return Indicates how customers should be sorted.
     * <p>The default value is <code>DEFAULT</code>.</p>
     */
    @JsonIgnore
    public Optional<CustomerSortField> getSortField() {
        if (sortField == null) {
            return Optional.empty();
        }
        return sortField;
    }

    /**
     * @return Indicates whether customers should be sorted in ascending (<code>ASC</code>) or
     * descending (<code>DESC</code>) order.
     * <p>The default value is <code>ASC</code>.</p>
     */
    @JsonIgnore
    public Optional<SortOrder> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    /**
     * @return Indicates whether to return the total count of customers in the <code>count</code> field of the response.
     * <p>The default value is <code>false</code>.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getCount() {
        if (count == null) {
            return Optional.empty();
        }
        return count;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_field")
    private Optional<CustomerSortField> _getSortField() {
        return sortField;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<SortOrder> _getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("count")
    private Optional<Boolean> _getCount() {
        return count;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListCustomersRequest && equalTo((ListCustomersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListCustomersRequest other) {
        return cursor.equals(other.cursor)
                && limit.equals(other.limit)
                && sortField.equals(other.sortField)
                && sortOrder.equals(other.sortOrder)
                && count.equals(other.count);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cursor, this.limit, this.sortField, this.sortOrder, this.count);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<CustomerSortField> sortField = Optional.empty();

        private Optional<SortOrder> sortOrder = Optional.empty();

        private Optional<Boolean> count = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListCustomersRequest other) {
            cursor(other.getCursor());
            limit(other.getLimit());
            sortField(other.getSortField());
            sortOrder(other.getSortOrder());
            count(other.getCount());
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        @JsonSetter(value = "sort_field", nulls = Nulls.SKIP)
        public Builder sortField(Optional<CustomerSortField> sortField) {
            this.sortField = sortField;
            return this;
        }

        public Builder sortField(CustomerSortField sortField) {
            this.sortField = Optional.ofNullable(sortField);
            return this;
        }

        public Builder sortField(Nullable<CustomerSortField> sortField) {
            if (sortField.isNull()) {
                this.sortField = null;
            } else if (sortField.isEmpty()) {
                this.sortField = Optional.empty();
            } else {
                this.sortField = Optional.of(sortField.get());
            }
            return this;
        }

        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Nullable<SortOrder> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        @JsonSetter(value = "count", nulls = Nulls.SKIP)
        public Builder count(Optional<Boolean> count) {
            this.count = count;
            return this;
        }

        public Builder count(Boolean count) {
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Nullable<Boolean> count) {
            if (count.isNull()) {
                this.count = null;
            } else if (count.isEmpty()) {
                this.count = Optional.empty();
            } else {
                this.count = Optional.of(count.get());
            }
            return this;
        }

        public ListCustomersRequest build() {
            return new ListCustomersRequest(cursor, limit, sortField, sortOrder, count, additionalProperties);
        }
    }
}
