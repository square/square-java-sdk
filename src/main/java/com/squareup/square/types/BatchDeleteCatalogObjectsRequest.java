/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchDeleteCatalogObjectsRequest.Builder.class)
public final class BatchDeleteCatalogObjectsRequest {
    private final Optional<List<String>> objectIds;

    private final Map<String, Object> additionalProperties;

    private BatchDeleteCatalogObjectsRequest(
            Optional<List<String>> objectIds, Map<String, Object> additionalProperties) {
        this.objectIds = objectIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
     * in the graph that depend on that object will be deleted as well (for example, deleting a
     * CatalogItem will delete its CatalogItemVariation.
     */
    @JsonIgnore
    public Optional<List<String>> getObjectIds() {
        if (objectIds == null) {
            return Optional.empty();
        }
        return objectIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("object_ids")
    private Optional<List<String>> _getObjectIds() {
        return objectIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchDeleteCatalogObjectsRequest && equalTo((BatchDeleteCatalogObjectsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchDeleteCatalogObjectsRequest other) {
        return objectIds.equals(other.objectIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.objectIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> objectIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchDeleteCatalogObjectsRequest other) {
            objectIds(other.getObjectIds());
            return this;
        }

        @JsonSetter(value = "object_ids", nulls = Nulls.SKIP)
        public Builder objectIds(Optional<List<String>> objectIds) {
            this.objectIds = objectIds;
            return this;
        }

        public Builder objectIds(List<String> objectIds) {
            this.objectIds = Optional.ofNullable(objectIds);
            return this;
        }

        public Builder objectIds(Nullable<List<String>> objectIds) {
            if (objectIds.isNull()) {
                this.objectIds = null;
            } else if (objectIds.isEmpty()) {
                this.objectIds = Optional.empty();
            } else {
                this.objectIds = Optional.of(objectIds.get());
            }
            return this;
        }

        public BatchDeleteCatalogObjectsRequest build() {
            return new BatchDeleteCatalogObjectsRequest(objectIds, additionalProperties);
        }
    }
}
