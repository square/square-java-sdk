/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateDisputeEvidenceFileRequest.Builder.class)
public final class CreateDisputeEvidenceFileRequest {
    private final String idempotencyKey;

    private final Optional<DisputeEvidenceType> evidenceType;

    private final Optional<String> contentType;

    private final Map<String, Object> additionalProperties;

    private CreateDisputeEvidenceFileRequest(
            String idempotencyKey,
            Optional<DisputeEvidenceType> evidenceType,
            Optional<String> contentType,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.evidenceType = evidenceType;
        this.contentType = contentType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The type of evidence you are uploading.
     * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values
     */
    @JsonProperty("evidence_type")
    public Optional<DisputeEvidenceType> getEvidenceType() {
        return evidenceType;
    }

    /**
     * @return The MIME type of the uploaded file.
     * The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.
     */
    @JsonProperty("content_type")
    public Optional<String> getContentType() {
        return contentType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateDisputeEvidenceFileRequest && equalTo((CreateDisputeEvidenceFileRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateDisputeEvidenceFileRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && evidenceType.equals(other.evidenceType)
                && contentType.equals(other.contentType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.evidenceType, this.contentType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(CreateDisputeEvidenceFileRequest other);
    }

    public interface _FinalStage {
        CreateDisputeEvidenceFileRequest build();

        _FinalStage evidenceType(Optional<DisputeEvidenceType> evidenceType);

        _FinalStage evidenceType(DisputeEvidenceType evidenceType);

        _FinalStage contentType(Optional<String> contentType);

        _FinalStage contentType(String contentType);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, _FinalStage {
        private String idempotencyKey;

        private Optional<String> contentType = Optional.empty();

        private Optional<DisputeEvidenceType> evidenceType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateDisputeEvidenceFileRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            evidenceType(other.getEvidenceType());
            contentType(other.getContentType());
            return this;
        }

        /**
         * <p>A unique key identifying the request. For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The MIME type of the uploaded file.
         * The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contentType(String contentType) {
            this.contentType = Optional.ofNullable(contentType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content_type", nulls = Nulls.SKIP)
        public _FinalStage contentType(Optional<String> contentType) {
            this.contentType = contentType;
            return this;
        }

        /**
         * <p>The type of evidence you are uploading.
         * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage evidenceType(DisputeEvidenceType evidenceType) {
            this.evidenceType = Optional.ofNullable(evidenceType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "evidence_type", nulls = Nulls.SKIP)
        public _FinalStage evidenceType(Optional<DisputeEvidenceType> evidenceType) {
            this.evidenceType = evidenceType;
            return this;
        }

        @java.lang.Override
        public CreateDisputeEvidenceFileRequest build() {
            return new CreateDisputeEvidenceFileRequest(
                    idempotencyKey, evidenceType, contentType, additionalProperties);
        }
    }
}
