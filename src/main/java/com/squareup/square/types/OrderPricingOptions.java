/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderPricingOptions.Builder.class)
public final class OrderPricingOptions {
    private final Optional<Boolean> autoApplyDiscounts;

    private final Optional<Boolean> autoApplyTaxes;

    private final Map<String, Object> additionalProperties;

    private OrderPricingOptions(
            Optional<Boolean> autoApplyDiscounts,
            Optional<Boolean> autoApplyTaxes,
            Map<String, Object> additionalProperties) {
        this.autoApplyDiscounts = autoApplyDiscounts;
        this.autoApplyTaxes = autoApplyTaxes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The option to determine whether pricing rule-based
     * discounts are automatically applied to an order.
     */
    @JsonIgnore
    public Optional<Boolean> getAutoApplyDiscounts() {
        if (autoApplyDiscounts == null) {
            return Optional.empty();
        }
        return autoApplyDiscounts;
    }

    /**
     * @return The option to determine whether rule-based taxes are automatically
     * applied to an order when the criteria of the corresponding rules are met.
     */
    @JsonIgnore
    public Optional<Boolean> getAutoApplyTaxes() {
        if (autoApplyTaxes == null) {
            return Optional.empty();
        }
        return autoApplyTaxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("auto_apply_discounts")
    private Optional<Boolean> _getAutoApplyDiscounts() {
        return autoApplyDiscounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("auto_apply_taxes")
    private Optional<Boolean> _getAutoApplyTaxes() {
        return autoApplyTaxes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderPricingOptions && equalTo((OrderPricingOptions) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderPricingOptions other) {
        return autoApplyDiscounts.equals(other.autoApplyDiscounts) && autoApplyTaxes.equals(other.autoApplyTaxes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.autoApplyDiscounts, this.autoApplyTaxes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> autoApplyDiscounts = Optional.empty();

        private Optional<Boolean> autoApplyTaxes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderPricingOptions other) {
            autoApplyDiscounts(other.getAutoApplyDiscounts());
            autoApplyTaxes(other.getAutoApplyTaxes());
            return this;
        }

        @JsonSetter(value = "auto_apply_discounts", nulls = Nulls.SKIP)
        public Builder autoApplyDiscounts(Optional<Boolean> autoApplyDiscounts) {
            this.autoApplyDiscounts = autoApplyDiscounts;
            return this;
        }

        public Builder autoApplyDiscounts(Boolean autoApplyDiscounts) {
            this.autoApplyDiscounts = Optional.ofNullable(autoApplyDiscounts);
            return this;
        }

        public Builder autoApplyDiscounts(Nullable<Boolean> autoApplyDiscounts) {
            if (autoApplyDiscounts.isNull()) {
                this.autoApplyDiscounts = null;
            } else if (autoApplyDiscounts.isEmpty()) {
                this.autoApplyDiscounts = Optional.empty();
            } else {
                this.autoApplyDiscounts = Optional.of(autoApplyDiscounts.get());
            }
            return this;
        }

        @JsonSetter(value = "auto_apply_taxes", nulls = Nulls.SKIP)
        public Builder autoApplyTaxes(Optional<Boolean> autoApplyTaxes) {
            this.autoApplyTaxes = autoApplyTaxes;
            return this;
        }

        public Builder autoApplyTaxes(Boolean autoApplyTaxes) {
            this.autoApplyTaxes = Optional.ofNullable(autoApplyTaxes);
            return this;
        }

        public Builder autoApplyTaxes(Nullable<Boolean> autoApplyTaxes) {
            if (autoApplyTaxes.isNull()) {
                this.autoApplyTaxes = null;
            } else if (autoApplyTaxes.isEmpty()) {
                this.autoApplyTaxes = Optional.empty();
            } else {
                this.autoApplyTaxes = Optional.of(autoApplyTaxes.get());
            }
            return this;
        }

        public OrderPricingOptions build() {
            return new OrderPricingOptions(autoApplyDiscounts, autoApplyTaxes, additionalProperties);
        }
    }
}
