/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomAttributeFilter.Builder.class)
public final class CustomAttributeFilter {
    private final Optional<String> customAttributeDefinitionId;

    private final Optional<String> key;

    private final Optional<String> stringFilter;

    private final Optional<Range> numberFilter;

    private final Optional<List<String>> selectionUidsFilter;

    private final Optional<Boolean> boolFilter;

    private final Map<String, Object> additionalProperties;

    private CustomAttributeFilter(
            Optional<String> customAttributeDefinitionId,
            Optional<String> key,
            Optional<String> stringFilter,
            Optional<Range> numberFilter,
            Optional<List<String>> selectionUidsFilter,
            Optional<Boolean> boolFilter,
            Map<String, Object> additionalProperties) {
        this.customAttributeDefinitionId = customAttributeDefinitionId;
        this.key = key;
        this.stringFilter = stringFilter;
        this.numberFilter = numberFilter;
        this.selectionUidsFilter = selectionUidsFilter;
        this.boolFilter = boolFilter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A query expression to filter items or item variations by matching their custom attributes'
     * <code>custom_attribute_definition_id</code> property value against the the specified id.
     * Exactly one of <code>custom_attribute_definition_id</code> or <code>key</code> must be specified.
     */
    @JsonIgnore
    public Optional<String> getCustomAttributeDefinitionId() {
        if (customAttributeDefinitionId == null) {
            return Optional.empty();
        }
        return customAttributeDefinitionId;
    }

    /**
     * @return A query expression to filter items or item variations by matching their custom attributes'
     * <code>key</code> property value against the specified key.
     * Exactly one of <code>custom_attribute_definition_id</code> or <code>key</code> must be specified.
     */
    @JsonIgnore
    public Optional<String> getKey() {
        if (key == null) {
            return Optional.empty();
        }
        return key;
    }

    /**
     * @return A query expression to filter items or item variations by matching their custom attributes'
     * <code>string_value</code>  property value against the specified text.
     * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.
     */
    @JsonIgnore
    public Optional<String> getStringFilter() {
        if (stringFilter == null) {
            return Optional.empty();
        }
        return stringFilter;
    }

    /**
     * @return A query expression to filter items or item variations with their custom attributes
     * containing a number value within the specified range.
     * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.
     */
    @JsonProperty("number_filter")
    public Optional<Range> getNumberFilter() {
        return numberFilter;
    }

    /**
     * @return A query expression to filter items or item variations by matching  their custom attributes'
     * <code>selection_uid_values</code> values against the specified selection uids.
     * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.
     */
    @JsonIgnore
    public Optional<List<String>> getSelectionUidsFilter() {
        if (selectionUidsFilter == null) {
            return Optional.empty();
        }
        return selectionUidsFilter;
    }

    /**
     * @return A query expression to filter items or item variations by matching their custom attributes'
     * <code>boolean_value</code> property values against the specified Boolean expression.
     * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.
     */
    @JsonIgnore
    public Optional<Boolean> getBoolFilter() {
        if (boolFilter == null) {
            return Optional.empty();
        }
        return boolFilter;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("custom_attribute_definition_id")
    private Optional<String> _getCustomAttributeDefinitionId() {
        return customAttributeDefinitionId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("key")
    private Optional<String> _getKey() {
        return key;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("string_filter")
    private Optional<String> _getStringFilter() {
        return stringFilter;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("selection_uids_filter")
    private Optional<List<String>> _getSelectionUidsFilter() {
        return selectionUidsFilter;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bool_filter")
    private Optional<Boolean> _getBoolFilter() {
        return boolFilter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomAttributeFilter && equalTo((CustomAttributeFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomAttributeFilter other) {
        return customAttributeDefinitionId.equals(other.customAttributeDefinitionId)
                && key.equals(other.key)
                && stringFilter.equals(other.stringFilter)
                && numberFilter.equals(other.numberFilter)
                && selectionUidsFilter.equals(other.selectionUidsFilter)
                && boolFilter.equals(other.boolFilter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customAttributeDefinitionId,
                this.key,
                this.stringFilter,
                this.numberFilter,
                this.selectionUidsFilter,
                this.boolFilter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> customAttributeDefinitionId = Optional.empty();

        private Optional<String> key = Optional.empty();

        private Optional<String> stringFilter = Optional.empty();

        private Optional<Range> numberFilter = Optional.empty();

        private Optional<List<String>> selectionUidsFilter = Optional.empty();

        private Optional<Boolean> boolFilter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomAttributeFilter other) {
            customAttributeDefinitionId(other.getCustomAttributeDefinitionId());
            key(other.getKey());
            stringFilter(other.getStringFilter());
            numberFilter(other.getNumberFilter());
            selectionUidsFilter(other.getSelectionUidsFilter());
            boolFilter(other.getBoolFilter());
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations by matching their custom attributes'
         * <code>custom_attribute_definition_id</code> property value against the the specified id.
         * Exactly one of <code>custom_attribute_definition_id</code> or <code>key</code> must be specified.</p>
         */
        @JsonSetter(value = "custom_attribute_definition_id", nulls = Nulls.SKIP)
        public Builder customAttributeDefinitionId(Optional<String> customAttributeDefinitionId) {
            this.customAttributeDefinitionId = customAttributeDefinitionId;
            return this;
        }

        public Builder customAttributeDefinitionId(String customAttributeDefinitionId) {
            this.customAttributeDefinitionId = Optional.ofNullable(customAttributeDefinitionId);
            return this;
        }

        public Builder customAttributeDefinitionId(Nullable<String> customAttributeDefinitionId) {
            if (customAttributeDefinitionId.isNull()) {
                this.customAttributeDefinitionId = null;
            } else if (customAttributeDefinitionId.isEmpty()) {
                this.customAttributeDefinitionId = Optional.empty();
            } else {
                this.customAttributeDefinitionId = Optional.of(customAttributeDefinitionId.get());
            }
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations by matching their custom attributes'
         * <code>key</code> property value against the specified key.
         * Exactly one of <code>custom_attribute_definition_id</code> or <code>key</code> must be specified.</p>
         */
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Nullable<String> key) {
            if (key.isNull()) {
                this.key = null;
            } else if (key.isEmpty()) {
                this.key = Optional.empty();
            } else {
                this.key = Optional.of(key.get());
            }
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations by matching their custom attributes'
         * <code>string_value</code>  property value against the specified text.
         * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.</p>
         */
        @JsonSetter(value = "string_filter", nulls = Nulls.SKIP)
        public Builder stringFilter(Optional<String> stringFilter) {
            this.stringFilter = stringFilter;
            return this;
        }

        public Builder stringFilter(String stringFilter) {
            this.stringFilter = Optional.ofNullable(stringFilter);
            return this;
        }

        public Builder stringFilter(Nullable<String> stringFilter) {
            if (stringFilter.isNull()) {
                this.stringFilter = null;
            } else if (stringFilter.isEmpty()) {
                this.stringFilter = Optional.empty();
            } else {
                this.stringFilter = Optional.of(stringFilter.get());
            }
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations with their custom attributes
         * containing a number value within the specified range.
         * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.</p>
         */
        @JsonSetter(value = "number_filter", nulls = Nulls.SKIP)
        public Builder numberFilter(Optional<Range> numberFilter) {
            this.numberFilter = numberFilter;
            return this;
        }

        public Builder numberFilter(Range numberFilter) {
            this.numberFilter = Optional.ofNullable(numberFilter);
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations by matching  their custom attributes'
         * <code>selection_uid_values</code> values against the specified selection uids.
         * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.</p>
         */
        @JsonSetter(value = "selection_uids_filter", nulls = Nulls.SKIP)
        public Builder selectionUidsFilter(Optional<List<String>> selectionUidsFilter) {
            this.selectionUidsFilter = selectionUidsFilter;
            return this;
        }

        public Builder selectionUidsFilter(List<String> selectionUidsFilter) {
            this.selectionUidsFilter = Optional.ofNullable(selectionUidsFilter);
            return this;
        }

        public Builder selectionUidsFilter(Nullable<List<String>> selectionUidsFilter) {
            if (selectionUidsFilter.isNull()) {
                this.selectionUidsFilter = null;
            } else if (selectionUidsFilter.isEmpty()) {
                this.selectionUidsFilter = Optional.empty();
            } else {
                this.selectionUidsFilter = Optional.of(selectionUidsFilter.get());
            }
            return this;
        }

        /**
         * <p>A query expression to filter items or item variations by matching their custom attributes'
         * <code>boolean_value</code> property values against the specified Boolean expression.
         * Exactly one of <code>string_filter</code>, <code>number_filter</code>, <code>selection_uids_filter</code>, or <code>bool_filter</code> must be specified.</p>
         */
        @JsonSetter(value = "bool_filter", nulls = Nulls.SKIP)
        public Builder boolFilter(Optional<Boolean> boolFilter) {
            this.boolFilter = boolFilter;
            return this;
        }

        public Builder boolFilter(Boolean boolFilter) {
            this.boolFilter = Optional.ofNullable(boolFilter);
            return this;
        }

        public Builder boolFilter(Nullable<Boolean> boolFilter) {
            if (boolFilter.isNull()) {
                this.boolFilter = null;
            } else if (boolFilter.isEmpty()) {
                this.boolFilter = Optional.empty();
            } else {
                this.boolFilter = Optional.of(boolFilter.get());
            }
            return this;
        }

        public CustomAttributeFilter build() {
            return new CustomAttributeFilter(
                    customAttributeDefinitionId,
                    key,
                    stringFilter,
                    numberFilter,
                    selectionUidsFilter,
                    boolFilter,
                    additionalProperties);
        }
    }
}
