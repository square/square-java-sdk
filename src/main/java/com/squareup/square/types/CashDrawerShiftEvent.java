/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CashDrawerShiftEvent.Builder.class)
public final class CashDrawerShiftEvent {
    private final Optional<String> id;

    private final Optional<CashDrawerEventType> eventType;

    private final Optional<Money> eventMoney;

    private final Optional<String> createdAt;

    private final Optional<String> description;

    private final Optional<String> teamMemberId;

    private final Map<String, Object> additionalProperties;

    private CashDrawerShiftEvent(
            Optional<String> id,
            Optional<CashDrawerEventType> eventType,
            Optional<Money> eventMoney,
            Optional<String> createdAt,
            Optional<String> description,
            Optional<String> teamMemberId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.eventType = eventType;
        this.eventMoney = eventMoney;
        this.createdAt = createdAt;
        this.description = description;
        this.teamMemberId = teamMemberId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID of the event.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The type of cash drawer shift event.
     * See <a href="#type-cashdrawereventtype">CashDrawerEventType</a> for possible values
     */
    @JsonProperty("event_type")
    public Optional<CashDrawerEventType> getEventType() {
        return eventType;
    }

    /**
     * @return The amount of money that was added to or removed from the cash drawer
     * in the event. The amount can be positive (for added money)
     * or zero (for other tender type payments). The addition or removal of money can be determined by
     * by the event type.
     */
    @JsonProperty("event_money")
    public Optional<Money> getEventMoney() {
        return eventMoney;
    }

    /**
     * @return The event time in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return An optional description of the event, entered by the employee that
     * created the event.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The ID of the team member that created the event.
     */
    @JsonProperty("team_member_id")
    public Optional<String> getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CashDrawerShiftEvent && equalTo((CashDrawerShiftEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CashDrawerShiftEvent other) {
        return id.equals(other.id)
                && eventType.equals(other.eventType)
                && eventMoney.equals(other.eventMoney)
                && createdAt.equals(other.createdAt)
                && description.equals(other.description)
                && teamMemberId.equals(other.teamMemberId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.eventType, this.eventMoney, this.createdAt, this.description, this.teamMemberId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<CashDrawerEventType> eventType = Optional.empty();

        private Optional<Money> eventMoney = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CashDrawerShiftEvent other) {
            id(other.getId());
            eventType(other.getEventType());
            eventMoney(other.getEventMoney());
            createdAt(other.getCreatedAt());
            description(other.getDescription());
            teamMemberId(other.getTeamMemberId());
            return this;
        }

        /**
         * <p>The unique ID of the event.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The type of cash drawer shift event.
         * See <a href="#type-cashdrawereventtype">CashDrawerEventType</a> for possible values</p>
         */
        @JsonSetter(value = "event_type", nulls = Nulls.SKIP)
        public Builder eventType(Optional<CashDrawerEventType> eventType) {
            this.eventType = eventType;
            return this;
        }

        public Builder eventType(CashDrawerEventType eventType) {
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * <p>The amount of money that was added to or removed from the cash drawer
         * in the event. The amount can be positive (for added money)
         * or zero (for other tender type payments). The addition or removal of money can be determined by
         * by the event type.</p>
         */
        @JsonSetter(value = "event_money", nulls = Nulls.SKIP)
        public Builder eventMoney(Optional<Money> eventMoney) {
            this.eventMoney = eventMoney;
            return this;
        }

        public Builder eventMoney(Money eventMoney) {
            this.eventMoney = Optional.ofNullable(eventMoney);
            return this;
        }

        /**
         * <p>The event time in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>An optional description of the event, entered by the employee that
         * created the event.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        /**
         * <p>The ID of the team member that created the event.</p>
         */
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public CashDrawerShiftEvent build() {
            return new CashDrawerShiftEvent(
                    id, eventType, eventMoney, createdAt, description, teamMemberId, additionalProperties);
        }
    }
}
