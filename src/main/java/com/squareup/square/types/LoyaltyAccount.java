/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyAccount.Builder.class)
public final class LoyaltyAccount {
    private final Optional<String> id;

    private final String programId;

    private final Optional<Integer> balance;

    private final Optional<Integer> lifetimePoints;

    private final Optional<String> customerId;

    private final Optional<String> enrolledAt;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<LoyaltyAccountMapping> mapping;

    private final Optional<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines;

    private final Map<String, Object> additionalProperties;

    private LoyaltyAccount(
            Optional<String> id,
            String programId,
            Optional<Integer> balance,
            Optional<Integer> lifetimePoints,
            Optional<String> customerId,
            Optional<String> enrolledAt,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<LoyaltyAccountMapping> mapping,
            Optional<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.programId = programId;
        this.balance = balance;
        this.lifetimePoints = lifetimePoints;
        this.customerId = customerId;
        this.enrolledAt = enrolledAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.mapping = mapping;
        this.expiringPointDeadlines = expiringPointDeadlines;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the loyalty account.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The Square-assigned ID of the <a href="entity:LoyaltyProgram">loyalty program</a> to which the account belongs.
     */
    @JsonProperty("program_id")
    public String getProgramId() {
        return programId;
    }

    /**
     * @return The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the <code>expiring_point_deadlines</code> field.
     * <p>Your application should be able to handle loyalty accounts that have a negative point balance (<code>balance</code> is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.</p>
     */
    @JsonProperty("balance")
    public Optional<Integer> getBalance() {
        return balance;
    }

    /**
     * @return The total points accrued during the lifetime of the account.
     */
    @JsonProperty("lifetime_points")
    public Optional<Integer> getLifetimePoints() {
        return lifetimePoints;
    }

    /**
     * @return The Square-assigned ID of the <a href="entity:Customer">customer</a> that is associated with the account.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The timestamp when the buyer joined the loyalty program, in RFC 3339 format. This field is used to display the <strong>Enrolled On</strong> or <strong>Member Since</strong> date in first-party Square products.
     * <p>If this field is not set in a <code>CreateLoyaltyAccount</code> request, Square populates it after the buyer's first action on their account
     * (when <code>AccumulateLoyaltyPoints</code> or <code>CreateLoyaltyReward</code> is called). In first-party flows, Square populates the field when the buyer agrees to the terms of service in Square Point of Sale.</p>
     * <p>This field is typically specified in a <code>CreateLoyaltyAccount</code> request when creating a loyalty account for a buyer who already interacted with their account.
     * For example, you would set this field when migrating accounts from an external system. The timestamp in the request can represent a current or previous date and time, but it cannot be set for the future.</p>
     */
    @JsonIgnore
    public Optional<String> getEnrolledAt() {
        if (enrolledAt == null) {
            return Optional.empty();
        }
        return enrolledAt;
    }

    /**
     * @return The timestamp when the loyalty account was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the loyalty account was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The mapping that associates the loyalty account with a buyer. Currently,
     * a loyalty account can only be mapped to a buyer by phone number.
     * <p>To create a loyalty account, you must specify the <code>mapping</code> field, with the buyer's phone number
     * in the <code>phone_number</code> field.</p>
     */
    @JsonProperty("mapping")
    public Optional<LoyaltyAccountMapping> getMapping() {
        return mapping;
    }

    /**
     * @return The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.
     * <p>The total number of points in this field equals the number of points in the <code>balance</code> field.</p>
     */
    @JsonIgnore
    public Optional<List<LoyaltyAccountExpiringPointDeadline>> getExpiringPointDeadlines() {
        if (expiringPointDeadlines == null) {
            return Optional.empty();
        }
        return expiringPointDeadlines;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("enrolled_at")
    private Optional<String> _getEnrolledAt() {
        return enrolledAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("expiring_point_deadlines")
    private Optional<List<LoyaltyAccountExpiringPointDeadline>> _getExpiringPointDeadlines() {
        return expiringPointDeadlines;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyAccount && equalTo((LoyaltyAccount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyAccount other) {
        return id.equals(other.id)
                && programId.equals(other.programId)
                && balance.equals(other.balance)
                && lifetimePoints.equals(other.lifetimePoints)
                && customerId.equals(other.customerId)
                && enrolledAt.equals(other.enrolledAt)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && mapping.equals(other.mapping)
                && expiringPointDeadlines.equals(other.expiringPointDeadlines);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.programId,
                this.balance,
                this.lifetimePoints,
                this.customerId,
                this.enrolledAt,
                this.createdAt,
                this.updatedAt,
                this.mapping,
                this.expiringPointDeadlines);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ProgramIdStage builder() {
        return new Builder();
    }

    public interface ProgramIdStage {
        _FinalStage programId(@NotNull String programId);

        Builder from(LoyaltyAccount other);
    }

    public interface _FinalStage {
        LoyaltyAccount build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage balance(Optional<Integer> balance);

        _FinalStage balance(Integer balance);

        _FinalStage lifetimePoints(Optional<Integer> lifetimePoints);

        _FinalStage lifetimePoints(Integer lifetimePoints);

        _FinalStage customerId(Optional<String> customerId);

        _FinalStage customerId(String customerId);

        _FinalStage customerId(Nullable<String> customerId);

        _FinalStage enrolledAt(Optional<String> enrolledAt);

        _FinalStage enrolledAt(String enrolledAt);

        _FinalStage enrolledAt(Nullable<String> enrolledAt);

        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        _FinalStage mapping(Optional<LoyaltyAccountMapping> mapping);

        _FinalStage mapping(LoyaltyAccountMapping mapping);

        _FinalStage expiringPointDeadlines(Optional<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines);

        _FinalStage expiringPointDeadlines(List<LoyaltyAccountExpiringPointDeadline> expiringPointDeadlines);

        _FinalStage expiringPointDeadlines(Nullable<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ProgramIdStage, _FinalStage {
        private String programId;

        private Optional<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines = Optional.empty();

        private Optional<LoyaltyAccountMapping> mapping = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> enrolledAt = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<Integer> lifetimePoints = Optional.empty();

        private Optional<Integer> balance = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LoyaltyAccount other) {
            id(other.getId());
            programId(other.getProgramId());
            balance(other.getBalance());
            lifetimePoints(other.getLifetimePoints());
            customerId(other.getCustomerId());
            enrolledAt(other.getEnrolledAt());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            mapping(other.getMapping());
            expiringPointDeadlines(other.getExpiringPointDeadlines());
            return this;
        }

        /**
         * <p>The Square-assigned ID of the <a href="entity:LoyaltyProgram">loyalty program</a> to which the account belongs.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("program_id")
        public _FinalStage programId(@NotNull String programId) {
            this.programId = Objects.requireNonNull(programId, "programId must not be null");
            return this;
        }

        /**
         * <p>The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.</p>
         * <p>The total number of points in this field equals the number of points in the <code>balance</code> field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expiringPointDeadlines(
                Nullable<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines) {
            if (expiringPointDeadlines.isNull()) {
                this.expiringPointDeadlines = null;
            } else if (expiringPointDeadlines.isEmpty()) {
                this.expiringPointDeadlines = Optional.empty();
            } else {
                this.expiringPointDeadlines = Optional.of(expiringPointDeadlines.get());
            }
            return this;
        }

        /**
         * <p>The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.</p>
         * <p>The total number of points in this field equals the number of points in the <code>balance</code> field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expiringPointDeadlines(List<LoyaltyAccountExpiringPointDeadline> expiringPointDeadlines) {
            this.expiringPointDeadlines = Optional.ofNullable(expiringPointDeadlines);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expiring_point_deadlines", nulls = Nulls.SKIP)
        public _FinalStage expiringPointDeadlines(
                Optional<List<LoyaltyAccountExpiringPointDeadline>> expiringPointDeadlines) {
            this.expiringPointDeadlines = expiringPointDeadlines;
            return this;
        }

        /**
         * <p>The mapping that associates the loyalty account with a buyer. Currently,
         * a loyalty account can only be mapped to a buyer by phone number.</p>
         * <p>To create a loyalty account, you must specify the <code>mapping</code> field, with the buyer's phone number
         * in the <code>phone_number</code> field.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage mapping(LoyaltyAccountMapping mapping) {
            this.mapping = Optional.ofNullable(mapping);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "mapping", nulls = Nulls.SKIP)
        public _FinalStage mapping(Optional<LoyaltyAccountMapping> mapping) {
            this.mapping = mapping;
            return this;
        }

        /**
         * <p>The timestamp when the loyalty account was last updated, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The timestamp when the loyalty account was created, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The timestamp when the buyer joined the loyalty program, in RFC 3339 format. This field is used to display the <strong>Enrolled On</strong> or <strong>Member Since</strong> date in first-party Square products.</p>
         * <p>If this field is not set in a <code>CreateLoyaltyAccount</code> request, Square populates it after the buyer's first action on their account
         * (when <code>AccumulateLoyaltyPoints</code> or <code>CreateLoyaltyReward</code> is called). In first-party flows, Square populates the field when the buyer agrees to the terms of service in Square Point of Sale.</p>
         * <p>This field is typically specified in a <code>CreateLoyaltyAccount</code> request when creating a loyalty account for a buyer who already interacted with their account.
         * For example, you would set this field when migrating accounts from an external system. The timestamp in the request can represent a current or previous date and time, but it cannot be set for the future.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enrolledAt(Nullable<String> enrolledAt) {
            if (enrolledAt.isNull()) {
                this.enrolledAt = null;
            } else if (enrolledAt.isEmpty()) {
                this.enrolledAt = Optional.empty();
            } else {
                this.enrolledAt = Optional.of(enrolledAt.get());
            }
            return this;
        }

        /**
         * <p>The timestamp when the buyer joined the loyalty program, in RFC 3339 format. This field is used to display the <strong>Enrolled On</strong> or <strong>Member Since</strong> date in first-party Square products.</p>
         * <p>If this field is not set in a <code>CreateLoyaltyAccount</code> request, Square populates it after the buyer's first action on their account
         * (when <code>AccumulateLoyaltyPoints</code> or <code>CreateLoyaltyReward</code> is called). In first-party flows, Square populates the field when the buyer agrees to the terms of service in Square Point of Sale.</p>
         * <p>This field is typically specified in a <code>CreateLoyaltyAccount</code> request when creating a loyalty account for a buyer who already interacted with their account.
         * For example, you would set this field when migrating accounts from an external system. The timestamp in the request can represent a current or previous date and time, but it cannot be set for the future.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enrolledAt(String enrolledAt) {
            this.enrolledAt = Optional.ofNullable(enrolledAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "enrolled_at", nulls = Nulls.SKIP)
        public _FinalStage enrolledAt(Optional<String> enrolledAt) {
            this.enrolledAt = enrolledAt;
            return this;
        }

        /**
         * <p>The Square-assigned ID of the <a href="entity:Customer">customer</a> that is associated with the account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>The Square-assigned ID of the <a href="entity:Customer">customer</a> that is associated with the account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public _FinalStage customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        /**
         * <p>The total points accrued during the lifetime of the account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lifetimePoints(Integer lifetimePoints) {
            this.lifetimePoints = Optional.ofNullable(lifetimePoints);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lifetime_points", nulls = Nulls.SKIP)
        public _FinalStage lifetimePoints(Optional<Integer> lifetimePoints) {
            this.lifetimePoints = lifetimePoints;
            return this;
        }

        /**
         * <p>The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the <code>expiring_point_deadlines</code> field.</p>
         * <p>Your application should be able to handle loyalty accounts that have a negative point balance (<code>balance</code> is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage balance(Integer balance) {
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "balance", nulls = Nulls.SKIP)
        public _FinalStage balance(Optional<Integer> balance) {
            this.balance = balance;
            return this;
        }

        /**
         * <p>The Square-assigned ID of the loyalty account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public LoyaltyAccount build() {
            return new LoyaltyAccount(
                    id,
                    programId,
                    balance,
                    lifetimePoints,
                    customerId,
                    enrolledAt,
                    createdAt,
                    updatedAt,
                    mapping,
                    expiringPointDeadlines,
                    additionalProperties);
        }
    }
}
