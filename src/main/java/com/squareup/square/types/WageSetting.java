/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = WageSetting.Builder.class)
public final class WageSetting {
    private final Optional<String> teamMemberId;

    private final Optional<List<JobAssignment>> jobAssignments;

    private final Optional<Boolean> isOvertimeExempt;

    private final Optional<Integer> version;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private WageSetting(
            Optional<String> teamMemberId,
            Optional<List<JobAssignment>> jobAssignments,
            Optional<Boolean> isOvertimeExempt,
            Optional<Integer> version,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.teamMemberId = teamMemberId;
        this.jobAssignments = jobAssignments;
        this.isOvertimeExempt = isOvertimeExempt;
        this.version = version;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the team member associated with the wage setting.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return <strong>Required</strong> The ordered list of jobs that the team member is assigned to.
     * The first job assignment is considered the team member's primary job.
     */
    @JsonIgnore
    public Optional<List<JobAssignment>> getJobAssignments() {
        if (jobAssignments == null) {
            return Optional.empty();
        }
        return jobAssignments;
    }

    /**
     * @return Whether the team member is exempt from the overtime rules of the seller's country.
     */
    @JsonIgnore
    public Optional<Boolean> getIsOvertimeExempt() {
        if (isOvertimeExempt == null) {
            return Optional.empty();
        }
        return isOvertimeExempt;
    }

    /**
     * @return <strong>Read only</strong> Used for resolving concurrency issues. The request fails if the version
     * provided does not match the server version at the time of the request. If not provided,
     * Square executes a blind write, potentially overwriting data from another write. For more information,
     * see <a href="https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency">optimistic concurrency</a>.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The timestamp when the wage setting was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the wage setting was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("job_assignments")
    private Optional<List<JobAssignment>> _getJobAssignments() {
        return jobAssignments;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_overtime_exempt")
    private Optional<Boolean> _getIsOvertimeExempt() {
        return isOvertimeExempt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WageSetting && equalTo((WageSetting) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WageSetting other) {
        return teamMemberId.equals(other.teamMemberId)
                && jobAssignments.equals(other.jobAssignments)
                && isOvertimeExempt.equals(other.isOvertimeExempt)
                && version.equals(other.version)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.teamMemberId,
                this.jobAssignments,
                this.isOvertimeExempt,
                this.version,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> teamMemberId = Optional.empty();

        private Optional<List<JobAssignment>> jobAssignments = Optional.empty();

        private Optional<Boolean> isOvertimeExempt = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WageSetting other) {
            teamMemberId(other.getTeamMemberId());
            jobAssignments(other.getJobAssignments());
            isOvertimeExempt(other.getIsOvertimeExempt());
            version(other.getVersion());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        @JsonSetter(value = "job_assignments", nulls = Nulls.SKIP)
        public Builder jobAssignments(Optional<List<JobAssignment>> jobAssignments) {
            this.jobAssignments = jobAssignments;
            return this;
        }

        public Builder jobAssignments(List<JobAssignment> jobAssignments) {
            this.jobAssignments = Optional.ofNullable(jobAssignments);
            return this;
        }

        public Builder jobAssignments(Nullable<List<JobAssignment>> jobAssignments) {
            if (jobAssignments.isNull()) {
                this.jobAssignments = null;
            } else if (jobAssignments.isEmpty()) {
                this.jobAssignments = Optional.empty();
            } else {
                this.jobAssignments = Optional.of(jobAssignments.get());
            }
            return this;
        }

        @JsonSetter(value = "is_overtime_exempt", nulls = Nulls.SKIP)
        public Builder isOvertimeExempt(Optional<Boolean> isOvertimeExempt) {
            this.isOvertimeExempt = isOvertimeExempt;
            return this;
        }

        public Builder isOvertimeExempt(Boolean isOvertimeExempt) {
            this.isOvertimeExempt = Optional.ofNullable(isOvertimeExempt);
            return this;
        }

        public Builder isOvertimeExempt(Nullable<Boolean> isOvertimeExempt) {
            if (isOvertimeExempt.isNull()) {
                this.isOvertimeExempt = null;
            } else if (isOvertimeExempt.isEmpty()) {
                this.isOvertimeExempt = Optional.empty();
            } else {
                this.isOvertimeExempt = Optional.of(isOvertimeExempt.get());
            }
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public WageSetting build() {
            return new WageSetting(
                    teamMemberId,
                    jobAssignments,
                    isOvertimeExempt,
                    version,
                    createdAt,
                    updatedAt,
                    additionalProperties);
        }
    }
}
