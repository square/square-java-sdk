/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StandardUnitDescription.Builder.class)
public final class StandardUnitDescription {
    private final Optional<MeasurementUnit> unit;

    private final Optional<String> name;

    private final Optional<String> abbreviation;

    private final Map<String, Object> additionalProperties;

    private StandardUnitDescription(
            Optional<MeasurementUnit> unit,
            Optional<String> name,
            Optional<String> abbreviation,
            Map<String, Object> additionalProperties) {
        this.unit = unit;
        this.name = name;
        this.abbreviation = abbreviation;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Identifies the measurement unit being described.
     */
    @JsonProperty("unit")
    public Optional<MeasurementUnit> getUnit() {
        return unit;
    }

    /**
     * @return UI display name of the measurement unit. For example, 'Pound'.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return UI display abbreviation for the measurement unit. For example, 'lb'.
     */
    @JsonIgnore
    public Optional<String> getAbbreviation() {
        if (abbreviation == null) {
            return Optional.empty();
        }
        return abbreviation;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("abbreviation")
    private Optional<String> _getAbbreviation() {
        return abbreviation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StandardUnitDescription && equalTo((StandardUnitDescription) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StandardUnitDescription other) {
        return unit.equals(other.unit) && name.equals(other.name) && abbreviation.equals(other.abbreviation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.unit, this.name, this.abbreviation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MeasurementUnit> unit = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> abbreviation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(StandardUnitDescription other) {
            unit(other.getUnit());
            name(other.getName());
            abbreviation(other.getAbbreviation());
            return this;
        }

        /**
         * <p>Identifies the measurement unit being described.</p>
         */
        @JsonSetter(value = "unit", nulls = Nulls.SKIP)
        public Builder unit(Optional<MeasurementUnit> unit) {
            this.unit = unit;
            return this;
        }

        public Builder unit(MeasurementUnit unit) {
            this.unit = Optional.ofNullable(unit);
            return this;
        }

        /**
         * <p>UI display name of the measurement unit. For example, 'Pound'.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>UI display abbreviation for the measurement unit. For example, 'lb'.</p>
         */
        @JsonSetter(value = "abbreviation", nulls = Nulls.SKIP)
        public Builder abbreviation(Optional<String> abbreviation) {
            this.abbreviation = abbreviation;
            return this;
        }

        public Builder abbreviation(String abbreviation) {
            this.abbreviation = Optional.ofNullable(abbreviation);
            return this;
        }

        public Builder abbreviation(Nullable<String> abbreviation) {
            if (abbreviation.isNull()) {
                this.abbreviation = null;
            } else if (abbreviation.isEmpty()) {
                this.abbreviation = Optional.empty();
            } else {
                this.abbreviation = Optional.of(abbreviation.get());
            }
            return this;
        }

        public StandardUnitDescription build() {
            return new StandardUnitDescription(unit, name, abbreviation, additionalProperties);
        }
    }
}
