/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScheduledShift.Builder.class)
public final class ScheduledShift {
    private final Optional<String> id;

    private final Optional<ScheduledShiftDetails> draftShiftDetails;

    private final Optional<ScheduledShiftDetails> publishedShiftDetails;

    private final Optional<Integer> version;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Map<String, Object> additionalProperties;

    private ScheduledShift(
            Optional<String> id,
            Optional<ScheduledShiftDetails> draftShiftDetails,
            Optional<ScheduledShiftDetails> publishedShiftDetails,
            Optional<Integer> version,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.draftShiftDetails = draftShiftDetails;
        this.publishedShiftDetails = publishedShiftDetails;
        this.version = version;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <strong>Read only</strong> The Square-issued ID of the scheduled shift.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The latest draft shift details for the scheduled shift. Draft shift details are used to
     * stage and manage shifts before publishing. This field is always present.
     */
    @JsonProperty("draft_shift_details")
    public Optional<ScheduledShiftDetails> getDraftShiftDetails() {
        return draftShiftDetails;
    }

    /**
     * @return The current published (public) shift details for the scheduled shift. This field is
     * present only if the shift was published.
     */
    @JsonProperty("published_shift_details")
    public Optional<ScheduledShiftDetails> getPublishedShiftDetails() {
        return publishedShiftDetails;
    }

    /**
     * @return <strong>Read only</strong> The current version of the scheduled shift, which is incremented with each update.
     * This field is used for <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>
     * control to ensure that requests don't overwrite data from another request.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The timestamp of when the scheduled shift was created, in RFC 3339 format presented as UTC.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the scheduled shift was last updated, in RFC 3339 format presented as UTC.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScheduledShift && equalTo((ScheduledShift) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScheduledShift other) {
        return id.equals(other.id)
                && draftShiftDetails.equals(other.draftShiftDetails)
                && publishedShiftDetails.equals(other.publishedShiftDetails)
                && version.equals(other.version)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.draftShiftDetails,
                this.publishedShiftDetails,
                this.version,
                this.createdAt,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<ScheduledShiftDetails> draftShiftDetails = Optional.empty();

        private Optional<ScheduledShiftDetails> publishedShiftDetails = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScheduledShift other) {
            id(other.getId());
            draftShiftDetails(other.getDraftShiftDetails());
            publishedShiftDetails(other.getPublishedShiftDetails());
            version(other.getVersion());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "draft_shift_details", nulls = Nulls.SKIP)
        public Builder draftShiftDetails(Optional<ScheduledShiftDetails> draftShiftDetails) {
            this.draftShiftDetails = draftShiftDetails;
            return this;
        }

        public Builder draftShiftDetails(ScheduledShiftDetails draftShiftDetails) {
            this.draftShiftDetails = Optional.ofNullable(draftShiftDetails);
            return this;
        }

        @JsonSetter(value = "published_shift_details", nulls = Nulls.SKIP)
        public Builder publishedShiftDetails(Optional<ScheduledShiftDetails> publishedShiftDetails) {
            this.publishedShiftDetails = publishedShiftDetails;
            return this;
        }

        public Builder publishedShiftDetails(ScheduledShiftDetails publishedShiftDetails) {
            this.publishedShiftDetails = Optional.ofNullable(publishedShiftDetails);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public ScheduledShift build() {
            return new ScheduledShift(
                    id, draftShiftDetails, publishedShiftDetails, version, createdAt, updatedAt, additionalProperties);
        }
    }
}
