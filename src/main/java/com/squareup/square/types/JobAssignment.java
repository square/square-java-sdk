/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JobAssignment.Builder.class)
public final class JobAssignment {
    private final Optional<String> jobTitle;

    private final JobAssignmentPayType payType;

    private final Optional<Money> hourlyRate;

    private final Optional<Money> annualRate;

    private final Optional<Integer> weeklyHours;

    private final Optional<String> jobId;

    private final Map<String, Object> additionalProperties;

    private JobAssignment(
            Optional<String> jobTitle,
            JobAssignmentPayType payType,
            Optional<Money> hourlyRate,
            Optional<Money> annualRate,
            Optional<Integer> weeklyHours,
            Optional<String> jobId,
            Map<String, Object> additionalProperties) {
        this.jobTitle = jobTitle;
        this.payType = payType;
        this.hourlyRate = hourlyRate;
        this.annualRate = annualRate;
        this.weeklyHours = weeklyHours;
        this.jobId = jobId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The title of the job.
     */
    @JsonIgnore
    public Optional<String> getJobTitle() {
        if (jobTitle == null) {
            return Optional.empty();
        }
        return jobTitle;
    }

    /**
     * @return The current pay type for the job assignment used to
     * calculate the pay amount in a pay period.
     * See <a href="#type-jobassignmentpaytype">JobAssignmentPayType</a> for possible values
     */
    @JsonProperty("pay_type")
    public JobAssignmentPayType getPayType() {
        return payType;
    }

    /**
     * @return The hourly pay rate of the job. For <code>SALARY</code> pay types, Square calculates the hourly rate based on
     * <code>annual_rate</code> and <code>weekly_hours</code>.
     */
    @JsonProperty("hourly_rate")
    public Optional<Money> getHourlyRate() {
        return hourlyRate;
    }

    /**
     * @return The total pay amount for a 12-month period on the job. Set if the job <code>PayType</code> is <code>SALARY</code>.
     */
    @JsonProperty("annual_rate")
    public Optional<Money> getAnnualRate() {
        return annualRate;
    }

    /**
     * @return The planned hours per week for the job. Set if the job <code>PayType</code> is <code>SALARY</code>.
     */
    @JsonIgnore
    public Optional<Integer> getWeeklyHours() {
        if (weeklyHours == null) {
            return Optional.empty();
        }
        return weeklyHours;
    }

    /**
     * @return The ID of the <a href="entity:Job">job</a>.
     */
    @JsonIgnore
    public Optional<String> getJobId() {
        if (jobId == null) {
            return Optional.empty();
        }
        return jobId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("job_title")
    private Optional<String> _getJobTitle() {
        return jobTitle;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("weekly_hours")
    private Optional<Integer> _getWeeklyHours() {
        return weeklyHours;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("job_id")
    private Optional<String> _getJobId() {
        return jobId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JobAssignment && equalTo((JobAssignment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JobAssignment other) {
        return jobTitle.equals(other.jobTitle)
                && payType.equals(other.payType)
                && hourlyRate.equals(other.hourlyRate)
                && annualRate.equals(other.annualRate)
                && weeklyHours.equals(other.weeklyHours)
                && jobId.equals(other.jobId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.jobTitle, this.payType, this.hourlyRate, this.annualRate, this.weeklyHours, this.jobId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PayTypeStage builder() {
        return new Builder();
    }

    public interface PayTypeStage {
        /**
         * <p>The current pay type for the job assignment used to
         * calculate the pay amount in a pay period.
         * See <a href="#type-jobassignmentpaytype">JobAssignmentPayType</a> for possible values</p>
         */
        _FinalStage payType(@NotNull JobAssignmentPayType payType);

        Builder from(JobAssignment other);
    }

    public interface _FinalStage {
        JobAssignment build();

        /**
         * <p>The title of the job.</p>
         */
        _FinalStage jobTitle(Optional<String> jobTitle);

        _FinalStage jobTitle(String jobTitle);

        _FinalStage jobTitle(Nullable<String> jobTitle);

        /**
         * <p>The hourly pay rate of the job. For <code>SALARY</code> pay types, Square calculates the hourly rate based on
         * <code>annual_rate</code> and <code>weekly_hours</code>.</p>
         */
        _FinalStage hourlyRate(Optional<Money> hourlyRate);

        _FinalStage hourlyRate(Money hourlyRate);

        /**
         * <p>The total pay amount for a 12-month period on the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         */
        _FinalStage annualRate(Optional<Money> annualRate);

        _FinalStage annualRate(Money annualRate);

        /**
         * <p>The planned hours per week for the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         */
        _FinalStage weeklyHours(Optional<Integer> weeklyHours);

        _FinalStage weeklyHours(Integer weeklyHours);

        _FinalStage weeklyHours(Nullable<Integer> weeklyHours);

        /**
         * <p>The ID of the <a href="entity:Job">job</a>.</p>
         */
        _FinalStage jobId(Optional<String> jobId);

        _FinalStage jobId(String jobId);

        _FinalStage jobId(Nullable<String> jobId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PayTypeStage, _FinalStage {
        private JobAssignmentPayType payType;

        private Optional<String> jobId = Optional.empty();

        private Optional<Integer> weeklyHours = Optional.empty();

        private Optional<Money> annualRate = Optional.empty();

        private Optional<Money> hourlyRate = Optional.empty();

        private Optional<String> jobTitle = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JobAssignment other) {
            jobTitle(other.getJobTitle());
            payType(other.getPayType());
            hourlyRate(other.getHourlyRate());
            annualRate(other.getAnnualRate());
            weeklyHours(other.getWeeklyHours());
            jobId(other.getJobId());
            return this;
        }

        /**
         * <p>The current pay type for the job assignment used to
         * calculate the pay amount in a pay period.
         * See <a href="#type-jobassignmentpaytype">JobAssignmentPayType</a> for possible values</p>
         * <p>The current pay type for the job assignment used to
         * calculate the pay amount in a pay period.
         * See <a href="#type-jobassignmentpaytype">JobAssignmentPayType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("pay_type")
        public _FinalStage payType(@NotNull JobAssignmentPayType payType) {
            this.payType = Objects.requireNonNull(payType, "payType must not be null");
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Job">job</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage jobId(Nullable<String> jobId) {
            if (jobId.isNull()) {
                this.jobId = null;
            } else if (jobId.isEmpty()) {
                this.jobId = Optional.empty();
            } else {
                this.jobId = Optional.of(jobId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Job">job</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage jobId(String jobId) {
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Job">job</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "job_id", nulls = Nulls.SKIP)
        public _FinalStage jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        /**
         * <p>The planned hours per week for the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage weeklyHours(Nullable<Integer> weeklyHours) {
            if (weeklyHours.isNull()) {
                this.weeklyHours = null;
            } else if (weeklyHours.isEmpty()) {
                this.weeklyHours = Optional.empty();
            } else {
                this.weeklyHours = Optional.of(weeklyHours.get());
            }
            return this;
        }

        /**
         * <p>The planned hours per week for the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage weeklyHours(Integer weeklyHours) {
            this.weeklyHours = Optional.ofNullable(weeklyHours);
            return this;
        }

        /**
         * <p>The planned hours per week for the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "weekly_hours", nulls = Nulls.SKIP)
        public _FinalStage weeklyHours(Optional<Integer> weeklyHours) {
            this.weeklyHours = weeklyHours;
            return this;
        }

        /**
         * <p>The total pay amount for a 12-month period on the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage annualRate(Money annualRate) {
            this.annualRate = Optional.ofNullable(annualRate);
            return this;
        }

        /**
         * <p>The total pay amount for a 12-month period on the job. Set if the job <code>PayType</code> is <code>SALARY</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "annual_rate", nulls = Nulls.SKIP)
        public _FinalStage annualRate(Optional<Money> annualRate) {
            this.annualRate = annualRate;
            return this;
        }

        /**
         * <p>The hourly pay rate of the job. For <code>SALARY</code> pay types, Square calculates the hourly rate based on
         * <code>annual_rate</code> and <code>weekly_hours</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hourlyRate(Money hourlyRate) {
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        /**
         * <p>The hourly pay rate of the job. For <code>SALARY</code> pay types, Square calculates the hourly rate based on
         * <code>annual_rate</code> and <code>weekly_hours</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "hourly_rate", nulls = Nulls.SKIP)
        public _FinalStage hourlyRate(Optional<Money> hourlyRate) {
            this.hourlyRate = hourlyRate;
            return this;
        }

        /**
         * <p>The title of the job.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage jobTitle(Nullable<String> jobTitle) {
            if (jobTitle.isNull()) {
                this.jobTitle = null;
            } else if (jobTitle.isEmpty()) {
                this.jobTitle = Optional.empty();
            } else {
                this.jobTitle = Optional.of(jobTitle.get());
            }
            return this;
        }

        /**
         * <p>The title of the job.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage jobTitle(String jobTitle) {
            this.jobTitle = Optional.ofNullable(jobTitle);
            return this;
        }

        /**
         * <p>The title of the job.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "job_title", nulls = Nulls.SKIP)
        public _FinalStage jobTitle(Optional<String> jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }

        @java.lang.Override
        public JobAssignment build() {
            return new JobAssignment(
                    jobTitle, payType, hourlyRate, annualRate, weeklyHours, jobId, additionalProperties);
        }
    }
}
