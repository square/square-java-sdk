/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceComponentDetailsBatteryDetails.Builder.class)
public final class DeviceComponentDetailsBatteryDetails {
    private final Optional<Integer> visiblePercent;

    private final Optional<DeviceComponentDetailsExternalPower> externalPower;

    private final Map<String, Object> additionalProperties;

    private DeviceComponentDetailsBatteryDetails(
            Optional<Integer> visiblePercent,
            Optional<DeviceComponentDetailsExternalPower> externalPower,
            Map<String, Object> additionalProperties) {
        this.visiblePercent = visiblePercent;
        this.externalPower = externalPower;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The battery charge percentage as displayed on the device.
     */
    @JsonIgnore
    public Optional<Integer> getVisiblePercent() {
        if (visiblePercent == null) {
            return Optional.empty();
        }
        return visiblePercent;
    }

    /**
     * @return The status of external_power.
     * See <a href="#type-externalpower">ExternalPower</a> for possible values
     */
    @JsonProperty("external_power")
    public Optional<DeviceComponentDetailsExternalPower> getExternalPower() {
        return externalPower;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("visible_percent")
    private Optional<Integer> _getVisiblePercent() {
        return visiblePercent;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceComponentDetailsBatteryDetails
                && equalTo((DeviceComponentDetailsBatteryDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceComponentDetailsBatteryDetails other) {
        return visiblePercent.equals(other.visiblePercent) && externalPower.equals(other.externalPower);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.visiblePercent, this.externalPower);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> visiblePercent = Optional.empty();

        private Optional<DeviceComponentDetailsExternalPower> externalPower = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceComponentDetailsBatteryDetails other) {
            visiblePercent(other.getVisiblePercent());
            externalPower(other.getExternalPower());
            return this;
        }

        /**
         * <p>The battery charge percentage as displayed on the device.</p>
         */
        @JsonSetter(value = "visible_percent", nulls = Nulls.SKIP)
        public Builder visiblePercent(Optional<Integer> visiblePercent) {
            this.visiblePercent = visiblePercent;
            return this;
        }

        public Builder visiblePercent(Integer visiblePercent) {
            this.visiblePercent = Optional.ofNullable(visiblePercent);
            return this;
        }

        public Builder visiblePercent(Nullable<Integer> visiblePercent) {
            if (visiblePercent.isNull()) {
                this.visiblePercent = null;
            } else if (visiblePercent.isEmpty()) {
                this.visiblePercent = Optional.empty();
            } else {
                this.visiblePercent = Optional.of(visiblePercent.get());
            }
            return this;
        }

        /**
         * <p>The status of external_power.
         * See <a href="#type-externalpower">ExternalPower</a> for possible values</p>
         */
        @JsonSetter(value = "external_power", nulls = Nulls.SKIP)
        public Builder externalPower(Optional<DeviceComponentDetailsExternalPower> externalPower) {
            this.externalPower = externalPower;
            return this;
        }

        public Builder externalPower(DeviceComponentDetailsExternalPower externalPower) {
            this.externalPower = Optional.ofNullable(externalPower);
            return this;
        }

        public DeviceComponentDetailsBatteryDetails build() {
            return new DeviceComponentDetailsBatteryDetails(visiblePercent, externalPower, additionalProperties);
        }
    }
}
