/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class DeviceComponentDetailsExternalPower {
    public static final DeviceComponentDetailsExternalPower UNAVAILABLE =
            new DeviceComponentDetailsExternalPower(Value.UNAVAILABLE, "UNAVAILABLE");

    public static final DeviceComponentDetailsExternalPower AVAILABLE_CHARGING =
            new DeviceComponentDetailsExternalPower(Value.AVAILABLE_CHARGING, "AVAILABLE_CHARGING");

    public static final DeviceComponentDetailsExternalPower AVAILABLE_INSUFFICIENT =
            new DeviceComponentDetailsExternalPower(Value.AVAILABLE_INSUFFICIENT, "AVAILABLE_INSUFFICIENT");

    public static final DeviceComponentDetailsExternalPower AVAILABLE_NOT_IN_USE =
            new DeviceComponentDetailsExternalPower(Value.AVAILABLE_NOT_IN_USE, "AVAILABLE_NOT_IN_USE");

    private final Value value;

    private final String string;

    DeviceComponentDetailsExternalPower(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof DeviceComponentDetailsExternalPower
                        && this.string.equals(((DeviceComponentDetailsExternalPower) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case UNAVAILABLE:
                return visitor.visitUnavailable();
            case AVAILABLE_CHARGING:
                return visitor.visitAvailableCharging();
            case AVAILABLE_INSUFFICIENT:
                return visitor.visitAvailableInsufficient();
            case AVAILABLE_NOT_IN_USE:
                return visitor.visitAvailableNotInUse();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static DeviceComponentDetailsExternalPower valueOf(String value) {
        switch (value) {
            case "UNAVAILABLE":
                return UNAVAILABLE;
            case "AVAILABLE_CHARGING":
                return AVAILABLE_CHARGING;
            case "AVAILABLE_INSUFFICIENT":
                return AVAILABLE_INSUFFICIENT;
            case "AVAILABLE_NOT_IN_USE":
                return AVAILABLE_NOT_IN_USE;
            default:
                return new DeviceComponentDetailsExternalPower(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        AVAILABLE_CHARGING,

        AVAILABLE_NOT_IN_USE,

        UNAVAILABLE,

        AVAILABLE_INSUFFICIENT,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitAvailableCharging();

        T visitAvailableNotInUse();

        T visitUnavailable();

        T visitAvailableInsufficient();

        T visitUnknown(String unknownType);
    }
}
