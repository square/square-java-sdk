/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceAttachment.Builder.class)
public final class InvoiceAttachment {
    private final Optional<String> id;

    private final Optional<String> filename;

    private final Optional<String> description;

    private final Optional<Integer> filesize;

    private final Optional<String> hash;

    private final Optional<String> mimeType;

    private final Optional<String> uploadedAt;

    private final Map<String, Object> additionalProperties;

    private InvoiceAttachment(
            Optional<String> id,
            Optional<String> filename,
            Optional<String> description,
            Optional<Integer> filesize,
            Optional<String> hash,
            Optional<String> mimeType,
            Optional<String> uploadedAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.filename = filename;
        this.description = description;
        this.filesize = filesize;
        this.hash = hash;
        this.mimeType = mimeType;
        this.uploadedAt = uploadedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the attachment.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The file name of the attachment, which is displayed on the invoice.
     */
    @JsonProperty("filename")
    public Optional<String> getFilename() {
        return filename;
    }

    /**
     * @return The description of the attachment, which is displayed on the invoice.
     * This field maps to the seller-defined <strong>Message</strong> field.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The file size of the attachment in bytes.
     */
    @JsonProperty("filesize")
    public Optional<Integer> getFilesize() {
        return filesize;
    }

    /**
     * @return The MD5 hash that was generated from the file contents.
     */
    @JsonProperty("hash")
    public Optional<String> getHash() {
        return hash;
    }

    /**
     * @return The mime type of the attachment.
     * The following mime types are supported:
     * image/gif, image/jpeg, image/png, image/tiff, image/bmp, application/pdf.
     */
    @JsonProperty("mime_type")
    public Optional<String> getMimeType() {
        return mimeType;
    }

    /**
     * @return The timestamp when the attachment was uploaded, in RFC 3339 format.
     */
    @JsonProperty("uploaded_at")
    public Optional<String> getUploadedAt() {
        return uploadedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceAttachment && equalTo((InvoiceAttachment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceAttachment other) {
        return id.equals(other.id)
                && filename.equals(other.filename)
                && description.equals(other.description)
                && filesize.equals(other.filesize)
                && hash.equals(other.hash)
                && mimeType.equals(other.mimeType)
                && uploadedAt.equals(other.uploadedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.filename, this.description, this.filesize, this.hash, this.mimeType, this.uploadedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> filename = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Integer> filesize = Optional.empty();

        private Optional<String> hash = Optional.empty();

        private Optional<String> mimeType = Optional.empty();

        private Optional<String> uploadedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceAttachment other) {
            id(other.getId());
            filename(other.getFilename());
            description(other.getDescription());
            filesize(other.getFilesize());
            hash(other.getHash());
            mimeType(other.getMimeType());
            uploadedAt(other.getUploadedAt());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "filename", nulls = Nulls.SKIP)
        public Builder filename(Optional<String> filename) {
            this.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "filesize", nulls = Nulls.SKIP)
        public Builder filesize(Optional<Integer> filesize) {
            this.filesize = filesize;
            return this;
        }

        public Builder filesize(Integer filesize) {
            this.filesize = Optional.ofNullable(filesize);
            return this;
        }

        @JsonSetter(value = "hash", nulls = Nulls.SKIP)
        public Builder hash(Optional<String> hash) {
            this.hash = hash;
            return this;
        }

        public Builder hash(String hash) {
            this.hash = Optional.ofNullable(hash);
            return this;
        }

        @JsonSetter(value = "mime_type", nulls = Nulls.SKIP)
        public Builder mimeType(Optional<String> mimeType) {
            this.mimeType = mimeType;
            return this;
        }

        public Builder mimeType(String mimeType) {
            this.mimeType = Optional.ofNullable(mimeType);
            return this;
        }

        @JsonSetter(value = "uploaded_at", nulls = Nulls.SKIP)
        public Builder uploadedAt(Optional<String> uploadedAt) {
            this.uploadedAt = uploadedAt;
            return this;
        }

        public Builder uploadedAt(String uploadedAt) {
            this.uploadedAt = Optional.ofNullable(uploadedAt);
            return this;
        }

        public InvoiceAttachment build() {
            return new InvoiceAttachment(
                    id, filename, description, filesize, hash, mimeType, uploadedAt, additionalProperties);
        }
    }
}
