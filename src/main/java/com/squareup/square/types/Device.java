/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Device.Builder.class)
public final class Device {
    private final Optional<String> id;

    private final DeviceAttributes attributes;

    private final Optional<List<Component>> components;

    private final Optional<DeviceStatus> status;

    private final Map<String, Object> additionalProperties;

    private Device(
            Optional<String> id,
            DeviceAttributes attributes,
            Optional<List<Component>> components,
            Optional<DeviceStatus> status,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.attributes = attributes;
        this.components = components;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A synthetic identifier for the device. The identifier includes a standardized prefix and
     * is otherwise an opaque id generated from key device fields.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return A collection of DeviceAttributes representing the device.
     */
    @JsonProperty("attributes")
    public DeviceAttributes getAttributes() {
        return attributes;
    }

    /**
     * @return A list of components applicable to the device.
     */
    @JsonIgnore
    public Optional<List<Component>> getComponents() {
        if (components == null) {
            return Optional.empty();
        }
        return components;
    }

    /**
     * @return The current status of the device.
     */
    @JsonProperty("status")
    public Optional<DeviceStatus> getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("components")
    private Optional<List<Component>> _getComponents() {
        return components;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Device && equalTo((Device) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Device other) {
        return id.equals(other.id)
                && attributes.equals(other.attributes)
                && components.equals(other.components)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.attributes, this.components, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AttributesStage builder() {
        return new Builder();
    }

    public interface AttributesStage {
        _FinalStage attributes(@NotNull DeviceAttributes attributes);

        Builder from(Device other);
    }

    public interface _FinalStage {
        Device build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage components(Optional<List<Component>> components);

        _FinalStage components(List<Component> components);

        _FinalStage components(Nullable<List<Component>> components);

        _FinalStage status(Optional<DeviceStatus> status);

        _FinalStage status(DeviceStatus status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AttributesStage, _FinalStage {
        private DeviceAttributes attributes;

        private Optional<DeviceStatus> status = Optional.empty();

        private Optional<List<Component>> components = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Device other) {
            id(other.getId());
            attributes(other.getAttributes());
            components(other.getComponents());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>A collection of DeviceAttributes representing the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("attributes")
        public _FinalStage attributes(@NotNull DeviceAttributes attributes) {
            this.attributes = Objects.requireNonNull(attributes, "attributes must not be null");
            return this;
        }

        /**
         * <p>The current status of the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(DeviceStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<DeviceStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>A list of components applicable to the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage components(Nullable<List<Component>> components) {
            if (components.isNull()) {
                this.components = null;
            } else if (components.isEmpty()) {
                this.components = Optional.empty();
            } else {
                this.components = Optional.of(components.get());
            }
            return this;
        }

        /**
         * <p>A list of components applicable to the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage components(List<Component> components) {
            this.components = Optional.ofNullable(components);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "components", nulls = Nulls.SKIP)
        public _FinalStage components(Optional<List<Component>> components) {
            this.components = components;
            return this;
        }

        /**
         * <p>A synthetic identifier for the device. The identifier includes a standardized prefix and
         * is otherwise an opaque id generated from key device fields.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Device build() {
            return new Device(id, attributes, components, status, additionalProperties);
        }
    }
}
