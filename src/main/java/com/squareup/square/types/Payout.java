/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Payout.Builder.class)
public final class Payout {
    private final String id;

    private final Optional<PayoutStatus> status;

    private final String locationId;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<Money> amountMoney;

    private final Optional<Destination> destination;

    private final Optional<Integer> version;

    private final Optional<PayoutType> type;

    private final Optional<List<PayoutFee>> payoutFee;

    private final Optional<String> arrivalDate;

    private final Optional<String> endToEndId;

    private final Map<String, Object> additionalProperties;

    private Payout(
            String id,
            Optional<PayoutStatus> status,
            String locationId,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<Money> amountMoney,
            Optional<Destination> destination,
            Optional<Integer> version,
            Optional<PayoutType> type,
            Optional<List<PayoutFee>> payoutFee,
            Optional<String> arrivalDate,
            Optional<String> endToEndId,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.locationId = locationId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.amountMoney = amountMoney;
        this.destination = destination;
        this.version = version;
        this.type = type;
        this.payoutFee = payoutFee;
        this.arrivalDate = arrivalDate;
        this.endToEndId = endToEndId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID for the payout.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Indicates the payout status.
     * See <a href="#type-payoutstatus">PayoutStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<PayoutStatus> getStatus() {
        return status;
    }

    /**
     * @return The ID of the location associated with the payout.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp of when the payout was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The amount of money involved in the payout. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return Information about the banking destination (such as a bank account, Square checking account, or debit card)
     * against which the payout was made.
     */
    @JsonProperty("destination")
    public Optional<Destination> getDestination() {
        return destination;
    }

    /**
     * @return The version number, which is incremented each time an update is made to this payout record.
     * The version number helps developers receive event notifications or feeds out of order.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return Indicates the payout type.
     * See <a href="#type-payouttype">PayoutType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<PayoutType> getType() {
        return type;
    }

    /**
     * @return A list of transfer fees and any taxes on the fees assessed by Square for this payout.
     */
    @JsonIgnore
    public Optional<List<PayoutFee>> getPayoutFee() {
        if (payoutFee == null) {
            return Optional.empty();
        }
        return payoutFee;
    }

    /**
     * @return The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.
     */
    @JsonIgnore
    public Optional<String> getArrivalDate() {
        if (arrivalDate == null) {
            return Optional.empty();
        }
        return arrivalDate;
    }

    /**
     * @return A unique ID for each <code>Payout</code> object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.
     */
    @JsonIgnore
    public Optional<String> getEndToEndId() {
        if (endToEndId == null) {
            return Optional.empty();
        }
        return endToEndId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payout_fee")
    private Optional<List<PayoutFee>> _getPayoutFee() {
        return payoutFee;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("arrival_date")
    private Optional<String> _getArrivalDate() {
        return arrivalDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_to_end_id")
    private Optional<String> _getEndToEndId() {
        return endToEndId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Payout && equalTo((Payout) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Payout other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && locationId.equals(other.locationId)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && amountMoney.equals(other.amountMoney)
                && destination.equals(other.destination)
                && version.equals(other.version)
                && type.equals(other.type)
                && payoutFee.equals(other.payoutFee)
                && arrivalDate.equals(other.arrivalDate)
                && endToEndId.equals(other.endToEndId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.status,
                this.locationId,
                this.createdAt,
                this.updatedAt,
                this.amountMoney,
                this.destination,
                this.version,
                this.type,
                this.payoutFee,
                this.arrivalDate,
                this.endToEndId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>A unique ID for the payout.</p>
         */
        LocationIdStage id(@NotNull String id);

        Builder from(Payout other);
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the location associated with the payout.</p>
         */
        _FinalStage locationId(@NotNull String locationId);
    }

    public interface _FinalStage {
        Payout build();

        /**
         * <p>Indicates the payout status.
         * See <a href="#type-payoutstatus">PayoutStatus</a> for possible values</p>
         */
        _FinalStage status(Optional<PayoutStatus> status);

        _FinalStage status(PayoutStatus status);

        /**
         * <p>The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format.</p>
         */
        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);

        /**
         * <p>The timestamp of when the payout was last updated, in RFC 3339 format.</p>
         */
        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        /**
         * <p>The amount of money involved in the payout. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</p>
         */
        _FinalStage amountMoney(Optional<Money> amountMoney);

        _FinalStage amountMoney(Money amountMoney);

        /**
         * <p>Information about the banking destination (such as a bank account, Square checking account, or debit card)
         * against which the payout was made.</p>
         */
        _FinalStage destination(Optional<Destination> destination);

        _FinalStage destination(Destination destination);

        /**
         * <p>The version number, which is incremented each time an update is made to this payout record.
         * The version number helps developers receive event notifications or feeds out of order.</p>
         */
        _FinalStage version(Optional<Integer> version);

        _FinalStage version(Integer version);

        /**
         * <p>Indicates the payout type.
         * See <a href="#type-payouttype">PayoutType</a> for possible values</p>
         */
        _FinalStage type(Optional<PayoutType> type);

        _FinalStage type(PayoutType type);

        /**
         * <p>A list of transfer fees and any taxes on the fees assessed by Square for this payout.</p>
         */
        _FinalStage payoutFee(Optional<List<PayoutFee>> payoutFee);

        _FinalStage payoutFee(List<PayoutFee> payoutFee);

        _FinalStage payoutFee(Nullable<List<PayoutFee>> payoutFee);

        /**
         * <p>The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.</p>
         */
        _FinalStage arrivalDate(Optional<String> arrivalDate);

        _FinalStage arrivalDate(String arrivalDate);

        _FinalStage arrivalDate(Nullable<String> arrivalDate);

        /**
         * <p>A unique ID for each <code>Payout</code> object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.</p>
         */
        _FinalStage endToEndId(Optional<String> endToEndId);

        _FinalStage endToEndId(String endToEndId);

        _FinalStage endToEndId(Nullable<String> endToEndId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, LocationIdStage, _FinalStage {
        private String id;

        private String locationId;

        private Optional<String> endToEndId = Optional.empty();

        private Optional<String> arrivalDate = Optional.empty();

        private Optional<List<PayoutFee>> payoutFee = Optional.empty();

        private Optional<PayoutType> type = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<Destination> destination = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<PayoutStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Payout other) {
            id(other.getId());
            status(other.getStatus());
            locationId(other.getLocationId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            amountMoney(other.getAmountMoney());
            destination(other.getDestination());
            version(other.getVersion());
            type(other.getType());
            payoutFee(other.getPayoutFee());
            arrivalDate(other.getArrivalDate());
            endToEndId(other.getEndToEndId());
            return this;
        }

        /**
         * <p>A unique ID for the payout.</p>
         * <p>A unique ID for the payout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public LocationIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The ID of the location associated with the payout.</p>
         * <p>The ID of the location associated with the payout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>A unique ID for each <code>Payout</code> object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endToEndId(Nullable<String> endToEndId) {
            if (endToEndId.isNull()) {
                this.endToEndId = null;
            } else if (endToEndId.isEmpty()) {
                this.endToEndId = Optional.empty();
            } else {
                this.endToEndId = Optional.of(endToEndId.get());
            }
            return this;
        }

        /**
         * <p>A unique ID for each <code>Payout</code> object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endToEndId(String endToEndId) {
            this.endToEndId = Optional.ofNullable(endToEndId);
            return this;
        }

        /**
         * <p>A unique ID for each <code>Payout</code> object that might also appear on the seller’s bank statement. You can use this ID to automate the process of reconciling each payout with the corresponding line item on the bank statement.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "end_to_end_id", nulls = Nulls.SKIP)
        public _FinalStage endToEndId(Optional<String> endToEndId) {
            this.endToEndId = endToEndId;
            return this;
        }

        /**
         * <p>The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage arrivalDate(Nullable<String> arrivalDate) {
            if (arrivalDate.isNull()) {
                this.arrivalDate = null;
            } else if (arrivalDate.isEmpty()) {
                this.arrivalDate = Optional.empty();
            } else {
                this.arrivalDate = Optional.of(arrivalDate.get());
            }
            return this;
        }

        /**
         * <p>The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage arrivalDate(String arrivalDate) {
            this.arrivalDate = Optional.ofNullable(arrivalDate);
            return this;
        }

        /**
         * <p>The calendar date, in ISO 8601 format (YYYY-MM-DD), when the payout is due to arrive in the seller’s banking destination.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "arrival_date", nulls = Nulls.SKIP)
        public _FinalStage arrivalDate(Optional<String> arrivalDate) {
            this.arrivalDate = arrivalDate;
            return this;
        }

        /**
         * <p>A list of transfer fees and any taxes on the fees assessed by Square for this payout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage payoutFee(Nullable<List<PayoutFee>> payoutFee) {
            if (payoutFee.isNull()) {
                this.payoutFee = null;
            } else if (payoutFee.isEmpty()) {
                this.payoutFee = Optional.empty();
            } else {
                this.payoutFee = Optional.of(payoutFee.get());
            }
            return this;
        }

        /**
         * <p>A list of transfer fees and any taxes on the fees assessed by Square for this payout.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage payoutFee(List<PayoutFee> payoutFee) {
            this.payoutFee = Optional.ofNullable(payoutFee);
            return this;
        }

        /**
         * <p>A list of transfer fees and any taxes on the fees assessed by Square for this payout.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "payout_fee", nulls = Nulls.SKIP)
        public _FinalStage payoutFee(Optional<List<PayoutFee>> payoutFee) {
            this.payoutFee = payoutFee;
            return this;
        }

        /**
         * <p>Indicates the payout type.
         * See <a href="#type-payouttype">PayoutType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(PayoutType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Indicates the payout type.
         * See <a href="#type-payouttype">PayoutType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<PayoutType> type) {
            this.type = type;
            return this;
        }

        /**
         * <p>The version number, which is incremented each time an update is made to this payout record.
         * The version number helps developers receive event notifications or feeds out of order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The version number, which is incremented each time an update is made to this payout record.
         * The version number helps developers receive event notifications or feeds out of order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>Information about the banking destination (such as a bank account, Square checking account, or debit card)
         * against which the payout was made.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage destination(Destination destination) {
            this.destination = Optional.ofNullable(destination);
            return this;
        }

        /**
         * <p>Information about the banking destination (such as a bank account, Square checking account, or debit card)
         * against which the payout was made.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "destination", nulls = Nulls.SKIP)
        public _FinalStage destination(Optional<Destination> destination) {
            this.destination = destination;
            return this;
        }

        /**
         * <p>The amount of money involved in the payout. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>The amount of money involved in the payout. A positive amount indicates a deposit, and a negative amount indicates a withdrawal. This amount is never zero.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public _FinalStage amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        /**
         * <p>The timestamp of when the payout was last updated, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The timestamp of when the payout was last updated, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp of when the payout was created and submitted for deposit to the seller's banking destination, in RFC 3339 format.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Indicates the payout status.
         * See <a href="#type-payoutstatus">PayoutStatus</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(PayoutStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Indicates the payout status.
         * See <a href="#type-payoutstatus">PayoutStatus</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<PayoutStatus> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public Payout build() {
            return new Payout(
                    id,
                    status,
                    locationId,
                    createdAt,
                    updatedAt,
                    amountMoney,
                    destination,
                    version,
                    type,
                    payoutFee,
                    arrivalDate,
                    endToEndId,
                    additionalProperties);
        }
    }
}
