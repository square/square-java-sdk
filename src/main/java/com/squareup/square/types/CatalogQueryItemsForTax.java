/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQueryItemsForTax.Builder.class)
public final class CatalogQueryItemsForTax {
    private final List<String> taxIds;

    private final Map<String, Object> additionalProperties;

    private CatalogQueryItemsForTax(List<String> taxIds, Map<String, Object> additionalProperties) {
        this.taxIds = taxIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A set of <code>CatalogTax</code> IDs to be used to find associated <code>CatalogItem</code>s.
     */
    @JsonProperty("tax_ids")
    public List<String> getTaxIds() {
        return taxIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQueryItemsForTax && equalTo((CatalogQueryItemsForTax) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQueryItemsForTax other) {
        return taxIds.equals(other.taxIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.taxIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> taxIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogQueryItemsForTax other) {
            taxIds(other.getTaxIds());
            return this;
        }

        /**
         * <p>A set of <code>CatalogTax</code> IDs to be used to find associated <code>CatalogItem</code>s.</p>
         */
        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(List<String> taxIds) {
            this.taxIds.clear();
            this.taxIds.addAll(taxIds);
            return this;
        }

        public Builder addTaxIds(String taxIds) {
            this.taxIds.add(taxIds);
            return this;
        }

        public Builder addAllTaxIds(List<String> taxIds) {
            if (taxIds != null) {
                this.taxIds.addAll(taxIds);
            }
            return this;
        }

        public CatalogQueryItemsForTax build() {
            return new CatalogQueryItemsForTax(taxIds, additionalProperties);
        }
    }
}
