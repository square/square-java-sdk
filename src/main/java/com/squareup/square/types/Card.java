/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Card.Builder.class)
public final class Card {
    private final Optional<String> id;

    private final Optional<CardBrand> cardBrand;

    private final Optional<String> last4;

    private final Optional<Long> expMonth;

    private final Optional<Long> expYear;

    private final Optional<String> cardholderName;

    private final Optional<Address> billingAddress;

    private final Optional<String> fingerprint;

    private final Optional<String> customerId;

    private final Optional<String> merchantId;

    private final Optional<String> referenceId;

    private final Optional<Boolean> enabled;

    private final Optional<CardType> cardType;

    private final Optional<CardPrepaidType> prepaidType;

    private final Optional<String> bin;

    private final Optional<Long> version;

    private final Optional<CardCoBrand> cardCoBrand;

    private final Map<String, Object> additionalProperties;

    private Card(
            Optional<String> id,
            Optional<CardBrand> cardBrand,
            Optional<String> last4,
            Optional<Long> expMonth,
            Optional<Long> expYear,
            Optional<String> cardholderName,
            Optional<Address> billingAddress,
            Optional<String> fingerprint,
            Optional<String> customerId,
            Optional<String> merchantId,
            Optional<String> referenceId,
            Optional<Boolean> enabled,
            Optional<CardType> cardType,
            Optional<CardPrepaidType> prepaidType,
            Optional<String> bin,
            Optional<Long> version,
            Optional<CardCoBrand> cardCoBrand,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.cardBrand = cardBrand;
        this.last4 = last4;
        this.expMonth = expMonth;
        this.expYear = expYear;
        this.cardholderName = cardholderName;
        this.billingAddress = billingAddress;
        this.fingerprint = fingerprint;
        this.customerId = customerId;
        this.merchantId = merchantId;
        this.referenceId = referenceId;
        this.enabled = enabled;
        this.cardType = cardType;
        this.prepaidType = prepaidType;
        this.bin = bin;
        this.version = version;
        this.cardCoBrand = cardCoBrand;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique ID for this card. Generated by Square.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The card's brand.
     * See <a href="#type-cardbrand">CardBrand</a> for possible values
     */
    @JsonProperty("card_brand")
    public Optional<CardBrand> getCardBrand() {
        return cardBrand;
    }

    /**
     * @return The last 4 digits of the card number.
     */
    @JsonProperty("last_4")
    public Optional<String> getLast4() {
        return last4;
    }

    /**
     * @return The expiration month of the associated card as an integer between 1 and 12.
     */
    @JsonIgnore
    public Optional<Long> getExpMonth() {
        if (expMonth == null) {
            return Optional.empty();
        }
        return expMonth;
    }

    /**
     * @return The four-digit year of the card's expiration date.
     */
    @JsonIgnore
    public Optional<Long> getExpYear() {
        if (expYear == null) {
            return Optional.empty();
        }
        return expYear;
    }

    /**
     * @return The name of the cardholder.
     */
    @JsonIgnore
    public Optional<String> getCardholderName() {
        if (cardholderName == null) {
            return Optional.empty();
        }
        return cardholderName;
    }

    /**
     * @return The billing address for this card.
     */
    @JsonProperty("billing_address")
    public Optional<Address> getBillingAddress() {
        return billingAddress;
    }

    /**
     * @return Intended as a Square-assigned identifier, based
     * on the card number, to identify the card across multiple locations within a
     * single application.
     */
    @JsonProperty("fingerprint")
    public Optional<String> getFingerprint() {
        return fingerprint;
    }

    /**
     * @return <strong>Required</strong> The ID of a customer created using the Customers API to be associated with the card.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The ID of the merchant associated with the card.
     */
    @JsonProperty("merchant_id")
    public Optional<String> getMerchantId() {
        return merchantId;
    }

    /**
     * @return An optional user-defined reference ID that associates this card with
     * another entity in an external system. For example, a customer ID from an
     * external customer management system.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return Indicates whether or not a card can be used for payments.
     */
    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return The type of the card.
     * The Card object includes this field only in response to Payments API calls.
     * See <a href="#type-cardtype">CardType</a> for possible values
     */
    @JsonProperty("card_type")
    public Optional<CardType> getCardType() {
        return cardType;
    }

    /**
     * @return Indicates whether the Card is prepaid or not.
     * The Card object includes this field only in response to Payments API calls.
     * See <a href="#type-cardprepaidtype">CardPrepaidType</a> for possible values
     */
    @JsonProperty("prepaid_type")
    public Optional<CardPrepaidType> getPrepaidType() {
        return prepaidType;
    }

    /**
     * @return The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
     * returns this field.
     */
    @JsonProperty("bin")
    public Optional<String> getBin() {
        return bin;
    }

    /**
     * @return Current version number of the card. Increments with each card update. Requests to update an
     * existing Card object will be rejected unless the version in the request matches the current
     * version for the Card.
     */
    @JsonProperty("version")
    public Optional<Long> getVersion() {
        return version;
    }

    /**
     * @return The card's co-brand if available. For example, an Afterpay virtual card would have a
     * co-brand of AFTERPAY.
     * See <a href="#type-cardcobrand">CardCoBrand</a> for possible values
     */
    @JsonProperty("card_co_brand")
    public Optional<CardCoBrand> getCardCoBrand() {
        return cardCoBrand;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("exp_month")
    private Optional<Long> _getExpMonth() {
        return expMonth;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("exp_year")
    private Optional<Long> _getExpYear() {
        return expYear;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cardholder_name")
    private Optional<String> _getCardholderName() {
        return cardholderName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Card && equalTo((Card) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Card other) {
        return id.equals(other.id)
                && cardBrand.equals(other.cardBrand)
                && last4.equals(other.last4)
                && expMonth.equals(other.expMonth)
                && expYear.equals(other.expYear)
                && cardholderName.equals(other.cardholderName)
                && billingAddress.equals(other.billingAddress)
                && fingerprint.equals(other.fingerprint)
                && customerId.equals(other.customerId)
                && merchantId.equals(other.merchantId)
                && referenceId.equals(other.referenceId)
                && enabled.equals(other.enabled)
                && cardType.equals(other.cardType)
                && prepaidType.equals(other.prepaidType)
                && bin.equals(other.bin)
                && version.equals(other.version)
                && cardCoBrand.equals(other.cardCoBrand);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.cardBrand,
                this.last4,
                this.expMonth,
                this.expYear,
                this.cardholderName,
                this.billingAddress,
                this.fingerprint,
                this.customerId,
                this.merchantId,
                this.referenceId,
                this.enabled,
                this.cardType,
                this.prepaidType,
                this.bin,
                this.version,
                this.cardCoBrand);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<CardBrand> cardBrand = Optional.empty();

        private Optional<String> last4 = Optional.empty();

        private Optional<Long> expMonth = Optional.empty();

        private Optional<Long> expYear = Optional.empty();

        private Optional<String> cardholderName = Optional.empty();

        private Optional<Address> billingAddress = Optional.empty();

        private Optional<String> fingerprint = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<CardType> cardType = Optional.empty();

        private Optional<CardPrepaidType> prepaidType = Optional.empty();

        private Optional<String> bin = Optional.empty();

        private Optional<Long> version = Optional.empty();

        private Optional<CardCoBrand> cardCoBrand = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Card other) {
            id(other.getId());
            cardBrand(other.getCardBrand());
            last4(other.getLast4());
            expMonth(other.getExpMonth());
            expYear(other.getExpYear());
            cardholderName(other.getCardholderName());
            billingAddress(other.getBillingAddress());
            fingerprint(other.getFingerprint());
            customerId(other.getCustomerId());
            merchantId(other.getMerchantId());
            referenceId(other.getReferenceId());
            enabled(other.getEnabled());
            cardType(other.getCardType());
            prepaidType(other.getPrepaidType());
            bin(other.getBin());
            version(other.getVersion());
            cardCoBrand(other.getCardCoBrand());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "card_brand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<CardBrand> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(CardBrand cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        @JsonSetter(value = "last_4", nulls = Nulls.SKIP)
        public Builder last4(Optional<String> last4) {
            this.last4 = last4;
            return this;
        }

        public Builder last4(String last4) {
            this.last4 = Optional.ofNullable(last4);
            return this;
        }

        @JsonSetter(value = "exp_month", nulls = Nulls.SKIP)
        public Builder expMonth(Optional<Long> expMonth) {
            this.expMonth = expMonth;
            return this;
        }

        public Builder expMonth(Long expMonth) {
            this.expMonth = Optional.ofNullable(expMonth);
            return this;
        }

        public Builder expMonth(Nullable<Long> expMonth) {
            if (expMonth.isNull()) {
                this.expMonth = null;
            } else if (expMonth.isEmpty()) {
                this.expMonth = Optional.empty();
            } else {
                this.expMonth = Optional.of(expMonth.get());
            }
            return this;
        }

        @JsonSetter(value = "exp_year", nulls = Nulls.SKIP)
        public Builder expYear(Optional<Long> expYear) {
            this.expYear = expYear;
            return this;
        }

        public Builder expYear(Long expYear) {
            this.expYear = Optional.ofNullable(expYear);
            return this;
        }

        public Builder expYear(Nullable<Long> expYear) {
            if (expYear.isNull()) {
                this.expYear = null;
            } else if (expYear.isEmpty()) {
                this.expYear = Optional.empty();
            } else {
                this.expYear = Optional.of(expYear.get());
            }
            return this;
        }

        @JsonSetter(value = "cardholder_name", nulls = Nulls.SKIP)
        public Builder cardholderName(Optional<String> cardholderName) {
            this.cardholderName = cardholderName;
            return this;
        }

        public Builder cardholderName(String cardholderName) {
            this.cardholderName = Optional.ofNullable(cardholderName);
            return this;
        }

        public Builder cardholderName(Nullable<String> cardholderName) {
            if (cardholderName.isNull()) {
                this.cardholderName = null;
            } else if (cardholderName.isEmpty()) {
                this.cardholderName = Optional.empty();
            } else {
                this.cardholderName = Optional.of(cardholderName.get());
            }
            return this;
        }

        @JsonSetter(value = "billing_address", nulls = Nulls.SKIP)
        public Builder billingAddress(Optional<Address> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        public Builder billingAddress(Address billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        @JsonSetter(value = "fingerprint", nulls = Nulls.SKIP)
        public Builder fingerprint(Optional<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        @JsonSetter(value = "card_type", nulls = Nulls.SKIP)
        public Builder cardType(Optional<CardType> cardType) {
            this.cardType = cardType;
            return this;
        }

        public Builder cardType(CardType cardType) {
            this.cardType = Optional.ofNullable(cardType);
            return this;
        }

        @JsonSetter(value = "prepaid_type", nulls = Nulls.SKIP)
        public Builder prepaidType(Optional<CardPrepaidType> prepaidType) {
            this.prepaidType = prepaidType;
            return this;
        }

        public Builder prepaidType(CardPrepaidType prepaidType) {
            this.prepaidType = Optional.ofNullable(prepaidType);
            return this;
        }

        @JsonSetter(value = "bin", nulls = Nulls.SKIP)
        public Builder bin(Optional<String> bin) {
            this.bin = bin;
            return this;
        }

        public Builder bin(String bin) {
            this.bin = Optional.ofNullable(bin);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Long> version) {
            this.version = version;
            return this;
        }

        public Builder version(Long version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "card_co_brand", nulls = Nulls.SKIP)
        public Builder cardCoBrand(Optional<CardCoBrand> cardCoBrand) {
            this.cardCoBrand = cardCoBrand;
            return this;
        }

        public Builder cardCoBrand(CardCoBrand cardCoBrand) {
            this.cardCoBrand = Optional.ofNullable(cardCoBrand);
            return this;
        }

        public Card build() {
            return new Card(
                    id,
                    cardBrand,
                    last4,
                    expMonth,
                    expYear,
                    cardholderName,
                    billingAddress,
                    fingerprint,
                    customerId,
                    merchantId,
                    referenceId,
                    enabled,
                    cardType,
                    prepaidType,
                    bin,
                    version,
                    cardCoBrand,
                    additionalProperties);
        }
    }
}
