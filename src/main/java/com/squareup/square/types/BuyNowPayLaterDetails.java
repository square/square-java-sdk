/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BuyNowPayLaterDetails.Builder.class)
public final class BuyNowPayLaterDetails {
    private final Optional<String> brand;

    private final Optional<AfterpayDetails> afterpayDetails;

    private final Optional<ClearpayDetails> clearpayDetails;

    private final Map<String, Object> additionalProperties;

    private BuyNowPayLaterDetails(
            Optional<String> brand,
            Optional<AfterpayDetails> afterpayDetails,
            Optional<ClearpayDetails> clearpayDetails,
            Map<String, Object> additionalProperties) {
        this.brand = brand;
        this.afterpayDetails = afterpayDetails;
        this.clearpayDetails = clearpayDetails;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The brand used for the Buy Now Pay Later payment.
     * The brand can be <code>AFTERPAY</code>, <code>CLEARPAY</code> or <code>UNKNOWN</code>.
     */
    @JsonIgnore
    public Optional<String> getBrand() {
        if (brand == null) {
            return Optional.empty();
        }
        return brand;
    }

    /**
     * @return Details about an Afterpay payment. These details are only populated if the <code>brand</code> is
     * <code>AFTERPAY</code>.
     */
    @JsonProperty("afterpay_details")
    public Optional<AfterpayDetails> getAfterpayDetails() {
        return afterpayDetails;
    }

    /**
     * @return Details about a Clearpay payment. These details are only populated if the <code>brand</code> is
     * <code>CLEARPAY</code>.
     */
    @JsonProperty("clearpay_details")
    public Optional<ClearpayDetails> getClearpayDetails() {
        return clearpayDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("brand")
    private Optional<String> _getBrand() {
        return brand;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BuyNowPayLaterDetails && equalTo((BuyNowPayLaterDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BuyNowPayLaterDetails other) {
        return brand.equals(other.brand)
                && afterpayDetails.equals(other.afterpayDetails)
                && clearpayDetails.equals(other.clearpayDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.brand, this.afterpayDetails, this.clearpayDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brand = Optional.empty();

        private Optional<AfterpayDetails> afterpayDetails = Optional.empty();

        private Optional<ClearpayDetails> clearpayDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BuyNowPayLaterDetails other) {
            brand(other.getBrand());
            afterpayDetails(other.getAfterpayDetails());
            clearpayDetails(other.getClearpayDetails());
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.ofNullable(brand);
            return this;
        }

        public Builder brand(Nullable<String> brand) {
            if (brand.isNull()) {
                this.brand = null;
            } else if (brand.isEmpty()) {
                this.brand = Optional.empty();
            } else {
                this.brand = Optional.of(brand.get());
            }
            return this;
        }

        @JsonSetter(value = "afterpay_details", nulls = Nulls.SKIP)
        public Builder afterpayDetails(Optional<AfterpayDetails> afterpayDetails) {
            this.afterpayDetails = afterpayDetails;
            return this;
        }

        public Builder afterpayDetails(AfterpayDetails afterpayDetails) {
            this.afterpayDetails = Optional.ofNullable(afterpayDetails);
            return this;
        }

        @JsonSetter(value = "clearpay_details", nulls = Nulls.SKIP)
        public Builder clearpayDetails(Optional<ClearpayDetails> clearpayDetails) {
            this.clearpayDetails = clearpayDetails;
            return this;
        }

        public Builder clearpayDetails(ClearpayDetails clearpayDetails) {
            this.clearpayDetails = Optional.ofNullable(clearpayDetails);
            return this;
        }

        public BuyNowPayLaterDetails build() {
            return new BuyNowPayLaterDetails(brand, afterpayDetails, clearpayDetails, additionalProperties);
        }
    }
}
