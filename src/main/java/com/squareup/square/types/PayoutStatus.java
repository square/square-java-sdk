/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class PayoutStatus {
    public static final PayoutStatus PAID = new PayoutStatus(Value.PAID, "PAID");

    public static final PayoutStatus SENT = new PayoutStatus(Value.SENT, "SENT");

    public static final PayoutStatus FAILED = new PayoutStatus(Value.FAILED, "FAILED");

    private final Value value;

    private final String string;

    PayoutStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other) || (other instanceof PayoutStatus && this.string.equals(((PayoutStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case PAID:
                return visitor.visitPaid();
            case SENT:
                return visitor.visitSent();
            case FAILED:
                return visitor.visitFailed();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static PayoutStatus valueOf(String value) {
        switch (value) {
            case "PAID":
                return PAID;
            case "SENT":
                return SENT;
            case "FAILED":
                return FAILED;
            default:
                return new PayoutStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        SENT,

        FAILED,

        PAID,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitSent();

        T visitFailed();

        T visitPaid();

        T visitUnknown(String unknownType);
    }
}
