/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchOrdersSourceFilter.Builder.class)
public final class SearchOrdersSourceFilter {
    private final Optional<List<String>> sourceNames;

    private final Map<String, Object> additionalProperties;

    private SearchOrdersSourceFilter(Optional<List<String>> sourceNames, Map<String, Object> additionalProperties) {
        this.sourceNames = sourceNames;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters by the <a href="entity:OrderSource">Source</a> <code>name</code>. The filter returns any orders
     * with a <code>source.name</code> that matches any of the listed source names.
     * <p>Max: 10 source names.</p>
     */
    @JsonIgnore
    public Optional<List<String>> getSourceNames() {
        if (sourceNames == null) {
            return Optional.empty();
        }
        return sourceNames;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_names")
    private Optional<List<String>> _getSourceNames() {
        return sourceNames;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchOrdersSourceFilter && equalTo((SearchOrdersSourceFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchOrdersSourceFilter other) {
        return sourceNames.equals(other.sourceNames);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sourceNames);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> sourceNames = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchOrdersSourceFilter other) {
            sourceNames(other.getSourceNames());
            return this;
        }

        /**
         * <p>Filters by the <a href="entity:OrderSource">Source</a> <code>name</code>. The filter returns any orders
         * with a <code>source.name</code> that matches any of the listed source names.</p>
         * <p>Max: 10 source names.</p>
         */
        @JsonSetter(value = "source_names", nulls = Nulls.SKIP)
        public Builder sourceNames(Optional<List<String>> sourceNames) {
            this.sourceNames = sourceNames;
            return this;
        }

        public Builder sourceNames(List<String> sourceNames) {
            this.sourceNames = Optional.ofNullable(sourceNames);
            return this;
        }

        public Builder sourceNames(Nullable<List<String>> sourceNames) {
            if (sourceNames.isNull()) {
                this.sourceNames = null;
            } else if (sourceNames.isEmpty()) {
                this.sourceNames = Optional.empty();
            } else {
                this.sourceNames = Optional.of(sourceNames.get());
            }
            return this;
        }

        public SearchOrdersSourceFilter build() {
            return new SearchOrdersSourceFilter(sourceNames, additionalProperties);
        }
    }
}
