/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GiftCardActivityRedeem.Builder.class)
public final class GiftCardActivityRedeem {
    private final Money amountMoney;

    private final Optional<String> paymentId;

    private final Optional<String> referenceId;

    private final Optional<GiftCardActivityRedeemStatus> status;

    private final Map<String, Object> additionalProperties;

    private GiftCardActivityRedeem(
            Money amountMoney,
            Optional<String> paymentId,
            Optional<String> referenceId,
            Optional<GiftCardActivityRedeemStatus> status,
            Map<String, Object> additionalProperties) {
        this.amountMoney = amountMoney;
        this.paymentId = paymentId;
        this.referenceId = referenceId;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount deducted from the gift card for the redemption. This value is a positive integer.
     * <p>Applications that use a custom payment processing system must specify this amount in the
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.</p>
     */
    @JsonProperty("amount_money")
    public Money getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return The ID of the payment that represents the gift card redemption. Square populates this field
     * if the payment was processed by Square.
     */
    @JsonProperty("payment_id")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    /**
     * @return A client-specified ID that associates the gift card activity with an entity in another system.
     * <p>Applications that use a custom payment processing system can use this field to track information
     * related to an order or payment.</p>
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The status of the gift card redemption. Gift cards redeemed from Square Point of Sale or the
     * Square Seller Dashboard use a two-state process: <code>PENDING</code>
     * to <code>COMPLETED</code> or <code>PENDING</code> to  <code>CANCELED</code>. Gift cards redeemed using the Gift Card Activities API
     * always have a <code>COMPLETED</code> status.
     * See <a href="#type-status">Status</a> for possible values
     */
    @JsonProperty("status")
    public Optional<GiftCardActivityRedeemStatus> getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GiftCardActivityRedeem && equalTo((GiftCardActivityRedeem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GiftCardActivityRedeem other) {
        return amountMoney.equals(other.amountMoney)
                && paymentId.equals(other.paymentId)
                && referenceId.equals(other.referenceId)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amountMoney, this.paymentId, this.referenceId, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountMoneyStage builder() {
        return new Builder();
    }

    public interface AmountMoneyStage {
        _FinalStage amountMoney(@NotNull Money amountMoney);

        Builder from(GiftCardActivityRedeem other);
    }

    public interface _FinalStage {
        GiftCardActivityRedeem build();

        _FinalStage paymentId(Optional<String> paymentId);

        _FinalStage paymentId(String paymentId);

        _FinalStage referenceId(Optional<String> referenceId);

        _FinalStage referenceId(String referenceId);

        _FinalStage referenceId(Nullable<String> referenceId);

        _FinalStage status(Optional<GiftCardActivityRedeemStatus> status);

        _FinalStage status(GiftCardActivityRedeemStatus status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountMoneyStage, _FinalStage {
        private Money amountMoney;

        private Optional<GiftCardActivityRedeemStatus> status = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GiftCardActivityRedeem other) {
            amountMoney(other.getAmountMoney());
            paymentId(other.getPaymentId());
            referenceId(other.getReferenceId());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>The amount deducted from the gift card for the redemption. This value is a positive integer.</p>
         * <p>Applications that use a custom payment processing system must specify this amount in the
         * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> request.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount_money")
        public _FinalStage amountMoney(@NotNull Money amountMoney) {
            this.amountMoney = Objects.requireNonNull(amountMoney, "amountMoney must not be null");
            return this;
        }

        /**
         * <p>The status of the gift card redemption. Gift cards redeemed from Square Point of Sale or the
         * Square Seller Dashboard use a two-state process: <code>PENDING</code>
         * to <code>COMPLETED</code> or <code>PENDING</code> to  <code>CANCELED</code>. Gift cards redeemed using the Gift Card Activities API
         * always have a <code>COMPLETED</code> status.
         * See <a href="#type-status">Status</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(GiftCardActivityRedeemStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<GiftCardActivityRedeemStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>A client-specified ID that associates the gift card activity with an entity in another system.</p>
         * <p>Applications that use a custom payment processing system can use this field to track information
         * related to an order or payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>A client-specified ID that associates the gift card activity with an entity in another system.</p>
         * <p>Applications that use a custom payment processing system can use this field to track information
         * related to an order or payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public _FinalStage referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        /**
         * <p>The ID of the payment that represents the gift card redemption. Square populates this field
         * if the payment was processed by Square.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payment_id", nulls = Nulls.SKIP)
        public _FinalStage paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        @java.lang.Override
        public GiftCardActivityRedeem build() {
            return new GiftCardActivityRedeem(amountMoney, paymentId, referenceId, status, additionalProperties);
        }
    }
}
