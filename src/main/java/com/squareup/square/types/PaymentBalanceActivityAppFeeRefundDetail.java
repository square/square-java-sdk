/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentBalanceActivityAppFeeRefundDetail.Builder.class)
public final class PaymentBalanceActivityAppFeeRefundDetail {
    private final Optional<String> paymentId;

    private final Optional<String> refundId;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private PaymentBalanceActivityAppFeeRefundDetail(
            Optional<String> paymentId,
            Optional<String> refundId,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.paymentId = paymentId;
        this.refundId = refundId;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the payment associated with this activity.
     */
    @JsonIgnore
    public Optional<String> getPaymentId() {
        if (paymentId == null) {
            return Optional.empty();
        }
        return paymentId;
    }

    /**
     * @return The ID of the refund associated with this activity.
     */
    @JsonIgnore
    public Optional<String> getRefundId() {
        if (refundId == null) {
            return Optional.empty();
        }
        return refundId;
    }

    /**
     * @return The ID of the location of the merchant associated with the payment refund activity
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_id")
    private Optional<String> _getPaymentId() {
        return paymentId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("refund_id")
    private Optional<String> _getRefundId() {
        return refundId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentBalanceActivityAppFeeRefundDetail
                && equalTo((PaymentBalanceActivityAppFeeRefundDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentBalanceActivityAppFeeRefundDetail other) {
        return paymentId.equals(other.paymentId)
                && refundId.equals(other.refundId)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentId, this.refundId, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> paymentId = Optional.empty();

        private Optional<String> refundId = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaymentBalanceActivityAppFeeRefundDetail other) {
            paymentId(other.getPaymentId());
            refundId(other.getRefundId());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The ID of the payment associated with this activity.</p>
         */
        @JsonSetter(value = "payment_id", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Nullable<String> paymentId) {
            if (paymentId.isNull()) {
                this.paymentId = null;
            } else if (paymentId.isEmpty()) {
                this.paymentId = Optional.empty();
            } else {
                this.paymentId = Optional.of(paymentId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the refund associated with this activity.</p>
         */
        @JsonSetter(value = "refund_id", nulls = Nulls.SKIP)
        public Builder refundId(Optional<String> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(String refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        public Builder refundId(Nullable<String> refundId) {
            if (refundId.isNull()) {
                this.refundId = null;
            } else if (refundId.isEmpty()) {
                this.refundId = Optional.empty();
            } else {
                this.refundId = Optional.of(refundId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the location of the merchant associated with the payment refund activity</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        public PaymentBalanceActivityAppFeeRefundDetail build() {
            return new PaymentBalanceActivityAppFeeRefundDetail(paymentId, refundId, locationId, additionalProperties);
        }
    }
}
