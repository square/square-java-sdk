/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQuickAmount.Builder.class)
public final class CatalogQuickAmount {
    private final CatalogQuickAmountType type;

    private final Money amount;

    private final Optional<Long> score;

    private final Optional<Long> ordinal;

    private final Map<String, Object> additionalProperties;

    private CatalogQuickAmount(
            CatalogQuickAmountType type,
            Money amount,
            Optional<Long> score,
            Optional<Long> ordinal,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.amount = amount;
        this.score = score;
        this.ordinal = ordinal;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Represents the type of the Quick Amount.
     * See <a href="#type-catalogquickamounttype">CatalogQuickAmountType</a> for possible values
     */
    @JsonProperty("type")
    public CatalogQuickAmountType getType() {
        return type;
    }

    /**
     * @return Represents the actual amount of the Quick Amount with Money type.
     */
    @JsonProperty("amount")
    public Money getAmount() {
        return amount;
    }

    /**
     * @return Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
     * MANUAL type amount will always have score = 100.
     */
    @JsonIgnore
    public Optional<Long> getScore() {
        if (score == null) {
            return Optional.empty();
        }
        return score;
    }

    /**
     * @return The order in which this Quick Amount should be displayed.
     */
    @JsonIgnore
    public Optional<Long> getOrdinal() {
        if (ordinal == null) {
            return Optional.empty();
        }
        return ordinal;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("score")
    private Optional<Long> _getScore() {
        return score;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ordinal")
    private Optional<Long> _getOrdinal() {
        return ordinal;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQuickAmount && equalTo((CatalogQuickAmount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQuickAmount other) {
        return type.equals(other.type)
                && amount.equals(other.amount)
                && score.equals(other.score)
                && ordinal.equals(other.ordinal);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.amount, this.score, this.ordinal);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        AmountStage type(@NotNull CatalogQuickAmountType type);

        Builder from(CatalogQuickAmount other);
    }

    public interface AmountStage {
        _FinalStage amount(@NotNull Money amount);
    }

    public interface _FinalStage {
        CatalogQuickAmount build();

        _FinalStage score(Optional<Long> score);

        _FinalStage score(Long score);

        _FinalStage score(Nullable<Long> score);

        _FinalStage ordinal(Optional<Long> ordinal);

        _FinalStage ordinal(Long ordinal);

        _FinalStage ordinal(Nullable<Long> ordinal);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, AmountStage, _FinalStage {
        private CatalogQuickAmountType type;

        private Money amount;

        private Optional<Long> ordinal = Optional.empty();

        private Optional<Long> score = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogQuickAmount other) {
            type(other.getType());
            amount(other.getAmount());
            score(other.getScore());
            ordinal(other.getOrdinal());
            return this;
        }

        /**
         * <p>Represents the type of the Quick Amount.
         * See <a href="#type-catalogquickamounttype">CatalogQuickAmountType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public AmountStage type(@NotNull CatalogQuickAmountType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>Represents the actual amount of the Quick Amount with Money type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public _FinalStage amount(@NotNull Money amount) {
            this.amount = Objects.requireNonNull(amount, "amount must not be null");
            return this;
        }

        /**
         * <p>The order in which this Quick Amount should be displayed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ordinal(Nullable<Long> ordinal) {
            if (ordinal.isNull()) {
                this.ordinal = null;
            } else if (ordinal.isEmpty()) {
                this.ordinal = Optional.empty();
            } else {
                this.ordinal = Optional.of(ordinal.get());
            }
            return this;
        }

        /**
         * <p>The order in which this Quick Amount should be displayed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ordinal(Long ordinal) {
            this.ordinal = Optional.ofNullable(ordinal);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ordinal", nulls = Nulls.SKIP)
        public _FinalStage ordinal(Optional<Long> ordinal) {
            this.ordinal = ordinal;
            return this;
        }

        /**
         * <p>Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
         * MANUAL type amount will always have score = 100.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage score(Nullable<Long> score) {
            if (score.isNull()) {
                this.score = null;
            } else if (score.isEmpty()) {
                this.score = Optional.empty();
            } else {
                this.score = Optional.of(score.get());
            }
            return this;
        }

        /**
         * <p>Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
         * MANUAL type amount will always have score = 100.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage score(Long score) {
            this.score = Optional.ofNullable(score);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "score", nulls = Nulls.SKIP)
        public _FinalStage score(Optional<Long> score) {
            this.score = score;
            return this;
        }

        @java.lang.Override
        public CatalogQuickAmount build() {
            return new CatalogQuickAmount(type, amount, score, ordinal, additionalProperties);
        }
    }
}
