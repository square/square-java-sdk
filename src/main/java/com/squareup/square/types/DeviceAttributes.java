/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceAttributes.Builder.class)
public final class DeviceAttributes {
    private final String type;

    private final String manufacturer;

    private final Optional<String> model;

    private final Optional<String> name;

    private final Optional<String> manufacturersId;

    private final Optional<String> updatedAt;

    private final Optional<String> version;

    private final Optional<String> merchantToken;

    private final Map<String, Object> additionalProperties;

    private DeviceAttributes(
            String type,
            String manufacturer,
            Optional<String> model,
            Optional<String> name,
            Optional<String> manufacturersId,
            Optional<String> updatedAt,
            Optional<String> version,
            Optional<String> merchantToken,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.manufacturer = manufacturer;
        this.model = model;
        this.name = name;
        this.manufacturersId = manufacturersId;
        this.updatedAt = updatedAt;
        this.version = version;
        this.merchantToken = merchantToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The device type.
     * See <a href="#type-devicetype">DeviceType</a> for possible values
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return The maker of the device.
     */
    @JsonProperty("manufacturer")
    public String getManufacturer() {
        return manufacturer;
    }

    /**
     * @return The specific model of the device.
     */
    @JsonIgnore
    public Optional<String> getModel() {
        if (model == null) {
            return Optional.empty();
        }
        return model;
    }

    /**
     * @return A seller-specified name for the device.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The manufacturer-supplied identifier for the device (where available). In many cases,
     * this identifier will be a serial number.
     */
    @JsonIgnore
    public Optional<String> getManufacturersId() {
        if (manufacturersId == null) {
            return Optional.empty();
        }
        return manufacturersId;
    }

    /**
     * @return The RFC 3339-formatted value of the most recent update to the device information.
     * (Could represent any field update on the device.)
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The current version of software installed on the device.
     */
    @JsonProperty("version")
    public Optional<String> getVersion() {
        return version;
    }

    /**
     * @return The merchant_token identifying the merchant controlling the device.
     */
    @JsonIgnore
    public Optional<String> getMerchantToken() {
        if (merchantToken == null) {
            return Optional.empty();
        }
        return merchantToken;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("model")
    private Optional<String> _getModel() {
        return model;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("manufacturers_id")
    private Optional<String> _getManufacturersId() {
        return manufacturersId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_token")
    private Optional<String> _getMerchantToken() {
        return merchantToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceAttributes && equalTo((DeviceAttributes) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceAttributes other) {
        return type.equals(other.type)
                && manufacturer.equals(other.manufacturer)
                && model.equals(other.model)
                && name.equals(other.name)
                && manufacturersId.equals(other.manufacturersId)
                && updatedAt.equals(other.updatedAt)
                && version.equals(other.version)
                && merchantToken.equals(other.merchantToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.manufacturer,
                this.model,
                this.name,
                this.manufacturersId,
                this.updatedAt,
                this.version,
                this.merchantToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        ManufacturerStage type(@NotNull String type);

        Builder from(DeviceAttributes other);
    }

    public interface ManufacturerStage {
        _FinalStage manufacturer(@NotNull String manufacturer);
    }

    public interface _FinalStage {
        DeviceAttributes build();

        _FinalStage model(Optional<String> model);

        _FinalStage model(String model);

        _FinalStage model(Nullable<String> model);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage name(Nullable<String> name);

        _FinalStage manufacturersId(Optional<String> manufacturersId);

        _FinalStage manufacturersId(String manufacturersId);

        _FinalStage manufacturersId(Nullable<String> manufacturersId);

        _FinalStage updatedAt(Optional<String> updatedAt);

        _FinalStage updatedAt(String updatedAt);

        _FinalStage version(Optional<String> version);

        _FinalStage version(String version);

        _FinalStage merchantToken(Optional<String> merchantToken);

        _FinalStage merchantToken(String merchantToken);

        _FinalStage merchantToken(Nullable<String> merchantToken);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, ManufacturerStage, _FinalStage {
        private String type;

        private String manufacturer;

        private Optional<String> merchantToken = Optional.empty();

        private Optional<String> version = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> manufacturersId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> model = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeviceAttributes other) {
            type(other.getType());
            manufacturer(other.getManufacturer());
            model(other.getModel());
            name(other.getName());
            manufacturersId(other.getManufacturersId());
            updatedAt(other.getUpdatedAt());
            version(other.getVersion());
            merchantToken(other.getMerchantToken());
            return this;
        }

        /**
         * <p>The device type.
         * See <a href="#type-devicetype">DeviceType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public ManufacturerStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The maker of the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("manufacturer")
        public _FinalStage manufacturer(@NotNull String manufacturer) {
            this.manufacturer = Objects.requireNonNull(manufacturer, "manufacturer must not be null");
            return this;
        }

        /**
         * <p>The merchant_token identifying the merchant controlling the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage merchantToken(Nullable<String> merchantToken) {
            if (merchantToken.isNull()) {
                this.merchantToken = null;
            } else if (merchantToken.isEmpty()) {
                this.merchantToken = Optional.empty();
            } else {
                this.merchantToken = Optional.of(merchantToken.get());
            }
            return this;
        }

        /**
         * <p>The merchant_token identifying the merchant controlling the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage merchantToken(String merchantToken) {
            this.merchantToken = Optional.ofNullable(merchantToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "merchant_token", nulls = Nulls.SKIP)
        public _FinalStage merchantToken(Optional<String> merchantToken) {
            this.merchantToken = merchantToken;
            return this;
        }

        /**
         * <p>The current version of software installed on the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage version(String version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public _FinalStage version(Optional<String> version) {
            this.version = version;
            return this;
        }

        /**
         * <p>The RFC 3339-formatted value of the most recent update to the device information.
         * (Could represent any field update on the device.)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The manufacturer-supplied identifier for the device (where available). In many cases,
         * this identifier will be a serial number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage manufacturersId(Nullable<String> manufacturersId) {
            if (manufacturersId.isNull()) {
                this.manufacturersId = null;
            } else if (manufacturersId.isEmpty()) {
                this.manufacturersId = Optional.empty();
            } else {
                this.manufacturersId = Optional.of(manufacturersId.get());
            }
            return this;
        }

        /**
         * <p>The manufacturer-supplied identifier for the device (where available). In many cases,
         * this identifier will be a serial number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage manufacturersId(String manufacturersId) {
            this.manufacturersId = Optional.ofNullable(manufacturersId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "manufacturers_id", nulls = Nulls.SKIP)
        public _FinalStage manufacturersId(Optional<String> manufacturersId) {
            this.manufacturersId = manufacturersId;
            return this;
        }

        /**
         * <p>A seller-specified name for the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>A seller-specified name for the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The specific model of the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(Nullable<String> model) {
            if (model.isNull()) {
                this.model = null;
            } else if (model.isEmpty()) {
                this.model = Optional.empty();
            } else {
                this.model = Optional.of(model.get());
            }
            return this;
        }

        /**
         * <p>The specific model of the device.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage model(String model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public _FinalStage model(Optional<String> model) {
            this.model = model;
            return this;
        }

        @java.lang.Override
        public DeviceAttributes build() {
            return new DeviceAttributes(
                    type,
                    manufacturer,
                    model,
                    name,
                    manufacturersId,
                    updatedAt,
                    version,
                    merchantToken,
                    additionalProperties);
        }
    }
}
