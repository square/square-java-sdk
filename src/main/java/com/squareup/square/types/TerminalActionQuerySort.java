/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalActionQuerySort.Builder.class)
public final class TerminalActionQuerySort {
    private final Optional<SortOrder> sortOrder;

    private final Map<String, Object> additionalProperties;

    private TerminalActionQuerySort(Optional<SortOrder> sortOrder, Map<String, Object> additionalProperties) {
        this.sortOrder = sortOrder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order in which results are listed.
     * <ul>
     * <li><code>ASC</code> - Oldest to newest.</li>
     * <li><code>DESC</code> - Newest to oldest (default).
     * See <a href="#type-sortorder">SortOrder</a> for possible values</li>
     * </ul>
     */
    @JsonProperty("sort_order")
    public Optional<SortOrder> getSortOrder() {
        return sortOrder;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalActionQuerySort && equalTo((TerminalActionQuerySort) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalActionQuerySort other) {
        return sortOrder.equals(other.sortOrder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sortOrder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SortOrder> sortOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TerminalActionQuerySort other) {
            sortOrder(other.getSortOrder());
            return this;
        }

        /**
         * <p>The order in which results are listed.</p>
         * <ul>
         * <li><code>ASC</code> - Oldest to newest.</li>
         * <li><code>DESC</code> - Newest to oldest (default).
         * See <a href="#type-sortorder">SortOrder</a> for possible values</li>
         * </ul>
         */
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public TerminalActionQuerySort build() {
            return new TerminalActionQuerySort(sortOrder, additionalProperties);
        }
    }
}
