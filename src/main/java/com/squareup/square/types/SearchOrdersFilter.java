/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchOrdersFilter.Builder.class)
public final class SearchOrdersFilter {
    private final Optional<SearchOrdersStateFilter> stateFilter;

    private final Optional<SearchOrdersDateTimeFilter> dateTimeFilter;

    private final Optional<SearchOrdersFulfillmentFilter> fulfillmentFilter;

    private final Optional<SearchOrdersSourceFilter> sourceFilter;

    private final Optional<SearchOrdersCustomerFilter> customerFilter;

    private final Map<String, Object> additionalProperties;

    private SearchOrdersFilter(
            Optional<SearchOrdersStateFilter> stateFilter,
            Optional<SearchOrdersDateTimeFilter> dateTimeFilter,
            Optional<SearchOrdersFulfillmentFilter> fulfillmentFilter,
            Optional<SearchOrdersSourceFilter> sourceFilter,
            Optional<SearchOrdersCustomerFilter> customerFilter,
            Map<String, Object> additionalProperties) {
        this.stateFilter = stateFilter;
        this.dateTimeFilter = dateTimeFilter;
        this.fulfillmentFilter = fulfillmentFilter;
        this.sourceFilter = sourceFilter;
        this.customerFilter = customerFilter;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter by <a href="entity:OrderState">OrderState</a>.
     */
    @JsonProperty("state_filter")
    public Optional<SearchOrdersStateFilter> getStateFilter() {
        return stateFilter;
    }

    /**
     * @return Filter for results within a time range.
     * <p><strong>Important:</strong> If you filter for orders by time range, you must set <code>SearchOrdersSort</code>
     * to sort by the same field.
     * <a href="https://developer.squareup.com/docs/orders-api/manage-orders/search-orders#important-note-about-filtering-orders-by-time-range">Learn more about filtering orders by time range.</a></p>
     */
    @JsonProperty("date_time_filter")
    public Optional<SearchOrdersDateTimeFilter> getDateTimeFilter() {
        return dateTimeFilter;
    }

    /**
     * @return Filter by the fulfillment type or state.
     */
    @JsonProperty("fulfillment_filter")
    public Optional<SearchOrdersFulfillmentFilter> getFulfillmentFilter() {
        return fulfillmentFilter;
    }

    /**
     * @return Filter by the source of the order.
     */
    @JsonProperty("source_filter")
    public Optional<SearchOrdersSourceFilter> getSourceFilter() {
        return sourceFilter;
    }

    /**
     * @return Filter by customers associated with the order.
     */
    @JsonProperty("customer_filter")
    public Optional<SearchOrdersCustomerFilter> getCustomerFilter() {
        return customerFilter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchOrdersFilter && equalTo((SearchOrdersFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchOrdersFilter other) {
        return stateFilter.equals(other.stateFilter)
                && dateTimeFilter.equals(other.dateTimeFilter)
                && fulfillmentFilter.equals(other.fulfillmentFilter)
                && sourceFilter.equals(other.sourceFilter)
                && customerFilter.equals(other.customerFilter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.stateFilter, this.dateTimeFilter, this.fulfillmentFilter, this.sourceFilter, this.customerFilter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SearchOrdersStateFilter> stateFilter = Optional.empty();

        private Optional<SearchOrdersDateTimeFilter> dateTimeFilter = Optional.empty();

        private Optional<SearchOrdersFulfillmentFilter> fulfillmentFilter = Optional.empty();

        private Optional<SearchOrdersSourceFilter> sourceFilter = Optional.empty();

        private Optional<SearchOrdersCustomerFilter> customerFilter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchOrdersFilter other) {
            stateFilter(other.getStateFilter());
            dateTimeFilter(other.getDateTimeFilter());
            fulfillmentFilter(other.getFulfillmentFilter());
            sourceFilter(other.getSourceFilter());
            customerFilter(other.getCustomerFilter());
            return this;
        }

        /**
         * <p>Filter by <a href="entity:OrderState">OrderState</a>.</p>
         */
        @JsonSetter(value = "state_filter", nulls = Nulls.SKIP)
        public Builder stateFilter(Optional<SearchOrdersStateFilter> stateFilter) {
            this.stateFilter = stateFilter;
            return this;
        }

        public Builder stateFilter(SearchOrdersStateFilter stateFilter) {
            this.stateFilter = Optional.ofNullable(stateFilter);
            return this;
        }

        /**
         * <p>Filter for results within a time range.</p>
         * <p><strong>Important:</strong> If you filter for orders by time range, you must set <code>SearchOrdersSort</code>
         * to sort by the same field.
         * <a href="https://developer.squareup.com/docs/orders-api/manage-orders/search-orders#important-note-about-filtering-orders-by-time-range">Learn more about filtering orders by time range.</a></p>
         */
        @JsonSetter(value = "date_time_filter", nulls = Nulls.SKIP)
        public Builder dateTimeFilter(Optional<SearchOrdersDateTimeFilter> dateTimeFilter) {
            this.dateTimeFilter = dateTimeFilter;
            return this;
        }

        public Builder dateTimeFilter(SearchOrdersDateTimeFilter dateTimeFilter) {
            this.dateTimeFilter = Optional.ofNullable(dateTimeFilter);
            return this;
        }

        /**
         * <p>Filter by the fulfillment type or state.</p>
         */
        @JsonSetter(value = "fulfillment_filter", nulls = Nulls.SKIP)
        public Builder fulfillmentFilter(Optional<SearchOrdersFulfillmentFilter> fulfillmentFilter) {
            this.fulfillmentFilter = fulfillmentFilter;
            return this;
        }

        public Builder fulfillmentFilter(SearchOrdersFulfillmentFilter fulfillmentFilter) {
            this.fulfillmentFilter = Optional.ofNullable(fulfillmentFilter);
            return this;
        }

        /**
         * <p>Filter by the source of the order.</p>
         */
        @JsonSetter(value = "source_filter", nulls = Nulls.SKIP)
        public Builder sourceFilter(Optional<SearchOrdersSourceFilter> sourceFilter) {
            this.sourceFilter = sourceFilter;
            return this;
        }

        public Builder sourceFilter(SearchOrdersSourceFilter sourceFilter) {
            this.sourceFilter = Optional.ofNullable(sourceFilter);
            return this;
        }

        /**
         * <p>Filter by customers associated with the order.</p>
         */
        @JsonSetter(value = "customer_filter", nulls = Nulls.SKIP)
        public Builder customerFilter(Optional<SearchOrdersCustomerFilter> customerFilter) {
            this.customerFilter = customerFilter;
            return this;
        }

        public Builder customerFilter(SearchOrdersCustomerFilter customerFilter) {
            this.customerFilter = Optional.ofNullable(customerFilter);
            return this;
        }

        public SearchOrdersFilter build() {
            return new SearchOrdersFilter(
                    stateFilter, dateTimeFilter, fulfillmentFilter, sourceFilter, customerFilter, additionalProperties);
        }
    }
}
