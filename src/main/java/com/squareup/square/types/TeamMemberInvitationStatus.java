/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class TeamMemberInvitationStatus {
    public static final TeamMemberInvitationStatus ACCEPTED =
            new TeamMemberInvitationStatus(Value.ACCEPTED, "ACCEPTED");

    public static final TeamMemberInvitationStatus UNINVITED =
            new TeamMemberInvitationStatus(Value.UNINVITED, "UNINVITED");

    public static final TeamMemberInvitationStatus PENDING = new TeamMemberInvitationStatus(Value.PENDING, "PENDING");

    private final Value value;

    private final String string;

    TeamMemberInvitationStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof TeamMemberInvitationStatus
                        && this.string.equals(((TeamMemberInvitationStatus) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case ACCEPTED:
                return visitor.visitAccepted();
            case UNINVITED:
                return visitor.visitUninvited();
            case PENDING:
                return visitor.visitPending();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static TeamMemberInvitationStatus valueOf(String value) {
        switch (value) {
            case "ACCEPTED":
                return ACCEPTED;
            case "UNINVITED":
                return UNINVITED;
            case "PENDING":
                return PENDING;
            default:
                return new TeamMemberInvitationStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        UNINVITED,

        PENDING,

        ACCEPTED,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitUninvited();

        T visitPending();

        T visitAccepted();

        T visitUnknown(String unknownType);
    }
}
