/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchCatalogItemsRequest.Builder.class)
public final class SearchCatalogItemsRequest {
    private final Optional<String> textFilter;

    private final Optional<List<String>> categoryIds;

    private final Optional<List<SearchCatalogItemsRequestStockLevel>> stockLevels;

    private final Optional<List<String>> enabledLocationIds;

    private final Optional<String> cursor;

    private final Optional<Integer> limit;

    private final Optional<SortOrder> sortOrder;

    private final Optional<List<CatalogItemProductType>> productTypes;

    private final Optional<List<CustomAttributeFilter>> customAttributeFilters;

    private final Optional<ArchivedState> archivedState;

    private final Map<String, Object> additionalProperties;

    private SearchCatalogItemsRequest(
            Optional<String> textFilter,
            Optional<List<String>> categoryIds,
            Optional<List<SearchCatalogItemsRequestStockLevel>> stockLevels,
            Optional<List<String>> enabledLocationIds,
            Optional<String> cursor,
            Optional<Integer> limit,
            Optional<SortOrder> sortOrder,
            Optional<List<CatalogItemProductType>> productTypes,
            Optional<List<CustomAttributeFilter>> customAttributeFilters,
            Optional<ArchivedState> archivedState,
            Map<String, Object> additionalProperties) {
        this.textFilter = textFilter;
        this.categoryIds = categoryIds;
        this.stockLevels = stockLevels;
        this.enabledLocationIds = enabledLocationIds;
        this.cursor = cursor;
        this.limit = limit;
        this.sortOrder = sortOrder;
        this.productTypes = productTypes;
        this.customAttributeFilters = customAttributeFilters;
        this.archivedState = archivedState;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The text filter expression to return items or item variations containing specified text in
     * the <code>name</code>, <code>description</code>, or <code>abbreviation</code> attribute value of an item, or in
     * the <code>name</code>, <code>sku</code>, or <code>upc</code> attribute value of an item variation.
     */
    @JsonProperty("text_filter")
    public Optional<String> getTextFilter() {
        return textFilter;
    }

    /**
     * @return The category id query expression to return items containing the specified category IDs.
     */
    @JsonProperty("category_ids")
    public Optional<List<String>> getCategoryIds() {
        return categoryIds;
    }

    /**
     * @return The stock-level query expression to return item variations with the specified stock levels.
     * See <a href="#type-searchcatalogitemsrequeststocklevel">SearchCatalogItemsRequestStockLevel</a> for possible values
     */
    @JsonProperty("stock_levels")
    public Optional<List<SearchCatalogItemsRequestStockLevel>> getStockLevels() {
        return stockLevels;
    }

    /**
     * @return The enabled-location query expression to return items and item variations having specified enabled locations.
     */
    @JsonProperty("enabled_location_ids")
    public Optional<List<String>> getEnabledLocationIds() {
        return enabledLocationIds;
    }

    /**
     * @return The pagination token, returned in the previous response, used to fetch the next batch of pending results.
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return The maximum number of results to return per page. The default value is 100.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return The order to sort the results by item names. The default sort order is ascending (<code>ASC</code>).
     * See <a href="#type-sortorder">SortOrder</a> for possible values
     */
    @JsonProperty("sort_order")
    public Optional<SortOrder> getSortOrder() {
        return sortOrder;
    }

    /**
     * @return The product types query expression to return items or item variations having the specified product types.
     */
    @JsonProperty("product_types")
    public Optional<List<CatalogItemProductType>> getProductTypes() {
        return productTypes;
    }

    /**
     * @return The customer-attribute filter to return items or item variations matching the specified
     * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
     * a single call to the <a href="api-endpoint:Catalog-SearchCatalogItems">SearchCatalogItems</a> endpoint.
     */
    @JsonProperty("custom_attribute_filters")
    public Optional<List<CustomAttributeFilter>> getCustomAttributeFilters() {
        return customAttributeFilters;
    }

    /**
     * @return The query filter to return not archived (<code>ARCHIVED_STATE_NOT_ARCHIVED</code>), archived (<code>ARCHIVED_STATE_ARCHIVED</code>), or either type (<code>ARCHIVED_STATE_ALL</code>) of items.
     */
    @JsonProperty("archived_state")
    public Optional<ArchivedState> getArchivedState() {
        return archivedState;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchCatalogItemsRequest && equalTo((SearchCatalogItemsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchCatalogItemsRequest other) {
        return textFilter.equals(other.textFilter)
                && categoryIds.equals(other.categoryIds)
                && stockLevels.equals(other.stockLevels)
                && enabledLocationIds.equals(other.enabledLocationIds)
                && cursor.equals(other.cursor)
                && limit.equals(other.limit)
                && sortOrder.equals(other.sortOrder)
                && productTypes.equals(other.productTypes)
                && customAttributeFilters.equals(other.customAttributeFilters)
                && archivedState.equals(other.archivedState);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.textFilter,
                this.categoryIds,
                this.stockLevels,
                this.enabledLocationIds,
                this.cursor,
                this.limit,
                this.sortOrder,
                this.productTypes,
                this.customAttributeFilters,
                this.archivedState);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> textFilter = Optional.empty();

        private Optional<List<String>> categoryIds = Optional.empty();

        private Optional<List<SearchCatalogItemsRequestStockLevel>> stockLevels = Optional.empty();

        private Optional<List<String>> enabledLocationIds = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<SortOrder> sortOrder = Optional.empty();

        private Optional<List<CatalogItemProductType>> productTypes = Optional.empty();

        private Optional<List<CustomAttributeFilter>> customAttributeFilters = Optional.empty();

        private Optional<ArchivedState> archivedState = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchCatalogItemsRequest other) {
            textFilter(other.getTextFilter());
            categoryIds(other.getCategoryIds());
            stockLevels(other.getStockLevels());
            enabledLocationIds(other.getEnabledLocationIds());
            cursor(other.getCursor());
            limit(other.getLimit());
            sortOrder(other.getSortOrder());
            productTypes(other.getProductTypes());
            customAttributeFilters(other.getCustomAttributeFilters());
            archivedState(other.getArchivedState());
            return this;
        }

        /**
         * <p>The text filter expression to return items or item variations containing specified text in
         * the <code>name</code>, <code>description</code>, or <code>abbreviation</code> attribute value of an item, or in
         * the <code>name</code>, <code>sku</code>, or <code>upc</code> attribute value of an item variation.</p>
         */
        @JsonSetter(value = "text_filter", nulls = Nulls.SKIP)
        public Builder textFilter(Optional<String> textFilter) {
            this.textFilter = textFilter;
            return this;
        }

        public Builder textFilter(String textFilter) {
            this.textFilter = Optional.ofNullable(textFilter);
            return this;
        }

        /**
         * <p>The category id query expression to return items containing the specified category IDs.</p>
         */
        @JsonSetter(value = "category_ids", nulls = Nulls.SKIP)
        public Builder categoryIds(Optional<List<String>> categoryIds) {
            this.categoryIds = categoryIds;
            return this;
        }

        public Builder categoryIds(List<String> categoryIds) {
            this.categoryIds = Optional.ofNullable(categoryIds);
            return this;
        }

        /**
         * <p>The stock-level query expression to return item variations with the specified stock levels.
         * See <a href="#type-searchcatalogitemsrequeststocklevel">SearchCatalogItemsRequestStockLevel</a> for possible values</p>
         */
        @JsonSetter(value = "stock_levels", nulls = Nulls.SKIP)
        public Builder stockLevels(Optional<List<SearchCatalogItemsRequestStockLevel>> stockLevels) {
            this.stockLevels = stockLevels;
            return this;
        }

        public Builder stockLevels(List<SearchCatalogItemsRequestStockLevel> stockLevels) {
            this.stockLevels = Optional.ofNullable(stockLevels);
            return this;
        }

        /**
         * <p>The enabled-location query expression to return items and item variations having specified enabled locations.</p>
         */
        @JsonSetter(value = "enabled_location_ids", nulls = Nulls.SKIP)
        public Builder enabledLocationIds(Optional<List<String>> enabledLocationIds) {
            this.enabledLocationIds = enabledLocationIds;
            return this;
        }

        public Builder enabledLocationIds(List<String> enabledLocationIds) {
            this.enabledLocationIds = Optional.ofNullable(enabledLocationIds);
            return this;
        }

        /**
         * <p>The pagination token, returned in the previous response, used to fetch the next batch of pending results.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * <p>The maximum number of results to return per page. The default value is 100.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>The order to sort the results by item names. The default sort order is ascending (<code>ASC</code>).
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         */
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        /**
         * <p>The product types query expression to return items or item variations having the specified product types.</p>
         */
        @JsonSetter(value = "product_types", nulls = Nulls.SKIP)
        public Builder productTypes(Optional<List<CatalogItemProductType>> productTypes) {
            this.productTypes = productTypes;
            return this;
        }

        public Builder productTypes(List<CatalogItemProductType> productTypes) {
            this.productTypes = Optional.ofNullable(productTypes);
            return this;
        }

        /**
         * <p>The customer-attribute filter to return items or item variations matching the specified
         * custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
         * a single call to the <a href="api-endpoint:Catalog-SearchCatalogItems">SearchCatalogItems</a> endpoint.</p>
         */
        @JsonSetter(value = "custom_attribute_filters", nulls = Nulls.SKIP)
        public Builder customAttributeFilters(Optional<List<CustomAttributeFilter>> customAttributeFilters) {
            this.customAttributeFilters = customAttributeFilters;
            return this;
        }

        public Builder customAttributeFilters(List<CustomAttributeFilter> customAttributeFilters) {
            this.customAttributeFilters = Optional.ofNullable(customAttributeFilters);
            return this;
        }

        /**
         * <p>The query filter to return not archived (<code>ARCHIVED_STATE_NOT_ARCHIVED</code>), archived (<code>ARCHIVED_STATE_ARCHIVED</code>), or either type (<code>ARCHIVED_STATE_ALL</code>) of items.</p>
         */
        @JsonSetter(value = "archived_state", nulls = Nulls.SKIP)
        public Builder archivedState(Optional<ArchivedState> archivedState) {
            this.archivedState = archivedState;
            return this;
        }

        public Builder archivedState(ArchivedState archivedState) {
            this.archivedState = Optional.ofNullable(archivedState);
            return this;
        }

        public SearchCatalogItemsRequest build() {
            return new SearchCatalogItemsRequest(
                    textFilter,
                    categoryIds,
                    stockLevels,
                    enabledLocationIds,
                    cursor,
                    limit,
                    sortOrder,
                    productTypes,
                    customAttributeFilters,
                    archivedState,
                    additionalProperties);
        }
    }
}
