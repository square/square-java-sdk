/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogSubscriptionPlan.Builder.class)
public final class CatalogSubscriptionPlan {
    private final String name;

    private final Optional<List<SubscriptionPhase>> phases;

    private final Optional<List<CatalogObject>> subscriptionPlanVariations;

    private final Optional<List<String>> eligibleItemIds;

    private final Optional<List<String>> eligibleCategoryIds;

    private final Optional<Boolean> allItems;

    private final Map<String, Object> additionalProperties;

    private CatalogSubscriptionPlan(
            String name,
            Optional<List<SubscriptionPhase>> phases,
            Optional<List<CatalogObject>> subscriptionPlanVariations,
            Optional<List<String>> eligibleItemIds,
            Optional<List<String>> eligibleCategoryIds,
            Optional<Boolean> allItems,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.phases = phases;
        this.subscriptionPlanVariations = subscriptionPlanVariations;
        this.eligibleItemIds = eligibleItemIds;
        this.eligibleCategoryIds = eligibleCategoryIds;
        this.allItems = allItems;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the plan.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return A list of SubscriptionPhase containing the <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan.
     * This field it required. Not including this field will throw a REQUIRED_FIELD_MISSING error
     */
    @JsonIgnore
    public Optional<List<SubscriptionPhase>> getPhases() {
        if (phases == null) {
            return Optional.empty();
        }
        return phases;
    }

    /**
     * @return The list of subscription plan variations available for this product
     */
    @JsonIgnore
    public Optional<List<CatalogObject>> getSubscriptionPlanVariations() {
        if (subscriptionPlanVariations == null) {
            return Optional.empty();
        }
        return subscriptionPlanVariations;
    }

    /**
     * @return The list of IDs of <code>CatalogItems</code> that are eligible for subscription by this SubscriptionPlan's variations.
     */
    @JsonIgnore
    public Optional<List<String>> getEligibleItemIds() {
        if (eligibleItemIds == null) {
            return Optional.empty();
        }
        return eligibleItemIds;
    }

    /**
     * @return The list of IDs of <code>CatalogCategory</code> that are eligible for subscription by this SubscriptionPlan's variations.
     */
    @JsonIgnore
    public Optional<List<String>> getEligibleCategoryIds() {
        if (eligibleCategoryIds == null) {
            return Optional.empty();
        }
        return eligibleCategoryIds;
    }

    /**
     * @return If true, all items in the merchant's catalog are subscribable by this SubscriptionPlan.
     */
    @JsonIgnore
    public Optional<Boolean> getAllItems() {
        if (allItems == null) {
            return Optional.empty();
        }
        return allItems;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phases")
    private Optional<List<SubscriptionPhase>> _getPhases() {
        return phases;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("subscription_plan_variations")
    private Optional<List<CatalogObject>> _getSubscriptionPlanVariations() {
        return subscriptionPlanVariations;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("eligible_item_ids")
    private Optional<List<String>> _getEligibleItemIds() {
        return eligibleItemIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("eligible_category_ids")
    private Optional<List<String>> _getEligibleCategoryIds() {
        return eligibleCategoryIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("all_items")
    private Optional<Boolean> _getAllItems() {
        return allItems;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogSubscriptionPlan && equalTo((CatalogSubscriptionPlan) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogSubscriptionPlan other) {
        return name.equals(other.name)
                && phases.equals(other.phases)
                && subscriptionPlanVariations.equals(other.subscriptionPlanVariations)
                && eligibleItemIds.equals(other.eligibleItemIds)
                && eligibleCategoryIds.equals(other.eligibleCategoryIds)
                && allItems.equals(other.allItems);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.phases,
                this.subscriptionPlanVariations,
                this.eligibleItemIds,
                this.eligibleCategoryIds,
                this.allItems);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);

        Builder from(CatalogSubscriptionPlan other);
    }

    public interface _FinalStage {
        CatalogSubscriptionPlan build();

        _FinalStage phases(Optional<List<SubscriptionPhase>> phases);

        _FinalStage phases(List<SubscriptionPhase> phases);

        _FinalStage phases(Nullable<List<SubscriptionPhase>> phases);

        _FinalStage subscriptionPlanVariations(Optional<List<CatalogObject>> subscriptionPlanVariations);

        _FinalStage subscriptionPlanVariations(List<CatalogObject> subscriptionPlanVariations);

        _FinalStage subscriptionPlanVariations(Nullable<List<CatalogObject>> subscriptionPlanVariations);

        _FinalStage eligibleItemIds(Optional<List<String>> eligibleItemIds);

        _FinalStage eligibleItemIds(List<String> eligibleItemIds);

        _FinalStage eligibleItemIds(Nullable<List<String>> eligibleItemIds);

        _FinalStage eligibleCategoryIds(Optional<List<String>> eligibleCategoryIds);

        _FinalStage eligibleCategoryIds(List<String> eligibleCategoryIds);

        _FinalStage eligibleCategoryIds(Nullable<List<String>> eligibleCategoryIds);

        _FinalStage allItems(Optional<Boolean> allItems);

        _FinalStage allItems(Boolean allItems);

        _FinalStage allItems(Nullable<Boolean> allItems);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<Boolean> allItems = Optional.empty();

        private Optional<List<String>> eligibleCategoryIds = Optional.empty();

        private Optional<List<String>> eligibleItemIds = Optional.empty();

        private Optional<List<CatalogObject>> subscriptionPlanVariations = Optional.empty();

        private Optional<List<SubscriptionPhase>> phases = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogSubscriptionPlan other) {
            name(other.getName());
            phases(other.getPhases());
            subscriptionPlanVariations(other.getSubscriptionPlanVariations());
            eligibleItemIds(other.getEligibleItemIds());
            eligibleCategoryIds(other.getEligibleCategoryIds());
            allItems(other.getAllItems());
            return this;
        }

        /**
         * <p>The name of the plan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>If true, all items in the merchant's catalog are subscribable by this SubscriptionPlan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allItems(Nullable<Boolean> allItems) {
            if (allItems.isNull()) {
                this.allItems = null;
            } else if (allItems.isEmpty()) {
                this.allItems = Optional.empty();
            } else {
                this.allItems = Optional.of(allItems.get());
            }
            return this;
        }

        /**
         * <p>If true, all items in the merchant's catalog are subscribable by this SubscriptionPlan.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allItems(Boolean allItems) {
            this.allItems = Optional.ofNullable(allItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "all_items", nulls = Nulls.SKIP)
        public _FinalStage allItems(Optional<Boolean> allItems) {
            this.allItems = allItems;
            return this;
        }

        /**
         * <p>The list of IDs of <code>CatalogCategory</code> that are eligible for subscription by this SubscriptionPlan's variations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleCategoryIds(Nullable<List<String>> eligibleCategoryIds) {
            if (eligibleCategoryIds.isNull()) {
                this.eligibleCategoryIds = null;
            } else if (eligibleCategoryIds.isEmpty()) {
                this.eligibleCategoryIds = Optional.empty();
            } else {
                this.eligibleCategoryIds = Optional.of(eligibleCategoryIds.get());
            }
            return this;
        }

        /**
         * <p>The list of IDs of <code>CatalogCategory</code> that are eligible for subscription by this SubscriptionPlan's variations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleCategoryIds(List<String> eligibleCategoryIds) {
            this.eligibleCategoryIds = Optional.ofNullable(eligibleCategoryIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eligible_category_ids", nulls = Nulls.SKIP)
        public _FinalStage eligibleCategoryIds(Optional<List<String>> eligibleCategoryIds) {
            this.eligibleCategoryIds = eligibleCategoryIds;
            return this;
        }

        /**
         * <p>The list of IDs of <code>CatalogItems</code> that are eligible for subscription by this SubscriptionPlan's variations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleItemIds(Nullable<List<String>> eligibleItemIds) {
            if (eligibleItemIds.isNull()) {
                this.eligibleItemIds = null;
            } else if (eligibleItemIds.isEmpty()) {
                this.eligibleItemIds = Optional.empty();
            } else {
                this.eligibleItemIds = Optional.of(eligibleItemIds.get());
            }
            return this;
        }

        /**
         * <p>The list of IDs of <code>CatalogItems</code> that are eligible for subscription by this SubscriptionPlan's variations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eligibleItemIds(List<String> eligibleItemIds) {
            this.eligibleItemIds = Optional.ofNullable(eligibleItemIds);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "eligible_item_ids", nulls = Nulls.SKIP)
        public _FinalStage eligibleItemIds(Optional<List<String>> eligibleItemIds) {
            this.eligibleItemIds = eligibleItemIds;
            return this;
        }

        /**
         * <p>The list of subscription plan variations available for this product</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionPlanVariations(Nullable<List<CatalogObject>> subscriptionPlanVariations) {
            if (subscriptionPlanVariations.isNull()) {
                this.subscriptionPlanVariations = null;
            } else if (subscriptionPlanVariations.isEmpty()) {
                this.subscriptionPlanVariations = Optional.empty();
            } else {
                this.subscriptionPlanVariations = Optional.of(subscriptionPlanVariations.get());
            }
            return this;
        }

        /**
         * <p>The list of subscription plan variations available for this product</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage subscriptionPlanVariations(List<CatalogObject> subscriptionPlanVariations) {
            this.subscriptionPlanVariations = Optional.ofNullable(subscriptionPlanVariations);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscription_plan_variations", nulls = Nulls.SKIP)
        public _FinalStage subscriptionPlanVariations(Optional<List<CatalogObject>> subscriptionPlanVariations) {
            this.subscriptionPlanVariations = subscriptionPlanVariations;
            return this;
        }

        /**
         * <p>A list of SubscriptionPhase containing the <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan.
         * This field it required. Not including this field will throw a REQUIRED_FIELD_MISSING error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phases(Nullable<List<SubscriptionPhase>> phases) {
            if (phases.isNull()) {
                this.phases = null;
            } else if (phases.isEmpty()) {
                this.phases = Optional.empty();
            } else {
                this.phases = Optional.of(phases.get());
            }
            return this;
        }

        /**
         * <p>A list of SubscriptionPhase containing the <a href="entity:SubscriptionPhase">SubscriptionPhase</a> for this plan.
         * This field it required. Not including this field will throw a REQUIRED_FIELD_MISSING error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage phases(List<SubscriptionPhase> phases) {
            this.phases = Optional.ofNullable(phases);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phases", nulls = Nulls.SKIP)
        public _FinalStage phases(Optional<List<SubscriptionPhase>> phases) {
            this.phases = phases;
            return this;
        }

        @java.lang.Override
        public CatalogSubscriptionPlan build() {
            return new CatalogSubscriptionPlan(
                    name,
                    phases,
                    subscriptionPlanVariations,
                    eligibleItemIds,
                    eligibleCategoryIds,
                    allItems,
                    additionalProperties);
        }
    }
}
