/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Booking.Builder.class)
public final class Booking {
    private final Optional<String> id;

    private final Optional<Integer> version;

    private final Optional<BookingStatus> status;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> startAt;

    private final Optional<String> locationId;

    private final Optional<String> customerId;

    private final Optional<String> customerNote;

    private final Optional<String> sellerNote;

    private final Optional<List<AppointmentSegment>> appointmentSegments;

    private final Optional<Integer> transitionTimeMinutes;

    private final Optional<Boolean> allDay;

    private final Optional<BusinessAppointmentSettingsBookingLocationType> locationType;

    private final Optional<BookingCreatorDetails> creatorDetails;

    private final Optional<BookingBookingSource> source;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private Booking(
            Optional<String> id,
            Optional<Integer> version,
            Optional<BookingStatus> status,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> startAt,
            Optional<String> locationId,
            Optional<String> customerId,
            Optional<String> customerNote,
            Optional<String> sellerNote,
            Optional<List<AppointmentSegment>> appointmentSegments,
            Optional<Integer> transitionTimeMinutes,
            Optional<Boolean> allDay,
            Optional<BusinessAppointmentSettingsBookingLocationType> locationType,
            Optional<BookingCreatorDetails> creatorDetails,
            Optional<BookingBookingSource> source,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.version = version;
        this.status = status;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.startAt = startAt;
        this.locationId = locationId;
        this.customerId = customerId;
        this.customerNote = customerNote;
        this.sellerNote = sellerNote;
        this.appointmentSegments = appointmentSegments;
        this.transitionTimeMinutes = transitionTimeMinutes;
        this.allDay = allDay;
        this.locationType = locationType;
        this.creatorDetails = creatorDetails;
        this.source = source;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID of this object representing a booking.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The revision number for the booking used for optimistic concurrency.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    /**
     * @return The status of the booking, describing where the booking stands with respect to the booking state machine.
     * See <a href="#type-bookingstatus">BookingStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<BookingStatus> getStatus() {
        return status;
    }

    /**
     * @return The RFC 3339 timestamp specifying the creation time of this booking.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The RFC 3339 timestamp specifying the most recent update time of this booking.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The RFC 3339 timestamp specifying the starting time of this booking.
     */
    @JsonIgnore
    public Optional<String> getStartAt() {
        if (startAt == null) {
            return Optional.empty();
        }
        return startAt;
    }

    /**
     * @return The ID of the <a href="entity:Location">Location</a> object representing the location where the booked service is provided. Once set when the booking is created, its value cannot be changed.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The ID of the <a href="entity:Customer">Customer</a> object representing the customer receiving the booked service.
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant <a href="entity:CatalogObject">CatalogObject</a> instance.
     */
    @JsonIgnore
    public Optional<String> getCustomerNote() {
        if (customerNote == null) {
            return Optional.empty();
        }
        return customerNote;
    }

    /**
     * @return The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific <a href="entity:CatalogObject">CatalogObject</a> instance.
     * This field should not be visible to customers.
     */
    @JsonIgnore
    public Optional<String> getSellerNote() {
        if (sellerNote == null) {
            return Optional.empty();
        }
        return sellerNote;
    }

    /**
     * @return A list of appointment segments for this booking.
     */
    @JsonIgnore
    public Optional<List<AppointmentSegment>> getAppointmentSegments() {
        if (appointmentSegments == null) {
            return Optional.empty();
        }
        return appointmentSegments;
    }

    /**
     * @return Additional time at the end of a booking.
     * Applications should not make this field visible to customers of a seller.
     */
    @JsonProperty("transition_time_minutes")
    public Optional<Integer> getTransitionTimeMinutes() {
        return transitionTimeMinutes;
    }

    /**
     * @return Whether the booking is of a full business day.
     */
    @JsonProperty("all_day")
    public Optional<Boolean> getAllDay() {
        return allDay;
    }

    /**
     * @return The type of location where the booking is held.
     * See <a href="#type-businessappointmentsettingsbookinglocationtype">BusinessAppointmentSettingsBookingLocationType</a> for possible values
     */
    @JsonProperty("location_type")
    public Optional<BusinessAppointmentSettingsBookingLocationType> getLocationType() {
        return locationType;
    }

    /**
     * @return Information about the booking creator.
     */
    @JsonProperty("creator_details")
    public Optional<BookingCreatorDetails> getCreatorDetails() {
        return creatorDetails;
    }

    /**
     * @return The source of the booking.
     * Access to this field requires seller-level permissions.
     * See <a href="#type-bookingbookingsource">BookingBookingSource</a> for possible values
     */
    @JsonProperty("source")
    public Optional<BookingBookingSource> getSource() {
        return source;
    }

    /**
     * @return Stores a customer address if the location type is <code>CUSTOMER_LOCATION</code>.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_at")
    private Optional<String> _getStartAt() {
        return startAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_note")
    private Optional<String> _getCustomerNote() {
        return customerNote;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("seller_note")
    private Optional<String> _getSellerNote() {
        return sellerNote;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("appointment_segments")
    private Optional<List<AppointmentSegment>> _getAppointmentSegments() {
        return appointmentSegments;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Booking && equalTo((Booking) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Booking other) {
        return id.equals(other.id)
                && version.equals(other.version)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && startAt.equals(other.startAt)
                && locationId.equals(other.locationId)
                && customerId.equals(other.customerId)
                && customerNote.equals(other.customerNote)
                && sellerNote.equals(other.sellerNote)
                && appointmentSegments.equals(other.appointmentSegments)
                && transitionTimeMinutes.equals(other.transitionTimeMinutes)
                && allDay.equals(other.allDay)
                && locationType.equals(other.locationType)
                && creatorDetails.equals(other.creatorDetails)
                && source.equals(other.source)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.version,
                this.status,
                this.createdAt,
                this.updatedAt,
                this.startAt,
                this.locationId,
                this.customerId,
                this.customerNote,
                this.sellerNote,
                this.appointmentSegments,
                this.transitionTimeMinutes,
                this.allDay,
                this.locationType,
                this.creatorDetails,
                this.source,
                this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        private Optional<BookingStatus> status = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> startAt = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> customerNote = Optional.empty();

        private Optional<String> sellerNote = Optional.empty();

        private Optional<List<AppointmentSegment>> appointmentSegments = Optional.empty();

        private Optional<Integer> transitionTimeMinutes = Optional.empty();

        private Optional<Boolean> allDay = Optional.empty();

        private Optional<BusinessAppointmentSettingsBookingLocationType> locationType = Optional.empty();

        private Optional<BookingCreatorDetails> creatorDetails = Optional.empty();

        private Optional<BookingBookingSource> source = Optional.empty();

        private Optional<Address> address = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Booking other) {
            id(other.getId());
            version(other.getVersion());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            startAt(other.getStartAt());
            locationId(other.getLocationId());
            customerId(other.getCustomerId());
            customerNote(other.getCustomerNote());
            sellerNote(other.getSellerNote());
            appointmentSegments(other.getAppointmentSegments());
            transitionTimeMinutes(other.getTransitionTimeMinutes());
            allDay(other.getAllDay());
            locationType(other.getLocationType());
            creatorDetails(other.getCreatorDetails());
            source(other.getSource());
            address(other.getAddress());
            return this;
        }

        /**
         * <p>A unique ID of this object representing a booking.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The revision number for the booking used for optimistic concurrency.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The status of the booking, describing where the booking stands with respect to the booking state machine.
         * See <a href="#type-bookingstatus">BookingStatus</a> for possible values</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<BookingStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(BookingStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The RFC 3339 timestamp specifying the creation time of this booking.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The RFC 3339 timestamp specifying the most recent update time of this booking.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The RFC 3339 timestamp specifying the starting time of this booking.</p>
         */
        @JsonSetter(value = "start_at", nulls = Nulls.SKIP)
        public Builder startAt(Optional<String> startAt) {
            this.startAt = startAt;
            return this;
        }

        public Builder startAt(String startAt) {
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Nullable<String> startAt) {
            if (startAt.isNull()) {
                this.startAt = null;
            } else if (startAt.isEmpty()) {
                this.startAt = Optional.empty();
            } else {
                this.startAt = Optional.of(startAt.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Location">Location</a> object representing the location where the booked service is provided. Once set when the booking is created, its value cannot be changed.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Customer">Customer</a> object representing the customer receiving the booked service.</p>
         */
        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        /**
         * <p>The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant <a href="entity:CatalogObject">CatalogObject</a> instance.</p>
         */
        @JsonSetter(value = "customer_note", nulls = Nulls.SKIP)
        public Builder customerNote(Optional<String> customerNote) {
            this.customerNote = customerNote;
            return this;
        }

        public Builder customerNote(String customerNote) {
            this.customerNote = Optional.ofNullable(customerNote);
            return this;
        }

        public Builder customerNote(Nullable<String> customerNote) {
            if (customerNote.isNull()) {
                this.customerNote = null;
            } else if (customerNote.isEmpty()) {
                this.customerNote = Optional.empty();
            } else {
                this.customerNote = Optional.of(customerNote.get());
            }
            return this;
        }

        /**
         * <p>The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific <a href="entity:CatalogObject">CatalogObject</a> instance.
         * This field should not be visible to customers.</p>
         */
        @JsonSetter(value = "seller_note", nulls = Nulls.SKIP)
        public Builder sellerNote(Optional<String> sellerNote) {
            this.sellerNote = sellerNote;
            return this;
        }

        public Builder sellerNote(String sellerNote) {
            this.sellerNote = Optional.ofNullable(sellerNote);
            return this;
        }

        public Builder sellerNote(Nullable<String> sellerNote) {
            if (sellerNote.isNull()) {
                this.sellerNote = null;
            } else if (sellerNote.isEmpty()) {
                this.sellerNote = Optional.empty();
            } else {
                this.sellerNote = Optional.of(sellerNote.get());
            }
            return this;
        }

        /**
         * <p>A list of appointment segments for this booking.</p>
         */
        @JsonSetter(value = "appointment_segments", nulls = Nulls.SKIP)
        public Builder appointmentSegments(Optional<List<AppointmentSegment>> appointmentSegments) {
            this.appointmentSegments = appointmentSegments;
            return this;
        }

        public Builder appointmentSegments(List<AppointmentSegment> appointmentSegments) {
            this.appointmentSegments = Optional.ofNullable(appointmentSegments);
            return this;
        }

        public Builder appointmentSegments(Nullable<List<AppointmentSegment>> appointmentSegments) {
            if (appointmentSegments.isNull()) {
                this.appointmentSegments = null;
            } else if (appointmentSegments.isEmpty()) {
                this.appointmentSegments = Optional.empty();
            } else {
                this.appointmentSegments = Optional.of(appointmentSegments.get());
            }
            return this;
        }

        /**
         * <p>Additional time at the end of a booking.
         * Applications should not make this field visible to customers of a seller.</p>
         */
        @JsonSetter(value = "transition_time_minutes", nulls = Nulls.SKIP)
        public Builder transitionTimeMinutes(Optional<Integer> transitionTimeMinutes) {
            this.transitionTimeMinutes = transitionTimeMinutes;
            return this;
        }

        public Builder transitionTimeMinutes(Integer transitionTimeMinutes) {
            this.transitionTimeMinutes = Optional.ofNullable(transitionTimeMinutes);
            return this;
        }

        /**
         * <p>Whether the booking is of a full business day.</p>
         */
        @JsonSetter(value = "all_day", nulls = Nulls.SKIP)
        public Builder allDay(Optional<Boolean> allDay) {
            this.allDay = allDay;
            return this;
        }

        public Builder allDay(Boolean allDay) {
            this.allDay = Optional.ofNullable(allDay);
            return this;
        }

        /**
         * <p>The type of location where the booking is held.
         * See <a href="#type-businessappointmentsettingsbookinglocationtype">BusinessAppointmentSettingsBookingLocationType</a> for possible values</p>
         */
        @JsonSetter(value = "location_type", nulls = Nulls.SKIP)
        public Builder locationType(Optional<BusinessAppointmentSettingsBookingLocationType> locationType) {
            this.locationType = locationType;
            return this;
        }

        public Builder locationType(BusinessAppointmentSettingsBookingLocationType locationType) {
            this.locationType = Optional.ofNullable(locationType);
            return this;
        }

        /**
         * <p>Information about the booking creator.</p>
         */
        @JsonSetter(value = "creator_details", nulls = Nulls.SKIP)
        public Builder creatorDetails(Optional<BookingCreatorDetails> creatorDetails) {
            this.creatorDetails = creatorDetails;
            return this;
        }

        public Builder creatorDetails(BookingCreatorDetails creatorDetails) {
            this.creatorDetails = Optional.ofNullable(creatorDetails);
            return this;
        }

        /**
         * <p>The source of the booking.
         * Access to this field requires seller-level permissions.
         * See <a href="#type-bookingbookingsource">BookingBookingSource</a> for possible values</p>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<BookingBookingSource> source) {
            this.source = source;
            return this;
        }

        public Builder source(BookingBookingSource source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Stores a customer address if the location type is <code>CUSTOMER_LOCATION</code>.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Booking build() {
            return new Booking(
                    id,
                    version,
                    status,
                    createdAt,
                    updatedAt,
                    startAt,
                    locationId,
                    customerId,
                    customerNote,
                    sellerNote,
                    appointmentSegments,
                    transitionTimeMinutes,
                    allDay,
                    locationType,
                    creatorDetails,
                    source,
                    address,
                    additionalProperties);
        }
    }
}
