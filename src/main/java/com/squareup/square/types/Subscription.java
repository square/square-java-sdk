/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Subscription.Builder.class)
public final class Subscription {
    private final Optional<String> id;

    private final Optional<String> locationId;

    private final Optional<String> planVariationId;

    private final Optional<String> customerId;

    private final Optional<String> startDate;

    private final Optional<String> canceledDate;

    private final Optional<String> chargedThroughDate;

    private final Optional<SubscriptionStatus> status;

    private final Optional<String> taxPercentage;

    private final Optional<List<String>> invoiceIds;

    private final Optional<Money> priceOverrideMoney;

    private final Optional<Long> version;

    private final Optional<String> createdAt;

    private final Optional<String> cardId;

    private final Optional<String> timezone;

    private final Optional<SubscriptionSource> source;

    private final Optional<List<SubscriptionAction>> actions;

    private final Optional<Integer> monthlyBillingAnchorDate;

    private final Optional<List<Phase>> phases;

    private final Map<String, Object> additionalProperties;

    private Subscription(
            Optional<String> id,
            Optional<String> locationId,
            Optional<String> planVariationId,
            Optional<String> customerId,
            Optional<String> startDate,
            Optional<String> canceledDate,
            Optional<String> chargedThroughDate,
            Optional<SubscriptionStatus> status,
            Optional<String> taxPercentage,
            Optional<List<String>> invoiceIds,
            Optional<Money> priceOverrideMoney,
            Optional<Long> version,
            Optional<String> createdAt,
            Optional<String> cardId,
            Optional<String> timezone,
            Optional<SubscriptionSource> source,
            Optional<List<SubscriptionAction>> actions,
            Optional<Integer> monthlyBillingAnchorDate,
            Optional<List<Phase>> phases,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.locationId = locationId;
        this.planVariationId = planVariationId;
        this.customerId = customerId;
        this.startDate = startDate;
        this.canceledDate = canceledDate;
        this.chargedThroughDate = chargedThroughDate;
        this.status = status;
        this.taxPercentage = taxPercentage;
        this.invoiceIds = invoiceIds;
        this.priceOverrideMoney = priceOverrideMoney;
        this.version = version;
        this.createdAt = createdAt;
        this.cardId = cardId;
        this.timezone = timezone;
        this.source = source;
        this.actions = actions;
        this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
        this.phases = phases;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-assigned ID of the subscription.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of the location associated with the subscription.
     */
    @JsonProperty("location_id")
    public Optional<String> getLocationId() {
        return locationId;
    }

    /**
     * @return The ID of the subscribed-to <a href="entity:CatalogSubscriptionPlanVariation">subscription plan variation</a>.
     */
    @JsonProperty("plan_variation_id")
    public Optional<String> getPlanVariationId() {
        return planVariationId;
    }

    /**
     * @return The ID of the subscribing <a href="entity:Customer">customer</a> profile.
     */
    @JsonProperty("customer_id")
    public Optional<String> getCustomerId() {
        return customerId;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) to start the subscription.
     */
    @JsonProperty("start_date")
    public Optional<String> getStartDate() {
        return startDate;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date (for example, 2013-01-15) to cancel the subscription,
     * when the subscription status changes to <code>CANCELED</code> and the subscription billing stops.
     * <p>If this field is not set, the subscription ends according its subscription plan.</p>
     * <p>This field cannot be updated, other than being cleared.</p>
     */
    @JsonIgnore
    public Optional<String> getCanceledDate() {
        if (canceledDate == null) {
            return Optional.empty();
        }
        return canceledDate;
    }

    /**
     * @return The <code>YYYY-MM-DD</code>-formatted date up to when the subscriber is invoiced for the
     * subscription.
     * <p>After the invoice is sent for a given billing period,
     * this date will be the last day of the billing period.
     * For example,
     * suppose for the month of May a subscriber gets an invoice
     * (or charged the card) on May 1. For the monthly billing scenario,
     * this date is then set to May 31.</p>
     */
    @JsonProperty("charged_through_date")
    public Optional<String> getChargedThroughDate() {
        return chargedThroughDate;
    }

    /**
     * @return The current status of the subscription.
     * See <a href="#type-subscriptionstatus">SubscriptionStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<SubscriptionStatus> getStatus() {
        return status;
    }

    /**
     * @return The tax amount applied when billing the subscription. The
     * percentage is expressed in decimal form, using a <code>'.'</code> as the decimal
     * separator and without a <code>'%'</code> sign. For example, a value of <code>7.5</code>
     * corresponds to 7.5%.
     */
    @JsonIgnore
    public Optional<String> getTaxPercentage() {
        if (taxPercentage == null) {
            return Optional.empty();
        }
        return taxPercentage;
    }

    /**
     * @return The IDs of the <a href="entity:Invoice">invoices</a> created for the
     * subscription, listed in order when the invoices were created
     * (newest invoices appear first).
     */
    @JsonProperty("invoice_ids")
    public Optional<List<String>> getInvoiceIds() {
        return invoiceIds;
    }

    /**
     * @return A custom price which overrides the cost of a subscription plan variation with <code>STATIC</code> pricing.
     * This field does not affect itemized subscriptions with <code>RELATIVE</code> pricing. Instead,
     * you should edit the Subscription's <a href="https://developer.squareup.com/docs/subscriptions-api/manage-subscriptions#phases-and-order-templates">order template</a>.
     */
    @JsonProperty("price_override_money")
    public Optional<Money> getPriceOverrideMoney() {
        return priceOverrideMoney;
    }

    /**
     * @return The version of the object. When updating an object, the version
     * supplied must match the version in the database, otherwise the write will
     * be rejected as conflicting.
     */
    @JsonProperty("version")
    public Optional<Long> getVersion() {
        return version;
    }

    /**
     * @return The timestamp when the subscription was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The ID of the <a href="entity:Customer">subscriber's</a> <a href="entity:Card">card</a>
     * used to charge for the subscription.
     */
    @JsonIgnore
    public Optional<String> getCardId() {
        if (cardId == null) {
            return Optional.empty();
        }
        return cardId;
    }

    /**
     * @return Timezone that will be used in date calculations for the subscription.
     * Defaults to the timezone of the location based on <code>location_id</code>.
     * Format: the IANA Timezone Database identifier for the location timezone (for example, <code>America/Los_Angeles</code>).
     */
    @JsonProperty("timezone")
    public Optional<String> getTimezone() {
        return timezone;
    }

    /**
     * @return The origination details of the subscription.
     */
    @JsonProperty("source")
    public Optional<SubscriptionSource> getSource() {
        return source;
    }

    /**
     * @return The list of scheduled actions on this subscription. It is set only in the response from
     * <a href="api-endpoint:Subscriptions-RetrieveSubscription">RetrieveSubscription</a> with the query parameter
     * of <code>include=actions</code> or from
     * <a href="api-endpoint:Subscriptions-SearchSubscriptions">SearchSubscriptions</a> with the input parameter
     * of <code>include:[&quot;actions&quot;]</code>.
     */
    @JsonIgnore
    public Optional<List<SubscriptionAction>> getActions() {
        if (actions == null) {
            return Optional.empty();
        }
        return actions;
    }

    /**
     * @return The day of the month on which the subscription will issue invoices and publish orders.
     */
    @JsonProperty("monthly_billing_anchor_date")
    public Optional<Integer> getMonthlyBillingAnchorDate() {
        return monthlyBillingAnchorDate;
    }

    /**
     * @return array of phases for this subscription
     */
    @JsonProperty("phases")
    public Optional<List<Phase>> getPhases() {
        return phases;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("canceled_date")
    private Optional<String> _getCanceledDate() {
        return canceledDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tax_percentage")
    private Optional<String> _getTaxPercentage() {
        return taxPercentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("card_id")
    private Optional<String> _getCardId() {
        return cardId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("actions")
    private Optional<List<SubscriptionAction>> _getActions() {
        return actions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Subscription && equalTo((Subscription) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Subscription other) {
        return id.equals(other.id)
                && locationId.equals(other.locationId)
                && planVariationId.equals(other.planVariationId)
                && customerId.equals(other.customerId)
                && startDate.equals(other.startDate)
                && canceledDate.equals(other.canceledDate)
                && chargedThroughDate.equals(other.chargedThroughDate)
                && status.equals(other.status)
                && taxPercentage.equals(other.taxPercentage)
                && invoiceIds.equals(other.invoiceIds)
                && priceOverrideMoney.equals(other.priceOverrideMoney)
                && version.equals(other.version)
                && createdAt.equals(other.createdAt)
                && cardId.equals(other.cardId)
                && timezone.equals(other.timezone)
                && source.equals(other.source)
                && actions.equals(other.actions)
                && monthlyBillingAnchorDate.equals(other.monthlyBillingAnchorDate)
                && phases.equals(other.phases);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.locationId,
                this.planVariationId,
                this.customerId,
                this.startDate,
                this.canceledDate,
                this.chargedThroughDate,
                this.status,
                this.taxPercentage,
                this.invoiceIds,
                this.priceOverrideMoney,
                this.version,
                this.createdAt,
                this.cardId,
                this.timezone,
                this.source,
                this.actions,
                this.monthlyBillingAnchorDate,
                this.phases);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> planVariationId = Optional.empty();

        private Optional<String> customerId = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        private Optional<String> canceledDate = Optional.empty();

        private Optional<String> chargedThroughDate = Optional.empty();

        private Optional<SubscriptionStatus> status = Optional.empty();

        private Optional<String> taxPercentage = Optional.empty();

        private Optional<List<String>> invoiceIds = Optional.empty();

        private Optional<Money> priceOverrideMoney = Optional.empty();

        private Optional<Long> version = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> cardId = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<SubscriptionSource> source = Optional.empty();

        private Optional<List<SubscriptionAction>> actions = Optional.empty();

        private Optional<Integer> monthlyBillingAnchorDate = Optional.empty();

        private Optional<List<Phase>> phases = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Subscription other) {
            id(other.getId());
            locationId(other.getLocationId());
            planVariationId(other.getPlanVariationId());
            customerId(other.getCustomerId());
            startDate(other.getStartDate());
            canceledDate(other.getCanceledDate());
            chargedThroughDate(other.getChargedThroughDate());
            status(other.getStatus());
            taxPercentage(other.getTaxPercentage());
            invoiceIds(other.getInvoiceIds());
            priceOverrideMoney(other.getPriceOverrideMoney());
            version(other.getVersion());
            createdAt(other.getCreatedAt());
            cardId(other.getCardId());
            timezone(other.getTimezone());
            source(other.getSource());
            actions(other.getActions());
            monthlyBillingAnchorDate(other.getMonthlyBillingAnchorDate());
            phases(other.getPhases());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        @JsonSetter(value = "plan_variation_id", nulls = Nulls.SKIP)
        public Builder planVariationId(Optional<String> planVariationId) {
            this.planVariationId = planVariationId;
            return this;
        }

        public Builder planVariationId(String planVariationId) {
            this.planVariationId = Optional.ofNullable(planVariationId);
            return this;
        }

        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "start_date", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        @JsonSetter(value = "canceled_date", nulls = Nulls.SKIP)
        public Builder canceledDate(Optional<String> canceledDate) {
            this.canceledDate = canceledDate;
            return this;
        }

        public Builder canceledDate(String canceledDate) {
            this.canceledDate = Optional.ofNullable(canceledDate);
            return this;
        }

        public Builder canceledDate(Nullable<String> canceledDate) {
            if (canceledDate.isNull()) {
                this.canceledDate = null;
            } else if (canceledDate.isEmpty()) {
                this.canceledDate = Optional.empty();
            } else {
                this.canceledDate = Optional.of(canceledDate.get());
            }
            return this;
        }

        @JsonSetter(value = "charged_through_date", nulls = Nulls.SKIP)
        public Builder chargedThroughDate(Optional<String> chargedThroughDate) {
            this.chargedThroughDate = chargedThroughDate;
            return this;
        }

        public Builder chargedThroughDate(String chargedThroughDate) {
            this.chargedThroughDate = Optional.ofNullable(chargedThroughDate);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<SubscriptionStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(SubscriptionStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "tax_percentage", nulls = Nulls.SKIP)
        public Builder taxPercentage(Optional<String> taxPercentage) {
            this.taxPercentage = taxPercentage;
            return this;
        }

        public Builder taxPercentage(String taxPercentage) {
            this.taxPercentage = Optional.ofNullable(taxPercentage);
            return this;
        }

        public Builder taxPercentage(Nullable<String> taxPercentage) {
            if (taxPercentage.isNull()) {
                this.taxPercentage = null;
            } else if (taxPercentage.isEmpty()) {
                this.taxPercentage = Optional.empty();
            } else {
                this.taxPercentage = Optional.of(taxPercentage.get());
            }
            return this;
        }

        @JsonSetter(value = "invoice_ids", nulls = Nulls.SKIP)
        public Builder invoiceIds(Optional<List<String>> invoiceIds) {
            this.invoiceIds = invoiceIds;
            return this;
        }

        public Builder invoiceIds(List<String> invoiceIds) {
            this.invoiceIds = Optional.ofNullable(invoiceIds);
            return this;
        }

        @JsonSetter(value = "price_override_money", nulls = Nulls.SKIP)
        public Builder priceOverrideMoney(Optional<Money> priceOverrideMoney) {
            this.priceOverrideMoney = priceOverrideMoney;
            return this;
        }

        public Builder priceOverrideMoney(Money priceOverrideMoney) {
            this.priceOverrideMoney = Optional.ofNullable(priceOverrideMoney);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Long> version) {
            this.version = version;
            return this;
        }

        public Builder version(Long version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "card_id", nulls = Nulls.SKIP)
        public Builder cardId(Optional<String> cardId) {
            this.cardId = cardId;
            return this;
        }

        public Builder cardId(String cardId) {
            this.cardId = Optional.ofNullable(cardId);
            return this;
        }

        public Builder cardId(Nullable<String> cardId) {
            if (cardId.isNull()) {
                this.cardId = null;
            } else if (cardId.isEmpty()) {
                this.cardId = Optional.empty();
            } else {
                this.cardId = Optional.of(cardId.get());
            }
            return this;
        }

        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<SubscriptionSource> source) {
            this.source = source;
            return this;
        }

        public Builder source(SubscriptionSource source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "actions", nulls = Nulls.SKIP)
        public Builder actions(Optional<List<SubscriptionAction>> actions) {
            this.actions = actions;
            return this;
        }

        public Builder actions(List<SubscriptionAction> actions) {
            this.actions = Optional.ofNullable(actions);
            return this;
        }

        public Builder actions(Nullable<List<SubscriptionAction>> actions) {
            if (actions.isNull()) {
                this.actions = null;
            } else if (actions.isEmpty()) {
                this.actions = Optional.empty();
            } else {
                this.actions = Optional.of(actions.get());
            }
            return this;
        }

        @JsonSetter(value = "monthly_billing_anchor_date", nulls = Nulls.SKIP)
        public Builder monthlyBillingAnchorDate(Optional<Integer> monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = monthlyBillingAnchorDate;
            return this;
        }

        public Builder monthlyBillingAnchorDate(Integer monthlyBillingAnchorDate) {
            this.monthlyBillingAnchorDate = Optional.ofNullable(monthlyBillingAnchorDate);
            return this;
        }

        @JsonSetter(value = "phases", nulls = Nulls.SKIP)
        public Builder phases(Optional<List<Phase>> phases) {
            this.phases = phases;
            return this;
        }

        public Builder phases(List<Phase> phases) {
            this.phases = Optional.ofNullable(phases);
            return this;
        }

        public Subscription build() {
            return new Subscription(
                    id,
                    locationId,
                    planVariationId,
                    customerId,
                    startDate,
                    canceledDate,
                    chargedThroughDate,
                    status,
                    taxPercentage,
                    invoiceIds,
                    priceOverrideMoney,
                    version,
                    createdAt,
                    cardId,
                    timezone,
                    source,
                    actions,
                    monthlyBillingAnchorDate,
                    phases,
                    additionalProperties);
        }
    }
}
