/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderReturnLineItem.Builder.class)
public final class OrderReturnLineItem {
    private final Optional<String> uid;

    private final Optional<String> sourceLineItemUid;

    private final Optional<String> name;

    private final String quantity;

    private final Optional<OrderQuantityUnit> quantityUnit;

    private final Optional<String> note;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Optional<String> variationName;

    private final Optional<OrderLineItemItemType> itemType;

    private final Optional<List<OrderReturnLineItemModifier>> returnModifiers;

    private final Optional<List<OrderLineItemAppliedTax>> appliedTaxes;

    private final Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts;

    private final Optional<Money> basePriceMoney;

    private final Optional<Money> variationTotalPriceMoney;

    private final Optional<Money> grossReturnMoney;

    private final Optional<Money> totalTaxMoney;

    private final Optional<Money> totalDiscountMoney;

    private final Optional<Money> totalMoney;

    private final Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges;

    private final Optional<Money> totalServiceChargeMoney;

    private final Map<String, Object> additionalProperties;

    private OrderReturnLineItem(
            Optional<String> uid,
            Optional<String> sourceLineItemUid,
            Optional<String> name,
            String quantity,
            Optional<OrderQuantityUnit> quantityUnit,
            Optional<String> note,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Optional<String> variationName,
            Optional<OrderLineItemItemType> itemType,
            Optional<List<OrderReturnLineItemModifier>> returnModifiers,
            Optional<List<OrderLineItemAppliedTax>> appliedTaxes,
            Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts,
            Optional<Money> basePriceMoney,
            Optional<Money> variationTotalPriceMoney,
            Optional<Money> grossReturnMoney,
            Optional<Money> totalTaxMoney,
            Optional<Money> totalDiscountMoney,
            Optional<Money> totalMoney,
            Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges,
            Optional<Money> totalServiceChargeMoney,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.sourceLineItemUid = sourceLineItemUid;
        this.name = name;
        this.quantity = quantity;
        this.quantityUnit = quantityUnit;
        this.note = note;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.variationName = variationName;
        this.itemType = itemType;
        this.returnModifiers = returnModifiers;
        this.appliedTaxes = appliedTaxes;
        this.appliedDiscounts = appliedDiscounts;
        this.basePriceMoney = basePriceMoney;
        this.variationTotalPriceMoney = variationTotalPriceMoney;
        this.grossReturnMoney = grossReturnMoney;
        this.totalTaxMoney = totalTaxMoney;
        this.totalDiscountMoney = totalDiscountMoney;
        this.totalMoney = totalMoney;
        this.appliedServiceCharges = appliedServiceCharges;
        this.totalServiceChargeMoney = totalServiceChargeMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID for this return line-item entry.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The <code>uid</code> of the line item in the original sale order.
     */
    @JsonIgnore
    public Optional<String> getSourceLineItemUid() {
        if (sourceLineItemUid == null) {
            return Optional.empty();
        }
        return sourceLineItemUid;
    }

    /**
     * @return The name of the line item.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The quantity returned, formatted as a decimal number.
     * For example, <code>&quot;3&quot;</code>.
     * <p>Line items with a <code>quantity_unit</code> can have non-integer quantities.
     * For example, <code>&quot;1.70000&quot;</code>.</p>
     */
    @JsonProperty("quantity")
    public String getQuantity() {
        return quantity;
    }

    /**
     * @return The unit and precision that this return line item's quantity is measured in.
     */
    @JsonProperty("quantity_unit")
    public Optional<OrderQuantityUnit> getQuantityUnit() {
        return quantityUnit;
    }

    /**
     * @return The note of the return line item.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this return line item.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this line item references.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    /**
     * @return The name of the variation applied to this return line item.
     */
    @JsonIgnore
    public Optional<String> getVariationName() {
        if (variationName == null) {
            return Optional.empty();
        }
        return variationName;
    }

    /**
     * @return The type of line item: an itemized return, a non-itemized return (custom amount),
     * or the return of an unactivated gift card sale.
     * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values
     */
    @JsonProperty("item_type")
    public Optional<OrderLineItemItemType> getItemType() {
        return itemType;
    }

    /**
     * @return The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.
     */
    @JsonIgnore
    public Optional<List<OrderReturnLineItemModifier>> getReturnModifiers() {
        if (returnModifiers == null) {
            return Optional.empty();
        }
        return returnModifiers;
    }

    /**
     * @return The list of references to <code>OrderReturnTax</code> entities applied to the return line item. Each
     * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
     * <code>OrderReturnTax</code> applied to the return line item. On reads, the applied amount
     * is populated.
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedTax>> getAppliedTaxes() {
        if (appliedTaxes == null) {
            return Optional.empty();
        }
        return appliedTaxes;
    }

    /**
     * @return The list of references to <code>OrderReturnDiscount</code> entities applied to the return line item. Each
     * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
     * <code>OrderReturnDiscount</code> applied to the return line item. On reads, the applied amount
     * is populated.
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedDiscount>> getAppliedDiscounts() {
        if (appliedDiscounts == null) {
            return Optional.empty();
        }
        return appliedDiscounts;
    }

    /**
     * @return The base price for a single unit of the line item.
     */
    @JsonProperty("base_price_money")
    public Optional<Money> getBasePriceMoney() {
        return basePriceMoney;
    }

    /**
     * @return The total price of all item variations returned in this line item.
     * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code> and
     * does not include modifiers.
     */
    @JsonProperty("variation_total_price_money")
    public Optional<Money> getVariationTotalPriceMoney() {
        return variationTotalPriceMoney;
    }

    /**
     * @return The gross return amount of money calculated as (item base price + modifiers price) * quantity.
     */
    @JsonProperty("gross_return_money")
    public Optional<Money> getGrossReturnMoney() {
        return grossReturnMoney;
    }

    /**
     * @return The total amount of tax money to return for the line item.
     */
    @JsonProperty("total_tax_money")
    public Optional<Money> getTotalTaxMoney() {
        return totalTaxMoney;
    }

    /**
     * @return The total amount of discount money to return for the line item.
     */
    @JsonProperty("total_discount_money")
    public Optional<Money> getTotalDiscountMoney() {
        return totalDiscountMoney;
    }

    /**
     * @return The total amount of money to return for this line item.
     */
    @JsonProperty("total_money")
    public Optional<Money> getTotalMoney() {
        return totalMoney;
    }

    /**
     * @return The list of references to <code>OrderReturnServiceCharge</code> entities applied to the return
     * line item. Each <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_uid</code> that
     * references the <code>uid</code> of a top-level <code>OrderReturnServiceCharge</code> applied to the return line
     * item. On reads, the applied amount is populated.
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedServiceCharge>> getAppliedServiceCharges() {
        if (appliedServiceCharges == null) {
            return Optional.empty();
        }
        return appliedServiceCharges;
    }

    /**
     * @return The total amount of apportioned service charge money to return for the line item.
     */
    @JsonProperty("total_service_charge_money")
    public Optional<Money> getTotalServiceChargeMoney() {
        return totalServiceChargeMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_line_item_uid")
    private Optional<String> _getSourceLineItemUid() {
        return sourceLineItemUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("variation_name")
    private Optional<String> _getVariationName() {
        return variationName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("return_modifiers")
    private Optional<List<OrderReturnLineItemModifier>> _getReturnModifiers() {
        return returnModifiers;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_taxes")
    private Optional<List<OrderLineItemAppliedTax>> _getAppliedTaxes() {
        return appliedTaxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_discounts")
    private Optional<List<OrderLineItemAppliedDiscount>> _getAppliedDiscounts() {
        return appliedDiscounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_service_charges")
    private Optional<List<OrderLineItemAppliedServiceCharge>> _getAppliedServiceCharges() {
        return appliedServiceCharges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderReturnLineItem && equalTo((OrderReturnLineItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderReturnLineItem other) {
        return uid.equals(other.uid)
                && sourceLineItemUid.equals(other.sourceLineItemUid)
                && name.equals(other.name)
                && quantity.equals(other.quantity)
                && quantityUnit.equals(other.quantityUnit)
                && note.equals(other.note)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion)
                && variationName.equals(other.variationName)
                && itemType.equals(other.itemType)
                && returnModifiers.equals(other.returnModifiers)
                && appliedTaxes.equals(other.appliedTaxes)
                && appliedDiscounts.equals(other.appliedDiscounts)
                && basePriceMoney.equals(other.basePriceMoney)
                && variationTotalPriceMoney.equals(other.variationTotalPriceMoney)
                && grossReturnMoney.equals(other.grossReturnMoney)
                && totalTaxMoney.equals(other.totalTaxMoney)
                && totalDiscountMoney.equals(other.totalDiscountMoney)
                && totalMoney.equals(other.totalMoney)
                && appliedServiceCharges.equals(other.appliedServiceCharges)
                && totalServiceChargeMoney.equals(other.totalServiceChargeMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.sourceLineItemUid,
                this.name,
                this.quantity,
                this.quantityUnit,
                this.note,
                this.catalogObjectId,
                this.catalogVersion,
                this.variationName,
                this.itemType,
                this.returnModifiers,
                this.appliedTaxes,
                this.appliedDiscounts,
                this.basePriceMoney,
                this.variationTotalPriceMoney,
                this.grossReturnMoney,
                this.totalTaxMoney,
                this.totalDiscountMoney,
                this.totalMoney,
                this.appliedServiceCharges,
                this.totalServiceChargeMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QuantityStage builder() {
        return new Builder();
    }

    public interface QuantityStage {
        /**
         * <p>The quantity returned, formatted as a decimal number.
         * For example, <code>&quot;3&quot;</code>.</p>
         * <p>Line items with a <code>quantity_unit</code> can have non-integer quantities.
         * For example, <code>&quot;1.70000&quot;</code>.</p>
         */
        _FinalStage quantity(@NotNull String quantity);

        Builder from(OrderReturnLineItem other);
    }

    public interface _FinalStage {
        OrderReturnLineItem build();

        /**
         * <p>A unique ID for this return line-item entry.</p>
         */
        _FinalStage uid(Optional<String> uid);

        _FinalStage uid(String uid);

        _FinalStage uid(Nullable<String> uid);

        /**
         * <p>The <code>uid</code> of the line item in the original sale order.</p>
         */
        _FinalStage sourceLineItemUid(Optional<String> sourceLineItemUid);

        _FinalStage sourceLineItemUid(String sourceLineItemUid);

        _FinalStage sourceLineItemUid(Nullable<String> sourceLineItemUid);

        /**
         * <p>The name of the line item.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage name(Nullable<String> name);

        /**
         * <p>The unit and precision that this return line item's quantity is measured in.</p>
         */
        _FinalStage quantityUnit(Optional<OrderQuantityUnit> quantityUnit);

        _FinalStage quantityUnit(OrderQuantityUnit quantityUnit);

        /**
         * <p>The note of the return line item.</p>
         */
        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage note(Nullable<String> note);

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this return line item.</p>
         */
        _FinalStage catalogObjectId(Optional<String> catalogObjectId);

        _FinalStage catalogObjectId(String catalogObjectId);

        _FinalStage catalogObjectId(Nullable<String> catalogObjectId);

        /**
         * <p>The version of the catalog object that this line item references.</p>
         */
        _FinalStage catalogVersion(Optional<Long> catalogVersion);

        _FinalStage catalogVersion(Long catalogVersion);

        _FinalStage catalogVersion(Nullable<Long> catalogVersion);

        /**
         * <p>The name of the variation applied to this return line item.</p>
         */
        _FinalStage variationName(Optional<String> variationName);

        _FinalStage variationName(String variationName);

        _FinalStage variationName(Nullable<String> variationName);

        /**
         * <p>The type of line item: an itemized return, a non-itemized return (custom amount),
         * or the return of an unactivated gift card sale.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         */
        _FinalStage itemType(Optional<OrderLineItemItemType> itemType);

        _FinalStage itemType(OrderLineItemItemType itemType);

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         */
        _FinalStage returnModifiers(Optional<List<OrderReturnLineItemModifier>> returnModifiers);

        _FinalStage returnModifiers(List<OrderReturnLineItemModifier> returnModifiers);

        _FinalStage returnModifiers(Nullable<List<OrderReturnLineItemModifier>> returnModifiers);

        /**
         * <p>The list of references to <code>OrderReturnTax</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnTax</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         */
        _FinalStage appliedTaxes(Optional<List<OrderLineItemAppliedTax>> appliedTaxes);

        _FinalStage appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes);

        _FinalStage appliedTaxes(Nullable<List<OrderLineItemAppliedTax>> appliedTaxes);

        /**
         * <p>The list of references to <code>OrderReturnDiscount</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnDiscount</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         */
        _FinalStage appliedDiscounts(Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts);

        _FinalStage appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts);

        _FinalStage appliedDiscounts(Nullable<List<OrderLineItemAppliedDiscount>> appliedDiscounts);

        /**
         * <p>The base price for a single unit of the line item.</p>
         */
        _FinalStage basePriceMoney(Optional<Money> basePriceMoney);

        _FinalStage basePriceMoney(Money basePriceMoney);

        /**
         * <p>The total price of all item variations returned in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code> and
         * does not include modifiers.</p>
         */
        _FinalStage variationTotalPriceMoney(Optional<Money> variationTotalPriceMoney);

        _FinalStage variationTotalPriceMoney(Money variationTotalPriceMoney);

        /**
         * <p>The gross return amount of money calculated as (item base price + modifiers price) * quantity.</p>
         */
        _FinalStage grossReturnMoney(Optional<Money> grossReturnMoney);

        _FinalStage grossReturnMoney(Money grossReturnMoney);

        /**
         * <p>The total amount of tax money to return for the line item.</p>
         */
        _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney);

        _FinalStage totalTaxMoney(Money totalTaxMoney);

        /**
         * <p>The total amount of discount money to return for the line item.</p>
         */
        _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney);

        _FinalStage totalDiscountMoney(Money totalDiscountMoney);

        /**
         * <p>The total amount of money to return for this line item.</p>
         */
        _FinalStage totalMoney(Optional<Money> totalMoney);

        _FinalStage totalMoney(Money totalMoney);

        /**
         * <p>The list of references to <code>OrderReturnServiceCharge</code> entities applied to the return
         * line item. Each <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_uid</code> that
         * references the <code>uid</code> of a top-level <code>OrderReturnServiceCharge</code> applied to the return line
         * item. On reads, the applied amount is populated.</p>
         */
        _FinalStage appliedServiceCharges(Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges);

        _FinalStage appliedServiceCharges(List<OrderLineItemAppliedServiceCharge> appliedServiceCharges);

        _FinalStage appliedServiceCharges(Nullable<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges);

        /**
         * <p>The total amount of apportioned service charge money to return for the line item.</p>
         */
        _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney);

        _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QuantityStage, _FinalStage {
        private String quantity;

        private Optional<Money> totalServiceChargeMoney = Optional.empty();

        private Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges = Optional.empty();

        private Optional<Money> totalMoney = Optional.empty();

        private Optional<Money> totalDiscountMoney = Optional.empty();

        private Optional<Money> totalTaxMoney = Optional.empty();

        private Optional<Money> grossReturnMoney = Optional.empty();

        private Optional<Money> variationTotalPriceMoney = Optional.empty();

        private Optional<Money> basePriceMoney = Optional.empty();

        private Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts = Optional.empty();

        private Optional<List<OrderLineItemAppliedTax>> appliedTaxes = Optional.empty();

        private Optional<List<OrderReturnLineItemModifier>> returnModifiers = Optional.empty();

        private Optional<OrderLineItemItemType> itemType = Optional.empty();

        private Optional<String> variationName = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<OrderQuantityUnit> quantityUnit = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> sourceLineItemUid = Optional.empty();

        private Optional<String> uid = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OrderReturnLineItem other) {
            uid(other.getUid());
            sourceLineItemUid(other.getSourceLineItemUid());
            name(other.getName());
            quantity(other.getQuantity());
            quantityUnit(other.getQuantityUnit());
            note(other.getNote());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            variationName(other.getVariationName());
            itemType(other.getItemType());
            returnModifiers(other.getReturnModifiers());
            appliedTaxes(other.getAppliedTaxes());
            appliedDiscounts(other.getAppliedDiscounts());
            basePriceMoney(other.getBasePriceMoney());
            variationTotalPriceMoney(other.getVariationTotalPriceMoney());
            grossReturnMoney(other.getGrossReturnMoney());
            totalTaxMoney(other.getTotalTaxMoney());
            totalDiscountMoney(other.getTotalDiscountMoney());
            totalMoney(other.getTotalMoney());
            appliedServiceCharges(other.getAppliedServiceCharges());
            totalServiceChargeMoney(other.getTotalServiceChargeMoney());
            return this;
        }

        /**
         * <p>The quantity returned, formatted as a decimal number.
         * For example, <code>&quot;3&quot;</code>.</p>
         * <p>Line items with a <code>quantity_unit</code> can have non-integer quantities.
         * For example, <code>&quot;1.70000&quot;</code>.</p>
         * <p>The quantity returned, formatted as a decimal number.
         * For example, <code>&quot;3&quot;</code>.</p>
         * <p>Line items with a <code>quantity_unit</code> can have non-integer quantities.
         * For example, <code>&quot;1.70000&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("quantity")
        public _FinalStage quantity(@NotNull String quantity) {
            this.quantity = Objects.requireNonNull(quantity, "quantity must not be null");
            return this;
        }

        /**
         * <p>The total amount of apportioned service charge money to return for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney) {
            this.totalServiceChargeMoney = Optional.ofNullable(totalServiceChargeMoney);
            return this;
        }

        /**
         * <p>The total amount of apportioned service charge money to return for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_service_charge_money", nulls = Nulls.SKIP)
        public _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney) {
            this.totalServiceChargeMoney = totalServiceChargeMoney;
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnServiceCharge</code> entities applied to the return
         * line item. Each <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_uid</code> that
         * references the <code>uid</code> of a top-level <code>OrderReturnServiceCharge</code> applied to the return line
         * item. On reads, the applied amount is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedServiceCharges(
                Nullable<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges) {
            if (appliedServiceCharges.isNull()) {
                this.appliedServiceCharges = null;
            } else if (appliedServiceCharges.isEmpty()) {
                this.appliedServiceCharges = Optional.empty();
            } else {
                this.appliedServiceCharges = Optional.of(appliedServiceCharges.get());
            }
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnServiceCharge</code> entities applied to the return
         * line item. Each <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_uid</code> that
         * references the <code>uid</code> of a top-level <code>OrderReturnServiceCharge</code> applied to the return line
         * item. On reads, the applied amount is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedServiceCharges(List<OrderLineItemAppliedServiceCharge> appliedServiceCharges) {
            this.appliedServiceCharges = Optional.ofNullable(appliedServiceCharges);
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnServiceCharge</code> entities applied to the return
         * line item. Each <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_uid</code> that
         * references the <code>uid</code> of a top-level <code>OrderReturnServiceCharge</code> applied to the return line
         * item. On reads, the applied amount is populated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_service_charges", nulls = Nulls.SKIP)
        public _FinalStage appliedServiceCharges(
                Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges) {
            this.appliedServiceCharges = appliedServiceCharges;
            return this;
        }

        /**
         * <p>The total amount of money to return for this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalMoney(Money totalMoney) {
            this.totalMoney = Optional.ofNullable(totalMoney);
            return this;
        }

        /**
         * <p>The total amount of money to return for this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_money", nulls = Nulls.SKIP)
        public _FinalStage totalMoney(Optional<Money> totalMoney) {
            this.totalMoney = totalMoney;
            return this;
        }

        /**
         * <p>The total amount of discount money to return for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalDiscountMoney(Money totalDiscountMoney) {
            this.totalDiscountMoney = Optional.ofNullable(totalDiscountMoney);
            return this;
        }

        /**
         * <p>The total amount of discount money to return for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_discount_money", nulls = Nulls.SKIP)
        public _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney) {
            this.totalDiscountMoney = totalDiscountMoney;
            return this;
        }

        /**
         * <p>The total amount of tax money to return for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalTaxMoney(Money totalTaxMoney) {
            this.totalTaxMoney = Optional.ofNullable(totalTaxMoney);
            return this;
        }

        /**
         * <p>The total amount of tax money to return for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_tax_money", nulls = Nulls.SKIP)
        public _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney) {
            this.totalTaxMoney = totalTaxMoney;
            return this;
        }

        /**
         * <p>The gross return amount of money calculated as (item base price + modifiers price) * quantity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage grossReturnMoney(Money grossReturnMoney) {
            this.grossReturnMoney = Optional.ofNullable(grossReturnMoney);
            return this;
        }

        /**
         * <p>The gross return amount of money calculated as (item base price + modifiers price) * quantity.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gross_return_money", nulls = Nulls.SKIP)
        public _FinalStage grossReturnMoney(Optional<Money> grossReturnMoney) {
            this.grossReturnMoney = grossReturnMoney;
            return this;
        }

        /**
         * <p>The total price of all item variations returned in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code> and
         * does not include modifiers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationTotalPriceMoney(Money variationTotalPriceMoney) {
            this.variationTotalPriceMoney = Optional.ofNullable(variationTotalPriceMoney);
            return this;
        }

        /**
         * <p>The total price of all item variations returned in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code> and
         * does not include modifiers.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "variation_total_price_money", nulls = Nulls.SKIP)
        public _FinalStage variationTotalPriceMoney(Optional<Money> variationTotalPriceMoney) {
            this.variationTotalPriceMoney = variationTotalPriceMoney;
            return this;
        }

        /**
         * <p>The base price for a single unit of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage basePriceMoney(Money basePriceMoney) {
            this.basePriceMoney = Optional.ofNullable(basePriceMoney);
            return this;
        }

        /**
         * <p>The base price for a single unit of the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "base_price_money", nulls = Nulls.SKIP)
        public _FinalStage basePriceMoney(Optional<Money> basePriceMoney) {
            this.basePriceMoney = basePriceMoney;
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnDiscount</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnDiscount</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedDiscounts(Nullable<List<OrderLineItemAppliedDiscount>> appliedDiscounts) {
            if (appliedDiscounts.isNull()) {
                this.appliedDiscounts = null;
            } else if (appliedDiscounts.isEmpty()) {
                this.appliedDiscounts = Optional.empty();
            } else {
                this.appliedDiscounts = Optional.of(appliedDiscounts.get());
            }
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnDiscount</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnDiscount</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
            this.appliedDiscounts = Optional.ofNullable(appliedDiscounts);
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnDiscount</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnDiscount</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_discounts", nulls = Nulls.SKIP)
        public _FinalStage appliedDiscounts(Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts) {
            this.appliedDiscounts = appliedDiscounts;
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnTax</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnTax</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedTaxes(Nullable<List<OrderLineItemAppliedTax>> appliedTaxes) {
            if (appliedTaxes.isNull()) {
                this.appliedTaxes = null;
            } else if (appliedTaxes.isEmpty()) {
                this.appliedTaxes = Optional.empty();
            } else {
                this.appliedTaxes = Optional.of(appliedTaxes.get());
            }
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnTax</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnTax</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
            this.appliedTaxes = Optional.ofNullable(appliedTaxes);
            return this;
        }

        /**
         * <p>The list of references to <code>OrderReturnTax</code> entities applied to the return line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderReturnTax</code> applied to the return line item. On reads, the applied amount
         * is populated.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_taxes", nulls = Nulls.SKIP)
        public _FinalStage appliedTaxes(Optional<List<OrderLineItemAppliedTax>> appliedTaxes) {
            this.appliedTaxes = appliedTaxes;
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage returnModifiers(Nullable<List<OrderReturnLineItemModifier>> returnModifiers) {
            if (returnModifiers.isNull()) {
                this.returnModifiers = null;
            } else if (returnModifiers.isEmpty()) {
                this.returnModifiers = Optional.empty();
            } else {
                this.returnModifiers = Optional.of(returnModifiers.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage returnModifiers(List<OrderReturnLineItemModifier> returnModifiers) {
            this.returnModifiers = Optional.ofNullable(returnModifiers);
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "return_modifiers", nulls = Nulls.SKIP)
        public _FinalStage returnModifiers(Optional<List<OrderReturnLineItemModifier>> returnModifiers) {
            this.returnModifiers = returnModifiers;
            return this;
        }

        /**
         * <p>The type of line item: an itemized return, a non-itemized return (custom amount),
         * or the return of an unactivated gift card sale.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemType(OrderLineItemItemType itemType) {
            this.itemType = Optional.ofNullable(itemType);
            return this;
        }

        /**
         * <p>The type of line item: an itemized return, a non-itemized return (custom amount),
         * or the return of an unactivated gift card sale.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "item_type", nulls = Nulls.SKIP)
        public _FinalStage itemType(Optional<OrderLineItemItemType> itemType) {
            this.itemType = itemType;
            return this;
        }

        /**
         * <p>The name of the variation applied to this return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationName(Nullable<String> variationName) {
            if (variationName.isNull()) {
                this.variationName = null;
            } else if (variationName.isEmpty()) {
                this.variationName = Optional.empty();
            } else {
                this.variationName = Optional.of(variationName.get());
            }
            return this;
        }

        /**
         * <p>The name of the variation applied to this return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationName(String variationName) {
            this.variationName = Optional.ofNullable(variationName);
            return this;
        }

        /**
         * <p>The name of the variation applied to this return line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "variation_name", nulls = Nulls.SKIP)
        public _FinalStage variationName(Optional<String> variationName) {
            this.variationName = variationName;
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public _FinalStage catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this return line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public _FinalStage catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        /**
         * <p>The note of the return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>The note of the return line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>The note of the return line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>The unit and precision that this return line item's quantity is measured in.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage quantityUnit(OrderQuantityUnit quantityUnit) {
            this.quantityUnit = Optional.ofNullable(quantityUnit);
            return this;
        }

        /**
         * <p>The unit and precision that this return line item's quantity is measured in.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "quantity_unit", nulls = Nulls.SKIP)
        public _FinalStage quantityUnit(Optional<OrderQuantityUnit> quantityUnit) {
            this.quantityUnit = quantityUnit;
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The <code>uid</code> of the line item in the original sale order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceLineItemUid(Nullable<String> sourceLineItemUid) {
            if (sourceLineItemUid.isNull()) {
                this.sourceLineItemUid = null;
            } else if (sourceLineItemUid.isEmpty()) {
                this.sourceLineItemUid = Optional.empty();
            } else {
                this.sourceLineItemUid = Optional.of(sourceLineItemUid.get());
            }
            return this;
        }

        /**
         * <p>The <code>uid</code> of the line item in the original sale order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceLineItemUid(String sourceLineItemUid) {
            this.sourceLineItemUid = Optional.ofNullable(sourceLineItemUid);
            return this;
        }

        /**
         * <p>The <code>uid</code> of the line item in the original sale order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "source_line_item_uid", nulls = Nulls.SKIP)
        public _FinalStage sourceLineItemUid(Optional<String> sourceLineItemUid) {
            this.sourceLineItemUid = sourceLineItemUid;
            return this;
        }

        /**
         * <p>A unique ID for this return line-item entry.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>A unique ID for this return line-item entry.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        /**
         * <p>A unique ID for this return line-item entry.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public _FinalStage uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.Override
        public OrderReturnLineItem build() {
            return new OrderReturnLineItem(
                    uid,
                    sourceLineItemUid,
                    name,
                    quantity,
                    quantityUnit,
                    note,
                    catalogObjectId,
                    catalogVersion,
                    variationName,
                    itemType,
                    returnModifiers,
                    appliedTaxes,
                    appliedDiscounts,
                    basePriceMoney,
                    variationTotalPriceMoney,
                    grossReturnMoney,
                    totalTaxMoney,
                    totalDiscountMoney,
                    totalMoney,
                    appliedServiceCharges,
                    totalServiceChargeMoney,
                    additionalProperties);
        }
    }
}
