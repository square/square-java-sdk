/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class CatalogObject {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private CatalogObject(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static CatalogObject item(CatalogObjectItem value) {
        return new CatalogObject(new ItemValue(value));
    }

    public static CatalogObject image(CatalogObjectImage value) {
        return new CatalogObject(new ImageValue(value));
    }

    public static CatalogObject category(CatalogObjectCategory value) {
        return new CatalogObject(new CategoryValue(value));
    }

    public static CatalogObject itemVariation(CatalogObjectItemVariation value) {
        return new CatalogObject(new ItemVariationValue(value));
    }

    public static CatalogObject tax(CatalogObjectTax value) {
        return new CatalogObject(new TaxValue(value));
    }

    public static CatalogObject discount(CatalogObjectDiscount value) {
        return new CatalogObject(new DiscountValue(value));
    }

    public static CatalogObject modifierList(CatalogObjectModifierList value) {
        return new CatalogObject(new ModifierListValue(value));
    }

    public static CatalogObject modifier(CatalogObjectModifier value) {
        return new CatalogObject(new ModifierValue(value));
    }

    public static CatalogObject pricingRule(CatalogObjectPricingRule value) {
        return new CatalogObject(new PricingRuleValue(value));
    }

    public static CatalogObject productSet(CatalogObjectProductSet value) {
        return new CatalogObject(new ProductSetValue(value));
    }

    public static CatalogObject timePeriod(CatalogObjectTimePeriod value) {
        return new CatalogObject(new TimePeriodValue(value));
    }

    public static CatalogObject measurementUnit(CatalogObjectMeasurementUnit value) {
        return new CatalogObject(new MeasurementUnitValue(value));
    }

    public static CatalogObject subscriptionPlanVariation(CatalogObjectSubscriptionPlanVariation value) {
        return new CatalogObject(new SubscriptionPlanVariationValue(value));
    }

    public static CatalogObject itemOption(CatalogObjectItemOption value) {
        return new CatalogObject(new ItemOptionValue(value));
    }

    public static CatalogObject itemOptionVal(CatalogObjectItemOptionValue value) {
        return new CatalogObject(new ItemOptionValValue(value));
    }

    public static CatalogObject customAttributeDefinition(CatalogObjectCustomAttributeDefinition value) {
        return new CatalogObject(new CustomAttributeDefinitionValue(value));
    }

    public static CatalogObject quickAmountsSettings(CatalogObjectQuickAmountsSettings value) {
        return new CatalogObject(new QuickAmountsSettingsValue(value));
    }

    public static CatalogObject subscriptionPlan(CatalogObjectSubscriptionPlan value) {
        return new CatalogObject(new SubscriptionPlanValue(value));
    }

    public static CatalogObject availabilityPeriod(CatalogObjectAvailabilityPeriod value) {
        return new CatalogObject(new AvailabilityPeriodValue(value));
    }

    public boolean isItem() {
        return value instanceof ItemValue;
    }

    public boolean isImage() {
        return value instanceof ImageValue;
    }

    public boolean isCategory() {
        return value instanceof CategoryValue;
    }

    public boolean isItemVariation() {
        return value instanceof ItemVariationValue;
    }

    public boolean isTax() {
        return value instanceof TaxValue;
    }

    public boolean isDiscount() {
        return value instanceof DiscountValue;
    }

    public boolean isModifierList() {
        return value instanceof ModifierListValue;
    }

    public boolean isModifier() {
        return value instanceof ModifierValue;
    }

    public boolean isPricingRule() {
        return value instanceof PricingRuleValue;
    }

    public boolean isProductSet() {
        return value instanceof ProductSetValue;
    }

    public boolean isTimePeriod() {
        return value instanceof TimePeriodValue;
    }

    public boolean isMeasurementUnit() {
        return value instanceof MeasurementUnitValue;
    }

    public boolean isSubscriptionPlanVariation() {
        return value instanceof SubscriptionPlanVariationValue;
    }

    public boolean isItemOption() {
        return value instanceof ItemOptionValue;
    }

    public boolean isItemOptionVal() {
        return value instanceof ItemOptionValValue;
    }

    public boolean isCustomAttributeDefinition() {
        return value instanceof CustomAttributeDefinitionValue;
    }

    public boolean isQuickAmountsSettings() {
        return value instanceof QuickAmountsSettingsValue;
    }

    public boolean isSubscriptionPlan() {
        return value instanceof SubscriptionPlanValue;
    }

    public boolean isAvailabilityPeriod() {
        return value instanceof AvailabilityPeriodValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<CatalogObjectItem> getItem() {
        if (isItem()) {
            return Optional.of(((ItemValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectImage> getImage() {
        if (isImage()) {
            return Optional.of(((ImageValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectCategory> getCategory() {
        if (isCategory()) {
            return Optional.of(((CategoryValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectItemVariation> getItemVariation() {
        if (isItemVariation()) {
            return Optional.of(((ItemVariationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectTax> getTax() {
        if (isTax()) {
            return Optional.of(((TaxValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectDiscount> getDiscount() {
        if (isDiscount()) {
            return Optional.of(((DiscountValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectModifierList> getModifierList() {
        if (isModifierList()) {
            return Optional.of(((ModifierListValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectModifier> getModifier() {
        if (isModifier()) {
            return Optional.of(((ModifierValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectPricingRule> getPricingRule() {
        if (isPricingRule()) {
            return Optional.of(((PricingRuleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectProductSet> getProductSet() {
        if (isProductSet()) {
            return Optional.of(((ProductSetValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectTimePeriod> getTimePeriod() {
        if (isTimePeriod()) {
            return Optional.of(((TimePeriodValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectMeasurementUnit> getMeasurementUnit() {
        if (isMeasurementUnit()) {
            return Optional.of(((MeasurementUnitValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectSubscriptionPlanVariation> getSubscriptionPlanVariation() {
        if (isSubscriptionPlanVariation()) {
            return Optional.of(((SubscriptionPlanVariationValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectItemOption> getItemOption() {
        if (isItemOption()) {
            return Optional.of(((ItemOptionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectItemOptionValue> getItemOptionVal() {
        if (isItemOptionVal()) {
            return Optional.of(((ItemOptionValValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectCustomAttributeDefinition> getCustomAttributeDefinition() {
        if (isCustomAttributeDefinition()) {
            return Optional.of(((CustomAttributeDefinitionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectQuickAmountsSettings> getQuickAmountsSettings() {
        if (isQuickAmountsSettings()) {
            return Optional.of(((QuickAmountsSettingsValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectSubscriptionPlan> getSubscriptionPlan() {
        if (isSubscriptionPlan()) {
            return Optional.of(((SubscriptionPlanValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CatalogObjectAvailabilityPeriod> getAvailabilityPeriod() {
        if (isAvailabilityPeriod()) {
            return Optional.of(((AvailabilityPeriodValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitItem(CatalogObjectItem item);

        T visitImage(CatalogObjectImage image);

        T visitCategory(CatalogObjectCategory category);

        T visitItemVariation(CatalogObjectItemVariation itemVariation);

        T visitTax(CatalogObjectTax tax);

        T visitDiscount(CatalogObjectDiscount discount);

        T visitModifierList(CatalogObjectModifierList modifierList);

        T visitModifier(CatalogObjectModifier modifier);

        T visitPricingRule(CatalogObjectPricingRule pricingRule);

        T visitProductSet(CatalogObjectProductSet productSet);

        T visitTimePeriod(CatalogObjectTimePeriod timePeriod);

        T visitMeasurementUnit(CatalogObjectMeasurementUnit measurementUnit);

        T visitSubscriptionPlanVariation(CatalogObjectSubscriptionPlanVariation subscriptionPlanVariation);

        T visitItemOption(CatalogObjectItemOption itemOption);

        T visitItemOptionVal(CatalogObjectItemOptionValue itemOptionVal);

        T visitCustomAttributeDefinition(CatalogObjectCustomAttributeDefinition customAttributeDefinition);

        T visitQuickAmountsSettings(CatalogObjectQuickAmountsSettings quickAmountsSettings);

        T visitSubscriptionPlan(CatalogObjectSubscriptionPlan subscriptionPlan);

        T visitAvailabilityPeriod(CatalogObjectAvailabilityPeriod availabilityPeriod);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ItemValue.class),
        @JsonSubTypes.Type(ImageValue.class),
        @JsonSubTypes.Type(CategoryValue.class),
        @JsonSubTypes.Type(ItemVariationValue.class),
        @JsonSubTypes.Type(TaxValue.class),
        @JsonSubTypes.Type(DiscountValue.class),
        @JsonSubTypes.Type(ModifierListValue.class),
        @JsonSubTypes.Type(ModifierValue.class),
        @JsonSubTypes.Type(PricingRuleValue.class),
        @JsonSubTypes.Type(ProductSetValue.class),
        @JsonSubTypes.Type(TimePeriodValue.class),
        @JsonSubTypes.Type(MeasurementUnitValue.class),
        @JsonSubTypes.Type(SubscriptionPlanVariationValue.class),
        @JsonSubTypes.Type(ItemOptionValue.class),
        @JsonSubTypes.Type(ItemOptionValValue.class),
        @JsonSubTypes.Type(CustomAttributeDefinitionValue.class),
        @JsonSubTypes.Type(QuickAmountsSettingsValue.class),
        @JsonSubTypes.Type(SubscriptionPlanValue.class),
        @JsonSubTypes.Type(AvailabilityPeriodValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("ITEM")
    @JsonIgnoreProperties("type")
    private static final class ItemValue implements Value {
        @JsonUnwrapped
        private CatalogObjectItem value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ItemValue() {}

        private ItemValue(CatalogObjectItem value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitItem(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ItemValue && equalTo((ItemValue) other);
        }

        private boolean equalTo(ItemValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("IMAGE")
    @JsonIgnoreProperties("type")
    private static final class ImageValue implements Value {
        @JsonUnwrapped
        private CatalogObjectImage value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ImageValue() {}

        private ImageValue(CatalogObjectImage value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitImage(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ImageValue && equalTo((ImageValue) other);
        }

        private boolean equalTo(ImageValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("CATEGORY")
    @JsonIgnoreProperties("type")
    private static final class CategoryValue implements Value {
        @JsonUnwrapped
        private CatalogObjectCategory value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CategoryValue() {}

        private CategoryValue(CatalogObjectCategory value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCategory(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CategoryValue && equalTo((CategoryValue) other);
        }

        private boolean equalTo(CategoryValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ITEM_VARIATION")
    @JsonIgnoreProperties("type")
    private static final class ItemVariationValue implements Value {
        @JsonUnwrapped
        private CatalogObjectItemVariation value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ItemVariationValue() {}

        private ItemVariationValue(CatalogObjectItemVariation value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitItemVariation(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ItemVariationValue && equalTo((ItemVariationValue) other);
        }

        private boolean equalTo(ItemVariationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("TAX")
    @JsonIgnoreProperties("type")
    private static final class TaxValue implements Value {
        @JsonUnwrapped
        private CatalogObjectTax value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TaxValue() {}

        private TaxValue(CatalogObjectTax value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTax(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TaxValue && equalTo((TaxValue) other);
        }

        private boolean equalTo(TaxValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("DISCOUNT")
    @JsonIgnoreProperties("type")
    private static final class DiscountValue implements Value {
        @JsonUnwrapped
        private CatalogObjectDiscount value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DiscountValue() {}

        private DiscountValue(CatalogObjectDiscount value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDiscount(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DiscountValue && equalTo((DiscountValue) other);
        }

        private boolean equalTo(DiscountValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("MODIFIER_LIST")
    @JsonIgnoreProperties("type")
    private static final class ModifierListValue implements Value {
        @JsonUnwrapped
        private CatalogObjectModifierList value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ModifierListValue() {}

        private ModifierListValue(CatalogObjectModifierList value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitModifierList(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ModifierListValue && equalTo((ModifierListValue) other);
        }

        private boolean equalTo(ModifierListValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("MODIFIER")
    @JsonIgnoreProperties("type")
    private static final class ModifierValue implements Value {
        @JsonUnwrapped
        private CatalogObjectModifier value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ModifierValue() {}

        private ModifierValue(CatalogObjectModifier value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitModifier(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ModifierValue && equalTo((ModifierValue) other);
        }

        private boolean equalTo(ModifierValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("PRICING_RULE")
    @JsonIgnoreProperties("type")
    private static final class PricingRuleValue implements Value {
        @JsonUnwrapped
        private CatalogObjectPricingRule value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PricingRuleValue() {}

        private PricingRuleValue(CatalogObjectPricingRule value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPricingRule(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PricingRuleValue && equalTo((PricingRuleValue) other);
        }

        private boolean equalTo(PricingRuleValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("PRODUCT_SET")
    @JsonIgnoreProperties("type")
    private static final class ProductSetValue implements Value {
        @JsonUnwrapped
        private CatalogObjectProductSet value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ProductSetValue() {}

        private ProductSetValue(CatalogObjectProductSet value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitProductSet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ProductSetValue && equalTo((ProductSetValue) other);
        }

        private boolean equalTo(ProductSetValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("TIME_PERIOD")
    @JsonIgnoreProperties("type")
    private static final class TimePeriodValue implements Value {
        @JsonUnwrapped
        private CatalogObjectTimePeriod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TimePeriodValue() {}

        private TimePeriodValue(CatalogObjectTimePeriod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTimePeriod(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TimePeriodValue && equalTo((TimePeriodValue) other);
        }

        private boolean equalTo(TimePeriodValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("MEASUREMENT_UNIT")
    @JsonIgnoreProperties("type")
    private static final class MeasurementUnitValue implements Value {
        @JsonUnwrapped
        private CatalogObjectMeasurementUnit value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MeasurementUnitValue() {}

        private MeasurementUnitValue(CatalogObjectMeasurementUnit value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMeasurementUnit(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MeasurementUnitValue && equalTo((MeasurementUnitValue) other);
        }

        private boolean equalTo(MeasurementUnitValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("SUBSCRIPTION_PLAN_VARIATION")
    @JsonIgnoreProperties("type")
    private static final class SubscriptionPlanVariationValue implements Value {
        @JsonUnwrapped
        private CatalogObjectSubscriptionPlanVariation value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SubscriptionPlanVariationValue() {}

        private SubscriptionPlanVariationValue(CatalogObjectSubscriptionPlanVariation value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSubscriptionPlanVariation(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SubscriptionPlanVariationValue && equalTo((SubscriptionPlanVariationValue) other);
        }

        private boolean equalTo(SubscriptionPlanVariationValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ITEM_OPTION")
    @JsonIgnoreProperties("type")
    private static final class ItemOptionValue implements Value {
        @JsonUnwrapped
        private CatalogObjectItemOption value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ItemOptionValue() {}

        private ItemOptionValue(CatalogObjectItemOption value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitItemOption(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ItemOptionValue && equalTo((ItemOptionValue) other);
        }

        private boolean equalTo(ItemOptionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ITEM_OPTION_VAL")
    @JsonIgnoreProperties("type")
    private static final class ItemOptionValValue implements Value {
        @JsonUnwrapped
        private CatalogObjectItemOptionValue value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ItemOptionValValue() {}

        private ItemOptionValValue(CatalogObjectItemOptionValue value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitItemOptionVal(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ItemOptionValValue && equalTo((ItemOptionValValue) other);
        }

        private boolean equalTo(ItemOptionValValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("CUSTOM_ATTRIBUTE_DEFINITION")
    @JsonIgnoreProperties("type")
    private static final class CustomAttributeDefinitionValue implements Value {
        @JsonUnwrapped
        private CatalogObjectCustomAttributeDefinition value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomAttributeDefinitionValue() {}

        private CustomAttributeDefinitionValue(CatalogObjectCustomAttributeDefinition value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustomAttributeDefinition(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomAttributeDefinitionValue && equalTo((CustomAttributeDefinitionValue) other);
        }

        private boolean equalTo(CustomAttributeDefinitionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("QUICK_AMOUNTS_SETTINGS")
    @JsonIgnoreProperties("type")
    private static final class QuickAmountsSettingsValue implements Value {
        @JsonUnwrapped
        private CatalogObjectQuickAmountsSettings value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private QuickAmountsSettingsValue() {}

        private QuickAmountsSettingsValue(CatalogObjectQuickAmountsSettings value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitQuickAmountsSettings(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof QuickAmountsSettingsValue && equalTo((QuickAmountsSettingsValue) other);
        }

        private boolean equalTo(QuickAmountsSettingsValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("SUBSCRIPTION_PLAN")
    @JsonIgnoreProperties("type")
    private static final class SubscriptionPlanValue implements Value {
        @JsonUnwrapped
        private CatalogObjectSubscriptionPlan value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SubscriptionPlanValue() {}

        private SubscriptionPlanValue(CatalogObjectSubscriptionPlan value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSubscriptionPlan(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SubscriptionPlanValue && equalTo((SubscriptionPlanValue) other);
        }

        private boolean equalTo(SubscriptionPlanValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("AVAILABILITY_PERIOD")
    @JsonIgnoreProperties("type")
    private static final class AvailabilityPeriodValue implements Value {
        @JsonUnwrapped
        private CatalogObjectAvailabilityPeriod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AvailabilityPeriodValue() {}

        private AvailabilityPeriodValue(CatalogObjectAvailabilityPeriod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAvailabilityPeriod(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AvailabilityPeriodValue && equalTo((AvailabilityPeriodValue) other);
        }

        private boolean equalTo(AvailabilityPeriodValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "CatalogObject{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
