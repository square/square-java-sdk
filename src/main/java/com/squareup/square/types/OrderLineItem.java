/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderLineItem.Builder.class)
public final class OrderLineItem {
    private final Optional<String> uid;

    private final Optional<String> name;

    private final String quantity;

    private final Optional<OrderQuantityUnit> quantityUnit;

    private final Optional<String> note;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Optional<String> variationName;

    private final Optional<OrderLineItemItemType> itemType;

    private final Optional<Map<String, Optional<String>>> metadata;

    private final Optional<List<OrderLineItemModifier>> modifiers;

    private final Optional<List<OrderLineItemAppliedTax>> appliedTaxes;

    private final Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts;

    private final Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges;

    private final Optional<Money> basePriceMoney;

    private final Optional<Money> variationTotalPriceMoney;

    private final Optional<Money> grossSalesMoney;

    private final Optional<Money> totalTaxMoney;

    private final Optional<Money> totalDiscountMoney;

    private final Optional<Money> totalMoney;

    private final Optional<OrderLineItemPricingBlocklists> pricingBlocklists;

    private final Optional<Money> totalServiceChargeMoney;

    private final Map<String, Object> additionalProperties;

    private OrderLineItem(
            Optional<String> uid,
            Optional<String> name,
            String quantity,
            Optional<OrderQuantityUnit> quantityUnit,
            Optional<String> note,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Optional<String> variationName,
            Optional<OrderLineItemItemType> itemType,
            Optional<Map<String, Optional<String>>> metadata,
            Optional<List<OrderLineItemModifier>> modifiers,
            Optional<List<OrderLineItemAppliedTax>> appliedTaxes,
            Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts,
            Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges,
            Optional<Money> basePriceMoney,
            Optional<Money> variationTotalPriceMoney,
            Optional<Money> grossSalesMoney,
            Optional<Money> totalTaxMoney,
            Optional<Money> totalDiscountMoney,
            Optional<Money> totalMoney,
            Optional<OrderLineItemPricingBlocklists> pricingBlocklists,
            Optional<Money> totalServiceChargeMoney,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.name = name;
        this.quantity = quantity;
        this.quantityUnit = quantityUnit;
        this.note = note;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.variationName = variationName;
        this.itemType = itemType;
        this.metadata = metadata;
        this.modifiers = modifiers;
        this.appliedTaxes = appliedTaxes;
        this.appliedDiscounts = appliedDiscounts;
        this.appliedServiceCharges = appliedServiceCharges;
        this.basePriceMoney = basePriceMoney;
        this.variationTotalPriceMoney = variationTotalPriceMoney;
        this.grossSalesMoney = grossSalesMoney;
        this.totalTaxMoney = totalTaxMoney;
        this.totalDiscountMoney = totalDiscountMoney;
        this.totalMoney = totalMoney;
        this.pricingBlocklists = pricingBlocklists;
        this.totalServiceChargeMoney = totalServiceChargeMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the line item only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The name of the line item.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The count, or measurement, of a line item being purchased:
     * <p>If <code>quantity</code> is a whole number, and <code>quantity_unit</code> is not specified, then <code>quantity</code> denotes an item count.  For example: <code>3</code> apples.</p>
     * <p>If <code>quantity</code> is a whole or decimal number, and <code>quantity_unit</code> is also specified, then <code>quantity</code> denotes a measurement.  For example: <code>2.25</code> pounds of broccoli.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/orders-api/create-orders#specify-item-quantity-and-measurement-unit">Specify item quantity and measurement unit</a>.</p>
     * <p>Line items with a quantity of <code>0</code> are automatically removed
     * when paying for or otherwise completing the order.</p>
     */
    @JsonProperty("quantity")
    public String getQuantity() {
        return quantity;
    }

    /**
     * @return The measurement unit and decimal precision that this line item's quantity is measured in.
     */
    @JsonProperty("quantity_unit")
    public Optional<OrderQuantityUnit> getQuantityUnit() {
        return quantityUnit;
    }

    /**
     * @return An optional note associated with the line item.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this line item.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this line item references.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    /**
     * @return The name of the variation applied to this line item.
     */
    @JsonIgnore
    public Optional<String> getVariationName() {
        if (variationName == null) {
            return Optional.empty();
        }
        return variationName;
    }

    /**
     * @return The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
     * activation or reloading of a gift card.
     * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values
     */
    @JsonProperty("item_type")
    public Optional<OrderLineItemItemType> getItemType() {
        return itemType;
    }

    /**
     * @return Application-defined data attached to this line item. Metadata fields are intended
     * to store descriptive references or associations with an entity in another system or store brief
     * information about the object. Square does not process this field; it only stores and returns it
     * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
     * identifiable information or card details).
     * <p>Keys written by applications must be 60 characters or less and must be in the character set
     * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
     * with a namespace, separated from the key with a ':' character.</p>
     * <p>Values have a maximum length of 255 characters.</p>
     * <p>An application can have up to 10 entries per metadata field.</p>
     * <p>Entries written by applications are private and can only be read or modified by the same
     * application.</p>
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
     */
    @JsonIgnore
    public Optional<Map<String, Optional<String>>> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    /**
     * @return The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.
     */
    @JsonIgnore
    public Optional<List<OrderLineItemModifier>> getModifiers() {
        if (modifiers == null) {
            return Optional.empty();
        }
        return modifiers;
    }

    /**
     * @return The list of references to taxes applied to this line item. Each
     * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a
     * top-level <code>OrderLineItemTax</code> applied to the line item. On reads, the
     * amount applied is populated.
     * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every line
     * item for all <code>ORDER</code> scoped taxes added to the order. <code>OrderLineItemAppliedTax</code>
     * records for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax
     * to apply to any line items.</p>
     * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedTax>> getAppliedTaxes() {
        if (appliedTaxes == null) {
            return Optional.empty();
        }
        return appliedTaxes;
    }

    /**
     * @return The list of references to discounts applied to this line item. Each
     * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
     * <code>OrderLineItemDiscounts</code> applied to the line item. On reads, the amount
     * applied is populated.
     * <p>An <code>OrderLineItemAppliedDiscount</code> is automatically created on every line item for all
     * <code>ORDER</code> scoped discounts that are added to the order. <code>OrderLineItemAppliedDiscount</code> records
     * for <code>LINE_ITEM</code> scoped discounts must be added in requests for the discount to apply to any
     * line items.</p>
     * <p>To change the amount of a discount, modify the referenced top-level discount.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedDiscount>> getAppliedDiscounts() {
        if (appliedDiscounts == null) {
            return Optional.empty();
        }
        return appliedDiscounts;
    }

    /**
     * @return The list of references to service charges applied to this line item. Each
     * <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_id</code> that references the <code>uid</code> of a
     * top-level <code>OrderServiceCharge</code> applied to the line item. On reads, the amount applied is
     * populated.
     * <p>To change the amount of a service charge, modify the referenced top-level service charge.</p>
     */
    @JsonIgnore
    public Optional<List<OrderLineItemAppliedServiceCharge>> getAppliedServiceCharges() {
        if (appliedServiceCharges == null) {
            return Optional.empty();
        }
        return appliedServiceCharges;
    }

    /**
     * @return The base price for a single unit of the line item.
     */
    @JsonProperty("base_price_money")
    public Optional<Money> getBasePriceMoney() {
        return basePriceMoney;
    }

    /**
     * @return The total price of all item variations sold in this line item.
     * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code>.
     * It does not include modifiers.
     */
    @JsonProperty("variation_total_price_money")
    public Optional<Money> getVariationTotalPriceMoney() {
        return variationTotalPriceMoney;
    }

    /**
     * @return The amount of money made in gross sales for this line item.
     * The amount is calculated as the sum of the variation's total price and each modifier's total price.
     * For inclusive tax items in the US, Canada, and Japan, tax is deducted from <code>gross_sales_money</code>. For Europe and
     * Australia, inclusive tax remains as part of the gross sale calculation.
     */
    @JsonProperty("gross_sales_money")
    public Optional<Money> getGrossSalesMoney() {
        return grossSalesMoney;
    }

    /**
     * @return The total amount of tax money to collect for the line item.
     */
    @JsonProperty("total_tax_money")
    public Optional<Money> getTotalTaxMoney() {
        return totalTaxMoney;
    }

    /**
     * @return The total amount of discount money to collect for the line item.
     */
    @JsonProperty("total_discount_money")
    public Optional<Money> getTotalDiscountMoney() {
        return totalDiscountMoney;
    }

    /**
     * @return The total amount of money to collect for this line item.
     */
    @JsonProperty("total_money")
    public Optional<Money> getTotalMoney() {
        return totalMoney;
    }

    /**
     * @return Describes pricing adjustments that are blocked from automatic
     * application to a line item. For more information, see
     * <a href="https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts">Apply Taxes and Discounts</a>.
     */
    @JsonProperty("pricing_blocklists")
    public Optional<OrderLineItemPricingBlocklists> getPricingBlocklists() {
        return pricingBlocklists;
    }

    /**
     * @return The total amount of apportioned service charge money to collect for the line item.
     */
    @JsonProperty("total_service_charge_money")
    public Optional<Money> getTotalServiceChargeMoney() {
        return totalServiceChargeMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("variation_name")
    private Optional<String> _getVariationName() {
        return variationName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Map<String, Optional<String>>> _getMetadata() {
        return metadata;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("modifiers")
    private Optional<List<OrderLineItemModifier>> _getModifiers() {
        return modifiers;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_taxes")
    private Optional<List<OrderLineItemAppliedTax>> _getAppliedTaxes() {
        return appliedTaxes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_discounts")
    private Optional<List<OrderLineItemAppliedDiscount>> _getAppliedDiscounts() {
        return appliedDiscounts;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("applied_service_charges")
    private Optional<List<OrderLineItemAppliedServiceCharge>> _getAppliedServiceCharges() {
        return appliedServiceCharges;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderLineItem && equalTo((OrderLineItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderLineItem other) {
        return uid.equals(other.uid)
                && name.equals(other.name)
                && quantity.equals(other.quantity)
                && quantityUnit.equals(other.quantityUnit)
                && note.equals(other.note)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion)
                && variationName.equals(other.variationName)
                && itemType.equals(other.itemType)
                && metadata.equals(other.metadata)
                && modifiers.equals(other.modifiers)
                && appliedTaxes.equals(other.appliedTaxes)
                && appliedDiscounts.equals(other.appliedDiscounts)
                && appliedServiceCharges.equals(other.appliedServiceCharges)
                && basePriceMoney.equals(other.basePriceMoney)
                && variationTotalPriceMoney.equals(other.variationTotalPriceMoney)
                && grossSalesMoney.equals(other.grossSalesMoney)
                && totalTaxMoney.equals(other.totalTaxMoney)
                && totalDiscountMoney.equals(other.totalDiscountMoney)
                && totalMoney.equals(other.totalMoney)
                && pricingBlocklists.equals(other.pricingBlocklists)
                && totalServiceChargeMoney.equals(other.totalServiceChargeMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.name,
                this.quantity,
                this.quantityUnit,
                this.note,
                this.catalogObjectId,
                this.catalogVersion,
                this.variationName,
                this.itemType,
                this.metadata,
                this.modifiers,
                this.appliedTaxes,
                this.appliedDiscounts,
                this.appliedServiceCharges,
                this.basePriceMoney,
                this.variationTotalPriceMoney,
                this.grossSalesMoney,
                this.totalTaxMoney,
                this.totalDiscountMoney,
                this.totalMoney,
                this.pricingBlocklists,
                this.totalServiceChargeMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QuantityStage builder() {
        return new Builder();
    }

    public interface QuantityStage {
        /**
         * <p>The count, or measurement, of a line item being purchased:</p>
         * <p>If <code>quantity</code> is a whole number, and <code>quantity_unit</code> is not specified, then <code>quantity</code> denotes an item count.  For example: <code>3</code> apples.</p>
         * <p>If <code>quantity</code> is a whole or decimal number, and <code>quantity_unit</code> is also specified, then <code>quantity</code> denotes a measurement.  For example: <code>2.25</code> pounds of broccoli.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/orders-api/create-orders#specify-item-quantity-and-measurement-unit">Specify item quantity and measurement unit</a>.</p>
         * <p>Line items with a quantity of <code>0</code> are automatically removed
         * when paying for or otherwise completing the order.</p>
         */
        _FinalStage quantity(@NotNull String quantity);

        Builder from(OrderLineItem other);
    }

    public interface _FinalStage {
        OrderLineItem build();

        /**
         * <p>A unique ID that identifies the line item only within this order.</p>
         */
        _FinalStage uid(Optional<String> uid);

        _FinalStage uid(String uid);

        _FinalStage uid(Nullable<String> uid);

        /**
         * <p>The name of the line item.</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage name(Nullable<String> name);

        /**
         * <p>The measurement unit and decimal precision that this line item's quantity is measured in.</p>
         */
        _FinalStage quantityUnit(Optional<OrderQuantityUnit> quantityUnit);

        _FinalStage quantityUnit(OrderQuantityUnit quantityUnit);

        /**
         * <p>An optional note associated with the line item.</p>
         */
        _FinalStage note(Optional<String> note);

        _FinalStage note(String note);

        _FinalStage note(Nullable<String> note);

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this line item.</p>
         */
        _FinalStage catalogObjectId(Optional<String> catalogObjectId);

        _FinalStage catalogObjectId(String catalogObjectId);

        _FinalStage catalogObjectId(Nullable<String> catalogObjectId);

        /**
         * <p>The version of the catalog object that this line item references.</p>
         */
        _FinalStage catalogVersion(Optional<Long> catalogVersion);

        _FinalStage catalogVersion(Long catalogVersion);

        _FinalStage catalogVersion(Nullable<Long> catalogVersion);

        /**
         * <p>The name of the variation applied to this line item.</p>
         */
        _FinalStage variationName(Optional<String> variationName);

        _FinalStage variationName(String variationName);

        _FinalStage variationName(Nullable<String> variationName);

        /**
         * <p>The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
         * activation or reloading of a gift card.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         */
        _FinalStage itemType(Optional<OrderLineItemItemType> itemType);

        _FinalStage itemType(OrderLineItemItemType itemType);

        /**
         * <p>Application-defined data attached to this line item. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        _FinalStage metadata(Optional<Map<String, Optional<String>>> metadata);

        _FinalStage metadata(Map<String, Optional<String>> metadata);

        _FinalStage metadata(Nullable<Map<String, Optional<String>>> metadata);

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         */
        _FinalStage modifiers(Optional<List<OrderLineItemModifier>> modifiers);

        _FinalStage modifiers(List<OrderLineItemModifier> modifiers);

        _FinalStage modifiers(Nullable<List<OrderLineItemModifier>> modifiers);

        /**
         * <p>The list of references to taxes applied to this line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a
         * top-level <code>OrderLineItemTax</code> applied to the line item. On reads, the
         * amount applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every line
         * item for all <code>ORDER</code> scoped taxes added to the order. <code>OrderLineItemAppliedTax</code>
         * records for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax
         * to apply to any line items.</p>
         * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
         */
        _FinalStage appliedTaxes(Optional<List<OrderLineItemAppliedTax>> appliedTaxes);

        _FinalStage appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes);

        _FinalStage appliedTaxes(Nullable<List<OrderLineItemAppliedTax>> appliedTaxes);

        /**
         * <p>The list of references to discounts applied to this line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderLineItemDiscounts</code> applied to the line item. On reads, the amount
         * applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedDiscount</code> is automatically created on every line item for all
         * <code>ORDER</code> scoped discounts that are added to the order. <code>OrderLineItemAppliedDiscount</code> records
         * for <code>LINE_ITEM</code> scoped discounts must be added in requests for the discount to apply to any
         * line items.</p>
         * <p>To change the amount of a discount, modify the referenced top-level discount.</p>
         */
        _FinalStage appliedDiscounts(Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts);

        _FinalStage appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts);

        _FinalStage appliedDiscounts(Nullable<List<OrderLineItemAppliedDiscount>> appliedDiscounts);

        /**
         * <p>The list of references to service charges applied to this line item. Each
         * <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_id</code> that references the <code>uid</code> of a
         * top-level <code>OrderServiceCharge</code> applied to the line item. On reads, the amount applied is
         * populated.</p>
         * <p>To change the amount of a service charge, modify the referenced top-level service charge.</p>
         */
        _FinalStage appliedServiceCharges(Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges);

        _FinalStage appliedServiceCharges(List<OrderLineItemAppliedServiceCharge> appliedServiceCharges);

        _FinalStage appliedServiceCharges(Nullable<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges);

        /**
         * <p>The base price for a single unit of the line item.</p>
         */
        _FinalStage basePriceMoney(Optional<Money> basePriceMoney);

        _FinalStage basePriceMoney(Money basePriceMoney);

        /**
         * <p>The total price of all item variations sold in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code>.
         * It does not include modifiers.</p>
         */
        _FinalStage variationTotalPriceMoney(Optional<Money> variationTotalPriceMoney);

        _FinalStage variationTotalPriceMoney(Money variationTotalPriceMoney);

        /**
         * <p>The amount of money made in gross sales for this line item.
         * The amount is calculated as the sum of the variation's total price and each modifier's total price.
         * For inclusive tax items in the US, Canada, and Japan, tax is deducted from <code>gross_sales_money</code>. For Europe and
         * Australia, inclusive tax remains as part of the gross sale calculation.</p>
         */
        _FinalStage grossSalesMoney(Optional<Money> grossSalesMoney);

        _FinalStage grossSalesMoney(Money grossSalesMoney);

        /**
         * <p>The total amount of tax money to collect for the line item.</p>
         */
        _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney);

        _FinalStage totalTaxMoney(Money totalTaxMoney);

        /**
         * <p>The total amount of discount money to collect for the line item.</p>
         */
        _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney);

        _FinalStage totalDiscountMoney(Money totalDiscountMoney);

        /**
         * <p>The total amount of money to collect for this line item.</p>
         */
        _FinalStage totalMoney(Optional<Money> totalMoney);

        _FinalStage totalMoney(Money totalMoney);

        /**
         * <p>Describes pricing adjustments that are blocked from automatic
         * application to a line item. For more information, see
         * <a href="https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts">Apply Taxes and Discounts</a>.</p>
         */
        _FinalStage pricingBlocklists(Optional<OrderLineItemPricingBlocklists> pricingBlocklists);

        _FinalStage pricingBlocklists(OrderLineItemPricingBlocklists pricingBlocklists);

        /**
         * <p>The total amount of apportioned service charge money to collect for the line item.</p>
         */
        _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney);

        _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QuantityStage, _FinalStage {
        private String quantity;

        private Optional<Money> totalServiceChargeMoney = Optional.empty();

        private Optional<OrderLineItemPricingBlocklists> pricingBlocklists = Optional.empty();

        private Optional<Money> totalMoney = Optional.empty();

        private Optional<Money> totalDiscountMoney = Optional.empty();

        private Optional<Money> totalTaxMoney = Optional.empty();

        private Optional<Money> grossSalesMoney = Optional.empty();

        private Optional<Money> variationTotalPriceMoney = Optional.empty();

        private Optional<Money> basePriceMoney = Optional.empty();

        private Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges = Optional.empty();

        private Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts = Optional.empty();

        private Optional<List<OrderLineItemAppliedTax>> appliedTaxes = Optional.empty();

        private Optional<List<OrderLineItemModifier>> modifiers = Optional.empty();

        private Optional<Map<String, Optional<String>>> metadata = Optional.empty();

        private Optional<OrderLineItemItemType> itemType = Optional.empty();

        private Optional<String> variationName = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<OrderQuantityUnit> quantityUnit = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> uid = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OrderLineItem other) {
            uid(other.getUid());
            name(other.getName());
            quantity(other.getQuantity());
            quantityUnit(other.getQuantityUnit());
            note(other.getNote());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            variationName(other.getVariationName());
            itemType(other.getItemType());
            metadata(other.getMetadata());
            modifiers(other.getModifiers());
            appliedTaxes(other.getAppliedTaxes());
            appliedDiscounts(other.getAppliedDiscounts());
            appliedServiceCharges(other.getAppliedServiceCharges());
            basePriceMoney(other.getBasePriceMoney());
            variationTotalPriceMoney(other.getVariationTotalPriceMoney());
            grossSalesMoney(other.getGrossSalesMoney());
            totalTaxMoney(other.getTotalTaxMoney());
            totalDiscountMoney(other.getTotalDiscountMoney());
            totalMoney(other.getTotalMoney());
            pricingBlocklists(other.getPricingBlocklists());
            totalServiceChargeMoney(other.getTotalServiceChargeMoney());
            return this;
        }

        /**
         * <p>The count, or measurement, of a line item being purchased:</p>
         * <p>If <code>quantity</code> is a whole number, and <code>quantity_unit</code> is not specified, then <code>quantity</code> denotes an item count.  For example: <code>3</code> apples.</p>
         * <p>If <code>quantity</code> is a whole or decimal number, and <code>quantity_unit</code> is also specified, then <code>quantity</code> denotes a measurement.  For example: <code>2.25</code> pounds of broccoli.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/orders-api/create-orders#specify-item-quantity-and-measurement-unit">Specify item quantity and measurement unit</a>.</p>
         * <p>Line items with a quantity of <code>0</code> are automatically removed
         * when paying for or otherwise completing the order.</p>
         * <p>The count, or measurement, of a line item being purchased:</p>
         * <p>If <code>quantity</code> is a whole number, and <code>quantity_unit</code> is not specified, then <code>quantity</code> denotes an item count.  For example: <code>3</code> apples.</p>
         * <p>If <code>quantity</code> is a whole or decimal number, and <code>quantity_unit</code> is also specified, then <code>quantity</code> denotes a measurement.  For example: <code>2.25</code> pounds of broccoli.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/orders-api/create-orders#specify-item-quantity-and-measurement-unit">Specify item quantity and measurement unit</a>.</p>
         * <p>Line items with a quantity of <code>0</code> are automatically removed
         * when paying for or otherwise completing the order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("quantity")
        public _FinalStage quantity(@NotNull String quantity) {
            this.quantity = Objects.requireNonNull(quantity, "quantity must not be null");
            return this;
        }

        /**
         * <p>The total amount of apportioned service charge money to collect for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalServiceChargeMoney(Money totalServiceChargeMoney) {
            this.totalServiceChargeMoney = Optional.ofNullable(totalServiceChargeMoney);
            return this;
        }

        /**
         * <p>The total amount of apportioned service charge money to collect for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_service_charge_money", nulls = Nulls.SKIP)
        public _FinalStage totalServiceChargeMoney(Optional<Money> totalServiceChargeMoney) {
            this.totalServiceChargeMoney = totalServiceChargeMoney;
            return this;
        }

        /**
         * <p>Describes pricing adjustments that are blocked from automatic
         * application to a line item. For more information, see
         * <a href="https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts">Apply Taxes and Discounts</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pricingBlocklists(OrderLineItemPricingBlocklists pricingBlocklists) {
            this.pricingBlocklists = Optional.ofNullable(pricingBlocklists);
            return this;
        }

        /**
         * <p>Describes pricing adjustments that are blocked from automatic
         * application to a line item. For more information, see
         * <a href="https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts">Apply Taxes and Discounts</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "pricing_blocklists", nulls = Nulls.SKIP)
        public _FinalStage pricingBlocklists(Optional<OrderLineItemPricingBlocklists> pricingBlocklists) {
            this.pricingBlocklists = pricingBlocklists;
            return this;
        }

        /**
         * <p>The total amount of money to collect for this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalMoney(Money totalMoney) {
            this.totalMoney = Optional.ofNullable(totalMoney);
            return this;
        }

        /**
         * <p>The total amount of money to collect for this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_money", nulls = Nulls.SKIP)
        public _FinalStage totalMoney(Optional<Money> totalMoney) {
            this.totalMoney = totalMoney;
            return this;
        }

        /**
         * <p>The total amount of discount money to collect for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalDiscountMoney(Money totalDiscountMoney) {
            this.totalDiscountMoney = Optional.ofNullable(totalDiscountMoney);
            return this;
        }

        /**
         * <p>The total amount of discount money to collect for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_discount_money", nulls = Nulls.SKIP)
        public _FinalStage totalDiscountMoney(Optional<Money> totalDiscountMoney) {
            this.totalDiscountMoney = totalDiscountMoney;
            return this;
        }

        /**
         * <p>The total amount of tax money to collect for the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalTaxMoney(Money totalTaxMoney) {
            this.totalTaxMoney = Optional.ofNullable(totalTaxMoney);
            return this;
        }

        /**
         * <p>The total amount of tax money to collect for the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total_tax_money", nulls = Nulls.SKIP)
        public _FinalStage totalTaxMoney(Optional<Money> totalTaxMoney) {
            this.totalTaxMoney = totalTaxMoney;
            return this;
        }

        /**
         * <p>The amount of money made in gross sales for this line item.
         * The amount is calculated as the sum of the variation's total price and each modifier's total price.
         * For inclusive tax items in the US, Canada, and Japan, tax is deducted from <code>gross_sales_money</code>. For Europe and
         * Australia, inclusive tax remains as part of the gross sale calculation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage grossSalesMoney(Money grossSalesMoney) {
            this.grossSalesMoney = Optional.ofNullable(grossSalesMoney);
            return this;
        }

        /**
         * <p>The amount of money made in gross sales for this line item.
         * The amount is calculated as the sum of the variation's total price and each modifier's total price.
         * For inclusive tax items in the US, Canada, and Japan, tax is deducted from <code>gross_sales_money</code>. For Europe and
         * Australia, inclusive tax remains as part of the gross sale calculation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "gross_sales_money", nulls = Nulls.SKIP)
        public _FinalStage grossSalesMoney(Optional<Money> grossSalesMoney) {
            this.grossSalesMoney = grossSalesMoney;
            return this;
        }

        /**
         * <p>The total price of all item variations sold in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code>.
         * It does not include modifiers.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationTotalPriceMoney(Money variationTotalPriceMoney) {
            this.variationTotalPriceMoney = Optional.ofNullable(variationTotalPriceMoney);
            return this;
        }

        /**
         * <p>The total price of all item variations sold in this line item.
         * The price is calculated as <code>base_price_money</code> multiplied by <code>quantity</code>.
         * It does not include modifiers.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "variation_total_price_money", nulls = Nulls.SKIP)
        public _FinalStage variationTotalPriceMoney(Optional<Money> variationTotalPriceMoney) {
            this.variationTotalPriceMoney = variationTotalPriceMoney;
            return this;
        }

        /**
         * <p>The base price for a single unit of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage basePriceMoney(Money basePriceMoney) {
            this.basePriceMoney = Optional.ofNullable(basePriceMoney);
            return this;
        }

        /**
         * <p>The base price for a single unit of the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "base_price_money", nulls = Nulls.SKIP)
        public _FinalStage basePriceMoney(Optional<Money> basePriceMoney) {
            this.basePriceMoney = basePriceMoney;
            return this;
        }

        /**
         * <p>The list of references to service charges applied to this line item. Each
         * <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_id</code> that references the <code>uid</code> of a
         * top-level <code>OrderServiceCharge</code> applied to the line item. On reads, the amount applied is
         * populated.</p>
         * <p>To change the amount of a service charge, modify the referenced top-level service charge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedServiceCharges(
                Nullable<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges) {
            if (appliedServiceCharges.isNull()) {
                this.appliedServiceCharges = null;
            } else if (appliedServiceCharges.isEmpty()) {
                this.appliedServiceCharges = Optional.empty();
            } else {
                this.appliedServiceCharges = Optional.of(appliedServiceCharges.get());
            }
            return this;
        }

        /**
         * <p>The list of references to service charges applied to this line item. Each
         * <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_id</code> that references the <code>uid</code> of a
         * top-level <code>OrderServiceCharge</code> applied to the line item. On reads, the amount applied is
         * populated.</p>
         * <p>To change the amount of a service charge, modify the referenced top-level service charge.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedServiceCharges(List<OrderLineItemAppliedServiceCharge> appliedServiceCharges) {
            this.appliedServiceCharges = Optional.ofNullable(appliedServiceCharges);
            return this;
        }

        /**
         * <p>The list of references to service charges applied to this line item. Each
         * <code>OrderLineItemAppliedServiceCharge</code> has a <code>service_charge_id</code> that references the <code>uid</code> of a
         * top-level <code>OrderServiceCharge</code> applied to the line item. On reads, the amount applied is
         * populated.</p>
         * <p>To change the amount of a service charge, modify the referenced top-level service charge.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_service_charges", nulls = Nulls.SKIP)
        public _FinalStage appliedServiceCharges(
                Optional<List<OrderLineItemAppliedServiceCharge>> appliedServiceCharges) {
            this.appliedServiceCharges = appliedServiceCharges;
            return this;
        }

        /**
         * <p>The list of references to discounts applied to this line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderLineItemDiscounts</code> applied to the line item. On reads, the amount
         * applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedDiscount</code> is automatically created on every line item for all
         * <code>ORDER</code> scoped discounts that are added to the order. <code>OrderLineItemAppliedDiscount</code> records
         * for <code>LINE_ITEM</code> scoped discounts must be added in requests for the discount to apply to any
         * line items.</p>
         * <p>To change the amount of a discount, modify the referenced top-level discount.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedDiscounts(Nullable<List<OrderLineItemAppliedDiscount>> appliedDiscounts) {
            if (appliedDiscounts.isNull()) {
                this.appliedDiscounts = null;
            } else if (appliedDiscounts.isEmpty()) {
                this.appliedDiscounts = Optional.empty();
            } else {
                this.appliedDiscounts = Optional.of(appliedDiscounts.get());
            }
            return this;
        }

        /**
         * <p>The list of references to discounts applied to this line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderLineItemDiscounts</code> applied to the line item. On reads, the amount
         * applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedDiscount</code> is automatically created on every line item for all
         * <code>ORDER</code> scoped discounts that are added to the order. <code>OrderLineItemAppliedDiscount</code> records
         * for <code>LINE_ITEM</code> scoped discounts must be added in requests for the discount to apply to any
         * line items.</p>
         * <p>To change the amount of a discount, modify the referenced top-level discount.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedDiscounts(List<OrderLineItemAppliedDiscount> appliedDiscounts) {
            this.appliedDiscounts = Optional.ofNullable(appliedDiscounts);
            return this;
        }

        /**
         * <p>The list of references to discounts applied to this line item. Each
         * <code>OrderLineItemAppliedDiscount</code> has a <code>discount_uid</code> that references the <code>uid</code> of a top-level
         * <code>OrderLineItemDiscounts</code> applied to the line item. On reads, the amount
         * applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedDiscount</code> is automatically created on every line item for all
         * <code>ORDER</code> scoped discounts that are added to the order. <code>OrderLineItemAppliedDiscount</code> records
         * for <code>LINE_ITEM</code> scoped discounts must be added in requests for the discount to apply to any
         * line items.</p>
         * <p>To change the amount of a discount, modify the referenced top-level discount.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_discounts", nulls = Nulls.SKIP)
        public _FinalStage appliedDiscounts(Optional<List<OrderLineItemAppliedDiscount>> appliedDiscounts) {
            this.appliedDiscounts = appliedDiscounts;
            return this;
        }

        /**
         * <p>The list of references to taxes applied to this line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a
         * top-level <code>OrderLineItemTax</code> applied to the line item. On reads, the
         * amount applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every line
         * item for all <code>ORDER</code> scoped taxes added to the order. <code>OrderLineItemAppliedTax</code>
         * records for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax
         * to apply to any line items.</p>
         * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedTaxes(Nullable<List<OrderLineItemAppliedTax>> appliedTaxes) {
            if (appliedTaxes.isNull()) {
                this.appliedTaxes = null;
            } else if (appliedTaxes.isEmpty()) {
                this.appliedTaxes = Optional.empty();
            } else {
                this.appliedTaxes = Optional.of(appliedTaxes.get());
            }
            return this;
        }

        /**
         * <p>The list of references to taxes applied to this line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a
         * top-level <code>OrderLineItemTax</code> applied to the line item. On reads, the
         * amount applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every line
         * item for all <code>ORDER</code> scoped taxes added to the order. <code>OrderLineItemAppliedTax</code>
         * records for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax
         * to apply to any line items.</p>
         * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage appliedTaxes(List<OrderLineItemAppliedTax> appliedTaxes) {
            this.appliedTaxes = Optional.ofNullable(appliedTaxes);
            return this;
        }

        /**
         * <p>The list of references to taxes applied to this line item. Each
         * <code>OrderLineItemAppliedTax</code> has a <code>tax_uid</code> that references the <code>uid</code> of a
         * top-level <code>OrderLineItemTax</code> applied to the line item. On reads, the
         * amount applied is populated.</p>
         * <p>An <code>OrderLineItemAppliedTax</code> is automatically created on every line
         * item for all <code>ORDER</code> scoped taxes added to the order. <code>OrderLineItemAppliedTax</code>
         * records for <code>LINE_ITEM</code> scoped taxes must be added in requests for the tax
         * to apply to any line items.</p>
         * <p>To change the amount of a tax, modify the referenced top-level tax.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "applied_taxes", nulls = Nulls.SKIP)
        public _FinalStage appliedTaxes(Optional<List<OrderLineItemAppliedTax>> appliedTaxes) {
            this.appliedTaxes = appliedTaxes;
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage modifiers(Nullable<List<OrderLineItemModifier>> modifiers) {
            if (modifiers.isNull()) {
                this.modifiers = null;
            } else if (modifiers.isEmpty()) {
                this.modifiers = Optional.empty();
            } else {
                this.modifiers = Optional.of(modifiers.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage modifiers(List<OrderLineItemModifier> modifiers) {
            this.modifiers = Optional.ofNullable(modifiers);
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogModifier">CatalogModifier</a>s applied to this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "modifiers", nulls = Nulls.SKIP)
        public _FinalStage modifiers(Optional<List<OrderLineItemModifier>> modifiers) {
            this.modifiers = modifiers;
            return this;
        }

        /**
         * <p>Application-defined data attached to this line item. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Nullable<Map<String, Optional<String>>> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        /**
         * <p>Application-defined data attached to this line item. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Optional<String>> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Application-defined data attached to this line item. Metadata fields are intended
         * to store descriptive references or associations with an entity in another system or store brief
         * information about the object. Square does not process this field; it only stores and returns it
         * in relevant API calls. Do not use metadata to store any sensitive information (such as personally
         * identifiable information or card details).</p>
         * <p>Keys written by applications must be 60 characters or less and must be in the character set
         * <code>[a-zA-Z0-9_-]</code>. Entries can also include metadata generated by Square. These keys are prefixed
         * with a namespace, separated from the key with a ':' character.</p>
         * <p>Values have a maximum length of 255 characters.</p>
         * <p>An application can have up to 10 entries per metadata field.</p>
         * <p>Entries written by applications are private and can only be read or modified by the same
         * application.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/metadata">Metadata</a>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Optional<String>>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
         * activation or reloading of a gift card.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemType(OrderLineItemItemType itemType) {
            this.itemType = Optional.ofNullable(itemType);
            return this;
        }

        /**
         * <p>The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
         * activation or reloading of a gift card.
         * See <a href="#type-orderlineitemitemtype">OrderLineItemItemType</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "item_type", nulls = Nulls.SKIP)
        public _FinalStage itemType(Optional<OrderLineItemItemType> itemType) {
            this.itemType = itemType;
            return this;
        }

        /**
         * <p>The name of the variation applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationName(Nullable<String> variationName) {
            if (variationName.isNull()) {
                this.variationName = null;
            } else if (variationName.isEmpty()) {
                this.variationName = Optional.empty();
            } else {
                this.variationName = Optional.of(variationName.get());
            }
            return this;
        }

        /**
         * <p>The name of the variation applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage variationName(String variationName) {
            this.variationName = Optional.ofNullable(variationName);
            return this;
        }

        /**
         * <p>The name of the variation applied to this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "variation_name", nulls = Nulls.SKIP)
        public _FinalStage variationName(Optional<String> variationName) {
            this.variationName = variationName;
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item references.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public _FinalStage catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogItemVariation">CatalogItemVariation</a> ID applied to this line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public _FinalStage catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        /**
         * <p>An optional note associated with the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>An optional note associated with the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * <p>An optional note associated with the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public _FinalStage note(Optional<String> note) {
            this.note = note;
            return this;
        }

        /**
         * <p>The measurement unit and decimal precision that this line item's quantity is measured in.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage quantityUnit(OrderQuantityUnit quantityUnit) {
            this.quantityUnit = Optional.ofNullable(quantityUnit);
            return this;
        }

        /**
         * <p>The measurement unit and decimal precision that this line item's quantity is measured in.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "quantity_unit", nulls = Nulls.SKIP)
        public _FinalStage quantityUnit(Optional<OrderQuantityUnit> quantityUnit) {
            this.quantityUnit = quantityUnit;
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The name of the line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>A unique ID that identifies the line item only within this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>A unique ID that identifies the line item only within this order.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        /**
         * <p>A unique ID that identifies the line item only within this order.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public _FinalStage uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.Override
        public OrderLineItem build() {
            return new OrderLineItem(
                    uid,
                    name,
                    quantity,
                    quantityUnit,
                    note,
                    catalogObjectId,
                    catalogVersion,
                    variationName,
                    itemType,
                    metadata,
                    modifiers,
                    appliedTaxes,
                    appliedDiscounts,
                    appliedServiceCharges,
                    basePriceMoney,
                    variationTotalPriceMoney,
                    grossSalesMoney,
                    totalTaxMoney,
                    totalDiscountMoney,
                    totalMoney,
                    pricingBlocklists,
                    totalServiceChargeMoney,
                    additionalProperties);
        }
    }
}
