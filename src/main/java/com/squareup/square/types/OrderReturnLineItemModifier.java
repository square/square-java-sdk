/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderReturnLineItemModifier.Builder.class)
public final class OrderReturnLineItemModifier {
    private final Optional<String> uid;

    private final Optional<String> sourceModifierUid;

    private final Optional<String> catalogObjectId;

    private final Optional<Long> catalogVersion;

    private final Optional<String> name;

    private final Optional<Money> basePriceMoney;

    private final Optional<Money> totalPriceMoney;

    private final Optional<String> quantity;

    private final Map<String, Object> additionalProperties;

    private OrderReturnLineItemModifier(
            Optional<String> uid,
            Optional<String> sourceModifierUid,
            Optional<String> catalogObjectId,
            Optional<Long> catalogVersion,
            Optional<String> name,
            Optional<Money> basePriceMoney,
            Optional<Money> totalPriceMoney,
            Optional<String> quantity,
            Map<String, Object> additionalProperties) {
        this.uid = uid;
        this.sourceModifierUid = sourceModifierUid;
        this.catalogObjectId = catalogObjectId;
        this.catalogVersion = catalogVersion;
        this.name = name;
        this.basePriceMoney = basePriceMoney;
        this.totalPriceMoney = totalPriceMoney;
        this.quantity = quantity;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the return modifier only within this order.
     */
    @JsonIgnore
    public Optional<String> getUid() {
        if (uid == null) {
            return Optional.empty();
        }
        return uid;
    }

    /**
     * @return The modifier <code>uid</code> from the order's line item that contains the
     * original sale of this line item modifier.
     */
    @JsonIgnore
    public Optional<String> getSourceModifierUid() {
        if (sourceModifierUid == null) {
            return Optional.empty();
        }
        return sourceModifierUid;
    }

    /**
     * @return The catalog object ID referencing <a href="entity:CatalogModifier">CatalogModifier</a>.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The version of the catalog object that this line item modifier references.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    /**
     * @return The name of the item modifier.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The base price for the modifier.
     * <p><code>base_price_money</code> is required for ad hoc modifiers.
     * If both <code>catalog_object_id</code> and <code>base_price_money</code> are set, <code>base_price_money</code> overrides the predefined <a href="entity:CatalogModifier">CatalogModifier</a> price.</p>
     */
    @JsonProperty("base_price_money")
    public Optional<Money> getBasePriceMoney() {
        return basePriceMoney;
    }

    /**
     * @return The total price of the item modifier for its line item.
     * This is the modifier's <code>base_price_money</code> multiplied by the line item's quantity.
     */
    @JsonProperty("total_price_money")
    public Optional<Money> getTotalPriceMoney() {
        return totalPriceMoney;
    }

    /**
     * @return The quantity of the line item modifier. The modifier quantity can be 0 or more.
     * For example, suppose a restaurant offers a cheeseburger on the menu. When a buyer orders
     * this item, the restaurant records the purchase by creating an <code>Order</code> object with a line item
     * for a burger. The line item includes a line item modifier: the name is cheese and the quantity
     * is 1. The buyer has the option to order extra cheese (or no cheese). If the buyer chooses
     * the extra cheese option, the modifier quantity increases to 2. If the buyer does not want
     * any cheese, the modifier quantity is set to 0.
     */
    @JsonIgnore
    public Optional<String> getQuantity() {
        if (quantity == null) {
            return Optional.empty();
        }
        return quantity;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uid")
    private Optional<String> _getUid() {
        return uid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_modifier_uid")
    private Optional<String> _getSourceModifierUid() {
        return sourceModifierUid;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity")
    private Optional<String> _getQuantity() {
        return quantity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderReturnLineItemModifier && equalTo((OrderReturnLineItemModifier) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderReturnLineItemModifier other) {
        return uid.equals(other.uid)
                && sourceModifierUid.equals(other.sourceModifierUid)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogVersion.equals(other.catalogVersion)
                && name.equals(other.name)
                && basePriceMoney.equals(other.basePriceMoney)
                && totalPriceMoney.equals(other.totalPriceMoney)
                && quantity.equals(other.quantity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.uid,
                this.sourceModifierUid,
                this.catalogObjectId,
                this.catalogVersion,
                this.name,
                this.basePriceMoney,
                this.totalPriceMoney,
                this.quantity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> uid = Optional.empty();

        private Optional<String> sourceModifierUid = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Money> basePriceMoney = Optional.empty();

        private Optional<Money> totalPriceMoney = Optional.empty();

        private Optional<String> quantity = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderReturnLineItemModifier other) {
            uid(other.getUid());
            sourceModifierUid(other.getSourceModifierUid());
            catalogObjectId(other.getCatalogObjectId());
            catalogVersion(other.getCatalogVersion());
            name(other.getName());
            basePriceMoney(other.getBasePriceMoney());
            totalPriceMoney(other.getTotalPriceMoney());
            quantity(other.getQuantity());
            return this;
        }

        /**
         * <p>A unique ID that identifies the return modifier only within this order.</p>
         */
        @JsonSetter(value = "uid", nulls = Nulls.SKIP)
        public Builder uid(Optional<String> uid) {
            this.uid = uid;
            return this;
        }

        public Builder uid(String uid) {
            this.uid = Optional.ofNullable(uid);
            return this;
        }

        public Builder uid(Nullable<String> uid) {
            if (uid.isNull()) {
                this.uid = null;
            } else if (uid.isEmpty()) {
                this.uid = Optional.empty();
            } else {
                this.uid = Optional.of(uid.get());
            }
            return this;
        }

        /**
         * <p>The modifier <code>uid</code> from the order's line item that contains the
         * original sale of this line item modifier.</p>
         */
        @JsonSetter(value = "source_modifier_uid", nulls = Nulls.SKIP)
        public Builder sourceModifierUid(Optional<String> sourceModifierUid) {
            this.sourceModifierUid = sourceModifierUid;
            return this;
        }

        public Builder sourceModifierUid(String sourceModifierUid) {
            this.sourceModifierUid = Optional.ofNullable(sourceModifierUid);
            return this;
        }

        public Builder sourceModifierUid(Nullable<String> sourceModifierUid) {
            if (sourceModifierUid.isNull()) {
                this.sourceModifierUid = null;
            } else if (sourceModifierUid.isEmpty()) {
                this.sourceModifierUid = Optional.empty();
            } else {
                this.sourceModifierUid = Optional.of(sourceModifierUid.get());
            }
            return this;
        }

        /**
         * <p>The catalog object ID referencing <a href="entity:CatalogModifier">CatalogModifier</a>.</p>
         */
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The version of the catalog object that this line item modifier references.</p>
         */
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public Builder catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        public Builder catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        public Builder catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        /**
         * <p>The name of the item modifier.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>The base price for the modifier.</p>
         * <p><code>base_price_money</code> is required for ad hoc modifiers.
         * If both <code>catalog_object_id</code> and <code>base_price_money</code> are set, <code>base_price_money</code> overrides the predefined <a href="entity:CatalogModifier">CatalogModifier</a> price.</p>
         */
        @JsonSetter(value = "base_price_money", nulls = Nulls.SKIP)
        public Builder basePriceMoney(Optional<Money> basePriceMoney) {
            this.basePriceMoney = basePriceMoney;
            return this;
        }

        public Builder basePriceMoney(Money basePriceMoney) {
            this.basePriceMoney = Optional.ofNullable(basePriceMoney);
            return this;
        }

        /**
         * <p>The total price of the item modifier for its line item.
         * This is the modifier's <code>base_price_money</code> multiplied by the line item's quantity.</p>
         */
        @JsonSetter(value = "total_price_money", nulls = Nulls.SKIP)
        public Builder totalPriceMoney(Optional<Money> totalPriceMoney) {
            this.totalPriceMoney = totalPriceMoney;
            return this;
        }

        public Builder totalPriceMoney(Money totalPriceMoney) {
            this.totalPriceMoney = Optional.ofNullable(totalPriceMoney);
            return this;
        }

        /**
         * <p>The quantity of the line item modifier. The modifier quantity can be 0 or more.
         * For example, suppose a restaurant offers a cheeseburger on the menu. When a buyer orders
         * this item, the restaurant records the purchase by creating an <code>Order</code> object with a line item
         * for a burger. The line item includes a line item modifier: the name is cheese and the quantity
         * is 1. The buyer has the option to order extra cheese (or no cheese). If the buyer chooses
         * the extra cheese option, the modifier quantity increases to 2. If the buyer does not want
         * any cheese, the modifier quantity is set to 0.</p>
         */
        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<String> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(String quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        public Builder quantity(Nullable<String> quantity) {
            if (quantity.isNull()) {
                this.quantity = null;
            } else if (quantity.isEmpty()) {
                this.quantity = Optional.empty();
            } else {
                this.quantity = Optional.of(quantity.get());
            }
            return this;
        }

        public OrderReturnLineItemModifier build() {
            return new OrderReturnLineItemModifier(
                    uid,
                    sourceModifierUid,
                    catalogObjectId,
                    catalogVersion,
                    name,
                    basePriceMoney,
                    totalPriceMoney,
                    quantity,
                    additionalProperties);
        }
    }
}
