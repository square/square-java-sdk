/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderFulfillmentUpdatedUpdate.Builder.class)
public final class OrderFulfillmentUpdatedUpdate {
    private final Optional<String> fulfillmentUid;

    private final Optional<FulfillmentState> oldState;

    private final Optional<FulfillmentState> newState;

    private final Map<String, Object> additionalProperties;

    private OrderFulfillmentUpdatedUpdate(
            Optional<String> fulfillmentUid,
            Optional<FulfillmentState> oldState,
            Optional<FulfillmentState> newState,
            Map<String, Object> additionalProperties) {
        this.fulfillmentUid = fulfillmentUid;
        this.oldState = oldState;
        this.newState = newState;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID that identifies the fulfillment only within this order.
     */
    @JsonIgnore
    public Optional<String> getFulfillmentUid() {
        if (fulfillmentUid == null) {
            return Optional.empty();
        }
        return fulfillmentUid;
    }

    /**
     * @return The state of the fulfillment before the change.
     * The state is not populated if the fulfillment is created with this new <code>Order</code> version.
     */
    @JsonProperty("old_state")
    public Optional<FulfillmentState> getOldState() {
        return oldState;
    }

    /**
     * @return The state of the fulfillment after the change. The state might be equal to <code>old_state</code> if a non-state
     * field was changed on the fulfillment (such as the tracking number).
     */
    @JsonProperty("new_state")
    public Optional<FulfillmentState> getNewState() {
        return newState;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fulfillment_uid")
    private Optional<String> _getFulfillmentUid() {
        return fulfillmentUid;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderFulfillmentUpdatedUpdate && equalTo((OrderFulfillmentUpdatedUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderFulfillmentUpdatedUpdate other) {
        return fulfillmentUid.equals(other.fulfillmentUid)
                && oldState.equals(other.oldState)
                && newState.equals(other.newState);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fulfillmentUid, this.oldState, this.newState);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fulfillmentUid = Optional.empty();

        private Optional<FulfillmentState> oldState = Optional.empty();

        private Optional<FulfillmentState> newState = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderFulfillmentUpdatedUpdate other) {
            fulfillmentUid(other.getFulfillmentUid());
            oldState(other.getOldState());
            newState(other.getNewState());
            return this;
        }

        /**
         * <p>A unique ID that identifies the fulfillment only within this order.</p>
         */
        @JsonSetter(value = "fulfillment_uid", nulls = Nulls.SKIP)
        public Builder fulfillmentUid(Optional<String> fulfillmentUid) {
            this.fulfillmentUid = fulfillmentUid;
            return this;
        }

        public Builder fulfillmentUid(String fulfillmentUid) {
            this.fulfillmentUid = Optional.ofNullable(fulfillmentUid);
            return this;
        }

        public Builder fulfillmentUid(Nullable<String> fulfillmentUid) {
            if (fulfillmentUid.isNull()) {
                this.fulfillmentUid = null;
            } else if (fulfillmentUid.isEmpty()) {
                this.fulfillmentUid = Optional.empty();
            } else {
                this.fulfillmentUid = Optional.of(fulfillmentUid.get());
            }
            return this;
        }

        /**
         * <p>The state of the fulfillment before the change.
         * The state is not populated if the fulfillment is created with this new <code>Order</code> version.</p>
         */
        @JsonSetter(value = "old_state", nulls = Nulls.SKIP)
        public Builder oldState(Optional<FulfillmentState> oldState) {
            this.oldState = oldState;
            return this;
        }

        public Builder oldState(FulfillmentState oldState) {
            this.oldState = Optional.ofNullable(oldState);
            return this;
        }

        /**
         * <p>The state of the fulfillment after the change. The state might be equal to <code>old_state</code> if a non-state
         * field was changed on the fulfillment (such as the tracking number).</p>
         */
        @JsonSetter(value = "new_state", nulls = Nulls.SKIP)
        public Builder newState(Optional<FulfillmentState> newState) {
            this.newState = newState;
            return this;
        }

        public Builder newState(FulfillmentState newState) {
            this.newState = Optional.ofNullable(newState);
            return this;
        }

        public OrderFulfillmentUpdatedUpdate build() {
            return new OrderFulfillmentUpdatedUpdate(fulfillmentUid, oldState, newState, additionalProperties);
        }
    }
}
