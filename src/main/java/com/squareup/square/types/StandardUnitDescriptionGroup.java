/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StandardUnitDescriptionGroup.Builder.class)
public final class StandardUnitDescriptionGroup {
    private final Optional<List<StandardUnitDescription>> standardUnitDescriptions;

    private final Optional<String> languageCode;

    private final Map<String, Object> additionalProperties;

    private StandardUnitDescriptionGroup(
            Optional<List<StandardUnitDescription>> standardUnitDescriptions,
            Optional<String> languageCode,
            Map<String, Object> additionalProperties) {
        this.standardUnitDescriptions = standardUnitDescriptions;
        this.languageCode = languageCode;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of standard (non-custom) measurement units in this description group.
     */
    @JsonIgnore
    public Optional<List<StandardUnitDescription>> getStandardUnitDescriptions() {
        if (standardUnitDescriptions == null) {
            return Optional.empty();
        }
        return standardUnitDescriptions;
    }

    /**
     * @return IETF language tag.
     */
    @JsonIgnore
    public Optional<String> getLanguageCode() {
        if (languageCode == null) {
            return Optional.empty();
        }
        return languageCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("standard_unit_descriptions")
    private Optional<List<StandardUnitDescription>> _getStandardUnitDescriptions() {
        return standardUnitDescriptions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("language_code")
    private Optional<String> _getLanguageCode() {
        return languageCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StandardUnitDescriptionGroup && equalTo((StandardUnitDescriptionGroup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StandardUnitDescriptionGroup other) {
        return standardUnitDescriptions.equals(other.standardUnitDescriptions)
                && languageCode.equals(other.languageCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.standardUnitDescriptions, this.languageCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<StandardUnitDescription>> standardUnitDescriptions = Optional.empty();

        private Optional<String> languageCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(StandardUnitDescriptionGroup other) {
            standardUnitDescriptions(other.getStandardUnitDescriptions());
            languageCode(other.getLanguageCode());
            return this;
        }

        /**
         * <p>List of standard (non-custom) measurement units in this description group.</p>
         */
        @JsonSetter(value = "standard_unit_descriptions", nulls = Nulls.SKIP)
        public Builder standardUnitDescriptions(Optional<List<StandardUnitDescription>> standardUnitDescriptions) {
            this.standardUnitDescriptions = standardUnitDescriptions;
            return this;
        }

        public Builder standardUnitDescriptions(List<StandardUnitDescription> standardUnitDescriptions) {
            this.standardUnitDescriptions = Optional.ofNullable(standardUnitDescriptions);
            return this;
        }

        public Builder standardUnitDescriptions(Nullable<List<StandardUnitDescription>> standardUnitDescriptions) {
            if (standardUnitDescriptions.isNull()) {
                this.standardUnitDescriptions = null;
            } else if (standardUnitDescriptions.isEmpty()) {
                this.standardUnitDescriptions = Optional.empty();
            } else {
                this.standardUnitDescriptions = Optional.of(standardUnitDescriptions.get());
            }
            return this;
        }

        /**
         * <p>IETF language tag.</p>
         */
        @JsonSetter(value = "language_code", nulls = Nulls.SKIP)
        public Builder languageCode(Optional<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        public Builder languageCode(Nullable<String> languageCode) {
            if (languageCode.isNull()) {
                this.languageCode = null;
            } else if (languageCode.isEmpty()) {
                this.languageCode = Optional.empty();
            } else {
                this.languageCode = Optional.of(languageCode.get());
            }
            return this;
        }

        public StandardUnitDescriptionGroup build() {
            return new StandardUnitDescriptionGroup(standardUnitDescriptions, languageCode, additionalProperties);
        }
    }
}
