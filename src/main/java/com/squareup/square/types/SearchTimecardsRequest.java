/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchTimecardsRequest.Builder.class)
public final class SearchTimecardsRequest {
    private final Optional<TimecardQuery> query;

    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Map<String, Object> additionalProperties;

    private SearchTimecardsRequest(
            Optional<TimecardQuery> query,
            Optional<Integer> limit,
            Optional<String> cursor,
            Map<String, Object> additionalProperties) {
        this.query = query;
        this.limit = limit;
        this.cursor = cursor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Query filters.
     */
    @JsonProperty("query")
    public Optional<TimecardQuery> getQuery() {
        return query;
    }

    /**
     * @return The number of resources in a page (200 by default).
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return An opaque cursor for fetching the next page.
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchTimecardsRequest && equalTo((SearchTimecardsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchTimecardsRequest other) {
        return query.equals(other.query) && limit.equals(other.limit) && cursor.equals(other.cursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.limit, this.cursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TimecardQuery> query = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchTimecardsRequest other) {
            query(other.getQuery());
            limit(other.getLimit());
            cursor(other.getCursor());
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<TimecardQuery> query) {
            this.query = query;
            return this;
        }

        public Builder query(TimecardQuery query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public SearchTimecardsRequest build() {
            return new SearchTimecardsRequest(query, limit, cursor, additionalProperties);
        }
    }
}
