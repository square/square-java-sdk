/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateGiftCardRequest.Builder.class)
public final class CreateGiftCardRequest {
    private final String idempotencyKey;

    private final String locationId;

    private final GiftCard giftCard;

    private final Map<String, Object> additionalProperties;

    private CreateGiftCardRequest(
            String idempotencyKey, String locationId, GiftCard giftCard, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.locationId = locationId;
        this.giftCard = giftCard;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier for this request, used to ensure idempotency. For more information,
     * see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The ID of the <a href="entity:Location">location</a> where the gift card should be registered for
     * reporting purposes. Gift cards can be redeemed at any of the seller's locations.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The gift card to create. The <code>type</code> field is required for this request. The <code>gan_source</code>
     * and <code>gan</code> fields are included as follows:
     * <p>To direct Square to generate a 16-digit GAN, omit <code>gan_source</code> and <code>gan</code>.</p>
     * <p>To provide a custom GAN, include <code>gan_source</code> and <code>gan</code>.</p>
     * <ul>
     * <li>For <code>gan_source</code>, specify <code>OTHER</code>.</li>
     * <li>For <code>gan</code>, provide a custom GAN containing 8 to 20 alphanumeric characters. The GAN must be
     * unique for the seller and cannot start with the same bank identification number (BIN) as major
     * credit cards. Do not use GANs that are easy to guess (such as 12345678) because they greatly
     * increase the risk of fraud. It is the responsibility of the developer to ensure the security
     * of their custom GANs. For more information, see
     * <a href="https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#custom-gans">Custom GANs</a>.</li>
     * </ul>
     * <p>To register an unused, physical gift card that the seller previously ordered from Square,
     * include <code>gan</code> and provide the GAN that is printed on the gift card.</p>
     */
    @JsonProperty("gift_card")
    public GiftCard getGiftCard() {
        return giftCard;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateGiftCardRequest && equalTo((CreateGiftCardRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateGiftCardRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && locationId.equals(other.locationId)
                && giftCard.equals(other.giftCard);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.locationId, this.giftCard);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique identifier for this request, used to ensure idempotency. For more information,
         * see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         */
        LocationIdStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(CreateGiftCardRequest other);
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the <a href="entity:Location">location</a> where the gift card should be registered for
         * reporting purposes. Gift cards can be redeemed at any of the seller's locations.</p>
         */
        GiftCardStage locationId(@NotNull String locationId);
    }

    public interface GiftCardStage {
        /**
         * <p>The gift card to create. The <code>type</code> field is required for this request. The <code>gan_source</code>
         * and <code>gan</code> fields are included as follows:</p>
         * <p>To direct Square to generate a 16-digit GAN, omit <code>gan_source</code> and <code>gan</code>.</p>
         * <p>To provide a custom GAN, include <code>gan_source</code> and <code>gan</code>.</p>
         * <ul>
         * <li>For <code>gan_source</code>, specify <code>OTHER</code>.</li>
         * <li>For <code>gan</code>, provide a custom GAN containing 8 to 20 alphanumeric characters. The GAN must be
         * unique for the seller and cannot start with the same bank identification number (BIN) as major
         * credit cards. Do not use GANs that are easy to guess (such as 12345678) because they greatly
         * increase the risk of fraud. It is the responsibility of the developer to ensure the security
         * of their custom GANs. For more information, see
         * <a href="https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#custom-gans">Custom GANs</a>.</li>
         * </ul>
         * <p>To register an unused, physical gift card that the seller previously ordered from Square,
         * include <code>gan</code> and provide the GAN that is printed on the gift card.</p>
         */
        _FinalStage giftCard(@NotNull GiftCard giftCard);
    }

    public interface _FinalStage {
        CreateGiftCardRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, LocationIdStage, GiftCardStage, _FinalStage {
        private String idempotencyKey;

        private String locationId;

        private GiftCard giftCard;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateGiftCardRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            locationId(other.getLocationId());
            giftCard(other.getGiftCard());
            return this;
        }

        /**
         * <p>A unique identifier for this request, used to ensure idempotency. For more information,
         * see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * <p>A unique identifier for this request, used to ensure idempotency. For more information,
         * see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public LocationIdStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The ID of the <a href="entity:Location">location</a> where the gift card should be registered for
         * reporting purposes. Gift cards can be redeemed at any of the seller's locations.</p>
         * <p>The ID of the <a href="entity:Location">location</a> where the gift card should be registered for
         * reporting purposes. Gift cards can be redeemed at any of the seller's locations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public GiftCardStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>The gift card to create. The <code>type</code> field is required for this request. The <code>gan_source</code>
         * and <code>gan</code> fields are included as follows:</p>
         * <p>To direct Square to generate a 16-digit GAN, omit <code>gan_source</code> and <code>gan</code>.</p>
         * <p>To provide a custom GAN, include <code>gan_source</code> and <code>gan</code>.</p>
         * <ul>
         * <li>For <code>gan_source</code>, specify <code>OTHER</code>.</li>
         * <li>For <code>gan</code>, provide a custom GAN containing 8 to 20 alphanumeric characters. The GAN must be
         * unique for the seller and cannot start with the same bank identification number (BIN) as major
         * credit cards. Do not use GANs that are easy to guess (such as 12345678) because they greatly
         * increase the risk of fraud. It is the responsibility of the developer to ensure the security
         * of their custom GANs. For more information, see
         * <a href="https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#custom-gans">Custom GANs</a>.</li>
         * </ul>
         * <p>To register an unused, physical gift card that the seller previously ordered from Square,
         * include <code>gan</code> and provide the GAN that is printed on the gift card.</p>
         * <p>The gift card to create. The <code>type</code> field is required for this request. The <code>gan_source</code>
         * and <code>gan</code> fields are included as follows:</p>
         * <p>To direct Square to generate a 16-digit GAN, omit <code>gan_source</code> and <code>gan</code>.</p>
         * <p>To provide a custom GAN, include <code>gan_source</code> and <code>gan</code>.</p>
         * <ul>
         * <li>For <code>gan_source</code>, specify <code>OTHER</code>.</li>
         * <li>For <code>gan</code>, provide a custom GAN containing 8 to 20 alphanumeric characters. The GAN must be
         * unique for the seller and cannot start with the same bank identification number (BIN) as major
         * credit cards. Do not use GANs that are easy to guess (such as 12345678) because they greatly
         * increase the risk of fraud. It is the responsibility of the developer to ensure the security
         * of their custom GANs. For more information, see
         * <a href="https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#custom-gans">Custom GANs</a>.</li>
         * </ul>
         * <p>To register an unused, physical gift card that the seller previously ordered from Square,
         * include <code>gan</code> and provide the GAN that is printed on the gift card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("gift_card")
        public _FinalStage giftCard(@NotNull GiftCard giftCard) {
            this.giftCard = Objects.requireNonNull(giftCard, "giftCard must not be null");
            return this;
        }

        @java.lang.Override
        public CreateGiftCardRequest build() {
            return new CreateGiftCardRequest(idempotencyKey, locationId, giftCard, additionalProperties);
        }
    }
}
