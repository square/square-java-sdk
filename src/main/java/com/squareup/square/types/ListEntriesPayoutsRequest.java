/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListEntriesPayoutsRequest.Builder.class)
public final class ListEntriesPayoutsRequest {
    private final String payoutId;

    private final Optional<SortOrder> sortOrder;

    private final Optional<String> cursor;

    private final Optional<Integer> limit;

    private final Map<String, Object> additionalProperties;

    private ListEntriesPayoutsRequest(
            String payoutId,
            Optional<SortOrder> sortOrder,
            Optional<String> cursor,
            Optional<Integer> limit,
            Map<String, Object> additionalProperties) {
        this.payoutId = payoutId;
        this.sortOrder = sortOrder;
        this.cursor = cursor;
        this.limit = limit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the payout to retrieve the information for.
     */
    @JsonProperty("payout_id")
    public String getPayoutId() {
        return payoutId;
    }

    /**
     * @return The order in which payout entries are listed.
     */
    @JsonIgnore
    public Optional<SortOrder> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for the original query.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
     * If request parameters change between requests, subsequent results may contain duplicates or missing records.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The maximum number of results to be returned in a single page.
     * It is possible to receive fewer results than the specified limit on a given page.
     * The default value of 100 is also the maximum allowed value. If the provided value is
     * greater than 100, it is ignored and the default value is used instead.
     * Default: <code>100</code>
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<SortOrder> _getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListEntriesPayoutsRequest && equalTo((ListEntriesPayoutsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListEntriesPayoutsRequest other) {
        return payoutId.equals(other.payoutId)
                && sortOrder.equals(other.sortOrder)
                && cursor.equals(other.cursor)
                && limit.equals(other.limit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.payoutId, this.sortOrder, this.cursor, this.limit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PayoutIdStage builder() {
        return new Builder();
    }

    public interface PayoutIdStage {
        _FinalStage payoutId(@NotNull String payoutId);

        Builder from(ListEntriesPayoutsRequest other);
    }

    public interface _FinalStage {
        ListEntriesPayoutsRequest build();

        _FinalStage sortOrder(Optional<SortOrder> sortOrder);

        _FinalStage sortOrder(SortOrder sortOrder);

        _FinalStage sortOrder(Nullable<SortOrder> sortOrder);

        _FinalStage cursor(Optional<String> cursor);

        _FinalStage cursor(String cursor);

        _FinalStage cursor(Nullable<String> cursor);

        _FinalStage limit(Optional<Integer> limit);

        _FinalStage limit(Integer limit);

        _FinalStage limit(Nullable<Integer> limit);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PayoutIdStage, _FinalStage {
        private String payoutId;

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<SortOrder> sortOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListEntriesPayoutsRequest other) {
            payoutId(other.getPayoutId());
            sortOrder(other.getSortOrder());
            cursor(other.getCursor());
            limit(other.getLimit());
            return this;
        }

        /**
         * <p>The ID of the payout to retrieve the information for.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("payout_id")
        public _FinalStage payoutId(@NotNull String payoutId) {
            this.payoutId = Objects.requireNonNull(payoutId, "payoutId must not be null");
            return this;
        }

        /**
         * <p>The maximum number of results to be returned in a single page.
         * It is possible to receive fewer results than the specified limit on a given page.
         * The default value of 100 is also the maximum allowed value. If the provided value is
         * greater than 100, it is ignored and the default value is used instead.
         * Default: <code>100</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>The maximum number of results to be returned in a single page.
         * It is possible to receive fewer results than the specified limit on a given page.
         * The default value of 100 is also the maximum allowed value. If the provided value is
         * greater than 100, it is ignored and the default value is used instead.
         * Default: <code>100</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public _FinalStage limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
         * If request parameters change between requests, subsequent results may contain duplicates or missing records.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.
         * If request parameters change between requests, subsequent results may contain duplicates or missing records.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public _FinalStage cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        /**
         * <p>The order in which payout entries are listed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(Nullable<SortOrder> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        /**
         * <p>The order in which payout entries are listed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public _FinalStage sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        @java.lang.Override
        public ListEntriesPayoutsRequest build() {
            return new ListEntriesPayoutsRequest(payoutId, sortOrder, cursor, limit, additionalProperties);
        }
    }
}
