/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Customer.Builder.class)
public final class Customer {
    private final Optional<String> id;

    private final Optional<String> createdAt;

    private final Optional<String> updatedAt;

    private final Optional<String> givenName;

    private final Optional<String> familyName;

    private final Optional<String> nickname;

    private final Optional<String> companyName;

    private final Optional<String> emailAddress;

    private final Optional<Address> address;

    private final Optional<String> phoneNumber;

    private final Optional<String> birthday;

    private final Optional<String> referenceId;

    private final Optional<String> note;

    private final Optional<CustomerPreferences> preferences;

    private final Optional<CustomerCreationSource> creationSource;

    private final Optional<List<String>> groupIds;

    private final Optional<List<String>> segmentIds;

    private final Optional<Long> version;

    private final Optional<CustomerTaxIds> taxIds;

    private final Map<String, Object> additionalProperties;

    private Customer(
            Optional<String> id,
            Optional<String> createdAt,
            Optional<String> updatedAt,
            Optional<String> givenName,
            Optional<String> familyName,
            Optional<String> nickname,
            Optional<String> companyName,
            Optional<String> emailAddress,
            Optional<Address> address,
            Optional<String> phoneNumber,
            Optional<String> birthday,
            Optional<String> referenceId,
            Optional<String> note,
            Optional<CustomerPreferences> preferences,
            Optional<CustomerCreationSource> creationSource,
            Optional<List<String>> groupIds,
            Optional<List<String>> segmentIds,
            Optional<Long> version,
            Optional<CustomerTaxIds> taxIds,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.givenName = givenName;
        this.familyName = familyName;
        this.nickname = nickname;
        this.companyName = companyName;
        this.emailAddress = emailAddress;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.birthday = birthday;
        this.referenceId = referenceId;
        this.note = note;
        this.preferences = preferences;
        this.creationSource = creationSource;
        this.groupIds = groupIds;
        this.segmentIds = segmentIds;
        this.version = version;
        this.taxIds = taxIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique Square-assigned ID for the customer profile.
     * <p>If you need this ID for an API request, use the ID returned when you created the customer profile or call the <a href="api-endpoint:Customers-SearchCustomers">SearchCustomers</a>
     * or <a href="api-endpoint:Customers-ListCustomers">ListCustomers</a> endpoint.</p>
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The timestamp when the customer profile was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the customer profile was last updated, in RFC 3339 format.
     */
    @JsonProperty("updated_at")
    public Optional<String> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The given name (that is, the first name) associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getGivenName() {
        if (givenName == null) {
            return Optional.empty();
        }
        return givenName;
    }

    /**
     * @return The family name (that is, the last name) associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getFamilyName() {
        if (familyName == null) {
            return Optional.empty();
        }
        return familyName;
    }

    /**
     * @return A nickname for the customer profile.
     */
    @JsonIgnore
    public Optional<String> getNickname() {
        if (nickname == null) {
            return Optional.empty();
        }
        return nickname;
    }

    /**
     * @return A business name associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getCompanyName() {
        if (companyName == null) {
            return Optional.empty();
        }
        return companyName;
    }

    /**
     * @return The email address associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getEmailAddress() {
        if (emailAddress == null) {
            return Optional.empty();
        }
        return emailAddress;
    }

    /**
     * @return The physical address associated with the customer profile.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return The phone number associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getPhoneNumber() {
        if (phoneNumber == null) {
            return Optional.empty();
        }
        return phoneNumber;
    }

    /**
     * @return The birthday associated with the customer profile, in <code>YYYY-MM-DD</code> format. For example, <code>1998-09-21</code>
     * represents September 21, 1998, and <code>0000-09-21</code> represents September 21 (without a birth year).
     */
    @JsonIgnore
    public Optional<String> getBirthday() {
        if (birthday == null) {
            return Optional.empty();
        }
        return birthday;
    }

    /**
     * @return An optional second ID used to associate the customer profile with an
     * entity in another system.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return A custom note associated with the customer profile.
     */
    @JsonIgnore
    public Optional<String> getNote() {
        if (note == null) {
            return Optional.empty();
        }
        return note;
    }

    /**
     * @return Represents general customer preferences.
     */
    @JsonProperty("preferences")
    public Optional<CustomerPreferences> getPreferences() {
        return preferences;
    }

    /**
     * @return The method used to create the customer profile.
     * See <a href="#type-customercreationsource">CustomerCreationSource</a> for possible values
     */
    @JsonProperty("creation_source")
    public Optional<CustomerCreationSource> getCreationSource() {
        return creationSource;
    }

    /**
     * @return The IDs of <a href="entity:CustomerGroup">customer groups</a> the customer belongs to.
     */
    @JsonIgnore
    public Optional<List<String>> getGroupIds() {
        if (groupIds == null) {
            return Optional.empty();
        }
        return groupIds;
    }

    /**
     * @return The IDs of <a href="entity:CustomerSegment">customer segments</a> the customer belongs to.
     */
    @JsonIgnore
    public Optional<List<String>> getSegmentIds() {
        if (segmentIds == null) {
            return Optional.empty();
        }
        return segmentIds;
    }

    /**
     * @return The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership.
     */
    @JsonProperty("version")
    public Optional<Long> getVersion() {
        return version;
    }

    /**
     * @return The tax ID associated with the customer profile. This field is present only for customers of sellers in EU countries or the United Kingdom.
     * For more information, see <a href="https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids">Customer tax IDs</a>.
     */
    @JsonProperty("tax_ids")
    public Optional<CustomerTaxIds> getTaxIds() {
        return taxIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("given_name")
    private Optional<String> _getGivenName() {
        return givenName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("family_name")
    private Optional<String> _getFamilyName() {
        return familyName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nickname")
    private Optional<String> _getNickname() {
        return nickname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("company_name")
    private Optional<String> _getCompanyName() {
        return companyName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email_address")
    private Optional<String> _getEmailAddress() {
        return emailAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phone_number")
    private Optional<String> _getPhoneNumber() {
        return phoneNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("birthday")
    private Optional<String> _getBirthday() {
        return birthday;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("note")
    private Optional<String> _getNote() {
        return note;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("group_ids")
    private Optional<List<String>> _getGroupIds() {
        return groupIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("segment_ids")
    private Optional<List<String>> _getSegmentIds() {
        return segmentIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Customer && equalTo((Customer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Customer other) {
        return id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && givenName.equals(other.givenName)
                && familyName.equals(other.familyName)
                && nickname.equals(other.nickname)
                && companyName.equals(other.companyName)
                && emailAddress.equals(other.emailAddress)
                && address.equals(other.address)
                && phoneNumber.equals(other.phoneNumber)
                && birthday.equals(other.birthday)
                && referenceId.equals(other.referenceId)
                && note.equals(other.note)
                && preferences.equals(other.preferences)
                && creationSource.equals(other.creationSource)
                && groupIds.equals(other.groupIds)
                && segmentIds.equals(other.segmentIds)
                && version.equals(other.version)
                && taxIds.equals(other.taxIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.createdAt,
                this.updatedAt,
                this.givenName,
                this.familyName,
                this.nickname,
                this.companyName,
                this.emailAddress,
                this.address,
                this.phoneNumber,
                this.birthday,
                this.referenceId,
                this.note,
                this.preferences,
                this.creationSource,
                this.groupIds,
                this.segmentIds,
                this.version,
                this.taxIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> givenName = Optional.empty();

        private Optional<String> familyName = Optional.empty();

        private Optional<String> nickname = Optional.empty();

        private Optional<String> companyName = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> birthday = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> note = Optional.empty();

        private Optional<CustomerPreferences> preferences = Optional.empty();

        private Optional<CustomerCreationSource> creationSource = Optional.empty();

        private Optional<List<String>> groupIds = Optional.empty();

        private Optional<List<String>> segmentIds = Optional.empty();

        private Optional<Long> version = Optional.empty();

        private Optional<CustomerTaxIds> taxIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Customer other) {
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            givenName(other.getGivenName());
            familyName(other.getFamilyName());
            nickname(other.getNickname());
            companyName(other.getCompanyName());
            emailAddress(other.getEmailAddress());
            address(other.getAddress());
            phoneNumber(other.getPhoneNumber());
            birthday(other.getBirthday());
            referenceId(other.getReferenceId());
            note(other.getNote());
            preferences(other.getPreferences());
            creationSource(other.getCreationSource());
            groupIds(other.getGroupIds());
            segmentIds(other.getSegmentIds());
            version(other.getVersion());
            taxIds(other.getTaxIds());
            return this;
        }

        /**
         * <p>A unique Square-assigned ID for the customer profile.</p>
         * <p>If you need this ID for an API request, use the ID returned when you created the customer profile or call the <a href="api-endpoint:Customers-SearchCustomers">SearchCustomers</a>
         * or <a href="api-endpoint:Customers-ListCustomers">ListCustomers</a> endpoint.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The timestamp when the customer profile was created, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The timestamp when the customer profile was last updated, in RFC 3339 format.</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<String> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The given name (that is, the first name) associated with the customer profile.</p>
         */
        @JsonSetter(value = "given_name", nulls = Nulls.SKIP)
        public Builder givenName(Optional<String> givenName) {
            this.givenName = givenName;
            return this;
        }

        public Builder givenName(String givenName) {
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        public Builder givenName(Nullable<String> givenName) {
            if (givenName.isNull()) {
                this.givenName = null;
            } else if (givenName.isEmpty()) {
                this.givenName = Optional.empty();
            } else {
                this.givenName = Optional.of(givenName.get());
            }
            return this;
        }

        /**
         * <p>The family name (that is, the last name) associated with the customer profile.</p>
         */
        @JsonSetter(value = "family_name", nulls = Nulls.SKIP)
        public Builder familyName(Optional<String> familyName) {
            this.familyName = familyName;
            return this;
        }

        public Builder familyName(String familyName) {
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        public Builder familyName(Nullable<String> familyName) {
            if (familyName.isNull()) {
                this.familyName = null;
            } else if (familyName.isEmpty()) {
                this.familyName = Optional.empty();
            } else {
                this.familyName = Optional.of(familyName.get());
            }
            return this;
        }

        /**
         * <p>A nickname for the customer profile.</p>
         */
        @JsonSetter(value = "nickname", nulls = Nulls.SKIP)
        public Builder nickname(Optional<String> nickname) {
            this.nickname = nickname;
            return this;
        }

        public Builder nickname(String nickname) {
            this.nickname = Optional.ofNullable(nickname);
            return this;
        }

        public Builder nickname(Nullable<String> nickname) {
            if (nickname.isNull()) {
                this.nickname = null;
            } else if (nickname.isEmpty()) {
                this.nickname = Optional.empty();
            } else {
                this.nickname = Optional.of(nickname.get());
            }
            return this;
        }

        /**
         * <p>A business name associated with the customer profile.</p>
         */
        @JsonSetter(value = "company_name", nulls = Nulls.SKIP)
        public Builder companyName(Optional<String> companyName) {
            this.companyName = companyName;
            return this;
        }

        public Builder companyName(String companyName) {
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        public Builder companyName(Nullable<String> companyName) {
            if (companyName.isNull()) {
                this.companyName = null;
            } else if (companyName.isEmpty()) {
                this.companyName = Optional.empty();
            } else {
                this.companyName = Optional.of(companyName.get());
            }
            return this;
        }

        /**
         * <p>The email address associated with the customer profile.</p>
         */
        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        public Builder emailAddress(Nullable<String> emailAddress) {
            if (emailAddress.isNull()) {
                this.emailAddress = null;
            } else if (emailAddress.isEmpty()) {
                this.emailAddress = Optional.empty();
            } else {
                this.emailAddress = Optional.of(emailAddress.get());
            }
            return this;
        }

        /**
         * <p>The physical address associated with the customer profile.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>The phone number associated with the customer profile.</p>
         */
        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Nullable<String> phoneNumber) {
            if (phoneNumber.isNull()) {
                this.phoneNumber = null;
            } else if (phoneNumber.isEmpty()) {
                this.phoneNumber = Optional.empty();
            } else {
                this.phoneNumber = Optional.of(phoneNumber.get());
            }
            return this;
        }

        /**
         * <p>The birthday associated with the customer profile, in <code>YYYY-MM-DD</code> format. For example, <code>1998-09-21</code>
         * represents September 21, 1998, and <code>0000-09-21</code> represents September 21 (without a birth year).</p>
         */
        @JsonSetter(value = "birthday", nulls = Nulls.SKIP)
        public Builder birthday(Optional<String> birthday) {
            this.birthday = birthday;
            return this;
        }

        public Builder birthday(String birthday) {
            this.birthday = Optional.ofNullable(birthday);
            return this;
        }

        public Builder birthday(Nullable<String> birthday) {
            if (birthday.isNull()) {
                this.birthday = null;
            } else if (birthday.isEmpty()) {
                this.birthday = Optional.empty();
            } else {
                this.birthday = Optional.of(birthday.get());
            }
            return this;
        }

        /**
         * <p>An optional second ID used to associate the customer profile with an
         * entity in another system.</p>
         */
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>A custom note associated with the customer profile.</p>
         */
        @JsonSetter(value = "note", nulls = Nulls.SKIP)
        public Builder note(Optional<String> note) {
            this.note = note;
            return this;
        }

        public Builder note(String note) {
            this.note = Optional.ofNullable(note);
            return this;
        }

        public Builder note(Nullable<String> note) {
            if (note.isNull()) {
                this.note = null;
            } else if (note.isEmpty()) {
                this.note = Optional.empty();
            } else {
                this.note = Optional.of(note.get());
            }
            return this;
        }

        /**
         * <p>Represents general customer preferences.</p>
         */
        @JsonSetter(value = "preferences", nulls = Nulls.SKIP)
        public Builder preferences(Optional<CustomerPreferences> preferences) {
            this.preferences = preferences;
            return this;
        }

        public Builder preferences(CustomerPreferences preferences) {
            this.preferences = Optional.ofNullable(preferences);
            return this;
        }

        /**
         * <p>The method used to create the customer profile.
         * See <a href="#type-customercreationsource">CustomerCreationSource</a> for possible values</p>
         */
        @JsonSetter(value = "creation_source", nulls = Nulls.SKIP)
        public Builder creationSource(Optional<CustomerCreationSource> creationSource) {
            this.creationSource = creationSource;
            return this;
        }

        public Builder creationSource(CustomerCreationSource creationSource) {
            this.creationSource = Optional.ofNullable(creationSource);
            return this;
        }

        /**
         * <p>The IDs of <a href="entity:CustomerGroup">customer groups</a> the customer belongs to.</p>
         */
        @JsonSetter(value = "group_ids", nulls = Nulls.SKIP)
        public Builder groupIds(Optional<List<String>> groupIds) {
            this.groupIds = groupIds;
            return this;
        }

        public Builder groupIds(List<String> groupIds) {
            this.groupIds = Optional.ofNullable(groupIds);
            return this;
        }

        public Builder groupIds(Nullable<List<String>> groupIds) {
            if (groupIds.isNull()) {
                this.groupIds = null;
            } else if (groupIds.isEmpty()) {
                this.groupIds = Optional.empty();
            } else {
                this.groupIds = Optional.of(groupIds.get());
            }
            return this;
        }

        /**
         * <p>The IDs of <a href="entity:CustomerSegment">customer segments</a> the customer belongs to.</p>
         */
        @JsonSetter(value = "segment_ids", nulls = Nulls.SKIP)
        public Builder segmentIds(Optional<List<String>> segmentIds) {
            this.segmentIds = segmentIds;
            return this;
        }

        public Builder segmentIds(List<String> segmentIds) {
            this.segmentIds = Optional.ofNullable(segmentIds);
            return this;
        }

        public Builder segmentIds(Nullable<List<String>> segmentIds) {
            if (segmentIds.isNull()) {
                this.segmentIds = null;
            } else if (segmentIds.isEmpty()) {
                this.segmentIds = Optional.empty();
            } else {
                this.segmentIds = Optional.of(segmentIds.get());
            }
            return this;
        }

        /**
         * <p>The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Long> version) {
            this.version = version;
            return this;
        }

        public Builder version(Long version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>The tax ID associated with the customer profile. This field is present only for customers of sellers in EU countries or the United Kingdom.
         * For more information, see <a href="https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids">Customer tax IDs</a>.</p>
         */
        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(Optional<CustomerTaxIds> taxIds) {
            this.taxIds = taxIds;
            return this;
        }

        public Builder taxIds(CustomerTaxIds taxIds) {
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        public Customer build() {
            return new Customer(
                    id,
                    createdAt,
                    updatedAt,
                    givenName,
                    familyName,
                    nickname,
                    companyName,
                    emailAddress,
                    address,
                    phoneNumber,
                    birthday,
                    referenceId,
                    note,
                    preferences,
                    creationSource,
                    groupIds,
                    segmentIds,
                    version,
                    taxIds,
                    additionalProperties);
        }
    }
}
