/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TimecardFilter.Builder.class)
public final class TimecardFilter {
    private final Optional<List<String>> locationIds;

    private final Optional<TimecardFilterStatus> status;

    private final Optional<TimeRange> start;

    private final Optional<TimeRange> end;

    private final Optional<TimecardWorkday> workday;

    private final Optional<List<String>> teamMemberIds;

    private final Map<String, Object> additionalProperties;

    private TimecardFilter(
            Optional<List<String>> locationIds,
            Optional<TimecardFilterStatus> status,
            Optional<TimeRange> start,
            Optional<TimeRange> end,
            Optional<TimecardWorkday> workday,
            Optional<List<String>> teamMemberIds,
            Map<String, Object> additionalProperties) {
        this.locationIds = locationIds;
        this.status = status;
        this.start = start;
        this.end = end;
        this.workday = workday;
        this.teamMemberIds = teamMemberIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Fetch timecards for the specified location.
     */
    @JsonIgnore
    public Optional<List<String>> getLocationIds() {
        if (locationIds == null) {
            return Optional.empty();
        }
        return locationIds;
    }

    /**
     * @return Fetch a <code>Timecard</code> instance by <code>Timecard.status</code>.
     * See <a href="#type-timecardfilterstatus">TimecardFilterStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<TimecardFilterStatus> getStatus() {
        return status;
    }

    /**
     * @return Fetch <code>Timecard</code> instances that start in the time range - Inclusive.
     */
    @JsonProperty("start")
    public Optional<TimeRange> getStart() {
        return start;
    }

    /**
     * @return Fetch the <code>Timecard</code> instances that end in the time range - Inclusive.
     */
    @JsonProperty("end")
    public Optional<TimeRange> getEnd() {
        return end;
    }

    /**
     * @return Fetch the <code>Timecard</code> instances based on the workday date range.
     */
    @JsonProperty("workday")
    public Optional<TimecardWorkday> getWorkday() {
        return workday;
    }

    /**
     * @return Fetch timecards for the specified team members.
     */
    @JsonIgnore
    public Optional<List<String>> getTeamMemberIds() {
        if (teamMemberIds == null) {
            return Optional.empty();
        }
        return teamMemberIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_ids")
    private Optional<List<String>> _getLocationIds() {
        return locationIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_ids")
    private Optional<List<String>> _getTeamMemberIds() {
        return teamMemberIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TimecardFilter && equalTo((TimecardFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TimecardFilter other) {
        return locationIds.equals(other.locationIds)
                && status.equals(other.status)
                && start.equals(other.start)
                && end.equals(other.end)
                && workday.equals(other.workday)
                && teamMemberIds.equals(other.teamMemberIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationIds, this.status, this.start, this.end, this.workday, this.teamMemberIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> locationIds = Optional.empty();

        private Optional<TimecardFilterStatus> status = Optional.empty();

        private Optional<TimeRange> start = Optional.empty();

        private Optional<TimeRange> end = Optional.empty();

        private Optional<TimecardWorkday> workday = Optional.empty();

        private Optional<List<String>> teamMemberIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TimecardFilter other) {
            locationIds(other.getLocationIds());
            status(other.getStatus());
            start(other.getStart());
            end(other.getEnd());
            workday(other.getWorkday());
            teamMemberIds(other.getTeamMemberIds());
            return this;
        }

        @JsonSetter(value = "location_ids", nulls = Nulls.SKIP)
        public Builder locationIds(Optional<List<String>> locationIds) {
            this.locationIds = locationIds;
            return this;
        }

        public Builder locationIds(List<String> locationIds) {
            this.locationIds = Optional.ofNullable(locationIds);
            return this;
        }

        public Builder locationIds(Nullable<List<String>> locationIds) {
            if (locationIds.isNull()) {
                this.locationIds = null;
            } else if (locationIds.isEmpty()) {
                this.locationIds = Optional.empty();
            } else {
                this.locationIds = Optional.of(locationIds.get());
            }
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TimecardFilterStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TimecardFilterStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<TimeRange> start) {
            this.start = start;
            return this;
        }

        public Builder start(TimeRange start) {
            this.start = Optional.ofNullable(start);
            return this;
        }

        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<TimeRange> end) {
            this.end = end;
            return this;
        }

        public Builder end(TimeRange end) {
            this.end = Optional.ofNullable(end);
            return this;
        }

        @JsonSetter(value = "workday", nulls = Nulls.SKIP)
        public Builder workday(Optional<TimecardWorkday> workday) {
            this.workday = workday;
            return this;
        }

        public Builder workday(TimecardWorkday workday) {
            this.workday = Optional.ofNullable(workday);
            return this;
        }

        @JsonSetter(value = "team_member_ids", nulls = Nulls.SKIP)
        public Builder teamMemberIds(Optional<List<String>> teamMemberIds) {
            this.teamMemberIds = teamMemberIds;
            return this;
        }

        public Builder teamMemberIds(List<String> teamMemberIds) {
            this.teamMemberIds = Optional.ofNullable(teamMemberIds);
            return this;
        }

        public Builder teamMemberIds(Nullable<List<String>> teamMemberIds) {
            if (teamMemberIds.isNull()) {
                this.teamMemberIds = null;
            } else if (teamMemberIds.isEmpty()) {
                this.teamMemberIds = Optional.empty();
            } else {
                this.teamMemberIds = Optional.of(teamMemberIds.get());
            }
            return this;
        }

        public TimecardFilter build() {
            return new TimecardFilter(locationIds, status, start, end, workday, teamMemberIds, additionalProperties);
        }
    }
}
