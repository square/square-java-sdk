/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListPaymentsRequest.Builder.class)
public final class ListPaymentsRequest {
    private final Optional<String> beginTime;

    private final Optional<String> endTime;

    private final Optional<String> sortOrder;

    private final Optional<String> cursor;

    private final Optional<String> locationId;

    private final Optional<Long> total;

    private final Optional<String> last4;

    private final Optional<String> cardBrand;

    private final Optional<Integer> limit;

    private final Optional<Boolean> isOfflinePayment;

    private final Optional<String> offlineBeginTime;

    private final Optional<String> offlineEndTime;

    private final Optional<String> updatedAtBeginTime;

    private final Optional<String> updatedAtEndTime;

    private final Optional<ListPaymentsRequestSortField> sortField;

    private final Map<String, Object> additionalProperties;

    private ListPaymentsRequest(
            Optional<String> beginTime,
            Optional<String> endTime,
            Optional<String> sortOrder,
            Optional<String> cursor,
            Optional<String> locationId,
            Optional<Long> total,
            Optional<String> last4,
            Optional<String> cardBrand,
            Optional<Integer> limit,
            Optional<Boolean> isOfflinePayment,
            Optional<String> offlineBeginTime,
            Optional<String> offlineEndTime,
            Optional<String> updatedAtBeginTime,
            Optional<String> updatedAtEndTime,
            Optional<ListPaymentsRequestSortField> sortField,
            Map<String, Object> additionalProperties) {
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.sortOrder = sortOrder;
        this.cursor = cursor;
        this.locationId = locationId;
        this.total = total;
        this.last4 = last4;
        this.cardBrand = cardBrand;
        this.limit = limit;
        this.isOfflinePayment = isOfflinePayment;
        this.offlineBeginTime = offlineBeginTime;
        this.offlineEndTime = offlineEndTime;
        this.updatedAtBeginTime = updatedAtBeginTime;
        this.updatedAtEndTime = updatedAtEndTime;
        this.sortField = sortField;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates the start of the time range to retrieve payments for, in RFC 3339 format.
     * The range is determined using the <code>created_at</code> field for each Payment.
     * Inclusive. Default: The current time minus one year.
     */
    @JsonIgnore
    public Optional<String> getBeginTime() {
        if (beginTime == null) {
            return Optional.empty();
        }
        return beginTime;
    }

    /**
     * @return Indicates the end of the time range to retrieve payments for, in RFC 3339 format.  The
     * range is determined using the <code>created_at</code> field for each Payment.
     * <p>Default: The current time.</p>
     */
    @JsonIgnore
    public Optional<String> getEndTime() {
        if (endTime == null) {
            return Optional.empty();
        }
        return endTime;
    }

    /**
     * @return The order in which results are listed by <code>ListPaymentsRequest.sort_field</code>:
     * <ul>
     * <li><code>ASC</code> - Oldest to newest.</li>
     * <li><code>DESC</code> - Newest to oldest (default).</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<String> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for the original query.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return Limit results to the location supplied. By default, results are returned
     * for the default (main) location associated with the seller.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The exact amount in the <code>total_money</code> for a payment.
     */
    @JsonIgnore
    public Optional<Long> getTotal() {
        if (total == null) {
            return Optional.empty();
        }
        return total;
    }

    /**
     * @return The last four digits of a payment card.
     */
    @JsonIgnore
    public Optional<String> getLast4() {
        if (last4 == null) {
            return Optional.empty();
        }
        return last4;
    }

    /**
     * @return The brand of the payment card (for example, VISA).
     */
    @JsonIgnore
    public Optional<String> getCardBrand() {
        if (cardBrand == null) {
            return Optional.empty();
        }
        return cardBrand;
    }

    /**
     * @return The maximum number of results to be returned in a single page.
     * It is possible to receive fewer results than the specified limit on a given page.
     * <p>The default value of 100 is also the maximum allowed value. If the provided value is
     * greater than 100, it is ignored and the default value is used instead.</p>
     * <p>Default: <code>100</code></p>
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return Whether the payment was taken offline or not.
     */
    @JsonIgnore
    public Optional<Boolean> getIsOfflinePayment() {
        if (isOfflinePayment == null) {
            return Optional.empty();
        }
        return isOfflinePayment;
    }

    /**
     * @return Indicates the start of the time range for which to retrieve offline payments, in RFC 3339
     * format for timestamps. The range is determined using the
     * <code>offline_payment_details.client_created_at</code> field for each Payment. If set, payments without a
     * value set in <code>offline_payment_details.client_created_at</code> will not be returned.
     * <p>Default: The current time.</p>
     */
    @JsonIgnore
    public Optional<String> getOfflineBeginTime() {
        if (offlineBeginTime == null) {
            return Optional.empty();
        }
        return offlineBeginTime;
    }

    /**
     * @return Indicates the end of the time range for which to retrieve offline payments, in RFC 3339
     * format for timestamps. The range is determined using the
     * <code>offline_payment_details.client_created_at</code> field for each Payment. If set, payments without a
     * value set in <code>offline_payment_details.client_created_at</code> will not be returned.
     * <p>Default: The current time.</p>
     */
    @JsonIgnore
    public Optional<String> getOfflineEndTime() {
        if (offlineEndTime == null) {
            return Optional.empty();
        }
        return offlineEndTime;
    }

    /**
     * @return Indicates the start of the time range to retrieve payments for, in RFC 3339 format.  The
     * range is determined using the <code>updated_at</code> field for each Payment.
     */
    @JsonIgnore
    public Optional<String> getUpdatedAtBeginTime() {
        if (updatedAtBeginTime == null) {
            return Optional.empty();
        }
        return updatedAtBeginTime;
    }

    /**
     * @return Indicates the end of the time range to retrieve payments for, in RFC 3339 format.  The
     * range is determined using the <code>updated_at</code> field for each Payment.
     */
    @JsonIgnore
    public Optional<String> getUpdatedAtEndTime() {
        if (updatedAtEndTime == null) {
            return Optional.empty();
        }
        return updatedAtEndTime;
    }

    /**
     * @return The field used to sort results by. The default is <code>CREATED_AT</code>.
     */
    @JsonIgnore
    public Optional<ListPaymentsRequestSortField> getSortField() {
        if (sortField == null) {
            return Optional.empty();
        }
        return sortField;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("begin_time")
    private Optional<String> _getBeginTime() {
        return beginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_time")
    private Optional<String> _getEndTime() {
        return endTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<String> _getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("total")
    private Optional<Long> _getTotal() {
        return total;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("last_4")
    private Optional<String> _getLast4() {
        return last4;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("card_brand")
    private Optional<String> _getCardBrand() {
        return cardBrand;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_offline_payment")
    private Optional<Boolean> _getIsOfflinePayment() {
        return isOfflinePayment;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("offline_begin_time")
    private Optional<String> _getOfflineBeginTime() {
        return offlineBeginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("offline_end_time")
    private Optional<String> _getOfflineEndTime() {
        return offlineEndTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updated_at_begin_time")
    private Optional<String> _getUpdatedAtBeginTime() {
        return updatedAtBeginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updated_at_end_time")
    private Optional<String> _getUpdatedAtEndTime() {
        return updatedAtEndTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_field")
    private Optional<ListPaymentsRequestSortField> _getSortField() {
        return sortField;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListPaymentsRequest && equalTo((ListPaymentsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListPaymentsRequest other) {
        return beginTime.equals(other.beginTime)
                && endTime.equals(other.endTime)
                && sortOrder.equals(other.sortOrder)
                && cursor.equals(other.cursor)
                && locationId.equals(other.locationId)
                && total.equals(other.total)
                && last4.equals(other.last4)
                && cardBrand.equals(other.cardBrand)
                && limit.equals(other.limit)
                && isOfflinePayment.equals(other.isOfflinePayment)
                && offlineBeginTime.equals(other.offlineBeginTime)
                && offlineEndTime.equals(other.offlineEndTime)
                && updatedAtBeginTime.equals(other.updatedAtBeginTime)
                && updatedAtEndTime.equals(other.updatedAtEndTime)
                && sortField.equals(other.sortField);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.beginTime,
                this.endTime,
                this.sortOrder,
                this.cursor,
                this.locationId,
                this.total,
                this.last4,
                this.cardBrand,
                this.limit,
                this.isOfflinePayment,
                this.offlineBeginTime,
                this.offlineEndTime,
                this.updatedAtBeginTime,
                this.updatedAtEndTime,
                this.sortField);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> beginTime = Optional.empty();

        private Optional<String> endTime = Optional.empty();

        private Optional<String> sortOrder = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<Long> total = Optional.empty();

        private Optional<String> last4 = Optional.empty();

        private Optional<String> cardBrand = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Boolean> isOfflinePayment = Optional.empty();

        private Optional<String> offlineBeginTime = Optional.empty();

        private Optional<String> offlineEndTime = Optional.empty();

        private Optional<String> updatedAtBeginTime = Optional.empty();

        private Optional<String> updatedAtEndTime = Optional.empty();

        private Optional<ListPaymentsRequestSortField> sortField = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListPaymentsRequest other) {
            beginTime(other.getBeginTime());
            endTime(other.getEndTime());
            sortOrder(other.getSortOrder());
            cursor(other.getCursor());
            locationId(other.getLocationId());
            total(other.getTotal());
            last4(other.getLast4());
            cardBrand(other.getCardBrand());
            limit(other.getLimit());
            isOfflinePayment(other.getIsOfflinePayment());
            offlineBeginTime(other.getOfflineBeginTime());
            offlineEndTime(other.getOfflineEndTime());
            updatedAtBeginTime(other.getUpdatedAtBeginTime());
            updatedAtEndTime(other.getUpdatedAtEndTime());
            sortField(other.getSortField());
            return this;
        }

        /**
         * <p>Indicates the start of the time range to retrieve payments for, in RFC 3339 format.
         * The range is determined using the <code>created_at</code> field for each Payment.
         * Inclusive. Default: The current time minus one year.</p>
         */
        @JsonSetter(value = "begin_time", nulls = Nulls.SKIP)
        public Builder beginTime(Optional<String> beginTime) {
            this.beginTime = beginTime;
            return this;
        }

        public Builder beginTime(String beginTime) {
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        public Builder beginTime(Nullable<String> beginTime) {
            if (beginTime.isNull()) {
                this.beginTime = null;
            } else if (beginTime.isEmpty()) {
                this.beginTime = Optional.empty();
            } else {
                this.beginTime = Optional.of(beginTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the end of the time range to retrieve payments for, in RFC 3339 format.  The
         * range is determined using the <code>created_at</code> field for each Payment.</p>
         * <p>Default: The current time.</p>
         */
        @JsonSetter(value = "end_time", nulls = Nulls.SKIP)
        public Builder endTime(Optional<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        public Builder endTime(Nullable<String> endTime) {
            if (endTime.isNull()) {
                this.endTime = null;
            } else if (endTime.isEmpty()) {
                this.endTime = Optional.empty();
            } else {
                this.endTime = Optional.of(endTime.get());
            }
            return this;
        }

        /**
         * <p>The order in which results are listed by <code>ListPaymentsRequest.sort_field</code>:</p>
         * <ul>
         * <li><code>ASC</code> - Oldest to newest.</li>
         * <li><code>DESC</code> - Newest to oldest (default).</li>
         * </ul>
         */
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<String> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(String sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Nullable<String> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>Limit results to the location supplied. By default, results are returned
         * for the default (main) location associated with the seller.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The exact amount in the <code>total_money</code> for a payment.</p>
         */
        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public Builder total(Optional<Long> total) {
            this.total = total;
            return this;
        }

        public Builder total(Long total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        public Builder total(Nullable<Long> total) {
            if (total.isNull()) {
                this.total = null;
            } else if (total.isEmpty()) {
                this.total = Optional.empty();
            } else {
                this.total = Optional.of(total.get());
            }
            return this;
        }

        /**
         * <p>The last four digits of a payment card.</p>
         */
        @JsonSetter(value = "last_4", nulls = Nulls.SKIP)
        public Builder last4(Optional<String> last4) {
            this.last4 = last4;
            return this;
        }

        public Builder last4(String last4) {
            this.last4 = Optional.ofNullable(last4);
            return this;
        }

        public Builder last4(Nullable<String> last4) {
            if (last4.isNull()) {
                this.last4 = null;
            } else if (last4.isEmpty()) {
                this.last4 = Optional.empty();
            } else {
                this.last4 = Optional.of(last4.get());
            }
            return this;
        }

        /**
         * <p>The brand of the payment card (for example, VISA).</p>
         */
        @JsonSetter(value = "card_brand", nulls = Nulls.SKIP)
        public Builder cardBrand(Optional<String> cardBrand) {
            this.cardBrand = cardBrand;
            return this;
        }

        public Builder cardBrand(String cardBrand) {
            this.cardBrand = Optional.ofNullable(cardBrand);
            return this;
        }

        public Builder cardBrand(Nullable<String> cardBrand) {
            if (cardBrand.isNull()) {
                this.cardBrand = null;
            } else if (cardBrand.isEmpty()) {
                this.cardBrand = Optional.empty();
            } else {
                this.cardBrand = Optional.of(cardBrand.get());
            }
            return this;
        }

        /**
         * <p>The maximum number of results to be returned in a single page.
         * It is possible to receive fewer results than the specified limit on a given page.</p>
         * <p>The default value of 100 is also the maximum allowed value. If the provided value is
         * greater than 100, it is ignored and the default value is used instead.</p>
         * <p>Default: <code>100</code></p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>Whether the payment was taken offline or not.</p>
         */
        @JsonSetter(value = "is_offline_payment", nulls = Nulls.SKIP)
        public Builder isOfflinePayment(Optional<Boolean> isOfflinePayment) {
            this.isOfflinePayment = isOfflinePayment;
            return this;
        }

        public Builder isOfflinePayment(Boolean isOfflinePayment) {
            this.isOfflinePayment = Optional.ofNullable(isOfflinePayment);
            return this;
        }

        public Builder isOfflinePayment(Nullable<Boolean> isOfflinePayment) {
            if (isOfflinePayment.isNull()) {
                this.isOfflinePayment = null;
            } else if (isOfflinePayment.isEmpty()) {
                this.isOfflinePayment = Optional.empty();
            } else {
                this.isOfflinePayment = Optional.of(isOfflinePayment.get());
            }
            return this;
        }

        /**
         * <p>Indicates the start of the time range for which to retrieve offline payments, in RFC 3339
         * format for timestamps. The range is determined using the
         * <code>offline_payment_details.client_created_at</code> field for each Payment. If set, payments without a
         * value set in <code>offline_payment_details.client_created_at</code> will not be returned.</p>
         * <p>Default: The current time.</p>
         */
        @JsonSetter(value = "offline_begin_time", nulls = Nulls.SKIP)
        public Builder offlineBeginTime(Optional<String> offlineBeginTime) {
            this.offlineBeginTime = offlineBeginTime;
            return this;
        }

        public Builder offlineBeginTime(String offlineBeginTime) {
            this.offlineBeginTime = Optional.ofNullable(offlineBeginTime);
            return this;
        }

        public Builder offlineBeginTime(Nullable<String> offlineBeginTime) {
            if (offlineBeginTime.isNull()) {
                this.offlineBeginTime = null;
            } else if (offlineBeginTime.isEmpty()) {
                this.offlineBeginTime = Optional.empty();
            } else {
                this.offlineBeginTime = Optional.of(offlineBeginTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the end of the time range for which to retrieve offline payments, in RFC 3339
         * format for timestamps. The range is determined using the
         * <code>offline_payment_details.client_created_at</code> field for each Payment. If set, payments without a
         * value set in <code>offline_payment_details.client_created_at</code> will not be returned.</p>
         * <p>Default: The current time.</p>
         */
        @JsonSetter(value = "offline_end_time", nulls = Nulls.SKIP)
        public Builder offlineEndTime(Optional<String> offlineEndTime) {
            this.offlineEndTime = offlineEndTime;
            return this;
        }

        public Builder offlineEndTime(String offlineEndTime) {
            this.offlineEndTime = Optional.ofNullable(offlineEndTime);
            return this;
        }

        public Builder offlineEndTime(Nullable<String> offlineEndTime) {
            if (offlineEndTime.isNull()) {
                this.offlineEndTime = null;
            } else if (offlineEndTime.isEmpty()) {
                this.offlineEndTime = Optional.empty();
            } else {
                this.offlineEndTime = Optional.of(offlineEndTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the start of the time range to retrieve payments for, in RFC 3339 format.  The
         * range is determined using the <code>updated_at</code> field for each Payment.</p>
         */
        @JsonSetter(value = "updated_at_begin_time", nulls = Nulls.SKIP)
        public Builder updatedAtBeginTime(Optional<String> updatedAtBeginTime) {
            this.updatedAtBeginTime = updatedAtBeginTime;
            return this;
        }

        public Builder updatedAtBeginTime(String updatedAtBeginTime) {
            this.updatedAtBeginTime = Optional.ofNullable(updatedAtBeginTime);
            return this;
        }

        public Builder updatedAtBeginTime(Nullable<String> updatedAtBeginTime) {
            if (updatedAtBeginTime.isNull()) {
                this.updatedAtBeginTime = null;
            } else if (updatedAtBeginTime.isEmpty()) {
                this.updatedAtBeginTime = Optional.empty();
            } else {
                this.updatedAtBeginTime = Optional.of(updatedAtBeginTime.get());
            }
            return this;
        }

        /**
         * <p>Indicates the end of the time range to retrieve payments for, in RFC 3339 format.  The
         * range is determined using the <code>updated_at</code> field for each Payment.</p>
         */
        @JsonSetter(value = "updated_at_end_time", nulls = Nulls.SKIP)
        public Builder updatedAtEndTime(Optional<String> updatedAtEndTime) {
            this.updatedAtEndTime = updatedAtEndTime;
            return this;
        }

        public Builder updatedAtEndTime(String updatedAtEndTime) {
            this.updatedAtEndTime = Optional.ofNullable(updatedAtEndTime);
            return this;
        }

        public Builder updatedAtEndTime(Nullable<String> updatedAtEndTime) {
            if (updatedAtEndTime.isNull()) {
                this.updatedAtEndTime = null;
            } else if (updatedAtEndTime.isEmpty()) {
                this.updatedAtEndTime = Optional.empty();
            } else {
                this.updatedAtEndTime = Optional.of(updatedAtEndTime.get());
            }
            return this;
        }

        /**
         * <p>The field used to sort results by. The default is <code>CREATED_AT</code>.</p>
         */
        @JsonSetter(value = "sort_field", nulls = Nulls.SKIP)
        public Builder sortField(Optional<ListPaymentsRequestSortField> sortField) {
            this.sortField = sortField;
            return this;
        }

        public Builder sortField(ListPaymentsRequestSortField sortField) {
            this.sortField = Optional.ofNullable(sortField);
            return this;
        }

        public Builder sortField(Nullable<ListPaymentsRequestSortField> sortField) {
            if (sortField.isNull()) {
                this.sortField = null;
            } else if (sortField.isEmpty()) {
                this.sortField = Optional.empty();
            } else {
                this.sortField = Optional.of(sortField.get());
            }
            return this;
        }

        public ListPaymentsRequest build() {
            return new ListPaymentsRequest(
                    beginTime,
                    endTime,
                    sortOrder,
                    cursor,
                    locationId,
                    total,
                    last4,
                    cardBrand,
                    limit,
                    isOfflinePayment,
                    offlineBeginTime,
                    offlineEndTime,
                    updatedAtBeginTime,
                    updatedAtEndTime,
                    sortField,
                    additionalProperties);
        }
    }
}
