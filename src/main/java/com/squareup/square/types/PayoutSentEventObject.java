/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayoutSentEventObject.Builder.class)
public final class PayoutSentEventObject {
    private final Optional<Payout> payout;

    private final Map<String, Object> additionalProperties;

    private PayoutSentEventObject(Optional<Payout> payout, Map<String, Object> additionalProperties) {
        this.payout = payout;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The payout that was sent.
     */
    @JsonProperty("payout")
    public Optional<Payout> getPayout() {
        return payout;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayoutSentEventObject && equalTo((PayoutSentEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayoutSentEventObject other) {
        return payout.equals(other.payout);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.payout);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Payout> payout = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayoutSentEventObject other) {
            payout(other.getPayout());
            return this;
        }

        /**
         * <p>The payout that was sent.</p>
         */
        @JsonSetter(value = "payout", nulls = Nulls.SKIP)
        public Builder payout(Optional<Payout> payout) {
            this.payout = payout;
            return this;
        }

        public Builder payout(Payout payout) {
            this.payout = Optional.ofNullable(payout);
            return this;
        }

        public PayoutSentEventObject build() {
            return new PayoutSentEventObject(payout, additionalProperties);
        }
    }
}
