/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LoyaltyEventTypeFilter.Builder.class)
public final class LoyaltyEventTypeFilter {
    private final List<LoyaltyEventType> types;

    private final Map<String, Object> additionalProperties;

    private LoyaltyEventTypeFilter(List<LoyaltyEventType> types, Map<String, Object> additionalProperties) {
        this.types = types;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The loyalty event types used to filter the result.
     * If multiple values are specified, the endpoint uses a
     * logical OR to combine them.
     * See <a href="#type-loyaltyeventtype">LoyaltyEventType</a> for possible values
     */
    @JsonProperty("types")
    public List<LoyaltyEventType> getTypes() {
        return types;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LoyaltyEventTypeFilter && equalTo((LoyaltyEventTypeFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LoyaltyEventTypeFilter other) {
        return types.equals(other.types);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.types);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<LoyaltyEventType> types = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LoyaltyEventTypeFilter other) {
            types(other.getTypes());
            return this;
        }

        /**
         * <p>The loyalty event types used to filter the result.
         * If multiple values are specified, the endpoint uses a
         * logical OR to combine them.
         * See <a href="#type-loyaltyeventtype">LoyaltyEventType</a> for possible values</p>
         */
        @JsonSetter(value = "types", nulls = Nulls.SKIP)
        public Builder types(List<LoyaltyEventType> types) {
            this.types.clear();
            this.types.addAll(types);
            return this;
        }

        public Builder addTypes(LoyaltyEventType types) {
            this.types.add(types);
            return this;
        }

        public Builder addAllTypes(List<LoyaltyEventType> types) {
            this.types.addAll(types);
            return this;
        }

        public LoyaltyEventTypeFilter build() {
            return new LoyaltyEventTypeFilter(types, additionalProperties);
        }
    }
}
