/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerDeletedEventObject.Builder.class)
public final class CustomerDeletedEventObject {
    private final Optional<Customer> customer;

    private final Optional<CustomerDeletedEventEventContext> eventContext;

    private final Map<String, Object> additionalProperties;

    private CustomerDeletedEventObject(
            Optional<Customer> customer,
            Optional<CustomerDeletedEventEventContext> eventContext,
            Map<String, Object> additionalProperties) {
        this.customer = customer;
        this.eventContext = eventContext;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The deleted customer.
     */
    @JsonProperty("customer")
    public Optional<Customer> getCustomer() {
        return customer;
    }

    /**
     * @return Information about the change that triggered the event. This field is returned only if the customer is deleted by a merge operation.
     */
    @JsonProperty("event_context")
    public Optional<CustomerDeletedEventEventContext> getEventContext() {
        return eventContext;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerDeletedEventObject && equalTo((CustomerDeletedEventObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerDeletedEventObject other) {
        return customer.equals(other.customer) && eventContext.equals(other.eventContext);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customer, this.eventContext);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Customer> customer = Optional.empty();

        private Optional<CustomerDeletedEventEventContext> eventContext = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerDeletedEventObject other) {
            customer(other.getCustomer());
            eventContext(other.getEventContext());
            return this;
        }

        /**
         * <p>The deleted customer.</p>
         */
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<Customer> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(Customer customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>Information about the change that triggered the event. This field is returned only if the customer is deleted by a merge operation.</p>
         */
        @JsonSetter(value = "event_context", nulls = Nulls.SKIP)
        public Builder eventContext(Optional<CustomerDeletedEventEventContext> eventContext) {
            this.eventContext = eventContext;
            return this;
        }

        public Builder eventContext(CustomerDeletedEventEventContext eventContext) {
            this.eventContext = Optional.ofNullable(eventContext);
            return this;
        }

        public CustomerDeletedEventObject build() {
            return new CustomerDeletedEventObject(customer, eventContext, additionalProperties);
        }
    }
}
