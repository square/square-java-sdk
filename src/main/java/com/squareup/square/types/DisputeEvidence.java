/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DisputeEvidence.Builder.class)
public final class DisputeEvidence {
    private final Optional<String> evidenceId;

    private final Optional<String> id;

    private final Optional<String> disputeId;

    private final Optional<DisputeEvidenceFile> evidenceFile;

    private final Optional<String> evidenceText;

    private final Optional<String> uploadedAt;

    private final Optional<DisputeEvidenceType> evidenceType;

    private final Map<String, Object> additionalProperties;

    private DisputeEvidence(
            Optional<String> evidenceId,
            Optional<String> id,
            Optional<String> disputeId,
            Optional<DisputeEvidenceFile> evidenceFile,
            Optional<String> evidenceText,
            Optional<String> uploadedAt,
            Optional<DisputeEvidenceType> evidenceType,
            Map<String, Object> additionalProperties) {
        this.evidenceId = evidenceId;
        this.id = id;
        this.disputeId = disputeId;
        this.evidenceFile = evidenceFile;
        this.evidenceText = evidenceText;
        this.uploadedAt = uploadedAt;
        this.evidenceType = evidenceType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-generated ID of the evidence.
     */
    @JsonIgnore
    public Optional<String> getEvidenceId() {
        if (evidenceId == null) {
            return Optional.empty();
        }
        return evidenceId;
    }

    /**
     * @return The Square-generated ID of the evidence.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The ID of the dispute the evidence is associated with.
     */
    @JsonIgnore
    public Optional<String> getDisputeId() {
        if (disputeId == null) {
            return Optional.empty();
        }
        return disputeId;
    }

    /**
     * @return Image, PDF, TXT
     */
    @JsonProperty("evidence_file")
    public Optional<DisputeEvidenceFile> getEvidenceFile() {
        return evidenceFile;
    }

    /**
     * @return Raw text
     */
    @JsonIgnore
    public Optional<String> getEvidenceText() {
        if (evidenceText == null) {
            return Optional.empty();
        }
        return evidenceText;
    }

    /**
     * @return The time when the evidence was uploaded, in RFC 3339 format.
     */
    @JsonIgnore
    public Optional<String> getUploadedAt() {
        if (uploadedAt == null) {
            return Optional.empty();
        }
        return uploadedAt;
    }

    /**
     * @return The type of the evidence.
     * See <a href="#type-disputeevidencetype">DisputeEvidenceType</a> for possible values
     */
    @JsonProperty("evidence_type")
    public Optional<DisputeEvidenceType> getEvidenceType() {
        return evidenceType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("evidence_id")
    private Optional<String> _getEvidenceId() {
        return evidenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("dispute_id")
    private Optional<String> _getDisputeId() {
        return disputeId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("evidence_text")
    private Optional<String> _getEvidenceText() {
        return evidenceText;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("uploaded_at")
    private Optional<String> _getUploadedAt() {
        return uploadedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DisputeEvidence && equalTo((DisputeEvidence) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DisputeEvidence other) {
        return evidenceId.equals(other.evidenceId)
                && id.equals(other.id)
                && disputeId.equals(other.disputeId)
                && evidenceFile.equals(other.evidenceFile)
                && evidenceText.equals(other.evidenceText)
                && uploadedAt.equals(other.uploadedAt)
                && evidenceType.equals(other.evidenceType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.evidenceId,
                this.id,
                this.disputeId,
                this.evidenceFile,
                this.evidenceText,
                this.uploadedAt,
                this.evidenceType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> evidenceId = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> disputeId = Optional.empty();

        private Optional<DisputeEvidenceFile> evidenceFile = Optional.empty();

        private Optional<String> evidenceText = Optional.empty();

        private Optional<String> uploadedAt = Optional.empty();

        private Optional<DisputeEvidenceType> evidenceType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DisputeEvidence other) {
            evidenceId(other.getEvidenceId());
            id(other.getId());
            disputeId(other.getDisputeId());
            evidenceFile(other.getEvidenceFile());
            evidenceText(other.getEvidenceText());
            uploadedAt(other.getUploadedAt());
            evidenceType(other.getEvidenceType());
            return this;
        }

        @JsonSetter(value = "evidence_id", nulls = Nulls.SKIP)
        public Builder evidenceId(Optional<String> evidenceId) {
            this.evidenceId = evidenceId;
            return this;
        }

        public Builder evidenceId(String evidenceId) {
            this.evidenceId = Optional.ofNullable(evidenceId);
            return this;
        }

        public Builder evidenceId(Nullable<String> evidenceId) {
            if (evidenceId.isNull()) {
                this.evidenceId = null;
            } else if (evidenceId.isEmpty()) {
                this.evidenceId = Optional.empty();
            } else {
                this.evidenceId = Optional.of(evidenceId.get());
            }
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "dispute_id", nulls = Nulls.SKIP)
        public Builder disputeId(Optional<String> disputeId) {
            this.disputeId = disputeId;
            return this;
        }

        public Builder disputeId(String disputeId) {
            this.disputeId = Optional.ofNullable(disputeId);
            return this;
        }

        public Builder disputeId(Nullable<String> disputeId) {
            if (disputeId.isNull()) {
                this.disputeId = null;
            } else if (disputeId.isEmpty()) {
                this.disputeId = Optional.empty();
            } else {
                this.disputeId = Optional.of(disputeId.get());
            }
            return this;
        }

        @JsonSetter(value = "evidence_file", nulls = Nulls.SKIP)
        public Builder evidenceFile(Optional<DisputeEvidenceFile> evidenceFile) {
            this.evidenceFile = evidenceFile;
            return this;
        }

        public Builder evidenceFile(DisputeEvidenceFile evidenceFile) {
            this.evidenceFile = Optional.ofNullable(evidenceFile);
            return this;
        }

        @JsonSetter(value = "evidence_text", nulls = Nulls.SKIP)
        public Builder evidenceText(Optional<String> evidenceText) {
            this.evidenceText = evidenceText;
            return this;
        }

        public Builder evidenceText(String evidenceText) {
            this.evidenceText = Optional.ofNullable(evidenceText);
            return this;
        }

        public Builder evidenceText(Nullable<String> evidenceText) {
            if (evidenceText.isNull()) {
                this.evidenceText = null;
            } else if (evidenceText.isEmpty()) {
                this.evidenceText = Optional.empty();
            } else {
                this.evidenceText = Optional.of(evidenceText.get());
            }
            return this;
        }

        @JsonSetter(value = "uploaded_at", nulls = Nulls.SKIP)
        public Builder uploadedAt(Optional<String> uploadedAt) {
            this.uploadedAt = uploadedAt;
            return this;
        }

        public Builder uploadedAt(String uploadedAt) {
            this.uploadedAt = Optional.ofNullable(uploadedAt);
            return this;
        }

        public Builder uploadedAt(Nullable<String> uploadedAt) {
            if (uploadedAt.isNull()) {
                this.uploadedAt = null;
            } else if (uploadedAt.isEmpty()) {
                this.uploadedAt = Optional.empty();
            } else {
                this.uploadedAt = Optional.of(uploadedAt.get());
            }
            return this;
        }

        @JsonSetter(value = "evidence_type", nulls = Nulls.SKIP)
        public Builder evidenceType(Optional<DisputeEvidenceType> evidenceType) {
            this.evidenceType = evidenceType;
            return this;
        }

        public Builder evidenceType(DisputeEvidenceType evidenceType) {
            this.evidenceType = Optional.ofNullable(evidenceType);
            return this;
        }

        public DisputeEvidence build() {
            return new DisputeEvidence(
                    evidenceId,
                    id,
                    disputeId,
                    evidenceFile,
                    evidenceText,
                    uploadedAt,
                    evidenceType,
                    additionalProperties);
        }
    }
}
