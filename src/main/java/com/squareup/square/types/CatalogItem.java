/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogItem.Builder.class)
public final class CatalogItem {
    private final Optional<String> name;

    private final Optional<String> description;

    private final Optional<String> abbreviation;

    private final Optional<String> labelColor;

    private final Optional<Boolean> isTaxable;

    private final Optional<String> categoryId;

    private final Optional<List<String>> taxIds;

    private final Optional<List<CatalogItemModifierListInfo>> modifierListInfo;

    private final Optional<List<CatalogObject>> variations;

    private final Optional<CatalogItemProductType> productType;

    private final Optional<Boolean> skipModifierScreen;

    private final Optional<List<CatalogItemOptionForItem>> itemOptions;

    private final Optional<List<String>> imageIds;

    private final Optional<String> sortName;

    private final Optional<List<CatalogObjectCategory>> categories;

    private final Optional<String> descriptionHtml;

    private final Optional<String> descriptionPlaintext;

    private final Optional<List<String>> channels;

    private final Optional<Boolean> isArchived;

    private final Optional<CatalogEcomSeoData> ecomSeoData;

    private final Optional<CatalogItemFoodAndBeverageDetails> foodAndBeverageDetails;

    private final Optional<CatalogObjectCategory> reportingCategory;

    private final Map<String, Object> additionalProperties;

    private CatalogItem(
            Optional<String> name,
            Optional<String> description,
            Optional<String> abbreviation,
            Optional<String> labelColor,
            Optional<Boolean> isTaxable,
            Optional<String> categoryId,
            Optional<List<String>> taxIds,
            Optional<List<CatalogItemModifierListInfo>> modifierListInfo,
            Optional<List<CatalogObject>> variations,
            Optional<CatalogItemProductType> productType,
            Optional<Boolean> skipModifierScreen,
            Optional<List<CatalogItemOptionForItem>> itemOptions,
            Optional<List<String>> imageIds,
            Optional<String> sortName,
            Optional<List<CatalogObjectCategory>> categories,
            Optional<String> descriptionHtml,
            Optional<String> descriptionPlaintext,
            Optional<List<String>> channels,
            Optional<Boolean> isArchived,
            Optional<CatalogEcomSeoData> ecomSeoData,
            Optional<CatalogItemFoodAndBeverageDetails> foodAndBeverageDetails,
            Optional<CatalogObjectCategory> reportingCategory,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.description = description;
        this.abbreviation = abbreviation;
        this.labelColor = labelColor;
        this.isTaxable = isTaxable;
        this.categoryId = categoryId;
        this.taxIds = taxIds;
        this.modifierListInfo = modifierListInfo;
        this.variations = variations;
        this.productType = productType;
        this.skipModifierScreen = skipModifierScreen;
        this.itemOptions = itemOptions;
        this.imageIds = imageIds;
        this.sortName = sortName;
        this.categories = categories;
        this.descriptionHtml = descriptionHtml;
        this.descriptionPlaintext = descriptionPlaintext;
        this.channels = channels;
        this.isArchived = isArchived;
        this.ecomSeoData = ecomSeoData;
        this.foodAndBeverageDetails = foodAndBeverageDetails;
        this.reportingCategory = reportingCategory;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     * <p>Deprecated at 2022-07-20, this field is planned to retire in 6 months. You should migrate to use <code>description_html</code> to set the description
     * of the <a href="entity:CatalogItem">CatalogItem</a> instance.  The <code>description</code> and <code>description_html</code> field values are kept in sync. If you try to
     * set the both fields, the <code>description_html</code> text value overwrites the <code>description</code> value. Updates in one field are also reflected in the other,
     * except for when you use an early version before Square API 2022-07-20 and <code>description_html</code> is set to blank, setting the <code>description</code> value to null
     * does not nullify <code>description_html</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
     * This attribute is searchable, and its value length is of Unicode code points.
     */
    @JsonIgnore
    public Optional<String> getAbbreviation() {
        if (abbreviation == null) {
            return Optional.empty();
        }
        return abbreviation;
    }

    /**
     * @return The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.
     */
    @JsonIgnore
    public Optional<String> getLabelColor() {
        if (labelColor == null) {
            return Optional.empty();
        }
        return labelColor;
    }

    /**
     * @return Indicates whether the item is taxable (<code>true</code>) or non-taxable (<code>false</code>). Default is <code>true</code>.
     */
    @JsonIgnore
    public Optional<Boolean> getIsTaxable() {
        if (isTaxable == null) {
            return Optional.empty();
        }
        return isTaxable;
    }

    /**
     * @return The ID of the item's category, if any. Deprecated since 2023-12-13. Use <code>CatalogItem.categories</code>, instead.
     */
    @JsonIgnore
    public Optional<String> getCategoryId() {
        if (categoryId == null) {
            return Optional.empty();
        }
        return categoryId;
    }

    /**
     * @return A set of IDs indicating the taxes enabled for
     * this item. When updating an item, any taxes listed here will be added to the item.
     * Taxes may also be added to or deleted from an item using <code>UpdateItemTaxes</code>.
     */
    @JsonIgnore
    public Optional<List<String>> getTaxIds() {
        if (taxIds == null) {
            return Optional.empty();
        }
        return taxIds;
    }

    /**
     * @return A set of <code>CatalogItemModifierListInfo</code> objects
     * representing the modifier lists that apply to this item, along with the overrides and min
     * and max limits that are specific to this item. Modifier lists
     * may also be added to or deleted from an item using <code>UpdateItemModifierLists</code>.
     */
    @JsonIgnore
    public Optional<List<CatalogItemModifierListInfo>> getModifierListInfo() {
        if (modifierListInfo == null) {
            return Optional.empty();
        }
        return modifierListInfo;
    }

    /**
     * @return A list of <a href="entity:CatalogItemVariation">CatalogItemVariation</a> objects for this item. An item must have
     * at least one variation.
     */
    @JsonIgnore
    public Optional<List<CatalogObject>> getVariations() {
        if (variations == null) {
            return Optional.empty();
        }
        return variations;
    }

    /**
     * @return The product type of the item. Once set, the <code>product_type</code> value cannot be modified.
     * <p>Items of the <code>LEGACY_SQUARE_ONLINE_SERVICE</code> and <code>LEGACY_SQUARE_ONLINE_MEMBERSHIP</code> product types can be updated
     * but cannot be created using the API.
     * See <a href="#type-catalogitemproducttype">CatalogItemProductType</a> for possible values</p>
     */
    @JsonProperty("product_type")
    public Optional<CatalogItemProductType> getProductType() {
        return productType;
    }

    /**
     * @return If <code>false</code>, the Square Point of Sale app will present the <code>CatalogItem</code>'s
     * details screen immediately, allowing the merchant to choose <code>CatalogModifier</code>s
     * before adding the item to the cart.  This is the default behavior.
     * <p>If <code>true</code>, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
     * modifiers, and merchants can edit modifiers by drilling down onto the item's details.</p>
     * <p>Third-party clients are encouraged to implement similar behaviors.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getSkipModifierScreen() {
        if (skipModifierScreen == null) {
            return Optional.empty();
        }
        return skipModifierScreen;
    }

    /**
     * @return List of item options IDs for this item. Used to manage and group item
     * variations in a specified order.
     * <p>Maximum: 6 item options.</p>
     */
    @JsonIgnore
    public Optional<List<CatalogItemOptionForItem>> getItemOptions() {
        if (itemOptions == null) {
            return Optional.empty();
        }
        return itemOptions;
    }

    /**
     * @return The IDs of images associated with this <code>CatalogItem</code> instance.
     * These images will be shown to customers in Square Online Store.
     * The first image will show up as the icon for this item in POS.
     */
    @JsonIgnore
    public Optional<List<String>> getImageIds() {
        if (imageIds == null) {
            return Optional.empty();
        }
        return imageIds;
    }

    /**
     * @return A name to sort the item by. If this name is unspecified, namely, the <code>sort_name</code> field is absent, the regular <code>name</code> field is used for sorting.
     * Its value must not be empty.
     * <p>It is currently supported for sellers of the Japanese locale only.</p>
     */
    @JsonIgnore
    public Optional<String> getSortName() {
        if (sortName == null) {
            return Optional.empty();
        }
        return sortName;
    }

    /**
     * @return The list of categories.
     */
    @JsonIgnore
    public Optional<List<CatalogObjectCategory>> getCategories() {
        if (categories == null) {
            return Optional.empty();
        }
        return categories;
    }

    /**
     * @return The item's description as expressed in valid HTML elements. The length of this field value, including those of HTML tags,
     * is of Unicode points. With application query filters, the text values of the HTML elements and attributes are searchable. Invalid or
     * unsupported HTML elements or attributes are ignored.
     * <p>Supported HTML elements include:</p>
     * <ul>
     * <li><code>a</code>: Link. Supports linking to website URLs, email address, and telephone numbers.</li>
     * <li><code>b</code>, <code>strong</code>:  Bold text</li>
     * <li><code>br</code>: Line break</li>
     * <li><code>code</code>: Computer code</li>
     * <li><code>div</code>: Section</li>
     * <li><code>h1-h6</code>: Headings</li>
     * <li><code>i</code>, <code>em</code>: Italics</li>
     * <li><code>li</code>: List element</li>
     * <li><code>ol</code>: Numbered list</li>
     * <li><code>p</code>: Paragraph</li>
     * <li><code>ul</code>: Bullet list</li>
     * <li><code>u</code>: Underline</li>
     * </ul>
     * <p>Supported HTML attributes include:</p>
     * <ul>
     * <li><code>align</code>: Alignment of the text content</li>
     * <li><code>href</code>: Link destination</li>
     * <li><code>rel</code>: Relationship between link's target and source</li>
     * <li><code>target</code>: Place to open the linked document</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<String> getDescriptionHtml() {
        if (descriptionHtml == null) {
            return Optional.empty();
        }
        return descriptionHtml;
    }

    /**
     * @return A server-generated plaintext version of the <code>description_html</code> field, without formatting tags.
     */
    @JsonProperty("description_plaintext")
    public Optional<String> getDescriptionPlaintext() {
        return descriptionPlaintext;
    }

    /**
     * @return A list of IDs representing channels, such as a Square Online site, where the item can be made visible or available.
     * This field is read only and cannot be edited.
     */
    @JsonIgnore
    public Optional<List<String>> getChannels() {
        if (channels == null) {
            return Optional.empty();
        }
        return channels;
    }

    /**
     * @return Indicates whether this item is archived (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getIsArchived() {
        if (isArchived == null) {
            return Optional.empty();
        }
        return isArchived;
    }

    /**
     * @return The SEO data for a seller's Square Online store.
     */
    @JsonProperty("ecom_seo_data")
    public Optional<CatalogEcomSeoData> getEcomSeoData() {
        return ecomSeoData;
    }

    /**
     * @return The food and beverage-specific details for the <code>FOOD_AND_BEV</code> item.
     */
    @JsonProperty("food_and_beverage_details")
    public Optional<CatalogItemFoodAndBeverageDetails> getFoodAndBeverageDetails() {
        return foodAndBeverageDetails;
    }

    /**
     * @return The item's reporting category.
     */
    @JsonProperty("reporting_category")
    public Optional<CatalogObjectCategory> getReportingCategory() {
        return reportingCategory;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("abbreviation")
    private Optional<String> _getAbbreviation() {
        return abbreviation;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("label_color")
    private Optional<String> _getLabelColor() {
        return labelColor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_taxable")
    private Optional<Boolean> _getIsTaxable() {
        return isTaxable;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("category_id")
    private Optional<String> _getCategoryId() {
        return categoryId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tax_ids")
    private Optional<List<String>> _getTaxIds() {
        return taxIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("modifier_list_info")
    private Optional<List<CatalogItemModifierListInfo>> _getModifierListInfo() {
        return modifierListInfo;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("variations")
    private Optional<List<CatalogObject>> _getVariations() {
        return variations;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("skip_modifier_screen")
    private Optional<Boolean> _getSkipModifierScreen() {
        return skipModifierScreen;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("item_options")
    private Optional<List<CatalogItemOptionForItem>> _getItemOptions() {
        return itemOptions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("image_ids")
    private Optional<List<String>> _getImageIds() {
        return imageIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_name")
    private Optional<String> _getSortName() {
        return sortName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("categories")
    private Optional<List<CatalogObjectCategory>> _getCategories() {
        return categories;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description_html")
    private Optional<String> _getDescriptionHtml() {
        return descriptionHtml;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("channels")
    private Optional<List<String>> _getChannels() {
        return channels;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("is_archived")
    private Optional<Boolean> _getIsArchived() {
        return isArchived;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogItem && equalTo((CatalogItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogItem other) {
        return name.equals(other.name)
                && description.equals(other.description)
                && abbreviation.equals(other.abbreviation)
                && labelColor.equals(other.labelColor)
                && isTaxable.equals(other.isTaxable)
                && categoryId.equals(other.categoryId)
                && taxIds.equals(other.taxIds)
                && modifierListInfo.equals(other.modifierListInfo)
                && variations.equals(other.variations)
                && productType.equals(other.productType)
                && skipModifierScreen.equals(other.skipModifierScreen)
                && itemOptions.equals(other.itemOptions)
                && imageIds.equals(other.imageIds)
                && sortName.equals(other.sortName)
                && categories.equals(other.categories)
                && descriptionHtml.equals(other.descriptionHtml)
                && descriptionPlaintext.equals(other.descriptionPlaintext)
                && channels.equals(other.channels)
                && isArchived.equals(other.isArchived)
                && ecomSeoData.equals(other.ecomSeoData)
                && foodAndBeverageDetails.equals(other.foodAndBeverageDetails)
                && reportingCategory.equals(other.reportingCategory);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.description,
                this.abbreviation,
                this.labelColor,
                this.isTaxable,
                this.categoryId,
                this.taxIds,
                this.modifierListInfo,
                this.variations,
                this.productType,
                this.skipModifierScreen,
                this.itemOptions,
                this.imageIds,
                this.sortName,
                this.categories,
                this.descriptionHtml,
                this.descriptionPlaintext,
                this.channels,
                this.isArchived,
                this.ecomSeoData,
                this.foodAndBeverageDetails,
                this.reportingCategory);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> abbreviation = Optional.empty();

        private Optional<String> labelColor = Optional.empty();

        private Optional<Boolean> isTaxable = Optional.empty();

        private Optional<String> categoryId = Optional.empty();

        private Optional<List<String>> taxIds = Optional.empty();

        private Optional<List<CatalogItemModifierListInfo>> modifierListInfo = Optional.empty();

        private Optional<List<CatalogObject>> variations = Optional.empty();

        private Optional<CatalogItemProductType> productType = Optional.empty();

        private Optional<Boolean> skipModifierScreen = Optional.empty();

        private Optional<List<CatalogItemOptionForItem>> itemOptions = Optional.empty();

        private Optional<List<String>> imageIds = Optional.empty();

        private Optional<String> sortName = Optional.empty();

        private Optional<List<CatalogObjectCategory>> categories = Optional.empty();

        private Optional<String> descriptionHtml = Optional.empty();

        private Optional<String> descriptionPlaintext = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        private Optional<Boolean> isArchived = Optional.empty();

        private Optional<CatalogEcomSeoData> ecomSeoData = Optional.empty();

        private Optional<CatalogItemFoodAndBeverageDetails> foodAndBeverageDetails = Optional.empty();

        private Optional<CatalogObjectCategory> reportingCategory = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogItem other) {
            name(other.getName());
            description(other.getDescription());
            abbreviation(other.getAbbreviation());
            labelColor(other.getLabelColor());
            isTaxable(other.getIsTaxable());
            categoryId(other.getCategoryId());
            taxIds(other.getTaxIds());
            modifierListInfo(other.getModifierListInfo());
            variations(other.getVariations());
            productType(other.getProductType());
            skipModifierScreen(other.getSkipModifierScreen());
            itemOptions(other.getItemOptions());
            imageIds(other.getImageIds());
            sortName(other.getSortName());
            categories(other.getCategories());
            descriptionHtml(other.getDescriptionHtml());
            descriptionPlaintext(other.getDescriptionPlaintext());
            channels(other.getChannels());
            isArchived(other.getIsArchived());
            ecomSeoData(other.getEcomSeoData());
            foodAndBeverageDetails(other.getFoodAndBeverageDetails());
            reportingCategory(other.getReportingCategory());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        @JsonSetter(value = "abbreviation", nulls = Nulls.SKIP)
        public Builder abbreviation(Optional<String> abbreviation) {
            this.abbreviation = abbreviation;
            return this;
        }

        public Builder abbreviation(String abbreviation) {
            this.abbreviation = Optional.ofNullable(abbreviation);
            return this;
        }

        public Builder abbreviation(Nullable<String> abbreviation) {
            if (abbreviation.isNull()) {
                this.abbreviation = null;
            } else if (abbreviation.isEmpty()) {
                this.abbreviation = Optional.empty();
            } else {
                this.abbreviation = Optional.of(abbreviation.get());
            }
            return this;
        }

        @JsonSetter(value = "label_color", nulls = Nulls.SKIP)
        public Builder labelColor(Optional<String> labelColor) {
            this.labelColor = labelColor;
            return this;
        }

        public Builder labelColor(String labelColor) {
            this.labelColor = Optional.ofNullable(labelColor);
            return this;
        }

        public Builder labelColor(Nullable<String> labelColor) {
            if (labelColor.isNull()) {
                this.labelColor = null;
            } else if (labelColor.isEmpty()) {
                this.labelColor = Optional.empty();
            } else {
                this.labelColor = Optional.of(labelColor.get());
            }
            return this;
        }

        @JsonSetter(value = "is_taxable", nulls = Nulls.SKIP)
        public Builder isTaxable(Optional<Boolean> isTaxable) {
            this.isTaxable = isTaxable;
            return this;
        }

        public Builder isTaxable(Boolean isTaxable) {
            this.isTaxable = Optional.ofNullable(isTaxable);
            return this;
        }

        public Builder isTaxable(Nullable<Boolean> isTaxable) {
            if (isTaxable.isNull()) {
                this.isTaxable = null;
            } else if (isTaxable.isEmpty()) {
                this.isTaxable = Optional.empty();
            } else {
                this.isTaxable = Optional.of(isTaxable.get());
            }
            return this;
        }

        @JsonSetter(value = "category_id", nulls = Nulls.SKIP)
        public Builder categoryId(Optional<String> categoryId) {
            this.categoryId = categoryId;
            return this;
        }

        public Builder categoryId(String categoryId) {
            this.categoryId = Optional.ofNullable(categoryId);
            return this;
        }

        public Builder categoryId(Nullable<String> categoryId) {
            if (categoryId.isNull()) {
                this.categoryId = null;
            } else if (categoryId.isEmpty()) {
                this.categoryId = Optional.empty();
            } else {
                this.categoryId = Optional.of(categoryId.get());
            }
            return this;
        }

        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(Optional<List<String>> taxIds) {
            this.taxIds = taxIds;
            return this;
        }

        public Builder taxIds(List<String> taxIds) {
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        public Builder taxIds(Nullable<List<String>> taxIds) {
            if (taxIds.isNull()) {
                this.taxIds = null;
            } else if (taxIds.isEmpty()) {
                this.taxIds = Optional.empty();
            } else {
                this.taxIds = Optional.of(taxIds.get());
            }
            return this;
        }

        @JsonSetter(value = "modifier_list_info", nulls = Nulls.SKIP)
        public Builder modifierListInfo(Optional<List<CatalogItemModifierListInfo>> modifierListInfo) {
            this.modifierListInfo = modifierListInfo;
            return this;
        }

        public Builder modifierListInfo(List<CatalogItemModifierListInfo> modifierListInfo) {
            this.modifierListInfo = Optional.ofNullable(modifierListInfo);
            return this;
        }

        public Builder modifierListInfo(Nullable<List<CatalogItemModifierListInfo>> modifierListInfo) {
            if (modifierListInfo.isNull()) {
                this.modifierListInfo = null;
            } else if (modifierListInfo.isEmpty()) {
                this.modifierListInfo = Optional.empty();
            } else {
                this.modifierListInfo = Optional.of(modifierListInfo.get());
            }
            return this;
        }

        @JsonSetter(value = "variations", nulls = Nulls.SKIP)
        public Builder variations(Optional<List<CatalogObject>> variations) {
            this.variations = variations;
            return this;
        }

        public Builder variations(List<CatalogObject> variations) {
            this.variations = Optional.ofNullable(variations);
            return this;
        }

        public Builder variations(Nullable<List<CatalogObject>> variations) {
            if (variations.isNull()) {
                this.variations = null;
            } else if (variations.isEmpty()) {
                this.variations = Optional.empty();
            } else {
                this.variations = Optional.of(variations.get());
            }
            return this;
        }

        @JsonSetter(value = "product_type", nulls = Nulls.SKIP)
        public Builder productType(Optional<CatalogItemProductType> productType) {
            this.productType = productType;
            return this;
        }

        public Builder productType(CatalogItemProductType productType) {
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        @JsonSetter(value = "skip_modifier_screen", nulls = Nulls.SKIP)
        public Builder skipModifierScreen(Optional<Boolean> skipModifierScreen) {
            this.skipModifierScreen = skipModifierScreen;
            return this;
        }

        public Builder skipModifierScreen(Boolean skipModifierScreen) {
            this.skipModifierScreen = Optional.ofNullable(skipModifierScreen);
            return this;
        }

        public Builder skipModifierScreen(Nullable<Boolean> skipModifierScreen) {
            if (skipModifierScreen.isNull()) {
                this.skipModifierScreen = null;
            } else if (skipModifierScreen.isEmpty()) {
                this.skipModifierScreen = Optional.empty();
            } else {
                this.skipModifierScreen = Optional.of(skipModifierScreen.get());
            }
            return this;
        }

        @JsonSetter(value = "item_options", nulls = Nulls.SKIP)
        public Builder itemOptions(Optional<List<CatalogItemOptionForItem>> itemOptions) {
            this.itemOptions = itemOptions;
            return this;
        }

        public Builder itemOptions(List<CatalogItemOptionForItem> itemOptions) {
            this.itemOptions = Optional.ofNullable(itemOptions);
            return this;
        }

        public Builder itemOptions(Nullable<List<CatalogItemOptionForItem>> itemOptions) {
            if (itemOptions.isNull()) {
                this.itemOptions = null;
            } else if (itemOptions.isEmpty()) {
                this.itemOptions = Optional.empty();
            } else {
                this.itemOptions = Optional.of(itemOptions.get());
            }
            return this;
        }

        @JsonSetter(value = "image_ids", nulls = Nulls.SKIP)
        public Builder imageIds(Optional<List<String>> imageIds) {
            this.imageIds = imageIds;
            return this;
        }

        public Builder imageIds(List<String> imageIds) {
            this.imageIds = Optional.ofNullable(imageIds);
            return this;
        }

        public Builder imageIds(Nullable<List<String>> imageIds) {
            if (imageIds.isNull()) {
                this.imageIds = null;
            } else if (imageIds.isEmpty()) {
                this.imageIds = Optional.empty();
            } else {
                this.imageIds = Optional.of(imageIds.get());
            }
            return this;
        }

        @JsonSetter(value = "sort_name", nulls = Nulls.SKIP)
        public Builder sortName(Optional<String> sortName) {
            this.sortName = sortName;
            return this;
        }

        public Builder sortName(String sortName) {
            this.sortName = Optional.ofNullable(sortName);
            return this;
        }

        public Builder sortName(Nullable<String> sortName) {
            if (sortName.isNull()) {
                this.sortName = null;
            } else if (sortName.isEmpty()) {
                this.sortName = Optional.empty();
            } else {
                this.sortName = Optional.of(sortName.get());
            }
            return this;
        }

        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public Builder categories(Optional<List<CatalogObjectCategory>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(List<CatalogObjectCategory> categories) {
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        public Builder categories(Nullable<List<CatalogObjectCategory>> categories) {
            if (categories.isNull()) {
                this.categories = null;
            } else if (categories.isEmpty()) {
                this.categories = Optional.empty();
            } else {
                this.categories = Optional.of(categories.get());
            }
            return this;
        }

        @JsonSetter(value = "description_html", nulls = Nulls.SKIP)
        public Builder descriptionHtml(Optional<String> descriptionHtml) {
            this.descriptionHtml = descriptionHtml;
            return this;
        }

        public Builder descriptionHtml(String descriptionHtml) {
            this.descriptionHtml = Optional.ofNullable(descriptionHtml);
            return this;
        }

        public Builder descriptionHtml(Nullable<String> descriptionHtml) {
            if (descriptionHtml.isNull()) {
                this.descriptionHtml = null;
            } else if (descriptionHtml.isEmpty()) {
                this.descriptionHtml = Optional.empty();
            } else {
                this.descriptionHtml = Optional.of(descriptionHtml.get());
            }
            return this;
        }

        @JsonSetter(value = "description_plaintext", nulls = Nulls.SKIP)
        public Builder descriptionPlaintext(Optional<String> descriptionPlaintext) {
            this.descriptionPlaintext = descriptionPlaintext;
            return this;
        }

        public Builder descriptionPlaintext(String descriptionPlaintext) {
            this.descriptionPlaintext = Optional.ofNullable(descriptionPlaintext);
            return this;
        }

        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public Builder channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        public Builder channels(List<String> channels) {
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Nullable<List<String>> channels) {
            if (channels.isNull()) {
                this.channels = null;
            } else if (channels.isEmpty()) {
                this.channels = Optional.empty();
            } else {
                this.channels = Optional.of(channels.get());
            }
            return this;
        }

        @JsonSetter(value = "is_archived", nulls = Nulls.SKIP)
        public Builder isArchived(Optional<Boolean> isArchived) {
            this.isArchived = isArchived;
            return this;
        }

        public Builder isArchived(Boolean isArchived) {
            this.isArchived = Optional.ofNullable(isArchived);
            return this;
        }

        public Builder isArchived(Nullable<Boolean> isArchived) {
            if (isArchived.isNull()) {
                this.isArchived = null;
            } else if (isArchived.isEmpty()) {
                this.isArchived = Optional.empty();
            } else {
                this.isArchived = Optional.of(isArchived.get());
            }
            return this;
        }

        @JsonSetter(value = "ecom_seo_data", nulls = Nulls.SKIP)
        public Builder ecomSeoData(Optional<CatalogEcomSeoData> ecomSeoData) {
            this.ecomSeoData = ecomSeoData;
            return this;
        }

        public Builder ecomSeoData(CatalogEcomSeoData ecomSeoData) {
            this.ecomSeoData = Optional.ofNullable(ecomSeoData);
            return this;
        }

        @JsonSetter(value = "food_and_beverage_details", nulls = Nulls.SKIP)
        public Builder foodAndBeverageDetails(Optional<CatalogItemFoodAndBeverageDetails> foodAndBeverageDetails) {
            this.foodAndBeverageDetails = foodAndBeverageDetails;
            return this;
        }

        public Builder foodAndBeverageDetails(CatalogItemFoodAndBeverageDetails foodAndBeverageDetails) {
            this.foodAndBeverageDetails = Optional.ofNullable(foodAndBeverageDetails);
            return this;
        }

        @JsonSetter(value = "reporting_category", nulls = Nulls.SKIP)
        public Builder reportingCategory(Optional<CatalogObjectCategory> reportingCategory) {
            this.reportingCategory = reportingCategory;
            return this;
        }

        public Builder reportingCategory(CatalogObjectCategory reportingCategory) {
            this.reportingCategory = Optional.ofNullable(reportingCategory);
            return this;
        }

        public CatalogItem build() {
            return new CatalogItem(
                    name,
                    description,
                    abbreviation,
                    labelColor,
                    isTaxable,
                    categoryId,
                    taxIds,
                    modifierListInfo,
                    variations,
                    productType,
                    skipModifierScreen,
                    itemOptions,
                    imageIds,
                    sortName,
                    categories,
                    descriptionHtml,
                    descriptionPlaintext,
                    channels,
                    isArchived,
                    ecomSeoData,
                    foodAndBeverageDetails,
                    reportingCategory,
                    additionalProperties);
        }
    }
}
