/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkUpdateCustomersRequest.Builder.class)
public final class BulkUpdateCustomersRequest {
    private final Map<String, BulkUpdateCustomerData> customers;

    private final Map<String, Object> additionalProperties;

    private BulkUpdateCustomersRequest(
            Map<String, BulkUpdateCustomerData> customers, Map<String, Object> additionalProperties) {
        this.customers = customers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A map of 1 to 100 individual update requests, represented by <code>customer ID: { customer data }</code>
     * key-value pairs.
     * <p>Each key is the ID of the <a href="entity:Customer">customer profile</a> to update. To update a customer profile
     * that was created by merging existing profiles, provide the ID of the newly created profile.</p>
     * <p>Each value contains the updated customer data. Only new or changed fields are required. To add or
     * update a field, specify the new value. To remove a field, specify <code>null</code>.</p>
     */
    @JsonProperty("customers")
    public Map<String, BulkUpdateCustomerData> getCustomers() {
        return customers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkUpdateCustomersRequest && equalTo((BulkUpdateCustomersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkUpdateCustomersRequest other) {
        return customers.equals(other.customers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, BulkUpdateCustomerData> customers = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkUpdateCustomersRequest other) {
            customers(other.getCustomers());
            return this;
        }

        @JsonSetter(value = "customers", nulls = Nulls.SKIP)
        public Builder customers(Map<String, BulkUpdateCustomerData> customers) {
            this.customers.clear();
            this.customers.putAll(customers);
            return this;
        }

        public Builder putAllCustomers(Map<String, BulkUpdateCustomerData> customers) {
            this.customers.putAll(customers);
            return this;
        }

        public Builder customers(String key, BulkUpdateCustomerData value) {
            this.customers.put(key, value);
            return this;
        }

        public BulkUpdateCustomersRequest build() {
            return new BulkUpdateCustomersRequest(customers, additionalProperties);
        }
    }
}
