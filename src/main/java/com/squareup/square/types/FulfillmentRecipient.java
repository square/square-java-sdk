/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FulfillmentRecipient.Builder.class)
public final class FulfillmentRecipient {
    private final Optional<String> customerId;

    private final Optional<String> displayName;

    private final Optional<String> emailAddress;

    private final Optional<String> phoneNumber;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private FulfillmentRecipient(
            Optional<String> customerId,
            Optional<String> displayName,
            Optional<String> emailAddress,
            Optional<String> phoneNumber,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.customerId = customerId;
        this.displayName = displayName;
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the customer associated with the fulfillment.
     * <p>If <code>customer_id</code> is provided, the fulfillment recipient's <code>display_name</code>,
     * <code>email_address</code>, and <code>phone_number</code> are automatically populated from the
     * targeted customer profile. If these fields are set in the request, the request
     * values override the information from the customer profile. If the
     * targeted customer profile does not contain the necessary information and
     * these fields are left unset, the request results in an error.</p>
     */
    @JsonIgnore
    public Optional<String> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    /**
     * @return The display name of the fulfillment recipient. This field is required.
     * <p>If provided, the display name overrides the corresponding customer profile value
     * indicated by <code>customer_id</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getDisplayName() {
        if (displayName == null) {
            return Optional.empty();
        }
        return displayName;
    }

    /**
     * @return The email address of the fulfillment recipient.
     * <p>If provided, the email address overrides the corresponding customer profile value
     * indicated by <code>customer_id</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getEmailAddress() {
        if (emailAddress == null) {
            return Optional.empty();
        }
        return emailAddress;
    }

    /**
     * @return The phone number of the fulfillment recipient. This field is required.
     * <p>If provided, the phone number overrides the corresponding customer profile value
     * indicated by <code>customer_id</code>.</p>
     */
    @JsonIgnore
    public Optional<String> getPhoneNumber() {
        if (phoneNumber == null) {
            return Optional.empty();
        }
        return phoneNumber;
    }

    /**
     * @return The address of the fulfillment recipient. This field is required.
     * <p>If provided, the address overrides the corresponding customer profile value
     * indicated by <code>customer_id</code>.</p>
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customer_id")
    private Optional<String> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("display_name")
    private Optional<String> _getDisplayName() {
        return displayName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email_address")
    private Optional<String> _getEmailAddress() {
        return emailAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phone_number")
    private Optional<String> _getPhoneNumber() {
        return phoneNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FulfillmentRecipient && equalTo((FulfillmentRecipient) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FulfillmentRecipient other) {
        return customerId.equals(other.customerId)
                && displayName.equals(other.displayName)
                && emailAddress.equals(other.emailAddress)
                && phoneNumber.equals(other.phoneNumber)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.customerId, this.displayName, this.emailAddress, this.phoneNumber, this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> customerId = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<String> emailAddress = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<Address> address = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FulfillmentRecipient other) {
            customerId(other.getCustomerId());
            displayName(other.getDisplayName());
            emailAddress(other.getEmailAddress());
            phoneNumber(other.getPhoneNumber());
            address(other.getAddress());
            return this;
        }

        @JsonSetter(value = "customer_id", nulls = Nulls.SKIP)
        public Builder customerId(Optional<String> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<String> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Nullable<String> displayName) {
            if (displayName.isNull()) {
                this.displayName = null;
            } else if (displayName.isEmpty()) {
                this.displayName = Optional.empty();
            } else {
                this.displayName = Optional.of(displayName.get());
            }
            return this;
        }

        @JsonSetter(value = "email_address", nulls = Nulls.SKIP)
        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        public Builder emailAddress(Nullable<String> emailAddress) {
            if (emailAddress.isNull()) {
                this.emailAddress = null;
            } else if (emailAddress.isEmpty()) {
                this.emailAddress = Optional.empty();
            } else {
                this.emailAddress = Optional.of(emailAddress.get());
            }
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Nullable<String> phoneNumber) {
            if (phoneNumber.isNull()) {
                this.phoneNumber = null;
            } else if (phoneNumber.isEmpty()) {
                this.phoneNumber = Optional.empty();
            } else {
                this.phoneNumber = Optional.of(phoneNumber.get());
            }
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        public FulfillmentRecipient build() {
            return new FulfillmentRecipient(
                    customerId, displayName, emailAddress, phoneNumber, address, additionalProperties);
        }
    }
}
