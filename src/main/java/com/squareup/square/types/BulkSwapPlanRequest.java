/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkSwapPlanRequest.Builder.class)
public final class BulkSwapPlanRequest {
    private final String newPlanVariationId;

    private final String oldPlanVariationId;

    private final String locationId;

    private final Map<String, Object> additionalProperties;

    private BulkSwapPlanRequest(
            String newPlanVariationId,
            String oldPlanVariationId,
            String locationId,
            Map<String, Object> additionalProperties) {
        this.newPlanVariationId = newPlanVariationId;
        this.oldPlanVariationId = oldPlanVariationId;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the new subscription plan variation.
     * <p>This field is required.</p>
     */
    @JsonProperty("new_plan_variation_id")
    public String getNewPlanVariationId() {
        return newPlanVariationId;
    }

    /**
     * @return The ID of the plan variation whose subscriptions should be swapped. Active subscriptions
     * using this plan variation will be subscribed to the new plan variation on their next billing
     * day.
     */
    @JsonProperty("old_plan_variation_id")
    public String getOldPlanVariationId() {
        return oldPlanVariationId;
    }

    /**
     * @return The ID of the location to associate with the swapped subscriptions.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkSwapPlanRequest && equalTo((BulkSwapPlanRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkSwapPlanRequest other) {
        return newPlanVariationId.equals(other.newPlanVariationId)
                && oldPlanVariationId.equals(other.oldPlanVariationId)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.newPlanVariationId, this.oldPlanVariationId, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NewPlanVariationIdStage builder() {
        return new Builder();
    }

    public interface NewPlanVariationIdStage {
        /**
         * <p>The ID of the new subscription plan variation.</p>
         * <p>This field is required.</p>
         */
        OldPlanVariationIdStage newPlanVariationId(@NotNull String newPlanVariationId);

        Builder from(BulkSwapPlanRequest other);
    }

    public interface OldPlanVariationIdStage {
        /**
         * <p>The ID of the plan variation whose subscriptions should be swapped. Active subscriptions
         * using this plan variation will be subscribed to the new plan variation on their next billing
         * day.</p>
         */
        LocationIdStage oldPlanVariationId(@NotNull String oldPlanVariationId);
    }

    public interface LocationIdStage {
        /**
         * <p>The ID of the location to associate with the swapped subscriptions.</p>
         */
        _FinalStage locationId(@NotNull String locationId);
    }

    public interface _FinalStage {
        BulkSwapPlanRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements NewPlanVariationIdStage, OldPlanVariationIdStage, LocationIdStage, _FinalStage {
        private String newPlanVariationId;

        private String oldPlanVariationId;

        private String locationId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BulkSwapPlanRequest other) {
            newPlanVariationId(other.getNewPlanVariationId());
            oldPlanVariationId(other.getOldPlanVariationId());
            locationId(other.getLocationId());
            return this;
        }

        /**
         * <p>The ID of the new subscription plan variation.</p>
         * <p>This field is required.</p>
         * <p>The ID of the new subscription plan variation.</p>
         * <p>This field is required.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("new_plan_variation_id")
        public OldPlanVariationIdStage newPlanVariationId(@NotNull String newPlanVariationId) {
            this.newPlanVariationId = Objects.requireNonNull(newPlanVariationId, "newPlanVariationId must not be null");
            return this;
        }

        /**
         * <p>The ID of the plan variation whose subscriptions should be swapped. Active subscriptions
         * using this plan variation will be subscribed to the new plan variation on their next billing
         * day.</p>
         * <p>The ID of the plan variation whose subscriptions should be swapped. Active subscriptions
         * using this plan variation will be subscribed to the new plan variation on their next billing
         * day.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("old_plan_variation_id")
        public LocationIdStage oldPlanVariationId(@NotNull String oldPlanVariationId) {
            this.oldPlanVariationId = Objects.requireNonNull(oldPlanVariationId, "oldPlanVariationId must not be null");
            return this;
        }

        /**
         * <p>The ID of the location to associate with the swapped subscriptions.</p>
         * <p>The ID of the location to associate with the swapped subscriptions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        @java.lang.Override
        public BulkSwapPlanRequest build() {
            return new BulkSwapPlanRequest(newPlanVariationId, oldPlanVariationId, locationId, additionalProperties);
        }
    }
}
