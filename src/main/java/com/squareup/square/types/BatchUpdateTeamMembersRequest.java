/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchUpdateTeamMembersRequest.Builder.class)
public final class BatchUpdateTeamMembersRequest {
    private final Map<String, UpdateTeamMemberRequest> teamMembers;

    private final Map<String, Object> additionalProperties;

    private BatchUpdateTeamMembersRequest(
            Map<String, UpdateTeamMemberRequest> teamMembers, Map<String, Object> additionalProperties) {
        this.teamMembers = teamMembers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The data used to update the <code>TeamMember</code> objects. Each key is the <code>team_member_id</code> that maps to the <code>UpdateTeamMemberRequest</code>.
     * The maximum number of update objects is 25.
     * <p>For each team member, include the fields to add, change, or clear. Fields can be cleared using a null value.
     * To update <code>wage_setting.job_assignments</code>, you must provide the complete list of job assignments. If needed,
     * call <a href="api-endpoint:Team-ListJobs">ListJobs</a> to get the required <code>job_id</code> values.</p>
     */
    @JsonProperty("team_members")
    public Map<String, UpdateTeamMemberRequest> getTeamMembers() {
        return teamMembers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchUpdateTeamMembersRequest && equalTo((BatchUpdateTeamMembersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchUpdateTeamMembersRequest other) {
        return teamMembers.equals(other.teamMembers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.teamMembers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, UpdateTeamMemberRequest> teamMembers = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BatchUpdateTeamMembersRequest other) {
            teamMembers(other.getTeamMembers());
            return this;
        }

        /**
         * <p>The data used to update the <code>TeamMember</code> objects. Each key is the <code>team_member_id</code> that maps to the <code>UpdateTeamMemberRequest</code>.
         * The maximum number of update objects is 25.</p>
         * <p>For each team member, include the fields to add, change, or clear. Fields can be cleared using a null value.
         * To update <code>wage_setting.job_assignments</code>, you must provide the complete list of job assignments. If needed,
         * call <a href="api-endpoint:Team-ListJobs">ListJobs</a> to get the required <code>job_id</code> values.</p>
         */
        @JsonSetter(value = "team_members", nulls = Nulls.SKIP)
        public Builder teamMembers(Map<String, UpdateTeamMemberRequest> teamMembers) {
            this.teamMembers.clear();
            this.teamMembers.putAll(teamMembers);
            return this;
        }

        public Builder putAllTeamMembers(Map<String, UpdateTeamMemberRequest> teamMembers) {
            this.teamMembers.putAll(teamMembers);
            return this;
        }

        public Builder teamMembers(String key, UpdateTeamMemberRequest value) {
            this.teamMembers.put(key, value);
            return this;
        }

        public BatchUpdateTeamMembersRequest build() {
            return new BatchUpdateTeamMembersRequest(teamMembers, additionalProperties);
        }
    }
}
