/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BulkPublishScheduledShiftsData.Builder.class)
public final class BulkPublishScheduledShiftsData {
    private final Optional<Integer> version;

    private final Map<String, Object> additionalProperties;

    private BulkPublishScheduledShiftsData(Optional<Integer> version, Map<String, Object> additionalProperties) {
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The current version of the scheduled shift, used to enable <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency">optimistic concurrency</a>
     * control. If the provided version doesn't match the server version, the request fails.
     * If omitted, Square executes a blind write, potentially overwriting data from another publish request.
     */
    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkPublishScheduledShiftsData && equalTo((BulkPublishScheduledShiftsData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkPublishScheduledShiftsData other) {
        return version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkPublishScheduledShiftsData other) {
            version(other.getVersion());
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        public BulkPublishScheduledShiftsData build() {
            return new BulkPublishScheduledShiftsData(version, additionalProperties);
        }
    }
}
