/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SourceApplication.Builder.class)
public final class SourceApplication {
    private final Optional<Product> product;

    private final Optional<String> applicationId;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private SourceApplication(
            Optional<Product> product,
            Optional<String> applicationId,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.product = product;
        this.applicationId = applicationId;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return <strong>Read only</strong> The <a href="entity:Product">product</a> type of the application.
     * See <a href="#type-product">Product</a> for possible values
     */
    @JsonProperty("product")
    public Optional<Product> getProduct() {
        return product;
    }

    /**
     * @return <strong>Read only</strong> The Square-assigned ID of the application. This field is used only if the
     * <a href="entity:Product">product</a> type is <code>EXTERNAL_API</code>.
     */
    @JsonIgnore
    public Optional<String> getApplicationId() {
        if (applicationId == null) {
            return Optional.empty();
        }
        return applicationId;
    }

    /**
     * @return <strong>Read only</strong> The display name of the application
     * (for example, <code>&quot;Custom Application&quot;</code> or <code>&quot;Square POS 4.74 for Android&quot;</code>).
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("application_id")
    private Optional<String> _getApplicationId() {
        return applicationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SourceApplication && equalTo((SourceApplication) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SourceApplication other) {
        return product.equals(other.product) && applicationId.equals(other.applicationId) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.product, this.applicationId, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Product> product = Optional.empty();

        private Optional<String> applicationId = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SourceApplication other) {
            product(other.getProduct());
            applicationId(other.getApplicationId());
            name(other.getName());
            return this;
        }

        /**
         * <p><strong>Read only</strong> The <a href="entity:Product">product</a> type of the application.
         * See <a href="#type-product">Product</a> for possible values</p>
         */
        @JsonSetter(value = "product", nulls = Nulls.SKIP)
        public Builder product(Optional<Product> product) {
            this.product = product;
            return this;
        }

        public Builder product(Product product) {
            this.product = Optional.ofNullable(product);
            return this;
        }

        /**
         * <p><strong>Read only</strong> The Square-assigned ID of the application. This field is used only if the
         * <a href="entity:Product">product</a> type is <code>EXTERNAL_API</code>.</p>
         */
        @JsonSetter(value = "application_id", nulls = Nulls.SKIP)
        public Builder applicationId(Optional<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        public Builder applicationId(Nullable<String> applicationId) {
            if (applicationId.isNull()) {
                this.applicationId = null;
            } else if (applicationId.isEmpty()) {
                this.applicationId = Optional.empty();
            } else {
                this.applicationId = Optional.of(applicationId.get());
            }
            return this;
        }

        /**
         * <p><strong>Read only</strong> The display name of the application
         * (for example, <code>&quot;Custom Application&quot;</code> or <code>&quot;Square POS 4.74 for Android&quot;</code>).</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        public SourceApplication build() {
            return new SourceApplication(product, applicationId, name, additionalProperties);
        }
    }
}
