/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchOrdersFulfillmentFilter.Builder.class)
public final class SearchOrdersFulfillmentFilter {
    private final Optional<List<FulfillmentType>> fulfillmentTypes;

    private final Optional<List<FulfillmentState>> fulfillmentStates;

    private final Map<String, Object> additionalProperties;

    private SearchOrdersFulfillmentFilter(
            Optional<List<FulfillmentType>> fulfillmentTypes,
            Optional<List<FulfillmentState>> fulfillmentStates,
            Map<String, Object> additionalProperties) {
        this.fulfillmentTypes = fulfillmentTypes;
        this.fulfillmentStates = fulfillmentStates;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A list of <a href="entity:FulfillmentType">fulfillment types</a> to filter
     * for. The list returns orders if any of its fulfillments match any of the fulfillment types
     * listed in this field.
     * See <a href="#type-fulfillmenttype">FulfillmentType</a> for possible values
     */
    @JsonIgnore
    public Optional<List<FulfillmentType>> getFulfillmentTypes() {
        if (fulfillmentTypes == null) {
            return Optional.empty();
        }
        return fulfillmentTypes;
    }

    /**
     * @return A list of <a href="entity:FulfillmentState">fulfillment states</a> to filter
     * for. The list returns orders if any of its fulfillments match any of the
     * fulfillment states listed in this field.
     * See <a href="#type-fulfillmentstate">FulfillmentState</a> for possible values
     */
    @JsonIgnore
    public Optional<List<FulfillmentState>> getFulfillmentStates() {
        if (fulfillmentStates == null) {
            return Optional.empty();
        }
        return fulfillmentStates;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fulfillment_types")
    private Optional<List<FulfillmentType>> _getFulfillmentTypes() {
        return fulfillmentTypes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fulfillment_states")
    private Optional<List<FulfillmentState>> _getFulfillmentStates() {
        return fulfillmentStates;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchOrdersFulfillmentFilter && equalTo((SearchOrdersFulfillmentFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchOrdersFulfillmentFilter other) {
        return fulfillmentTypes.equals(other.fulfillmentTypes) && fulfillmentStates.equals(other.fulfillmentStates);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fulfillmentTypes, this.fulfillmentStates);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<FulfillmentType>> fulfillmentTypes = Optional.empty();

        private Optional<List<FulfillmentState>> fulfillmentStates = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchOrdersFulfillmentFilter other) {
            fulfillmentTypes(other.getFulfillmentTypes());
            fulfillmentStates(other.getFulfillmentStates());
            return this;
        }

        /**
         * <p>A list of <a href="entity:FulfillmentType">fulfillment types</a> to filter
         * for. The list returns orders if any of its fulfillments match any of the fulfillment types
         * listed in this field.
         * See <a href="#type-fulfillmenttype">FulfillmentType</a> for possible values</p>
         */
        @JsonSetter(value = "fulfillment_types", nulls = Nulls.SKIP)
        public Builder fulfillmentTypes(Optional<List<FulfillmentType>> fulfillmentTypes) {
            this.fulfillmentTypes = fulfillmentTypes;
            return this;
        }

        public Builder fulfillmentTypes(List<FulfillmentType> fulfillmentTypes) {
            this.fulfillmentTypes = Optional.ofNullable(fulfillmentTypes);
            return this;
        }

        public Builder fulfillmentTypes(Nullable<List<FulfillmentType>> fulfillmentTypes) {
            if (fulfillmentTypes.isNull()) {
                this.fulfillmentTypes = null;
            } else if (fulfillmentTypes.isEmpty()) {
                this.fulfillmentTypes = Optional.empty();
            } else {
                this.fulfillmentTypes = Optional.of(fulfillmentTypes.get());
            }
            return this;
        }

        /**
         * <p>A list of <a href="entity:FulfillmentState">fulfillment states</a> to filter
         * for. The list returns orders if any of its fulfillments match any of the
         * fulfillment states listed in this field.
         * See <a href="#type-fulfillmentstate">FulfillmentState</a> for possible values</p>
         */
        @JsonSetter(value = "fulfillment_states", nulls = Nulls.SKIP)
        public Builder fulfillmentStates(Optional<List<FulfillmentState>> fulfillmentStates) {
            this.fulfillmentStates = fulfillmentStates;
            return this;
        }

        public Builder fulfillmentStates(List<FulfillmentState> fulfillmentStates) {
            this.fulfillmentStates = Optional.ofNullable(fulfillmentStates);
            return this;
        }

        public Builder fulfillmentStates(Nullable<List<FulfillmentState>> fulfillmentStates) {
            if (fulfillmentStates.isNull()) {
                this.fulfillmentStates = null;
            } else if (fulfillmentStates.isEmpty()) {
                this.fulfillmentStates = Optional.empty();
            } else {
                this.fulfillmentStates = Optional.of(fulfillmentStates.get());
            }
            return this;
        }

        public SearchOrdersFulfillmentFilter build() {
            return new SearchOrdersFulfillmentFilter(fulfillmentTypes, fulfillmentStates, additionalProperties);
        }
    }
}
