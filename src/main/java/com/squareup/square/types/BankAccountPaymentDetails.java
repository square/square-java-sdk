/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankAccountPaymentDetails.Builder.class)
public final class BankAccountPaymentDetails {
    private final Optional<String> bankName;

    private final Optional<String> transferType;

    private final Optional<String> accountOwnershipType;

    private final Optional<String> fingerprint;

    private final Optional<String> country;

    private final Optional<String> statementDescription;

    private final Optional<AchDetails> achDetails;

    private final Optional<List<Error>> errors;

    private final Map<String, Object> additionalProperties;

    private BankAccountPaymentDetails(
            Optional<String> bankName,
            Optional<String> transferType,
            Optional<String> accountOwnershipType,
            Optional<String> fingerprint,
            Optional<String> country,
            Optional<String> statementDescription,
            Optional<AchDetails> achDetails,
            Optional<List<Error>> errors,
            Map<String, Object> additionalProperties) {
        this.bankName = bankName;
        this.transferType = transferType;
        this.accountOwnershipType = accountOwnershipType;
        this.fingerprint = fingerprint;
        this.country = country;
        this.statementDescription = statementDescription;
        this.achDetails = achDetails;
        this.errors = errors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the bank associated with the bank account.
     */
    @JsonIgnore
    public Optional<String> getBankName() {
        if (bankName == null) {
            return Optional.empty();
        }
        return bankName;
    }

    /**
     * @return The type of the bank transfer. The type can be <code>ACH</code> or <code>UNKNOWN</code>.
     */
    @JsonIgnore
    public Optional<String> getTransferType() {
        if (transferType == null) {
            return Optional.empty();
        }
        return transferType;
    }

    /**
     * @return The ownership type of the bank account performing the transfer.
     * The type can be <code>INDIVIDUAL</code>, <code>COMPANY</code>, or <code>ACCOUNT_TYPE_UNKNOWN</code>.
     */
    @JsonIgnore
    public Optional<String> getAccountOwnershipType() {
        if (accountOwnershipType == null) {
            return Optional.empty();
        }
        return accountOwnershipType;
    }

    /**
     * @return Uniquely identifies the bank account for this seller and can be used
     * to determine if payments are from the same bank account.
     */
    @JsonIgnore
    public Optional<String> getFingerprint() {
        if (fingerprint == null) {
            return Optional.empty();
        }
        return fingerprint;
    }

    /**
     * @return The two-letter ISO code representing the country the bank account is located in.
     */
    @JsonIgnore
    public Optional<String> getCountry() {
        if (country == null) {
            return Optional.empty();
        }
        return country;
    }

    /**
     * @return The statement description as sent to the bank.
     */
    @JsonIgnore
    public Optional<String> getStatementDescription() {
        if (statementDescription == null) {
            return Optional.empty();
        }
        return statementDescription;
    }

    /**
     * @return ACH-specific information about the transfer. The information is only populated
     * if the <code>transfer_type</code> is <code>ACH</code>.
     */
    @JsonProperty("ach_details")
    public Optional<AchDetails> getAchDetails() {
        return achDetails;
    }

    /**
     * @return Information about errors encountered during the request.
     */
    @JsonIgnore
    public Optional<List<Error>> getErrors() {
        if (errors == null) {
            return Optional.empty();
        }
        return errors;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bank_name")
    private Optional<String> _getBankName() {
        return bankName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transfer_type")
    private Optional<String> _getTransferType() {
        return transferType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("account_ownership_type")
    private Optional<String> _getAccountOwnershipType() {
        return accountOwnershipType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("fingerprint")
    private Optional<String> _getFingerprint() {
        return fingerprint;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("country")
    private Optional<String> _getCountry() {
        return country;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("statement_description")
    private Optional<String> _getStatementDescription() {
        return statementDescription;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("errors")
    private Optional<List<Error>> _getErrors() {
        return errors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankAccountPaymentDetails && equalTo((BankAccountPaymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankAccountPaymentDetails other) {
        return bankName.equals(other.bankName)
                && transferType.equals(other.transferType)
                && accountOwnershipType.equals(other.accountOwnershipType)
                && fingerprint.equals(other.fingerprint)
                && country.equals(other.country)
                && statementDescription.equals(other.statementDescription)
                && achDetails.equals(other.achDetails)
                && errors.equals(other.errors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.bankName,
                this.transferType,
                this.accountOwnershipType,
                this.fingerprint,
                this.country,
                this.statementDescription,
                this.achDetails,
                this.errors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> bankName = Optional.empty();

        private Optional<String> transferType = Optional.empty();

        private Optional<String> accountOwnershipType = Optional.empty();

        private Optional<String> fingerprint = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> statementDescription = Optional.empty();

        private Optional<AchDetails> achDetails = Optional.empty();

        private Optional<List<Error>> errors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BankAccountPaymentDetails other) {
            bankName(other.getBankName());
            transferType(other.getTransferType());
            accountOwnershipType(other.getAccountOwnershipType());
            fingerprint(other.getFingerprint());
            country(other.getCountry());
            statementDescription(other.getStatementDescription());
            achDetails(other.getAchDetails());
            errors(other.getErrors());
            return this;
        }

        @JsonSetter(value = "bank_name", nulls = Nulls.SKIP)
        public Builder bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        public Builder bankName(Nullable<String> bankName) {
            if (bankName.isNull()) {
                this.bankName = null;
            } else if (bankName.isEmpty()) {
                this.bankName = Optional.empty();
            } else {
                this.bankName = Optional.of(bankName.get());
            }
            return this;
        }

        @JsonSetter(value = "transfer_type", nulls = Nulls.SKIP)
        public Builder transferType(Optional<String> transferType) {
            this.transferType = transferType;
            return this;
        }

        public Builder transferType(String transferType) {
            this.transferType = Optional.ofNullable(transferType);
            return this;
        }

        public Builder transferType(Nullable<String> transferType) {
            if (transferType.isNull()) {
                this.transferType = null;
            } else if (transferType.isEmpty()) {
                this.transferType = Optional.empty();
            } else {
                this.transferType = Optional.of(transferType.get());
            }
            return this;
        }

        @JsonSetter(value = "account_ownership_type", nulls = Nulls.SKIP)
        public Builder accountOwnershipType(Optional<String> accountOwnershipType) {
            this.accountOwnershipType = accountOwnershipType;
            return this;
        }

        public Builder accountOwnershipType(String accountOwnershipType) {
            this.accountOwnershipType = Optional.ofNullable(accountOwnershipType);
            return this;
        }

        public Builder accountOwnershipType(Nullable<String> accountOwnershipType) {
            if (accountOwnershipType.isNull()) {
                this.accountOwnershipType = null;
            } else if (accountOwnershipType.isEmpty()) {
                this.accountOwnershipType = Optional.empty();
            } else {
                this.accountOwnershipType = Optional.of(accountOwnershipType.get());
            }
            return this;
        }

        @JsonSetter(value = "fingerprint", nulls = Nulls.SKIP)
        public Builder fingerprint(Optional<String> fingerprint) {
            this.fingerprint = fingerprint;
            return this;
        }

        public Builder fingerprint(String fingerprint) {
            this.fingerprint = Optional.ofNullable(fingerprint);
            return this;
        }

        public Builder fingerprint(Nullable<String> fingerprint) {
            if (fingerprint.isNull()) {
                this.fingerprint = null;
            } else if (fingerprint.isEmpty()) {
                this.fingerprint = Optional.empty();
            } else {
                this.fingerprint = Optional.of(fingerprint.get());
            }
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Nullable<String> country) {
            if (country.isNull()) {
                this.country = null;
            } else if (country.isEmpty()) {
                this.country = Optional.empty();
            } else {
                this.country = Optional.of(country.get());
            }
            return this;
        }

        @JsonSetter(value = "statement_description", nulls = Nulls.SKIP)
        public Builder statementDescription(Optional<String> statementDescription) {
            this.statementDescription = statementDescription;
            return this;
        }

        public Builder statementDescription(String statementDescription) {
            this.statementDescription = Optional.ofNullable(statementDescription);
            return this;
        }

        public Builder statementDescription(Nullable<String> statementDescription) {
            if (statementDescription.isNull()) {
                this.statementDescription = null;
            } else if (statementDescription.isEmpty()) {
                this.statementDescription = Optional.empty();
            } else {
                this.statementDescription = Optional.of(statementDescription.get());
            }
            return this;
        }

        @JsonSetter(value = "ach_details", nulls = Nulls.SKIP)
        public Builder achDetails(Optional<AchDetails> achDetails) {
            this.achDetails = achDetails;
            return this;
        }

        public Builder achDetails(AchDetails achDetails) {
            this.achDetails = Optional.ofNullable(achDetails);
            return this;
        }

        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<Error>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<Error> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Nullable<List<Error>> errors) {
            if (errors.isNull()) {
                this.errors = null;
            } else if (errors.isEmpty()) {
                this.errors = Optional.empty();
            } else {
                this.errors = Optional.of(errors.get());
            }
            return this;
        }

        public BankAccountPaymentDetails build() {
            return new BankAccountPaymentDetails(
                    bankName,
                    transferType,
                    accountOwnershipType,
                    fingerprint,
                    country,
                    statementDescription,
                    achDetails,
                    errors,
                    additionalProperties);
        }
    }
}
