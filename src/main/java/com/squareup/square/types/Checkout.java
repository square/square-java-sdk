/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Checkout.Builder.class)
public final class Checkout {
    private final Optional<String> id;

    private final Optional<String> checkoutPageUrl;

    private final Optional<Boolean> askForShippingAddress;

    private final Optional<String> merchantSupportEmail;

    private final Optional<String> prePopulateBuyerEmail;

    private final Optional<Address> prePopulateShippingAddress;

    private final Optional<String> redirectUrl;

    private final Optional<Order> order;

    private final Optional<String> createdAt;

    private final Optional<List<AdditionalRecipient>> additionalRecipients;

    private final Map<String, Object> additionalProperties;

    private Checkout(
            Optional<String> id,
            Optional<String> checkoutPageUrl,
            Optional<Boolean> askForShippingAddress,
            Optional<String> merchantSupportEmail,
            Optional<String> prePopulateBuyerEmail,
            Optional<Address> prePopulateShippingAddress,
            Optional<String> redirectUrl,
            Optional<Order> order,
            Optional<String> createdAt,
            Optional<List<AdditionalRecipient>> additionalRecipients,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.checkoutPageUrl = checkoutPageUrl;
        this.askForShippingAddress = askForShippingAddress;
        this.merchantSupportEmail = merchantSupportEmail;
        this.prePopulateBuyerEmail = prePopulateBuyerEmail;
        this.prePopulateShippingAddress = prePopulateShippingAddress;
        this.redirectUrl = redirectUrl;
        this.order = order;
        this.createdAt = createdAt;
        this.additionalRecipients = additionalRecipients;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ID generated by Square Checkout when a new checkout is requested.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The URL that the buyer's browser should be redirected to after the
     * checkout is completed.
     */
    @JsonIgnore
    public Optional<String> getCheckoutPageUrl() {
        if (checkoutPageUrl == null) {
            return Optional.empty();
        }
        return checkoutPageUrl;
    }

    /**
     * @return If <code>true</code>, Square Checkout will collect shipping information on your
     * behalf and store that information with the transaction information in your
     * Square Dashboard.
     * <p>Default: <code>false</code>.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getAskForShippingAddress() {
        if (askForShippingAddress == null) {
            return Optional.empty();
        }
        return askForShippingAddress;
    }

    /**
     * @return The email address to display on the Square Checkout confirmation page
     * and confirmation email that the buyer can use to contact the merchant.
     * <p>If this value is not set, the confirmation page and email will display the
     * primary email address associated with the merchant's Square account.</p>
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonIgnore
    public Optional<String> getMerchantSupportEmail() {
        if (merchantSupportEmail == null) {
            return Optional.empty();
        }
        return merchantSupportEmail;
    }

    /**
     * @return If provided, the buyer's email is pre-populated on the checkout page
     * as an editable text field.
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonIgnore
    public Optional<String> getPrePopulateBuyerEmail() {
        if (prePopulateBuyerEmail == null) {
            return Optional.empty();
        }
        return prePopulateBuyerEmail;
    }

    /**
     * @return If provided, the buyer's shipping info is pre-populated on the
     * checkout page as editable text fields.
     * <p>Default: none; only exists if explicitly set.</p>
     */
    @JsonProperty("pre_populate_shipping_address")
    public Optional<Address> getPrePopulateShippingAddress() {
        return prePopulateShippingAddress;
    }

    /**
     * @return The URL to redirect to after checkout is completed with <code>checkoutId</code>,
     * Square's <code>orderId</code>, <code>transactionId</code>, and <code>referenceId</code> appended as URL
     * parameters. For example, if the provided redirect_url is
     * <code>http://www.example.com/order-complete</code>, a successful transaction redirects
     * the customer to:
     * <p>&lt;pre&gt;&lt;code&gt;http://www.example.com/order-complete?checkoutId=xxxxxx&amp;amp;orderId=xxxxxx&amp;amp;referenceId=xxxxxx&amp;amp;transactionId=xxxxxx&lt;/code&gt;&lt;/pre&gt;</p>
     * <p>If you do not provide a redirect URL, Square Checkout will display an order
     * confirmation page on your behalf; however Square strongly recommends that
     * you provide a redirect URL so you can verify the transaction results and
     * finalize the order through your existing/normal confirmation workflow.</p>
     */
    @JsonIgnore
    public Optional<String> getRedirectUrl() {
        if (redirectUrl == null) {
            return Optional.empty();
        }
        return redirectUrl;
    }

    /**
     * @return Order to be checked out.
     */
    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    /**
     * @return The time when the checkout was created, in RFC 3339 format.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Additional recipients (other than the merchant) receiving a portion of this checkout.
     * For example, fees assessed on the purchase by a third party integration.
     */
    @JsonIgnore
    public Optional<List<AdditionalRecipient>> getAdditionalRecipients() {
        if (additionalRecipients == null) {
            return Optional.empty();
        }
        return additionalRecipients;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("checkout_page_url")
    private Optional<String> _getCheckoutPageUrl() {
        return checkoutPageUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ask_for_shipping_address")
    private Optional<Boolean> _getAskForShippingAddress() {
        return askForShippingAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("merchant_support_email")
    private Optional<String> _getMerchantSupportEmail() {
        return merchantSupportEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pre_populate_buyer_email")
    private Optional<String> _getPrePopulateBuyerEmail() {
        return prePopulateBuyerEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("redirect_url")
    private Optional<String> _getRedirectUrl() {
        return redirectUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("additional_recipients")
    private Optional<List<AdditionalRecipient>> _getAdditionalRecipients() {
        return additionalRecipients;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Checkout && equalTo((Checkout) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Checkout other) {
        return id.equals(other.id)
                && checkoutPageUrl.equals(other.checkoutPageUrl)
                && askForShippingAddress.equals(other.askForShippingAddress)
                && merchantSupportEmail.equals(other.merchantSupportEmail)
                && prePopulateBuyerEmail.equals(other.prePopulateBuyerEmail)
                && prePopulateShippingAddress.equals(other.prePopulateShippingAddress)
                && redirectUrl.equals(other.redirectUrl)
                && order.equals(other.order)
                && createdAt.equals(other.createdAt)
                && additionalRecipients.equals(other.additionalRecipients);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.checkoutPageUrl,
                this.askForShippingAddress,
                this.merchantSupportEmail,
                this.prePopulateBuyerEmail,
                this.prePopulateShippingAddress,
                this.redirectUrl,
                this.order,
                this.createdAt,
                this.additionalRecipients);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> checkoutPageUrl = Optional.empty();

        private Optional<Boolean> askForShippingAddress = Optional.empty();

        private Optional<String> merchantSupportEmail = Optional.empty();

        private Optional<String> prePopulateBuyerEmail = Optional.empty();

        private Optional<Address> prePopulateShippingAddress = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Optional<Order> order = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<List<AdditionalRecipient>> additionalRecipients = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Checkout other) {
            id(other.getId());
            checkoutPageUrl(other.getCheckoutPageUrl());
            askForShippingAddress(other.getAskForShippingAddress());
            merchantSupportEmail(other.getMerchantSupportEmail());
            prePopulateBuyerEmail(other.getPrePopulateBuyerEmail());
            prePopulateShippingAddress(other.getPrePopulateShippingAddress());
            redirectUrl(other.getRedirectUrl());
            order(other.getOrder());
            createdAt(other.getCreatedAt());
            additionalRecipients(other.getAdditionalRecipients());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "checkout_page_url", nulls = Nulls.SKIP)
        public Builder checkoutPageUrl(Optional<String> checkoutPageUrl) {
            this.checkoutPageUrl = checkoutPageUrl;
            return this;
        }

        public Builder checkoutPageUrl(String checkoutPageUrl) {
            this.checkoutPageUrl = Optional.ofNullable(checkoutPageUrl);
            return this;
        }

        public Builder checkoutPageUrl(Nullable<String> checkoutPageUrl) {
            if (checkoutPageUrl.isNull()) {
                this.checkoutPageUrl = null;
            } else if (checkoutPageUrl.isEmpty()) {
                this.checkoutPageUrl = Optional.empty();
            } else {
                this.checkoutPageUrl = Optional.of(checkoutPageUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "ask_for_shipping_address", nulls = Nulls.SKIP)
        public Builder askForShippingAddress(Optional<Boolean> askForShippingAddress) {
            this.askForShippingAddress = askForShippingAddress;
            return this;
        }

        public Builder askForShippingAddress(Boolean askForShippingAddress) {
            this.askForShippingAddress = Optional.ofNullable(askForShippingAddress);
            return this;
        }

        public Builder askForShippingAddress(Nullable<Boolean> askForShippingAddress) {
            if (askForShippingAddress.isNull()) {
                this.askForShippingAddress = null;
            } else if (askForShippingAddress.isEmpty()) {
                this.askForShippingAddress = Optional.empty();
            } else {
                this.askForShippingAddress = Optional.of(askForShippingAddress.get());
            }
            return this;
        }

        @JsonSetter(value = "merchant_support_email", nulls = Nulls.SKIP)
        public Builder merchantSupportEmail(Optional<String> merchantSupportEmail) {
            this.merchantSupportEmail = merchantSupportEmail;
            return this;
        }

        public Builder merchantSupportEmail(String merchantSupportEmail) {
            this.merchantSupportEmail = Optional.ofNullable(merchantSupportEmail);
            return this;
        }

        public Builder merchantSupportEmail(Nullable<String> merchantSupportEmail) {
            if (merchantSupportEmail.isNull()) {
                this.merchantSupportEmail = null;
            } else if (merchantSupportEmail.isEmpty()) {
                this.merchantSupportEmail = Optional.empty();
            } else {
                this.merchantSupportEmail = Optional.of(merchantSupportEmail.get());
            }
            return this;
        }

        @JsonSetter(value = "pre_populate_buyer_email", nulls = Nulls.SKIP)
        public Builder prePopulateBuyerEmail(Optional<String> prePopulateBuyerEmail) {
            this.prePopulateBuyerEmail = prePopulateBuyerEmail;
            return this;
        }

        public Builder prePopulateBuyerEmail(String prePopulateBuyerEmail) {
            this.prePopulateBuyerEmail = Optional.ofNullable(prePopulateBuyerEmail);
            return this;
        }

        public Builder prePopulateBuyerEmail(Nullable<String> prePopulateBuyerEmail) {
            if (prePopulateBuyerEmail.isNull()) {
                this.prePopulateBuyerEmail = null;
            } else if (prePopulateBuyerEmail.isEmpty()) {
                this.prePopulateBuyerEmail = Optional.empty();
            } else {
                this.prePopulateBuyerEmail = Optional.of(prePopulateBuyerEmail.get());
            }
            return this;
        }

        @JsonSetter(value = "pre_populate_shipping_address", nulls = Nulls.SKIP)
        public Builder prePopulateShippingAddress(Optional<Address> prePopulateShippingAddress) {
            this.prePopulateShippingAddress = prePopulateShippingAddress;
            return this;
        }

        public Builder prePopulateShippingAddress(Address prePopulateShippingAddress) {
            this.prePopulateShippingAddress = Optional.ofNullable(prePopulateShippingAddress);
            return this;
        }

        @JsonSetter(value = "redirect_url", nulls = Nulls.SKIP)
        public Builder redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        public Builder redirectUrl(Nullable<String> redirectUrl) {
            if (redirectUrl.isNull()) {
                this.redirectUrl = null;
            } else if (redirectUrl.isEmpty()) {
                this.redirectUrl = Optional.empty();
            } else {
                this.redirectUrl = Optional.of(redirectUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        public Builder order(Order order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "additional_recipients", nulls = Nulls.SKIP)
        public Builder additionalRecipients(Optional<List<AdditionalRecipient>> additionalRecipients) {
            this.additionalRecipients = additionalRecipients;
            return this;
        }

        public Builder additionalRecipients(List<AdditionalRecipient> additionalRecipients) {
            this.additionalRecipients = Optional.ofNullable(additionalRecipients);
            return this;
        }

        public Builder additionalRecipients(Nullable<List<AdditionalRecipient>> additionalRecipients) {
            if (additionalRecipients.isNull()) {
                this.additionalRecipients = null;
            } else if (additionalRecipients.isEmpty()) {
                this.additionalRecipients = Optional.empty();
            } else {
                this.additionalRecipients = Optional.of(additionalRecipients.get());
            }
            return this;
        }

        public Checkout build() {
            return new Checkout(
                    id,
                    checkoutPageUrl,
                    askForShippingAddress,
                    merchantSupportEmail,
                    prePopulateBuyerEmail,
                    prePopulateShippingAddress,
                    redirectUrl,
                    order,
                    createdAt,
                    additionalRecipients,
                    additionalProperties);
        }
    }
}
