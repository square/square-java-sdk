/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Location.Builder.class)
public final class Location {
    private final Optional<String> id;

    private final Optional<String> name;

    private final Optional<Address> address;

    private final Optional<String> timezone;

    private final Optional<List<LocationCapability>> capabilities;

    private final Optional<LocationStatus> status;

    private final Optional<String> createdAt;

    private final Optional<String> merchantId;

    private final Optional<Country> country;

    private final Optional<String> languageCode;

    private final Optional<Currency> currency;

    private final Optional<String> phoneNumber;

    private final Optional<String> businessName;

    private final Optional<LocationType> type;

    private final Optional<String> websiteUrl;

    private final Optional<BusinessHours> businessHours;

    private final Optional<String> businessEmail;

    private final Optional<String> description;

    private final Optional<String> twitterUsername;

    private final Optional<String> instagramUsername;

    private final Optional<String> facebookUrl;

    private final Optional<Coordinates> coordinates;

    private final Optional<String> logoUrl;

    private final Optional<String> posBackgroundUrl;

    private final Optional<String> mcc;

    private final Optional<String> fullFormatLogoUrl;

    private final Optional<TaxIds> taxIds;

    private final Map<String, Object> additionalProperties;

    private Location(
            Optional<String> id,
            Optional<String> name,
            Optional<Address> address,
            Optional<String> timezone,
            Optional<List<LocationCapability>> capabilities,
            Optional<LocationStatus> status,
            Optional<String> createdAt,
            Optional<String> merchantId,
            Optional<Country> country,
            Optional<String> languageCode,
            Optional<Currency> currency,
            Optional<String> phoneNumber,
            Optional<String> businessName,
            Optional<LocationType> type,
            Optional<String> websiteUrl,
            Optional<BusinessHours> businessHours,
            Optional<String> businessEmail,
            Optional<String> description,
            Optional<String> twitterUsername,
            Optional<String> instagramUsername,
            Optional<String> facebookUrl,
            Optional<Coordinates> coordinates,
            Optional<String> logoUrl,
            Optional<String> posBackgroundUrl,
            Optional<String> mcc,
            Optional<String> fullFormatLogoUrl,
            Optional<TaxIds> taxIds,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.timezone = timezone;
        this.capabilities = capabilities;
        this.status = status;
        this.createdAt = createdAt;
        this.merchantId = merchantId;
        this.country = country;
        this.languageCode = languageCode;
        this.currency = currency;
        this.phoneNumber = phoneNumber;
        this.businessName = businessName;
        this.type = type;
        this.websiteUrl = websiteUrl;
        this.businessHours = businessHours;
        this.businessEmail = businessEmail;
        this.description = description;
        this.twitterUsername = twitterUsername;
        this.instagramUsername = instagramUsername;
        this.facebookUrl = facebookUrl;
        this.coordinates = coordinates;
        this.logoUrl = logoUrl;
        this.posBackgroundUrl = posBackgroundUrl;
        this.mcc = mcc;
        this.fullFormatLogoUrl = fullFormatLogoUrl;
        this.taxIds = taxIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A short generated string of letters and numbers that uniquely identifies this location instance.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The name of the location.
     * This information appears in the Seller Dashboard as the nickname.
     * A location name must be unique within a seller account.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return The physical address of the location.
     */
    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    /**
     * @return The <a href="https://www.iana.org/time-zones">IANA time zone</a> identifier for
     * the time zone of the location. For example, <code>America/Los_Angeles</code>.
     */
    @JsonIgnore
    public Optional<String> getTimezone() {
        if (timezone == null) {
            return Optional.empty();
        }
        return timezone;
    }

    /**
     * @return The Square features that are enabled for the location.
     * See <a href="entity:LocationCapability">LocationCapability</a> for possible values.
     * See <a href="#type-locationcapability">LocationCapability</a> for possible values
     */
    @JsonProperty("capabilities")
    public Optional<List<LocationCapability>> getCapabilities() {
        return capabilities;
    }

    /**
     * @return The status of the location.
     * See <a href="#type-locationstatus">LocationStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<LocationStatus> getStatus() {
        return status;
    }

    /**
     * @return The time when the location was created, in RFC 3339 format.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">Working with Dates</a>.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The ID of the merchant that owns the location.
     */
    @JsonProperty("merchant_id")
    public Optional<String> getMerchantId() {
        return merchantId;
    }

    /**
     * @return The country of the location, in the two-letter format of ISO 3166. For example, <code>US</code> or <code>JP</code>.
     * <p>See <a href="entity:Country">Country</a> for possible values.
     * See <a href="#type-country">Country</a> for possible values</p>
     */
    @JsonProperty("country")
    public Optional<Country> getCountry() {
        return country;
    }

    /**
     * @return The language associated with the location, in
     * <a href="https://tools.ietf.org/html/bcp47#appendix-A">BCP 47 format</a>.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences">Language Preferences</a>.
     */
    @JsonIgnore
    public Optional<String> getLanguageCode() {
        if (languageCode == null) {
            return Optional.empty();
        }
        return languageCode;
    }

    /**
     * @return The currency used for all transactions at this location,
     * in ISO 4217 format. For example, the currency code for US dollars is <code>USD</code>.
     * See <a href="entity:Currency">Currency</a> for possible values.
     * See <a href="#type-currency">Currency</a> for possible values
     */
    @JsonProperty("currency")
    public Optional<Currency> getCurrency() {
        return currency;
    }

    /**
     * @return The phone number of the location. For example, <code>+1 855-700-6000</code>.
     */
    @JsonIgnore
    public Optional<String> getPhoneNumber() {
        if (phoneNumber == null) {
            return Optional.empty();
        }
        return phoneNumber;
    }

    /**
     * @return The name of the location's overall business. This name is present on receipts and other customer-facing branding, and can be changed no more than three times in a twelve-month period.
     */
    @JsonIgnore
    public Optional<String> getBusinessName() {
        if (businessName == null) {
            return Optional.empty();
        }
        return businessName;
    }

    /**
     * @return The type of the location.
     * See <a href="#type-locationtype">LocationType</a> for possible values
     */
    @JsonProperty("type")
    public Optional<LocationType> getType() {
        return type;
    }

    /**
     * @return The website URL of the location.  For example, <code>https://squareup.com</code>.
     */
    @JsonIgnore
    public Optional<String> getWebsiteUrl() {
        if (websiteUrl == null) {
            return Optional.empty();
        }
        return websiteUrl;
    }

    /**
     * @return The hours of operation for the location.
     */
    @JsonProperty("business_hours")
    public Optional<BusinessHours> getBusinessHours() {
        return businessHours;
    }

    /**
     * @return The email address of the location. This can be unique to the location and is not always the email address for the business owner or administrator.
     */
    @JsonIgnore
    public Optional<String> getBusinessEmail() {
        if (businessEmail == null) {
            return Optional.empty();
        }
        return businessEmail;
    }

    /**
     * @return The description of the location. For example, <code>Main Street location</code>.
     */
    @JsonIgnore
    public Optional<String> getDescription() {
        if (description == null) {
            return Optional.empty();
        }
        return description;
    }

    /**
     * @return The Twitter username of the location without the '@' symbol. For example, <code>Square</code>.
     */
    @JsonIgnore
    public Optional<String> getTwitterUsername() {
        if (twitterUsername == null) {
            return Optional.empty();
        }
        return twitterUsername;
    }

    /**
     * @return The Instagram username of the location without the '@' symbol. For example, <code>square</code>.
     */
    @JsonIgnore
    public Optional<String> getInstagramUsername() {
        if (instagramUsername == null) {
            return Optional.empty();
        }
        return instagramUsername;
    }

    /**
     * @return The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, <code>https://www.facebook.com/square</code>.
     */
    @JsonIgnore
    public Optional<String> getFacebookUrl() {
        if (facebookUrl == null) {
            return Optional.empty();
        }
        return facebookUrl;
    }

    /**
     * @return The physical coordinates (latitude and longitude) of the location.
     */
    @JsonProperty("coordinates")
    public Optional<Coordinates> getCoordinates() {
        return coordinates;
    }

    /**
     * @return The URL of the logo image for the location. When configured in the Seller
     * Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.
     * This image should have a roughly square (1:1) aspect ratio and should be at least 200x200 pixels.
     */
    @JsonProperty("logo_url")
    public Optional<String> getLogoUrl() {
        return logoUrl;
    }

    /**
     * @return The URL of the Point of Sale background image for the location.
     */
    @JsonProperty("pos_background_url")
    public Optional<String> getPosBackgroundUrl() {
        return posBackgroundUrl;
    }

    /**
     * @return A four-digit number that describes the kind of goods or services sold at the location.
     * The <a href="https://developer.squareup.com/docs/locations-api#initialize-a-merchant-category-code">merchant category code (MCC)</a> of the location as standardized by ISO 18245.
     * For example, <code>5045</code>, for a location that sells computer goods and software.
     */
    @JsonIgnore
    public Optional<String> getMcc() {
        if (mcc == null) {
            return Optional.empty();
        }
        return mcc;
    }

    /**
     * @return The URL of a full-format logo image for the location. When configured in the Seller
     * Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.
     * This image can be wider than it is tall and should be at least 1280x648 pixels.
     */
    @JsonProperty("full_format_logo_url")
    public Optional<String> getFullFormatLogoUrl() {
        return fullFormatLogoUrl;
    }

    /**
     * @return The tax IDs for this location.
     */
    @JsonProperty("tax_ids")
    public Optional<TaxIds> getTaxIds() {
        return taxIds;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("timezone")
    private Optional<String> _getTimezone() {
        return timezone;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("language_code")
    private Optional<String> _getLanguageCode() {
        return languageCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("phone_number")
    private Optional<String> _getPhoneNumber() {
        return phoneNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("business_name")
    private Optional<String> _getBusinessName() {
        return businessName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("website_url")
    private Optional<String> _getWebsiteUrl() {
        return websiteUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("business_email")
    private Optional<String> _getBusinessEmail() {
        return businessEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("description")
    private Optional<String> _getDescription() {
        return description;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("twitter_username")
    private Optional<String> _getTwitterUsername() {
        return twitterUsername;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("instagram_username")
    private Optional<String> _getInstagramUsername() {
        return instagramUsername;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("facebook_url")
    private Optional<String> _getFacebookUrl() {
        return facebookUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("mcc")
    private Optional<String> _getMcc() {
        return mcc;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Location && equalTo((Location) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Location other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && address.equals(other.address)
                && timezone.equals(other.timezone)
                && capabilities.equals(other.capabilities)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && merchantId.equals(other.merchantId)
                && country.equals(other.country)
                && languageCode.equals(other.languageCode)
                && currency.equals(other.currency)
                && phoneNumber.equals(other.phoneNumber)
                && businessName.equals(other.businessName)
                && type.equals(other.type)
                && websiteUrl.equals(other.websiteUrl)
                && businessHours.equals(other.businessHours)
                && businessEmail.equals(other.businessEmail)
                && description.equals(other.description)
                && twitterUsername.equals(other.twitterUsername)
                && instagramUsername.equals(other.instagramUsername)
                && facebookUrl.equals(other.facebookUrl)
                && coordinates.equals(other.coordinates)
                && logoUrl.equals(other.logoUrl)
                && posBackgroundUrl.equals(other.posBackgroundUrl)
                && mcc.equals(other.mcc)
                && fullFormatLogoUrl.equals(other.fullFormatLogoUrl)
                && taxIds.equals(other.taxIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.address,
                this.timezone,
                this.capabilities,
                this.status,
                this.createdAt,
                this.merchantId,
                this.country,
                this.languageCode,
                this.currency,
                this.phoneNumber,
                this.businessName,
                this.type,
                this.websiteUrl,
                this.businessHours,
                this.businessEmail,
                this.description,
                this.twitterUsername,
                this.instagramUsername,
                this.facebookUrl,
                this.coordinates,
                this.logoUrl,
                this.posBackgroundUrl,
                this.mcc,
                this.fullFormatLogoUrl,
                this.taxIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Address> address = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<List<LocationCapability>> capabilities = Optional.empty();

        private Optional<LocationStatus> status = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> merchantId = Optional.empty();

        private Optional<Country> country = Optional.empty();

        private Optional<String> languageCode = Optional.empty();

        private Optional<Currency> currency = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<String> businessName = Optional.empty();

        private Optional<LocationType> type = Optional.empty();

        private Optional<String> websiteUrl = Optional.empty();

        private Optional<BusinessHours> businessHours = Optional.empty();

        private Optional<String> businessEmail = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> twitterUsername = Optional.empty();

        private Optional<String> instagramUsername = Optional.empty();

        private Optional<String> facebookUrl = Optional.empty();

        private Optional<Coordinates> coordinates = Optional.empty();

        private Optional<String> logoUrl = Optional.empty();

        private Optional<String> posBackgroundUrl = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> fullFormatLogoUrl = Optional.empty();

        private Optional<TaxIds> taxIds = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Location other) {
            id(other.getId());
            name(other.getName());
            address(other.getAddress());
            timezone(other.getTimezone());
            capabilities(other.getCapabilities());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            merchantId(other.getMerchantId());
            country(other.getCountry());
            languageCode(other.getLanguageCode());
            currency(other.getCurrency());
            phoneNumber(other.getPhoneNumber());
            businessName(other.getBusinessName());
            type(other.getType());
            websiteUrl(other.getWebsiteUrl());
            businessHours(other.getBusinessHours());
            businessEmail(other.getBusinessEmail());
            description(other.getDescription());
            twitterUsername(other.getTwitterUsername());
            instagramUsername(other.getInstagramUsername());
            facebookUrl(other.getFacebookUrl());
            coordinates(other.getCoordinates());
            logoUrl(other.getLogoUrl());
            posBackgroundUrl(other.getPosBackgroundUrl());
            mcc(other.getMcc());
            fullFormatLogoUrl(other.getFullFormatLogoUrl());
            taxIds(other.getTaxIds());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "timezone", nulls = Nulls.SKIP)
        public Builder timezone(Optional<String> timezone) {
            this.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Nullable<String> timezone) {
            if (timezone.isNull()) {
                this.timezone = null;
            } else if (timezone.isEmpty()) {
                this.timezone = Optional.empty();
            } else {
                this.timezone = Optional.of(timezone.get());
            }
            return this;
        }

        @JsonSetter(value = "capabilities", nulls = Nulls.SKIP)
        public Builder capabilities(Optional<List<LocationCapability>> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<LocationCapability> capabilities) {
            this.capabilities = Optional.ofNullable(capabilities);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<LocationStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(LocationStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "merchant_id", nulls = Nulls.SKIP)
        public Builder merchantId(Optional<String> merchantId) {
            this.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            this.merchantId = Optional.ofNullable(merchantId);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<Country> country) {
            this.country = country;
            return this;
        }

        public Builder country(Country country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "language_code", nulls = Nulls.SKIP)
        public Builder languageCode(Optional<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        public Builder languageCode(String languageCode) {
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        public Builder languageCode(Nullable<String> languageCode) {
            if (languageCode.isNull()) {
                this.languageCode = null;
            } else if (languageCode.isEmpty()) {
                this.languageCode = Optional.empty();
            } else {
                this.languageCode = Optional.of(languageCode.get());
            }
            return this;
        }

        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public Builder currency(Optional<Currency> currency) {
            this.currency = currency;
            return this;
        }

        public Builder currency(Currency currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        public Builder phoneNumber(Nullable<String> phoneNumber) {
            if (phoneNumber.isNull()) {
                this.phoneNumber = null;
            } else if (phoneNumber.isEmpty()) {
                this.phoneNumber = Optional.empty();
            } else {
                this.phoneNumber = Optional.of(phoneNumber.get());
            }
            return this;
        }

        @JsonSetter(value = "business_name", nulls = Nulls.SKIP)
        public Builder businessName(Optional<String> businessName) {
            this.businessName = businessName;
            return this;
        }

        public Builder businessName(String businessName) {
            this.businessName = Optional.ofNullable(businessName);
            return this;
        }

        public Builder businessName(Nullable<String> businessName) {
            if (businessName.isNull()) {
                this.businessName = null;
            } else if (businessName.isEmpty()) {
                this.businessName = Optional.empty();
            } else {
                this.businessName = Optional.of(businessName.get());
            }
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<LocationType> type) {
            this.type = type;
            return this;
        }

        public Builder type(LocationType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "website_url", nulls = Nulls.SKIP)
        public Builder websiteUrl(Optional<String> websiteUrl) {
            this.websiteUrl = websiteUrl;
            return this;
        }

        public Builder websiteUrl(String websiteUrl) {
            this.websiteUrl = Optional.ofNullable(websiteUrl);
            return this;
        }

        public Builder websiteUrl(Nullable<String> websiteUrl) {
            if (websiteUrl.isNull()) {
                this.websiteUrl = null;
            } else if (websiteUrl.isEmpty()) {
                this.websiteUrl = Optional.empty();
            } else {
                this.websiteUrl = Optional.of(websiteUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "business_hours", nulls = Nulls.SKIP)
        public Builder businessHours(Optional<BusinessHours> businessHours) {
            this.businessHours = businessHours;
            return this;
        }

        public Builder businessHours(BusinessHours businessHours) {
            this.businessHours = Optional.ofNullable(businessHours);
            return this;
        }

        @JsonSetter(value = "business_email", nulls = Nulls.SKIP)
        public Builder businessEmail(Optional<String> businessEmail) {
            this.businessEmail = businessEmail;
            return this;
        }

        public Builder businessEmail(String businessEmail) {
            this.businessEmail = Optional.ofNullable(businessEmail);
            return this;
        }

        public Builder businessEmail(Nullable<String> businessEmail) {
            if (businessEmail.isNull()) {
                this.businessEmail = null;
            } else if (businessEmail.isEmpty()) {
                this.businessEmail = Optional.empty();
            } else {
                this.businessEmail = Optional.of(businessEmail.get());
            }
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Nullable<String> description) {
            if (description.isNull()) {
                this.description = null;
            } else if (description.isEmpty()) {
                this.description = Optional.empty();
            } else {
                this.description = Optional.of(description.get());
            }
            return this;
        }

        @JsonSetter(value = "twitter_username", nulls = Nulls.SKIP)
        public Builder twitterUsername(Optional<String> twitterUsername) {
            this.twitterUsername = twitterUsername;
            return this;
        }

        public Builder twitterUsername(String twitterUsername) {
            this.twitterUsername = Optional.ofNullable(twitterUsername);
            return this;
        }

        public Builder twitterUsername(Nullable<String> twitterUsername) {
            if (twitterUsername.isNull()) {
                this.twitterUsername = null;
            } else if (twitterUsername.isEmpty()) {
                this.twitterUsername = Optional.empty();
            } else {
                this.twitterUsername = Optional.of(twitterUsername.get());
            }
            return this;
        }

        @JsonSetter(value = "instagram_username", nulls = Nulls.SKIP)
        public Builder instagramUsername(Optional<String> instagramUsername) {
            this.instagramUsername = instagramUsername;
            return this;
        }

        public Builder instagramUsername(String instagramUsername) {
            this.instagramUsername = Optional.ofNullable(instagramUsername);
            return this;
        }

        public Builder instagramUsername(Nullable<String> instagramUsername) {
            if (instagramUsername.isNull()) {
                this.instagramUsername = null;
            } else if (instagramUsername.isEmpty()) {
                this.instagramUsername = Optional.empty();
            } else {
                this.instagramUsername = Optional.of(instagramUsername.get());
            }
            return this;
        }

        @JsonSetter(value = "facebook_url", nulls = Nulls.SKIP)
        public Builder facebookUrl(Optional<String> facebookUrl) {
            this.facebookUrl = facebookUrl;
            return this;
        }

        public Builder facebookUrl(String facebookUrl) {
            this.facebookUrl = Optional.ofNullable(facebookUrl);
            return this;
        }

        public Builder facebookUrl(Nullable<String> facebookUrl) {
            if (facebookUrl.isNull()) {
                this.facebookUrl = null;
            } else if (facebookUrl.isEmpty()) {
                this.facebookUrl = Optional.empty();
            } else {
                this.facebookUrl = Optional.of(facebookUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "coordinates", nulls = Nulls.SKIP)
        public Builder coordinates(Optional<Coordinates> coordinates) {
            this.coordinates = coordinates;
            return this;
        }

        public Builder coordinates(Coordinates coordinates) {
            this.coordinates = Optional.ofNullable(coordinates);
            return this;
        }

        @JsonSetter(value = "logo_url", nulls = Nulls.SKIP)
        public Builder logoUrl(Optional<String> logoUrl) {
            this.logoUrl = logoUrl;
            return this;
        }

        public Builder logoUrl(String logoUrl) {
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        @JsonSetter(value = "pos_background_url", nulls = Nulls.SKIP)
        public Builder posBackgroundUrl(Optional<String> posBackgroundUrl) {
            this.posBackgroundUrl = posBackgroundUrl;
            return this;
        }

        public Builder posBackgroundUrl(String posBackgroundUrl) {
            this.posBackgroundUrl = Optional.ofNullable(posBackgroundUrl);
            return this;
        }

        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        public Builder mcc(Nullable<String> mcc) {
            if (mcc.isNull()) {
                this.mcc = null;
            } else if (mcc.isEmpty()) {
                this.mcc = Optional.empty();
            } else {
                this.mcc = Optional.of(mcc.get());
            }
            return this;
        }

        @JsonSetter(value = "full_format_logo_url", nulls = Nulls.SKIP)
        public Builder fullFormatLogoUrl(Optional<String> fullFormatLogoUrl) {
            this.fullFormatLogoUrl = fullFormatLogoUrl;
            return this;
        }

        public Builder fullFormatLogoUrl(String fullFormatLogoUrl) {
            this.fullFormatLogoUrl = Optional.ofNullable(fullFormatLogoUrl);
            return this;
        }

        @JsonSetter(value = "tax_ids", nulls = Nulls.SKIP)
        public Builder taxIds(Optional<TaxIds> taxIds) {
            this.taxIds = taxIds;
            return this;
        }

        public Builder taxIds(TaxIds taxIds) {
            this.taxIds = Optional.ofNullable(taxIds);
            return this;
        }

        public Location build() {
            return new Location(
                    id,
                    name,
                    address,
                    timezone,
                    capabilities,
                    status,
                    createdAt,
                    merchantId,
                    country,
                    languageCode,
                    currency,
                    phoneNumber,
                    businessName,
                    type,
                    websiteUrl,
                    businessHours,
                    businessEmail,
                    description,
                    twitterUsername,
                    instagramUsername,
                    facebookUrl,
                    coordinates,
                    logoUrl,
                    posBackgroundUrl,
                    mcc,
                    fullFormatLogoUrl,
                    taxIds,
                    additionalProperties);
        }
    }
}
