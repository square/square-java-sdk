/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TimeRange.Builder.class)
public final class TimeRange {
    private final Optional<String> startAt;

    private final Optional<String> endAt;

    private final Map<String, Object> additionalProperties;

    private TimeRange(Optional<String> startAt, Optional<String> endAt, Map<String, Object> additionalProperties) {
        this.startAt = startAt;
        this.endAt = endAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A datetime value in RFC 3339 format indicating when the time range
     * starts.
     */
    @JsonIgnore
    public Optional<String> getStartAt() {
        if (startAt == null) {
            return Optional.empty();
        }
        return startAt;
    }

    /**
     * @return A datetime value in RFC 3339 format indicating when the time range
     * ends.
     */
    @JsonIgnore
    public Optional<String> getEndAt() {
        if (endAt == null) {
            return Optional.empty();
        }
        return endAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("start_at")
    private Optional<String> _getStartAt() {
        return startAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_at")
    private Optional<String> _getEndAt() {
        return endAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TimeRange && equalTo((TimeRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TimeRange other) {
        return startAt.equals(other.startAt) && endAt.equals(other.endAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startAt, this.endAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startAt = Optional.empty();

        private Optional<String> endAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TimeRange other) {
            startAt(other.getStartAt());
            endAt(other.getEndAt());
            return this;
        }

        @JsonSetter(value = "start_at", nulls = Nulls.SKIP)
        public Builder startAt(Optional<String> startAt) {
            this.startAt = startAt;
            return this;
        }

        public Builder startAt(String startAt) {
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Nullable<String> startAt) {
            if (startAt.isNull()) {
                this.startAt = null;
            } else if (startAt.isEmpty()) {
                this.startAt = Optional.empty();
            } else {
                this.startAt = Optional.of(startAt.get());
            }
            return this;
        }

        @JsonSetter(value = "end_at", nulls = Nulls.SKIP)
        public Builder endAt(Optional<String> endAt) {
            this.endAt = endAt;
            return this;
        }

        public Builder endAt(String endAt) {
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Nullable<String> endAt) {
            if (endAt.isNull()) {
                this.endAt = null;
            } else if (endAt.isEmpty()) {
                this.endAt = Optional.empty();
            } else {
                this.endAt = Optional.of(endAt.get());
            }
            return this;
        }

        public TimeRange build() {
            return new TimeRange(startAt, endAt, additionalProperties);
        }
    }
}
