/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TerminalCheckoutQuery.Builder.class)
public final class TerminalCheckoutQuery {
    private final Optional<TerminalCheckoutQueryFilter> filter;

    private final Optional<TerminalCheckoutQuerySort> sort;

    private final Map<String, Object> additionalProperties;

    private TerminalCheckoutQuery(
            Optional<TerminalCheckoutQueryFilter> filter,
            Optional<TerminalCheckoutQuerySort> sort,
            Map<String, Object> additionalProperties) {
        this.filter = filter;
        this.sort = sort;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Options for filtering returned <code>TerminalCheckout</code> objects.
     */
    @JsonProperty("filter")
    public Optional<TerminalCheckoutQueryFilter> getFilter() {
        return filter;
    }

    /**
     * @return Option for sorting returned <code>TerminalCheckout</code> objects.
     */
    @JsonProperty("sort")
    public Optional<TerminalCheckoutQuerySort> getSort() {
        return sort;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TerminalCheckoutQuery && equalTo((TerminalCheckoutQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TerminalCheckoutQuery other) {
        return filter.equals(other.filter) && sort.equals(other.sort);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filter, this.sort);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TerminalCheckoutQueryFilter> filter = Optional.empty();

        private Optional<TerminalCheckoutQuerySort> sort = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TerminalCheckoutQuery other) {
            filter(other.getFilter());
            sort(other.getSort());
            return this;
        }

        /**
         * <p>Options for filtering returned <code>TerminalCheckout</code> objects.</p>
         */
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public Builder filter(Optional<TerminalCheckoutQueryFilter> filter) {
            this.filter = filter;
            return this;
        }

        public Builder filter(TerminalCheckoutQueryFilter filter) {
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * <p>Option for sorting returned <code>TerminalCheckout</code> objects.</p>
         */
        @JsonSetter(value = "sort", nulls = Nulls.SKIP)
        public Builder sort(Optional<TerminalCheckoutQuerySort> sort) {
            this.sort = sort;
            return this;
        }

        public Builder sort(TerminalCheckoutQuerySort sort) {
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public TerminalCheckoutQuery build() {
            return new TerminalCheckoutQuery(filter, sort, additionalProperties);
        }
    }
}
