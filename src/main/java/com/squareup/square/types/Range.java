/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Range.Builder.class)
public final class Range {
    private final Optional<String> min;

    private final Optional<String> max;

    private final Map<String, Object> additionalProperties;

    private Range(Optional<String> min, Optional<String> max, Map<String, Object> additionalProperties) {
        this.min = min;
        this.max = max;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The lower bound of the number range. At least one of <code>min</code> or <code>max</code> must be specified.
     * If unspecified, the results will have no minimum value.
     */
    @JsonIgnore
    public Optional<String> getMin() {
        if (min == null) {
            return Optional.empty();
        }
        return min;
    }

    /**
     * @return The upper bound of the number range. At least one of <code>min</code> or <code>max</code> must be specified.
     * If unspecified, the results will have no maximum value.
     */
    @JsonIgnore
    public Optional<String> getMax() {
        if (max == null) {
            return Optional.empty();
        }
        return max;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("min")
    private Optional<String> _getMin() {
        return min;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("max")
    private Optional<String> _getMax() {
        return max;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Range && equalTo((Range) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Range other) {
        return min.equals(other.min) && max.equals(other.max);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.min, this.max);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> min = Optional.empty();

        private Optional<String> max = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Range other) {
            min(other.getMin());
            max(other.getMax());
            return this;
        }

        @JsonSetter(value = "min", nulls = Nulls.SKIP)
        public Builder min(Optional<String> min) {
            this.min = min;
            return this;
        }

        public Builder min(String min) {
            this.min = Optional.ofNullable(min);
            return this;
        }

        public Builder min(Nullable<String> min) {
            if (min.isNull()) {
                this.min = null;
            } else if (min.isEmpty()) {
                this.min = Optional.empty();
            } else {
                this.min = Optional.of(min.get());
            }
            return this;
        }

        @JsonSetter(value = "max", nulls = Nulls.SKIP)
        public Builder max(Optional<String> max) {
            this.max = max;
            return this;
        }

        public Builder max(String max) {
            this.max = Optional.ofNullable(max);
            return this;
        }

        public Builder max(Nullable<String> max) {
            if (max.isNull()) {
                this.max = null;
            } else if (max.isEmpty()) {
                this.max = Optional.empty();
            } else {
                this.max = Optional.of(max.get());
            }
            return this;
        }

        public Range build() {
            return new Range(min, max, additionalProperties);
        }
    }
}
