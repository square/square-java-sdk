/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Merchant.Builder.class)
public final class Merchant {
    private final Optional<String> id;

    private final Optional<String> businessName;

    private final Country country;

    private final Optional<String> languageCode;

    private final Optional<Currency> currency;

    private final Optional<MerchantStatus> status;

    private final Optional<String> mainLocationId;

    private final Optional<String> createdAt;

    private final Map<String, Object> additionalProperties;

    private Merchant(
            Optional<String> id,
            Optional<String> businessName,
            Country country,
            Optional<String> languageCode,
            Optional<Currency> currency,
            Optional<MerchantStatus> status,
            Optional<String> mainLocationId,
            Optional<String> createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.businessName = businessName;
        this.country = country;
        this.languageCode = languageCode;
        this.currency = currency;
        this.status = status;
        this.mainLocationId = mainLocationId;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square-issued ID of the merchant.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The name of the merchant's overall business.
     */
    @JsonIgnore
    public Optional<String> getBusinessName() {
        if (businessName == null) {
            return Optional.empty();
        }
        return businessName;
    }

    /**
     * @return The country code associated with the merchant, in the two-letter format of ISO 3166. For example, <code>US</code> or <code>JP</code>.
     * See <a href="#type-country">Country</a> for possible values
     */
    @JsonProperty("country")
    public Country getCountry() {
        return country;
    }

    /**
     * @return The code indicating the <a href="https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences">language preferences</a> of the merchant, in <a href="https://tools.ietf.org/html/bcp47#appendix-A">BCP 47 format</a>. For example, <code>en-US</code> or <code>fr-CA</code>.
     */
    @JsonIgnore
    public Optional<String> getLanguageCode() {
        if (languageCode == null) {
            return Optional.empty();
        }
        return languageCode;
    }

    /**
     * @return The currency associated with the merchant, in ISO 4217 format. For example, the currency code for US dollars is <code>USD</code>.
     * See <a href="#type-currency">Currency</a> for possible values
     */
    @JsonProperty("currency")
    public Optional<Currency> getCurrency() {
        return currency;
    }

    /**
     * @return The merchant's status.
     * See <a href="#type-merchantstatus">MerchantStatus</a> for possible values
     */
    @JsonProperty("status")
    public Optional<MerchantStatus> getStatus() {
        return status;
    }

    /**
     * @return The ID of the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main <code>Location</code></a> for this merchant.
     */
    @JsonIgnore
    public Optional<String> getMainLocationId() {
        if (mainLocationId == null) {
            return Optional.empty();
        }
        return mainLocationId;
    }

    /**
     * @return The time when the merchant was created, in RFC 3339 format.
     * For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">Working with Dates</a>.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("business_name")
    private Optional<String> _getBusinessName() {
        return businessName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("language_code")
    private Optional<String> _getLanguageCode() {
        return languageCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("main_location_id")
    private Optional<String> _getMainLocationId() {
        return mainLocationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Merchant && equalTo((Merchant) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Merchant other) {
        return id.equals(other.id)
                && businessName.equals(other.businessName)
                && country.equals(other.country)
                && languageCode.equals(other.languageCode)
                && currency.equals(other.currency)
                && status.equals(other.status)
                && mainLocationId.equals(other.mainLocationId)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.businessName,
                this.country,
                this.languageCode,
                this.currency,
                this.status,
                this.mainLocationId,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CountryStage builder() {
        return new Builder();
    }

    public interface CountryStage {
        _FinalStage country(@NotNull Country country);

        Builder from(Merchant other);
    }

    public interface _FinalStage {
        Merchant build();

        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        _FinalStage businessName(Optional<String> businessName);

        _FinalStage businessName(String businessName);

        _FinalStage businessName(Nullable<String> businessName);

        _FinalStage languageCode(Optional<String> languageCode);

        _FinalStage languageCode(String languageCode);

        _FinalStage languageCode(Nullable<String> languageCode);

        _FinalStage currency(Optional<Currency> currency);

        _FinalStage currency(Currency currency);

        _FinalStage status(Optional<MerchantStatus> status);

        _FinalStage status(MerchantStatus status);

        _FinalStage mainLocationId(Optional<String> mainLocationId);

        _FinalStage mainLocationId(String mainLocationId);

        _FinalStage mainLocationId(Nullable<String> mainLocationId);

        _FinalStage createdAt(Optional<String> createdAt);

        _FinalStage createdAt(String createdAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CountryStage, _FinalStage {
        private Country country;

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> mainLocationId = Optional.empty();

        private Optional<MerchantStatus> status = Optional.empty();

        private Optional<Currency> currency = Optional.empty();

        private Optional<String> languageCode = Optional.empty();

        private Optional<String> businessName = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Merchant other) {
            id(other.getId());
            businessName(other.getBusinessName());
            country(other.getCountry());
            languageCode(other.getLanguageCode());
            currency(other.getCurrency());
            status(other.getStatus());
            mainLocationId(other.getMainLocationId());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>The country code associated with the merchant, in the two-letter format of ISO 3166. For example, <code>US</code> or <code>JP</code>.
         * See <a href="#type-country">Country</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("country")
        public _FinalStage country(@NotNull Country country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        /**
         * <p>The time when the merchant was created, in RFC 3339 format.
         * For more information, see <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">Working with Dates</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The ID of the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main <code>Location</code></a> for this merchant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage mainLocationId(Nullable<String> mainLocationId) {
            if (mainLocationId.isNull()) {
                this.mainLocationId = null;
            } else if (mainLocationId.isEmpty()) {
                this.mainLocationId = Optional.empty();
            } else {
                this.mainLocationId = Optional.of(mainLocationId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the <a href="https://developer.squareup.com/docs/locations-api#about-the-main-location">main <code>Location</code></a> for this merchant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage mainLocationId(String mainLocationId) {
            this.mainLocationId = Optional.ofNullable(mainLocationId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "main_location_id", nulls = Nulls.SKIP)
        public _FinalStage mainLocationId(Optional<String> mainLocationId) {
            this.mainLocationId = mainLocationId;
            return this;
        }

        /**
         * <p>The merchant's status.
         * See <a href="#type-merchantstatus">MerchantStatus</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(MerchantStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<MerchantStatus> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>The currency associated with the merchant, in ISO 4217 format. For example, the currency code for US dollars is <code>USD</code>.
         * See <a href="#type-currency">Currency</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(Currency currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<Currency> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>The code indicating the <a href="https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences">language preferences</a> of the merchant, in <a href="https://tools.ietf.org/html/bcp47#appendix-A">BCP 47 format</a>. For example, <code>en-US</code> or <code>fr-CA</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage languageCode(Nullable<String> languageCode) {
            if (languageCode.isNull()) {
                this.languageCode = null;
            } else if (languageCode.isEmpty()) {
                this.languageCode = Optional.empty();
            } else {
                this.languageCode = Optional.of(languageCode.get());
            }
            return this;
        }

        /**
         * <p>The code indicating the <a href="https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences">language preferences</a> of the merchant, in <a href="https://tools.ietf.org/html/bcp47#appendix-A">BCP 47 format</a>. For example, <code>en-US</code> or <code>fr-CA</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage languageCode(String languageCode) {
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "language_code", nulls = Nulls.SKIP)
        public _FinalStage languageCode(Optional<String> languageCode) {
            this.languageCode = languageCode;
            return this;
        }

        /**
         * <p>The name of the merchant's overall business.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage businessName(Nullable<String> businessName) {
            if (businessName.isNull()) {
                this.businessName = null;
            } else if (businessName.isEmpty()) {
                this.businessName = Optional.empty();
            } else {
                this.businessName = Optional.of(businessName.get());
            }
            return this;
        }

        /**
         * <p>The name of the merchant's overall business.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage businessName(String businessName) {
            this.businessName = Optional.ofNullable(businessName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "business_name", nulls = Nulls.SKIP)
        public _FinalStage businessName(Optional<String> businessName) {
            this.businessName = businessName;
            return this;
        }

        /**
         * <p>The Square-issued ID of the merchant.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public Merchant build() {
            return new Merchant(
                    id,
                    businessName,
                    country,
                    languageCode,
                    currency,
                    status,
                    mainLocationId,
                    createdAt,
                    additionalProperties);
        }
    }
}
