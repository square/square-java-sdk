/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchOrdersSort.Builder.class)
public final class SearchOrdersSort {
    private final SearchOrdersSortField sortField;

    private final Optional<SortOrder> sortOrder;

    private final Map<String, Object> additionalProperties;

    private SearchOrdersSort(
            SearchOrdersSortField sortField, Optional<SortOrder> sortOrder, Map<String, Object> additionalProperties) {
        this.sortField = sortField;
        this.sortOrder = sortOrder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The field to sort by.
     * <p><strong>Important:</strong> When using a <a href="entity:SearchOrdersFilter">DateTimeFilter</a>,
     * <code>sort_field</code> must match the timestamp field that the <code>DateTimeFilter</code> uses to
     * filter. For example, if you set your <code>sort_field</code> to <code>CLOSED_AT</code> and you use a
     * <code>DateTimeFilter</code>, your <code>DateTimeFilter</code> must filter for orders by their <code>CLOSED_AT</code> date.
     * If this field does not match the timestamp field in <code>DateTimeFilter</code>,
     * <code>SearchOrders</code> returns an error.</p>
     * <p>Default: <code>CREATED_AT</code>.
     * See <a href="#type-searchorderssortfield">SearchOrdersSortField</a> for possible values</p>
     */
    @JsonProperty("sort_field")
    public SearchOrdersSortField getSortField() {
        return sortField;
    }

    /**
     * @return The chronological order in which results are returned. Defaults to <code>DESC</code>.
     * See <a href="#type-sortorder">SortOrder</a> for possible values
     */
    @JsonProperty("sort_order")
    public Optional<SortOrder> getSortOrder() {
        return sortOrder;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchOrdersSort && equalTo((SearchOrdersSort) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchOrdersSort other) {
        return sortField.equals(other.sortField) && sortOrder.equals(other.sortOrder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sortField, this.sortOrder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SortFieldStage builder() {
        return new Builder();
    }

    public interface SortFieldStage {
        /**
         * <p>The field to sort by.</p>
         * <p><strong>Important:</strong> When using a <a href="entity:SearchOrdersFilter">DateTimeFilter</a>,
         * <code>sort_field</code> must match the timestamp field that the <code>DateTimeFilter</code> uses to
         * filter. For example, if you set your <code>sort_field</code> to <code>CLOSED_AT</code> and you use a
         * <code>DateTimeFilter</code>, your <code>DateTimeFilter</code> must filter for orders by their <code>CLOSED_AT</code> date.
         * If this field does not match the timestamp field in <code>DateTimeFilter</code>,
         * <code>SearchOrders</code> returns an error.</p>
         * <p>Default: <code>CREATED_AT</code>.
         * See <a href="#type-searchorderssortfield">SearchOrdersSortField</a> for possible values</p>
         */
        _FinalStage sortField(@NotNull SearchOrdersSortField sortField);

        Builder from(SearchOrdersSort other);
    }

    public interface _FinalStage {
        SearchOrdersSort build();

        /**
         * <p>The chronological order in which results are returned. Defaults to <code>DESC</code>.
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         */
        _FinalStage sortOrder(Optional<SortOrder> sortOrder);

        _FinalStage sortOrder(SortOrder sortOrder);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SortFieldStage, _FinalStage {
        private SearchOrdersSortField sortField;

        private Optional<SortOrder> sortOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchOrdersSort other) {
            sortField(other.getSortField());
            sortOrder(other.getSortOrder());
            return this;
        }

        /**
         * <p>The field to sort by.</p>
         * <p><strong>Important:</strong> When using a <a href="entity:SearchOrdersFilter">DateTimeFilter</a>,
         * <code>sort_field</code> must match the timestamp field that the <code>DateTimeFilter</code> uses to
         * filter. For example, if you set your <code>sort_field</code> to <code>CLOSED_AT</code> and you use a
         * <code>DateTimeFilter</code>, your <code>DateTimeFilter</code> must filter for orders by their <code>CLOSED_AT</code> date.
         * If this field does not match the timestamp field in <code>DateTimeFilter</code>,
         * <code>SearchOrders</code> returns an error.</p>
         * <p>Default: <code>CREATED_AT</code>.
         * See <a href="#type-searchorderssortfield">SearchOrdersSortField</a> for possible values</p>
         * <p>The field to sort by.</p>
         * <p><strong>Important:</strong> When using a <a href="entity:SearchOrdersFilter">DateTimeFilter</a>,
         * <code>sort_field</code> must match the timestamp field that the <code>DateTimeFilter</code> uses to
         * filter. For example, if you set your <code>sort_field</code> to <code>CLOSED_AT</code> and you use a
         * <code>DateTimeFilter</code>, your <code>DateTimeFilter</code> must filter for orders by their <code>CLOSED_AT</code> date.
         * If this field does not match the timestamp field in <code>DateTimeFilter</code>,
         * <code>SearchOrders</code> returns an error.</p>
         * <p>Default: <code>CREATED_AT</code>.
         * See <a href="#type-searchorderssortfield">SearchOrdersSortField</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sort_field")
        public _FinalStage sortField(@NotNull SearchOrdersSortField sortField) {
            this.sortField = Objects.requireNonNull(sortField, "sortField must not be null");
            return this;
        }

        /**
         * <p>The chronological order in which results are returned. Defaults to <code>DESC</code>.
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        /**
         * <p>The chronological order in which results are returned. Defaults to <code>DESC</code>.
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public _FinalStage sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        @java.lang.Override
        public SearchOrdersSort build() {
            return new SearchOrdersSort(sortField, sortOrder, additionalProperties);
        }
    }
}
