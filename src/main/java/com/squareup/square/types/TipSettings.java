/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TipSettings.Builder.class)
public final class TipSettings {
    private final Optional<Boolean> allowTipping;

    private final Optional<Boolean> separateTipScreen;

    private final Optional<Boolean> customTipField;

    private final Optional<List<Integer>> tipPercentages;

    private final Optional<Boolean> smartTipping;

    private final Map<String, Object> additionalProperties;

    private TipSettings(
            Optional<Boolean> allowTipping,
            Optional<Boolean> separateTipScreen,
            Optional<Boolean> customTipField,
            Optional<List<Integer>> tipPercentages,
            Optional<Boolean> smartTipping,
            Map<String, Object> additionalProperties) {
        this.allowTipping = allowTipping;
        this.separateTipScreen = separateTipScreen;
        this.customTipField = customTipField;
        this.tipPercentages = tipPercentages;
        this.smartTipping = smartTipping;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether tipping is enabled for this checkout. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getAllowTipping() {
        if (allowTipping == null) {
            return Optional.empty();
        }
        return allowTipping;
    }

    /**
     * @return Indicates whether tip options should be presented on the screen before presenting
     * the signature screen during card payment. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getSeparateTipScreen() {
        if (separateTipScreen == null) {
            return Optional.empty();
        }
        return separateTipScreen;
    }

    /**
     * @return Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.
     */
    @JsonIgnore
    public Optional<Boolean> getCustomTipField() {
        if (customTipField == null) {
            return Optional.empty();
        }
        return customTipField;
    }

    /**
     * @return A list of tip percentages that should be presented during the checkout flow, specified as
     * up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.
     */
    @JsonIgnore
    public Optional<List<Integer>> getTipPercentages() {
        if (tipPercentages == null) {
            return Optional.empty();
        }
        return tipPercentages;
    }

    /**
     * @return Enables the &quot;Smart Tip Amounts&quot; behavior.
     * Exact tipping options depend on the region in which the Square seller is active.
     * <p>For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.</p>
     * <p>For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.</p>
     * <p>If set to true, the <code>tip_percentages</code> settings is ignored.
     * Defaults to false.</p>
     * <p>To learn more about smart tipping, see <a href="https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app">Accept Tips with the Square App</a>.</p>
     */
    @JsonIgnore
    public Optional<Boolean> getSmartTipping() {
        if (smartTipping == null) {
            return Optional.empty();
        }
        return smartTipping;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("allow_tipping")
    private Optional<Boolean> _getAllowTipping() {
        return allowTipping;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("separate_tip_screen")
    private Optional<Boolean> _getSeparateTipScreen() {
        return separateTipScreen;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("custom_tip_field")
    private Optional<Boolean> _getCustomTipField() {
        return customTipField;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tip_percentages")
    private Optional<List<Integer>> _getTipPercentages() {
        return tipPercentages;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("smart_tipping")
    private Optional<Boolean> _getSmartTipping() {
        return smartTipping;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TipSettings && equalTo((TipSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TipSettings other) {
        return allowTipping.equals(other.allowTipping)
                && separateTipScreen.equals(other.separateTipScreen)
                && customTipField.equals(other.customTipField)
                && tipPercentages.equals(other.tipPercentages)
                && smartTipping.equals(other.smartTipping);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.allowTipping, this.separateTipScreen, this.customTipField, this.tipPercentages, this.smartTipping);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> allowTipping = Optional.empty();

        private Optional<Boolean> separateTipScreen = Optional.empty();

        private Optional<Boolean> customTipField = Optional.empty();

        private Optional<List<Integer>> tipPercentages = Optional.empty();

        private Optional<Boolean> smartTipping = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TipSettings other) {
            allowTipping(other.getAllowTipping());
            separateTipScreen(other.getSeparateTipScreen());
            customTipField(other.getCustomTipField());
            tipPercentages(other.getTipPercentages());
            smartTipping(other.getSmartTipping());
            return this;
        }

        /**
         * <p>Indicates whether tipping is enabled for this checkout. Defaults to false.</p>
         */
        @JsonSetter(value = "allow_tipping", nulls = Nulls.SKIP)
        public Builder allowTipping(Optional<Boolean> allowTipping) {
            this.allowTipping = allowTipping;
            return this;
        }

        public Builder allowTipping(Boolean allowTipping) {
            this.allowTipping = Optional.ofNullable(allowTipping);
            return this;
        }

        public Builder allowTipping(Nullable<Boolean> allowTipping) {
            if (allowTipping.isNull()) {
                this.allowTipping = null;
            } else if (allowTipping.isEmpty()) {
                this.allowTipping = Optional.empty();
            } else {
                this.allowTipping = Optional.of(allowTipping.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether tip options should be presented on the screen before presenting
         * the signature screen during card payment. Defaults to false.</p>
         */
        @JsonSetter(value = "separate_tip_screen", nulls = Nulls.SKIP)
        public Builder separateTipScreen(Optional<Boolean> separateTipScreen) {
            this.separateTipScreen = separateTipScreen;
            return this;
        }

        public Builder separateTipScreen(Boolean separateTipScreen) {
            this.separateTipScreen = Optional.ofNullable(separateTipScreen);
            return this;
        }

        public Builder separateTipScreen(Nullable<Boolean> separateTipScreen) {
            if (separateTipScreen.isNull()) {
                this.separateTipScreen = null;
            } else if (separateTipScreen.isEmpty()) {
                this.separateTipScreen = Optional.empty();
            } else {
                this.separateTipScreen = Optional.of(separateTipScreen.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.</p>
         */
        @JsonSetter(value = "custom_tip_field", nulls = Nulls.SKIP)
        public Builder customTipField(Optional<Boolean> customTipField) {
            this.customTipField = customTipField;
            return this;
        }

        public Builder customTipField(Boolean customTipField) {
            this.customTipField = Optional.ofNullable(customTipField);
            return this;
        }

        public Builder customTipField(Nullable<Boolean> customTipField) {
            if (customTipField.isNull()) {
                this.customTipField = null;
            } else if (customTipField.isEmpty()) {
                this.customTipField = Optional.empty();
            } else {
                this.customTipField = Optional.of(customTipField.get());
            }
            return this;
        }

        /**
         * <p>A list of tip percentages that should be presented during the checkout flow, specified as
         * up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.</p>
         */
        @JsonSetter(value = "tip_percentages", nulls = Nulls.SKIP)
        public Builder tipPercentages(Optional<List<Integer>> tipPercentages) {
            this.tipPercentages = tipPercentages;
            return this;
        }

        public Builder tipPercentages(List<Integer> tipPercentages) {
            this.tipPercentages = Optional.ofNullable(tipPercentages);
            return this;
        }

        public Builder tipPercentages(Nullable<List<Integer>> tipPercentages) {
            if (tipPercentages.isNull()) {
                this.tipPercentages = null;
            } else if (tipPercentages.isEmpty()) {
                this.tipPercentages = Optional.empty();
            } else {
                this.tipPercentages = Optional.of(tipPercentages.get());
            }
            return this;
        }

        /**
         * <p>Enables the &quot;Smart Tip Amounts&quot; behavior.
         * Exact tipping options depend on the region in which the Square seller is active.</p>
         * <p>For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.</p>
         * <p>For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.</p>
         * <p>If set to true, the <code>tip_percentages</code> settings is ignored.
         * Defaults to false.</p>
         * <p>To learn more about smart tipping, see <a href="https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app">Accept Tips with the Square App</a>.</p>
         */
        @JsonSetter(value = "smart_tipping", nulls = Nulls.SKIP)
        public Builder smartTipping(Optional<Boolean> smartTipping) {
            this.smartTipping = smartTipping;
            return this;
        }

        public Builder smartTipping(Boolean smartTipping) {
            this.smartTipping = Optional.ofNullable(smartTipping);
            return this;
        }

        public Builder smartTipping(Nullable<Boolean> smartTipping) {
            if (smartTipping.isNull()) {
                this.smartTipping = null;
            } else if (smartTipping.isEmpty()) {
                this.smartTipping = Optional.empty();
            } else {
                this.smartTipping = Optional.of(smartTipping.get());
            }
            return this;
        }

        public TipSettings build() {
            return new TipSettings(
                    allowTipping,
                    separateTipScreen,
                    customTipField,
                    tipPercentages,
                    smartTipping,
                    additionalProperties);
        }
    }
}
