/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FulfillmentPickupDetailsCurbsidePickupDetails.Builder.class)
public final class FulfillmentPickupDetailsCurbsidePickupDetails {
    private final Optional<String> curbsideDetails;

    private final Optional<String> buyerArrivedAt;

    private final Map<String, Object> additionalProperties;

    private FulfillmentPickupDetailsCurbsidePickupDetails(
            Optional<String> curbsideDetails,
            Optional<String> buyerArrivedAt,
            Map<String, Object> additionalProperties) {
        this.curbsideDetails = curbsideDetails;
        this.buyerArrivedAt = buyerArrivedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Specific details for curbside pickup, such as parking number and vehicle model.
     */
    @JsonIgnore
    public Optional<String> getCurbsideDetails() {
        if (curbsideDetails == null) {
            return Optional.empty();
        }
        return curbsideDetails;
    }

    /**
     * @return The <a href="https://developer.squareup.com/docs/build-basics/working-with-dates">timestamp</a>
     * indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
     * (for example, &quot;2016-09-04T23:59:33.123Z&quot;).
     */
    @JsonIgnore
    public Optional<String> getBuyerArrivedAt() {
        if (buyerArrivedAt == null) {
            return Optional.empty();
        }
        return buyerArrivedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("curbside_details")
    private Optional<String> _getCurbsideDetails() {
        return curbsideDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("buyer_arrived_at")
    private Optional<String> _getBuyerArrivedAt() {
        return buyerArrivedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FulfillmentPickupDetailsCurbsidePickupDetails
                && equalTo((FulfillmentPickupDetailsCurbsidePickupDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FulfillmentPickupDetailsCurbsidePickupDetails other) {
        return curbsideDetails.equals(other.curbsideDetails) && buyerArrivedAt.equals(other.buyerArrivedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.curbsideDetails, this.buyerArrivedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> curbsideDetails = Optional.empty();

        private Optional<String> buyerArrivedAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FulfillmentPickupDetailsCurbsidePickupDetails other) {
            curbsideDetails(other.getCurbsideDetails());
            buyerArrivedAt(other.getBuyerArrivedAt());
            return this;
        }

        @JsonSetter(value = "curbside_details", nulls = Nulls.SKIP)
        public Builder curbsideDetails(Optional<String> curbsideDetails) {
            this.curbsideDetails = curbsideDetails;
            return this;
        }

        public Builder curbsideDetails(String curbsideDetails) {
            this.curbsideDetails = Optional.ofNullable(curbsideDetails);
            return this;
        }

        public Builder curbsideDetails(Nullable<String> curbsideDetails) {
            if (curbsideDetails.isNull()) {
                this.curbsideDetails = null;
            } else if (curbsideDetails.isEmpty()) {
                this.curbsideDetails = Optional.empty();
            } else {
                this.curbsideDetails = Optional.of(curbsideDetails.get());
            }
            return this;
        }

        @JsonSetter(value = "buyer_arrived_at", nulls = Nulls.SKIP)
        public Builder buyerArrivedAt(Optional<String> buyerArrivedAt) {
            this.buyerArrivedAt = buyerArrivedAt;
            return this;
        }

        public Builder buyerArrivedAt(String buyerArrivedAt) {
            this.buyerArrivedAt = Optional.ofNullable(buyerArrivedAt);
            return this;
        }

        public Builder buyerArrivedAt(Nullable<String> buyerArrivedAt) {
            if (buyerArrivedAt.isNull()) {
                this.buyerArrivedAt = null;
            } else if (buyerArrivedAt.isEmpty()) {
                this.buyerArrivedAt = Optional.empty();
            } else {
                this.buyerArrivedAt = Optional.of(buyerArrivedAt.get());
            }
            return this;
        }

        public FulfillmentPickupDetailsCurbsidePickupDetails build() {
            return new FulfillmentPickupDetailsCurbsidePickupDetails(
                    curbsideDetails, buyerArrivedAt, additionalProperties);
        }
    }
}
