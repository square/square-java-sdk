/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogDiscount.Builder.class)
public final class CatalogDiscount {
    private final Optional<String> name;

    private final Optional<CatalogDiscountType> discountType;

    private final Optional<String> percentage;

    private final Optional<Money> amountMoney;

    private final Optional<Boolean> pinRequired;

    private final Optional<String> labelColor;

    private final Optional<CatalogDiscountModifyTaxBasis> modifyTaxBasis;

    private final Optional<Money> maximumAmountMoney;

    private final Map<String, Object> additionalProperties;

    private CatalogDiscount(
            Optional<String> name,
            Optional<CatalogDiscountType> discountType,
            Optional<String> percentage,
            Optional<Money> amountMoney,
            Optional<Boolean> pinRequired,
            Optional<String> labelColor,
            Optional<CatalogDiscountModifyTaxBasis> modifyTaxBasis,
            Optional<Money> maximumAmountMoney,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.discountType = discountType;
        this.percentage = percentage;
        this.amountMoney = amountMoney;
        this.pinRequired = pinRequired;
        this.labelColor = labelColor;
        this.modifyTaxBasis = modifyTaxBasis;
        this.maximumAmountMoney = maximumAmountMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonIgnore
    public Optional<String> getName() {
        if (name == null) {
            return Optional.empty();
        }
        return name;
    }

    /**
     * @return Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
     * See <a href="#type-catalogdiscounttype">CatalogDiscountType</a> for possible values
     */
    @JsonProperty("discount_type")
    public Optional<CatalogDiscountType> getDiscountType() {
        return discountType;
    }

    /**
     * @return The percentage of the discount as a string representation of a decimal number, using a <code>.</code> as the decimal
     * separator and without a <code>%</code> sign. A value of <code>7.5</code> corresponds to <code>7.5%</code>. Specify a percentage of <code>0</code> if <code>discount_type</code>
     * is <code>VARIABLE_PERCENTAGE</code>.
     * <p>Do not use this field for amount-based or variable discounts.</p>
     */
    @JsonIgnore
    public Optional<String> getPercentage() {
        if (percentage == null) {
            return Optional.empty();
        }
        return percentage;
    }

    /**
     * @return The amount of the discount. Specify an amount of <code>0</code> if <code>discount_type</code> is <code>VARIABLE_AMOUNT</code>.
     * <p>Do not use this field for percentage-based or variable discounts.</p>
     */
    @JsonProperty("amount_money")
    public Optional<Money> getAmountMoney() {
        return amountMoney;
    }

    /**
     * @return Indicates whether a mobile staff member needs to enter their PIN to apply the
     * discount to a payment in the Square Point of Sale app.
     */
    @JsonIgnore
    public Optional<Boolean> getPinRequired() {
        if (pinRequired == null) {
            return Optional.empty();
        }
        return pinRequired;
    }

    /**
     * @return The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
     */
    @JsonIgnore
    public Optional<String> getLabelColor() {
        if (labelColor == null) {
            return Optional.empty();
        }
        return labelColor;
    }

    /**
     * @return Indicates whether this discount should reduce the price used to calculate tax.
     * <p>Most discounts should use <code>MODIFY_TAX_BASIS</code>. However, in some circumstances taxes must
     * be calculated based on an item's price, ignoring a particular discount. For example,
     * in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
     * customer pays but does not reduce the sale price used to calculate how much sales tax is
     * due. In this case, the discount representing that manufacturer coupon should have
     * <code>DO_NOT_MODIFY_TAX_BASIS</code> for this field.</p>
     * <p>If you are unsure whether you need to use this field, consult your tax professional.
     * See <a href="#type-catalogdiscountmodifytaxbasis">CatalogDiscountModifyTaxBasis</a> for possible values</p>
     */
    @JsonProperty("modify_tax_basis")
    public Optional<CatalogDiscountModifyTaxBasis> getModifyTaxBasis() {
        return modifyTaxBasis;
    }

    /**
     * @return For a percentage discount, the maximum absolute value of the discount. For example, if a
     * 50% discount has a <code>maximum_amount_money</code> of $20, a $100 purchase will yield a $20 discount,
     * not a $50 discount.
     */
    @JsonProperty("maximum_amount_money")
    public Optional<Money> getMaximumAmountMoney() {
        return maximumAmountMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("name")
    private Optional<String> _getName() {
        return name;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("percentage")
    private Optional<String> _getPercentage() {
        return percentage;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pin_required")
    private Optional<Boolean> _getPinRequired() {
        return pinRequired;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("label_color")
    private Optional<String> _getLabelColor() {
        return labelColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogDiscount && equalTo((CatalogDiscount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogDiscount other) {
        return name.equals(other.name)
                && discountType.equals(other.discountType)
                && percentage.equals(other.percentage)
                && amountMoney.equals(other.amountMoney)
                && pinRequired.equals(other.pinRequired)
                && labelColor.equals(other.labelColor)
                && modifyTaxBasis.equals(other.modifyTaxBasis)
                && maximumAmountMoney.equals(other.maximumAmountMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.discountType,
                this.percentage,
                this.amountMoney,
                this.pinRequired,
                this.labelColor,
                this.modifyTaxBasis,
                this.maximumAmountMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<CatalogDiscountType> discountType = Optional.empty();

        private Optional<String> percentage = Optional.empty();

        private Optional<Money> amountMoney = Optional.empty();

        private Optional<Boolean> pinRequired = Optional.empty();

        private Optional<String> labelColor = Optional.empty();

        private Optional<CatalogDiscountModifyTaxBasis> modifyTaxBasis = Optional.empty();

        private Optional<Money> maximumAmountMoney = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CatalogDiscount other) {
            name(other.getName());
            discountType(other.getDiscountType());
            percentage(other.getPercentage());
            amountMoney(other.getAmountMoney());
            pinRequired(other.getPinRequired());
            labelColor(other.getLabelColor());
            modifyTaxBasis(other.getModifyTaxBasis());
            maximumAmountMoney(other.getMaximumAmountMoney());
            return this;
        }

        /**
         * <p>The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Nullable<String> name) {
            if (name.isNull()) {
                this.name = null;
            } else if (name.isEmpty()) {
                this.name = Optional.empty();
            } else {
                this.name = Optional.of(name.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
         * See <a href="#type-catalogdiscounttype">CatalogDiscountType</a> for possible values</p>
         */
        @JsonSetter(value = "discount_type", nulls = Nulls.SKIP)
        public Builder discountType(Optional<CatalogDiscountType> discountType) {
            this.discountType = discountType;
            return this;
        }

        public Builder discountType(CatalogDiscountType discountType) {
            this.discountType = Optional.ofNullable(discountType);
            return this;
        }

        /**
         * <p>The percentage of the discount as a string representation of a decimal number, using a <code>.</code> as the decimal
         * separator and without a <code>%</code> sign. A value of <code>7.5</code> corresponds to <code>7.5%</code>. Specify a percentage of <code>0</code> if <code>discount_type</code>
         * is <code>VARIABLE_PERCENTAGE</code>.</p>
         * <p>Do not use this field for amount-based or variable discounts.</p>
         */
        @JsonSetter(value = "percentage", nulls = Nulls.SKIP)
        public Builder percentage(Optional<String> percentage) {
            this.percentage = percentage;
            return this;
        }

        public Builder percentage(String percentage) {
            this.percentage = Optional.ofNullable(percentage);
            return this;
        }

        public Builder percentage(Nullable<String> percentage) {
            if (percentage.isNull()) {
                this.percentage = null;
            } else if (percentage.isEmpty()) {
                this.percentage = Optional.empty();
            } else {
                this.percentage = Optional.of(percentage.get());
            }
            return this;
        }

        /**
         * <p>The amount of the discount. Specify an amount of <code>0</code> if <code>discount_type</code> is <code>VARIABLE_AMOUNT</code>.</p>
         * <p>Do not use this field for percentage-based or variable discounts.</p>
         */
        @JsonSetter(value = "amount_money", nulls = Nulls.SKIP)
        public Builder amountMoney(Optional<Money> amountMoney) {
            this.amountMoney = amountMoney;
            return this;
        }

        public Builder amountMoney(Money amountMoney) {
            this.amountMoney = Optional.ofNullable(amountMoney);
            return this;
        }

        /**
         * <p>Indicates whether a mobile staff member needs to enter their PIN to apply the
         * discount to a payment in the Square Point of Sale app.</p>
         */
        @JsonSetter(value = "pin_required", nulls = Nulls.SKIP)
        public Builder pinRequired(Optional<Boolean> pinRequired) {
            this.pinRequired = pinRequired;
            return this;
        }

        public Builder pinRequired(Boolean pinRequired) {
            this.pinRequired = Optional.ofNullable(pinRequired);
            return this;
        }

        public Builder pinRequired(Nullable<Boolean> pinRequired) {
            if (pinRequired.isNull()) {
                this.pinRequired = null;
            } else if (pinRequired.isEmpty()) {
                this.pinRequired = Optional.empty();
            } else {
                this.pinRequired = Optional.of(pinRequired.get());
            }
            return this;
        }

        /**
         * <p>The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.</p>
         */
        @JsonSetter(value = "label_color", nulls = Nulls.SKIP)
        public Builder labelColor(Optional<String> labelColor) {
            this.labelColor = labelColor;
            return this;
        }

        public Builder labelColor(String labelColor) {
            this.labelColor = Optional.ofNullable(labelColor);
            return this;
        }

        public Builder labelColor(Nullable<String> labelColor) {
            if (labelColor.isNull()) {
                this.labelColor = null;
            } else if (labelColor.isEmpty()) {
                this.labelColor = Optional.empty();
            } else {
                this.labelColor = Optional.of(labelColor.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether this discount should reduce the price used to calculate tax.</p>
         * <p>Most discounts should use <code>MODIFY_TAX_BASIS</code>. However, in some circumstances taxes must
         * be calculated based on an item's price, ignoring a particular discount. For example,
         * in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
         * customer pays but does not reduce the sale price used to calculate how much sales tax is
         * due. In this case, the discount representing that manufacturer coupon should have
         * <code>DO_NOT_MODIFY_TAX_BASIS</code> for this field.</p>
         * <p>If you are unsure whether you need to use this field, consult your tax professional.
         * See <a href="#type-catalogdiscountmodifytaxbasis">CatalogDiscountModifyTaxBasis</a> for possible values</p>
         */
        @JsonSetter(value = "modify_tax_basis", nulls = Nulls.SKIP)
        public Builder modifyTaxBasis(Optional<CatalogDiscountModifyTaxBasis> modifyTaxBasis) {
            this.modifyTaxBasis = modifyTaxBasis;
            return this;
        }

        public Builder modifyTaxBasis(CatalogDiscountModifyTaxBasis modifyTaxBasis) {
            this.modifyTaxBasis = Optional.ofNullable(modifyTaxBasis);
            return this;
        }

        /**
         * <p>For a percentage discount, the maximum absolute value of the discount. For example, if a
         * 50% discount has a <code>maximum_amount_money</code> of $20, a $100 purchase will yield a $20 discount,
         * not a $50 discount.</p>
         */
        @JsonSetter(value = "maximum_amount_money", nulls = Nulls.SKIP)
        public Builder maximumAmountMoney(Optional<Money> maximumAmountMoney) {
            this.maximumAmountMoney = maximumAmountMoney;
            return this;
        }

        public Builder maximumAmountMoney(Money maximumAmountMoney) {
            this.maximumAmountMoney = Optional.ofNullable(maximumAmountMoney);
            return this;
        }

        public CatalogDiscount build() {
            return new CatalogDiscount(
                    name,
                    discountType,
                    percentage,
                    amountMoney,
                    pinRequired,
                    labelColor,
                    modifyTaxBasis,
                    maximumAmountMoney,
                    additionalProperties);
        }
    }
}
