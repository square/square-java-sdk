/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CalculateOrderRequest.Builder.class)
public final class CalculateOrderRequest {
    private final Order order;

    private final Optional<List<OrderReward>> proposedRewards;

    private final Map<String, Object> additionalProperties;

    private CalculateOrderRequest(
            Order order, Optional<List<OrderReward>> proposedRewards, Map<String, Object> additionalProperties) {
        this.order = order;
        this.proposedRewards = proposedRewards;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The order to be calculated. Expects the entire order, not a sparse update.
     */
    @JsonProperty("order")
    public Order getOrder() {
        return order;
    }

    /**
     * @return Identifies one or more loyalty reward tiers to apply during the order calculation.
     * The discounts defined by the reward tiers are added to the order only to preview the
     * effect of applying the specified rewards. The rewards do not correspond to actual
     * redemptions; that is, no <code>reward</code>s are created. Therefore, the reward <code>id</code>s are
     * random strings used only to reference the reward tier.
     */
    @JsonIgnore
    public Optional<List<OrderReward>> getProposedRewards() {
        if (proposedRewards == null) {
            return Optional.empty();
        }
        return proposedRewards;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("proposed_rewards")
    private Optional<List<OrderReward>> _getProposedRewards() {
        return proposedRewards;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CalculateOrderRequest && equalTo((CalculateOrderRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CalculateOrderRequest other) {
        return order.equals(other.order) && proposedRewards.equals(other.proposedRewards);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.order, this.proposedRewards);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderStage builder() {
        return new Builder();
    }

    public interface OrderStage {
        /**
         * <p>The order to be calculated. Expects the entire order, not a sparse update.</p>
         */
        _FinalStage order(@NotNull Order order);

        Builder from(CalculateOrderRequest other);
    }

    public interface _FinalStage {
        CalculateOrderRequest build();

        /**
         * <p>Identifies one or more loyalty reward tiers to apply during the order calculation.
         * The discounts defined by the reward tiers are added to the order only to preview the
         * effect of applying the specified rewards. The rewards do not correspond to actual
         * redemptions; that is, no <code>reward</code>s are created. Therefore, the reward <code>id</code>s are
         * random strings used only to reference the reward tier.</p>
         */
        _FinalStage proposedRewards(Optional<List<OrderReward>> proposedRewards);

        _FinalStage proposedRewards(List<OrderReward> proposedRewards);

        _FinalStage proposedRewards(Nullable<List<OrderReward>> proposedRewards);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrderStage, _FinalStage {
        private Order order;

        private Optional<List<OrderReward>> proposedRewards = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CalculateOrderRequest other) {
            order(other.getOrder());
            proposedRewards(other.getProposedRewards());
            return this;
        }

        /**
         * <p>The order to be calculated. Expects the entire order, not a sparse update.</p>
         * <p>The order to be calculated. Expects the entire order, not a sparse update.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order")
        public _FinalStage order(@NotNull Order order) {
            this.order = Objects.requireNonNull(order, "order must not be null");
            return this;
        }

        /**
         * <p>Identifies one or more loyalty reward tiers to apply during the order calculation.
         * The discounts defined by the reward tiers are added to the order only to preview the
         * effect of applying the specified rewards. The rewards do not correspond to actual
         * redemptions; that is, no <code>reward</code>s are created. Therefore, the reward <code>id</code>s are
         * random strings used only to reference the reward tier.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage proposedRewards(Nullable<List<OrderReward>> proposedRewards) {
            if (proposedRewards.isNull()) {
                this.proposedRewards = null;
            } else if (proposedRewards.isEmpty()) {
                this.proposedRewards = Optional.empty();
            } else {
                this.proposedRewards = Optional.of(proposedRewards.get());
            }
            return this;
        }

        /**
         * <p>Identifies one or more loyalty reward tiers to apply during the order calculation.
         * The discounts defined by the reward tiers are added to the order only to preview the
         * effect of applying the specified rewards. The rewards do not correspond to actual
         * redemptions; that is, no <code>reward</code>s are created. Therefore, the reward <code>id</code>s are
         * random strings used only to reference the reward tier.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage proposedRewards(List<OrderReward> proposedRewards) {
            this.proposedRewards = Optional.ofNullable(proposedRewards);
            return this;
        }

        /**
         * <p>Identifies one or more loyalty reward tiers to apply during the order calculation.
         * The discounts defined by the reward tiers are added to the order only to preview the
         * effect of applying the specified rewards. The rewards do not correspond to actual
         * redemptions; that is, no <code>reward</code>s are created. Therefore, the reward <code>id</code>s are
         * random strings used only to reference the reward tier.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "proposed_rewards", nulls = Nulls.SKIP)
        public _FinalStage proposedRewards(Optional<List<OrderReward>> proposedRewards) {
            this.proposedRewards = proposedRewards;
            return this;
        }

        @java.lang.Override
        public CalculateOrderRequest build() {
            return new CalculateOrderRequest(order, proposedRewards, additionalProperties);
        }
    }
}
