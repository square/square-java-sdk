/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InventoryPhysicalCount.Builder.class)
public final class InventoryPhysicalCount {
    private final Optional<String> id;

    private final Optional<String> referenceId;

    private final Optional<String> catalogObjectId;

    private final Optional<String> catalogObjectType;

    private final Optional<InventoryState> state;

    private final Optional<String> locationId;

    private final Optional<String> quantity;

    private final Optional<SourceApplication> source;

    private final Optional<String> employeeId;

    private final Optional<String> teamMemberId;

    private final Optional<String> occurredAt;

    private final Optional<String> createdAt;

    private final Map<String, Object> additionalProperties;

    private InventoryPhysicalCount(
            Optional<String> id,
            Optional<String> referenceId,
            Optional<String> catalogObjectId,
            Optional<String> catalogObjectType,
            Optional<InventoryState> state,
            Optional<String> locationId,
            Optional<String> quantity,
            Optional<SourceApplication> source,
            Optional<String> employeeId,
            Optional<String> teamMemberId,
            Optional<String> occurredAt,
            Optional<String> createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.referenceId = referenceId;
        this.catalogObjectId = catalogObjectId;
        this.catalogObjectType = catalogObjectType;
        this.state = state;
        this.locationId = locationId;
        this.quantity = quantity;
        this.source = source;
        this.employeeId = employeeId;
        this.teamMemberId = teamMemberId;
        this.occurredAt = occurredAt;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique Square-generated ID for the
     * <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a>.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return An optional ID provided by the application to tie the
     * <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a> to an external
     * system.
     */
    @JsonIgnore
    public Optional<String> getReferenceId() {
        if (referenceId == null) {
            return Optional.empty();
        }
        return referenceId;
    }

    /**
     * @return The Square-generated ID of the
     * <a href="entity:CatalogObject">CatalogObject</a> being tracked.
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectId() {
        if (catalogObjectId == null) {
            return Optional.empty();
        }
        return catalogObjectId;
    }

    /**
     * @return The <a href="entity:CatalogObjectType">type</a> of the <a href="entity:CatalogObject">CatalogObject</a> being tracked.
     * <p>The Inventory API supports setting and reading the <code>&quot;catalog_object_type&quot;: &quot;ITEM_VARIATION&quot;</code> field value.
     * In addition, it can also read the <code>&quot;catalog_object_type&quot;: &quot;ITEM&quot;</code> field value that is set by the Square Restaurants app.</p>
     */
    @JsonIgnore
    public Optional<String> getCatalogObjectType() {
        if (catalogObjectType == null) {
            return Optional.empty();
        }
        return catalogObjectType;
    }

    /**
     * @return The current <a href="entity:InventoryState">inventory state</a> for the related
     * quantity of items.
     * See <a href="#type-inventorystate">InventoryState</a> for possible values
     */
    @JsonProperty("state")
    public Optional<InventoryState> getState() {
        return state;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Location">Location</a> where the related
     * quantity of items is being tracked.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The number of items affected by the physical count as a decimal string.
     * The number can support up to 5 digits after the decimal point.
     */
    @JsonIgnore
    public Optional<String> getQuantity() {
        if (quantity == null) {
            return Optional.empty();
        }
        return quantity;
    }

    /**
     * @return Information about the application with which the
     * physical count is submitted.
     */
    @JsonProperty("source")
    public Optional<SourceApplication> getSource() {
        return source;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:Employee">Employee</a> responsible for the
     * physical count.
     */
    @JsonIgnore
    public Optional<String> getEmployeeId() {
        if (employeeId == null) {
            return Optional.empty();
        }
        return employeeId;
    }

    /**
     * @return The Square-generated ID of the <a href="entity:TeamMember">Team Member</a> responsible for the
     * physical count.
     */
    @JsonIgnore
    public Optional<String> getTeamMemberId() {
        if (teamMemberId == null) {
            return Optional.empty();
        }
        return teamMemberId;
    }

    /**
     * @return A client-generated RFC 3339-formatted timestamp that indicates when
     * the physical count was examined. For physical count updates, the <code>occurred_at</code>
     * timestamp cannot be older than 24 hours or in the future relative to the
     * time of the request.
     */
    @JsonIgnore
    public Optional<String> getOccurredAt() {
        if (occurredAt == null) {
            return Optional.empty();
        }
        return occurredAt;
    }

    /**
     * @return An RFC 3339-formatted timestamp that indicates when the physical count is received.
     */
    @JsonProperty("created_at")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("reference_id")
    private Optional<String> _getReferenceId() {
        return referenceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_id")
    private Optional<String> _getCatalogObjectId() {
        return catalogObjectId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_object_type")
    private Optional<String> _getCatalogObjectType() {
        return catalogObjectType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("quantity")
    private Optional<String> _getQuantity() {
        return quantity;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("employee_id")
    private Optional<String> _getEmployeeId() {
        return employeeId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("team_member_id")
    private Optional<String> _getTeamMemberId() {
        return teamMemberId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("occurred_at")
    private Optional<String> _getOccurredAt() {
        return occurredAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InventoryPhysicalCount && equalTo((InventoryPhysicalCount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InventoryPhysicalCount other) {
        return id.equals(other.id)
                && referenceId.equals(other.referenceId)
                && catalogObjectId.equals(other.catalogObjectId)
                && catalogObjectType.equals(other.catalogObjectType)
                && state.equals(other.state)
                && locationId.equals(other.locationId)
                && quantity.equals(other.quantity)
                && source.equals(other.source)
                && employeeId.equals(other.employeeId)
                && teamMemberId.equals(other.teamMemberId)
                && occurredAt.equals(other.occurredAt)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.referenceId,
                this.catalogObjectId,
                this.catalogObjectType,
                this.state,
                this.locationId,
                this.quantity,
                this.source,
                this.employeeId,
                this.teamMemberId,
                this.occurredAt,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> referenceId = Optional.empty();

        private Optional<String> catalogObjectId = Optional.empty();

        private Optional<String> catalogObjectType = Optional.empty();

        private Optional<InventoryState> state = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> quantity = Optional.empty();

        private Optional<SourceApplication> source = Optional.empty();

        private Optional<String> employeeId = Optional.empty();

        private Optional<String> teamMemberId = Optional.empty();

        private Optional<String> occurredAt = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InventoryPhysicalCount other) {
            id(other.getId());
            referenceId(other.getReferenceId());
            catalogObjectId(other.getCatalogObjectId());
            catalogObjectType(other.getCatalogObjectType());
            state(other.getState());
            locationId(other.getLocationId());
            quantity(other.getQuantity());
            source(other.getSource());
            employeeId(other.getEmployeeId());
            teamMemberId(other.getTeamMemberId());
            occurredAt(other.getOccurredAt());
            createdAt(other.getCreatedAt());
            return this;
        }

        /**
         * <p>A unique Square-generated ID for the
         * <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a>.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>An optional ID provided by the application to tie the
         * <a href="entity:InventoryPhysicalCount">InventoryPhysicalCount</a> to an external
         * system.</p>
         */
        @JsonSetter(value = "reference_id", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<String> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(String referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        public Builder referenceId(Nullable<String> referenceId) {
            if (referenceId.isNull()) {
                this.referenceId = null;
            } else if (referenceId.isEmpty()) {
                this.referenceId = Optional.empty();
            } else {
                this.referenceId = Optional.of(referenceId.get());
            }
            return this;
        }

        /**
         * <p>The Square-generated ID of the
         * <a href="entity:CatalogObject">CatalogObject</a> being tracked.</p>
         */
        @JsonSetter(value = "catalog_object_id", nulls = Nulls.SKIP)
        public Builder catalogObjectId(Optional<String> catalogObjectId) {
            this.catalogObjectId = catalogObjectId;
            return this;
        }

        public Builder catalogObjectId(String catalogObjectId) {
            this.catalogObjectId = Optional.ofNullable(catalogObjectId);
            return this;
        }

        public Builder catalogObjectId(Nullable<String> catalogObjectId) {
            if (catalogObjectId.isNull()) {
                this.catalogObjectId = null;
            } else if (catalogObjectId.isEmpty()) {
                this.catalogObjectId = Optional.empty();
            } else {
                this.catalogObjectId = Optional.of(catalogObjectId.get());
            }
            return this;
        }

        /**
         * <p>The <a href="entity:CatalogObjectType">type</a> of the <a href="entity:CatalogObject">CatalogObject</a> being tracked.</p>
         * <p>The Inventory API supports setting and reading the <code>&quot;catalog_object_type&quot;: &quot;ITEM_VARIATION&quot;</code> field value.
         * In addition, it can also read the <code>&quot;catalog_object_type&quot;: &quot;ITEM&quot;</code> field value that is set by the Square Restaurants app.</p>
         */
        @JsonSetter(value = "catalog_object_type", nulls = Nulls.SKIP)
        public Builder catalogObjectType(Optional<String> catalogObjectType) {
            this.catalogObjectType = catalogObjectType;
            return this;
        }

        public Builder catalogObjectType(String catalogObjectType) {
            this.catalogObjectType = Optional.ofNullable(catalogObjectType);
            return this;
        }

        public Builder catalogObjectType(Nullable<String> catalogObjectType) {
            if (catalogObjectType.isNull()) {
                this.catalogObjectType = null;
            } else if (catalogObjectType.isEmpty()) {
                this.catalogObjectType = Optional.empty();
            } else {
                this.catalogObjectType = Optional.of(catalogObjectType.get());
            }
            return this;
        }

        /**
         * <p>The current <a href="entity:InventoryState">inventory state</a> for the related
         * quantity of items.
         * See <a href="#type-inventorystate">InventoryState</a> for possible values</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<InventoryState> state) {
            this.state = state;
            return this;
        }

        public Builder state(InventoryState state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>The Square-generated ID of the <a href="entity:Location">Location</a> where the related
         * quantity of items is being tracked.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The number of items affected by the physical count as a decimal string.
         * The number can support up to 5 digits after the decimal point.</p>
         */
        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<String> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(String quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        public Builder quantity(Nullable<String> quantity) {
            if (quantity.isNull()) {
                this.quantity = null;
            } else if (quantity.isEmpty()) {
                this.quantity = Optional.empty();
            } else {
                this.quantity = Optional.of(quantity.get());
            }
            return this;
        }

        /**
         * <p>Information about the application with which the
         * physical count is submitted.</p>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<SourceApplication> source) {
            this.source = source;
            return this;
        }

        public Builder source(SourceApplication source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>The Square-generated ID of the <a href="entity:Employee">Employee</a> responsible for the
         * physical count.</p>
         */
        @JsonSetter(value = "employee_id", nulls = Nulls.SKIP)
        public Builder employeeId(Optional<String> employeeId) {
            this.employeeId = employeeId;
            return this;
        }

        public Builder employeeId(String employeeId) {
            this.employeeId = Optional.ofNullable(employeeId);
            return this;
        }

        public Builder employeeId(Nullable<String> employeeId) {
            if (employeeId.isNull()) {
                this.employeeId = null;
            } else if (employeeId.isEmpty()) {
                this.employeeId = Optional.empty();
            } else {
                this.employeeId = Optional.of(employeeId.get());
            }
            return this;
        }

        /**
         * <p>The Square-generated ID of the <a href="entity:TeamMember">Team Member</a> responsible for the
         * physical count.</p>
         */
        @JsonSetter(value = "team_member_id", nulls = Nulls.SKIP)
        public Builder teamMemberId(Optional<String> teamMemberId) {
            this.teamMemberId = teamMemberId;
            return this;
        }

        public Builder teamMemberId(String teamMemberId) {
            this.teamMemberId = Optional.ofNullable(teamMemberId);
            return this;
        }

        public Builder teamMemberId(Nullable<String> teamMemberId) {
            if (teamMemberId.isNull()) {
                this.teamMemberId = null;
            } else if (teamMemberId.isEmpty()) {
                this.teamMemberId = Optional.empty();
            } else {
                this.teamMemberId = Optional.of(teamMemberId.get());
            }
            return this;
        }

        /**
         * <p>A client-generated RFC 3339-formatted timestamp that indicates when
         * the physical count was examined. For physical count updates, the <code>occurred_at</code>
         * timestamp cannot be older than 24 hours or in the future relative to the
         * time of the request.</p>
         */
        @JsonSetter(value = "occurred_at", nulls = Nulls.SKIP)
        public Builder occurredAt(Optional<String> occurredAt) {
            this.occurredAt = occurredAt;
            return this;
        }

        public Builder occurredAt(String occurredAt) {
            this.occurredAt = Optional.ofNullable(occurredAt);
            return this;
        }

        public Builder occurredAt(Nullable<String> occurredAt) {
            if (occurredAt.isNull()) {
                this.occurredAt = null;
            } else if (occurredAt.isEmpty()) {
                this.occurredAt = Optional.empty();
            } else {
                this.occurredAt = Optional.of(occurredAt.get());
            }
            return this;
        }

        /**
         * <p>An RFC 3339-formatted timestamp that indicates when the physical count is received.</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public InventoryPhysicalCount build() {
            return new InventoryPhysicalCount(
                    id,
                    referenceId,
                    catalogObjectId,
                    catalogObjectType,
                    state,
                    locationId,
                    quantity,
                    source,
                    employeeId,
                    teamMemberId,
                    occurredAt,
                    createdAt,
                    additionalProperties);
        }
    }
}
