/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListCatalogRequest.Builder.class)
public final class ListCatalogRequest {
    private final Optional<String> cursor;

    private final Optional<String> types;

    private final Optional<Long> catalogVersion;

    private final Map<String, Object> additionalProperties;

    private ListCatalogRequest(
            Optional<String> cursor,
            Optional<String> types,
            Optional<Long> catalogVersion,
            Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.types = types;
        this.catalogVersion = catalogVersion;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The pagination cursor returned in the previous response. Leave unset for an initial request.
     * The page size is currently set to be 100.
     * See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a> for more information.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return An optional case-insensitive, comma-separated list of object types to retrieve.
     * <p>The valid values are defined in the <a href="entity:CatalogObjectType">CatalogObjectType</a> enum, for example,
     * <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>CATEGORY</code>, <code>DISCOUNT</code>, <code>TAX</code>,
     * <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, <code>IMAGE</code>, etc.</p>
     * <p>If this is unspecified, the operation returns objects of all the top level types at the version
     * of the Square API used to make the request. Object types that are nested onto other object types
     * are not included in the defaults.</p>
     * <p>At the current API version the default object types are:
     * ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
     * PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
     * SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.</p>
     */
    @JsonIgnore
    public Optional<String> getTypes() {
        if (types == null) {
            return Optional.empty();
        }
        return types;
    }

    /**
     * @return The specific version of the catalog objects to be included in the response.
     * This allows you to retrieve historical versions of objects. The specified version value is matched against
     * the <a href="entity:CatalogObject">CatalogObject</a>s' <code>version</code> attribute.  If not included, results will be from the
     * current version of the catalog.
     */
    @JsonIgnore
    public Optional<Long> getCatalogVersion() {
        if (catalogVersion == null) {
            return Optional.empty();
        }
        return catalogVersion;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("types")
    private Optional<String> _getTypes() {
        return types;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("catalog_version")
    private Optional<Long> _getCatalogVersion() {
        return catalogVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListCatalogRequest && equalTo((ListCatalogRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListCatalogRequest other) {
        return cursor.equals(other.cursor) && types.equals(other.types) && catalogVersion.equals(other.catalogVersion);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cursor, this.types, this.catalogVersion);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<String> types = Optional.empty();

        private Optional<Long> catalogVersion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListCatalogRequest other) {
            cursor(other.getCursor());
            types(other.getTypes());
            catalogVersion(other.getCatalogVersion());
            return this;
        }

        /**
         * <p>The pagination cursor returned in the previous response. Leave unset for an initial request.
         * The page size is currently set to be 100.
         * See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination">Pagination</a> for more information.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>An optional case-insensitive, comma-separated list of object types to retrieve.</p>
         * <p>The valid values are defined in the <a href="entity:CatalogObjectType">CatalogObjectType</a> enum, for example,
         * <code>ITEM</code>, <code>ITEM_VARIATION</code>, <code>CATEGORY</code>, <code>DISCOUNT</code>, <code>TAX</code>,
         * <code>MODIFIER</code>, <code>MODIFIER_LIST</code>, <code>IMAGE</code>, etc.</p>
         * <p>If this is unspecified, the operation returns objects of all the top level types at the version
         * of the Square API used to make the request. Object types that are nested onto other object types
         * are not included in the defaults.</p>
         * <p>At the current API version the default object types are:
         * ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
         * PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
         * SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.</p>
         */
        @JsonSetter(value = "types", nulls = Nulls.SKIP)
        public Builder types(Optional<String> types) {
            this.types = types;
            return this;
        }

        public Builder types(String types) {
            this.types = Optional.ofNullable(types);
            return this;
        }

        public Builder types(Nullable<String> types) {
            if (types.isNull()) {
                this.types = null;
            } else if (types.isEmpty()) {
                this.types = Optional.empty();
            } else {
                this.types = Optional.of(types.get());
            }
            return this;
        }

        /**
         * <p>The specific version of the catalog objects to be included in the response.
         * This allows you to retrieve historical versions of objects. The specified version value is matched against
         * the <a href="entity:CatalogObject">CatalogObject</a>s' <code>version</code> attribute.  If not included, results will be from the
         * current version of the catalog.</p>
         */
        @JsonSetter(value = "catalog_version", nulls = Nulls.SKIP)
        public Builder catalogVersion(Optional<Long> catalogVersion) {
            this.catalogVersion = catalogVersion;
            return this;
        }

        public Builder catalogVersion(Long catalogVersion) {
            this.catalogVersion = Optional.ofNullable(catalogVersion);
            return this;
        }

        public Builder catalogVersion(Nullable<Long> catalogVersion) {
            if (catalogVersion.isNull()) {
                this.catalogVersion = null;
            } else if (catalogVersion.isEmpty()) {
                this.catalogVersion = Optional.empty();
            } else {
                this.catalogVersion = Optional.of(catalogVersion.get());
            }
            return this;
        }

        public ListCatalogRequest build() {
            return new ListCatalogRequest(cursor, types, catalogVersion, additionalProperties);
        }
    }
}
