/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExternalPaymentDetails.Builder.class)
public final class ExternalPaymentDetails {
    private final String type;

    private final String source;

    private final Optional<String> sourceId;

    private final Optional<Money> sourceFeeMoney;

    private final Map<String, Object> additionalProperties;

    private ExternalPaymentDetails(
            String type,
            String source,
            Optional<String> sourceId,
            Optional<Money> sourceFeeMoney,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.source = source;
        this.sourceId = sourceId;
        this.sourceFeeMoney = sourceFeeMoney;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of external payment the seller received. It can be one of the following:
     * <ul>
     * <li>CHECK - Paid using a physical check.</li>
     * <li>BANK_TRANSFER - Paid using external bank transfer.</li>
     * <li>OTHER_GIFT_CARD - Paid using a non-Square gift card.</li>
     * <li>CRYPTO - Paid using a crypto currency.</li>
     * <li>SQUARE_CASH - Paid using Square Cash App.</li>
     * <li>SOCIAL - Paid using peer-to-peer payment applications.</li>
     * <li>EXTERNAL - A third-party application gathered this payment outside of Square.</li>
     * <li>EMONEY - Paid using an E-money provider.</li>
     * <li>CARD - A credit or debit card that Square does not support.</li>
     * <li>STORED_BALANCE - Use for house accounts, store credit, and so forth.</li>
     * <li>FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals</li>
     * <li>OTHER - A type not listed here.</li>
     * </ul>
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return A description of the external payment source. For example,
     * &quot;Food Delivery Service&quot;.
     */
    @JsonProperty("source")
    public String getSource() {
        return source;
    }

    /**
     * @return An ID to associate the payment to its originating source.
     */
    @JsonIgnore
    public Optional<String> getSourceId() {
        if (sourceId == null) {
            return Optional.empty();
        }
        return sourceId;
    }

    /**
     * @return The fees paid to the source. The <code>amount_money</code> minus this field is
     * the net amount seller receives.
     */
    @JsonProperty("source_fee_money")
    public Optional<Money> getSourceFeeMoney() {
        return sourceFeeMoney;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("source_id")
    private Optional<String> _getSourceId() {
        return sourceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExternalPaymentDetails && equalTo((ExternalPaymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExternalPaymentDetails other) {
        return type.equals(other.type)
                && source.equals(other.source)
                && sourceId.equals(other.sourceId)
                && sourceFeeMoney.equals(other.sourceFeeMoney);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.source, this.sourceId, this.sourceFeeMoney);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        SourceStage type(@NotNull String type);

        Builder from(ExternalPaymentDetails other);
    }

    public interface SourceStage {
        _FinalStage source(@NotNull String source);
    }

    public interface _FinalStage {
        ExternalPaymentDetails build();

        _FinalStage sourceId(Optional<String> sourceId);

        _FinalStage sourceId(String sourceId);

        _FinalStage sourceId(Nullable<String> sourceId);

        _FinalStage sourceFeeMoney(Optional<Money> sourceFeeMoney);

        _FinalStage sourceFeeMoney(Money sourceFeeMoney);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, SourceStage, _FinalStage {
        private String type;

        private String source;

        private Optional<Money> sourceFeeMoney = Optional.empty();

        private Optional<String> sourceId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ExternalPaymentDetails other) {
            type(other.getType());
            source(other.getSource());
            sourceId(other.getSourceId());
            sourceFeeMoney(other.getSourceFeeMoney());
            return this;
        }

        /**
         * <p>The type of external payment the seller received. It can be one of the following:</p>
         * <ul>
         * <li>CHECK - Paid using a physical check.</li>
         * <li>BANK_TRANSFER - Paid using external bank transfer.</li>
         * <li>OTHER_GIFT_CARD - Paid using a non-Square gift card.</li>
         * <li>CRYPTO - Paid using a crypto currency.</li>
         * <li>SQUARE_CASH - Paid using Square Cash App.</li>
         * <li>SOCIAL - Paid using peer-to-peer payment applications.</li>
         * <li>EXTERNAL - A third-party application gathered this payment outside of Square.</li>
         * <li>EMONEY - Paid using an E-money provider.</li>
         * <li>CARD - A credit or debit card that Square does not support.</li>
         * <li>STORED_BALANCE - Use for house accounts, store credit, and so forth.</li>
         * <li>FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals</li>
         * <li>OTHER - A type not listed here.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public SourceStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>A description of the external payment source. For example,
         * &quot;Food Delivery Service&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(@NotNull String source) {
            this.source = Objects.requireNonNull(source, "source must not be null");
            return this;
        }

        /**
         * <p>The fees paid to the source. The <code>amount_money</code> minus this field is
         * the net amount seller receives.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceFeeMoney(Money sourceFeeMoney) {
            this.sourceFeeMoney = Optional.ofNullable(sourceFeeMoney);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_fee_money", nulls = Nulls.SKIP)
        public _FinalStage sourceFeeMoney(Optional<Money> sourceFeeMoney) {
            this.sourceFeeMoney = sourceFeeMoney;
            return this;
        }

        /**
         * <p>An ID to associate the payment to its originating source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceId(Nullable<String> sourceId) {
            if (sourceId.isNull()) {
                this.sourceId = null;
            } else if (sourceId.isEmpty()) {
                this.sourceId = Optional.empty();
            } else {
                this.sourceId = Optional.of(sourceId.get());
            }
            return this;
        }

        /**
         * <p>An ID to associate the payment to its originating source.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sourceId(String sourceId) {
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source_id", nulls = Nulls.SKIP)
        public _FinalStage sourceId(Optional<String> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        @java.lang.Override
        public ExternalPaymentDetails build() {
            return new ExternalPaymentDetails(type, source, sourceId, sourceFeeMoney, additionalProperties);
        }
    }
}
