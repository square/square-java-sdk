/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentBalanceActivityAutomaticSavingsDetail.Builder.class)
public final class PaymentBalanceActivityAutomaticSavingsDetail {
    private final Optional<String> paymentId;

    private final Optional<String> payoutId;

    private final Map<String, Object> additionalProperties;

    private PaymentBalanceActivityAutomaticSavingsDetail(
            Optional<String> paymentId, Optional<String> payoutId, Map<String, Object> additionalProperties) {
        this.paymentId = paymentId;
        this.payoutId = payoutId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the payment associated with this activity.
     */
    @JsonIgnore
    public Optional<String> getPaymentId() {
        if (paymentId == null) {
            return Optional.empty();
        }
        return paymentId;
    }

    /**
     * @return The ID of the payout associated with this activity.
     */
    @JsonIgnore
    public Optional<String> getPayoutId() {
        if (payoutId == null) {
            return Optional.empty();
        }
        return payoutId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payment_id")
    private Optional<String> _getPaymentId() {
        return paymentId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("payout_id")
    private Optional<String> _getPayoutId() {
        return payoutId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentBalanceActivityAutomaticSavingsDetail
                && equalTo((PaymentBalanceActivityAutomaticSavingsDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentBalanceActivityAutomaticSavingsDetail other) {
        return paymentId.equals(other.paymentId) && payoutId.equals(other.payoutId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentId, this.payoutId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> paymentId = Optional.empty();

        private Optional<String> payoutId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaymentBalanceActivityAutomaticSavingsDetail other) {
            paymentId(other.getPaymentId());
            payoutId(other.getPayoutId());
            return this;
        }

        @JsonSetter(value = "payment_id", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Nullable<String> paymentId) {
            if (paymentId.isNull()) {
                this.paymentId = null;
            } else if (paymentId.isEmpty()) {
                this.paymentId = Optional.empty();
            } else {
                this.paymentId = Optional.of(paymentId.get());
            }
            return this;
        }

        @JsonSetter(value = "payout_id", nulls = Nulls.SKIP)
        public Builder payoutId(Optional<String> payoutId) {
            this.payoutId = payoutId;
            return this;
        }

        public Builder payoutId(String payoutId) {
            this.payoutId = Optional.ofNullable(payoutId);
            return this;
        }

        public Builder payoutId(Nullable<String> payoutId) {
            if (payoutId.isNull()) {
                this.payoutId = null;
            } else if (payoutId.isEmpty()) {
                this.payoutId = Optional.empty();
            } else {
                this.payoutId = Optional.of(payoutId.get());
            }
            return this;
        }

        public PaymentBalanceActivityAutomaticSavingsDetail build() {
            return new PaymentBalanceActivityAutomaticSavingsDetail(paymentId, payoutId, additionalProperties);
        }
    }
}
