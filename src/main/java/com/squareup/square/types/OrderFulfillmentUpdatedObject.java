/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrderFulfillmentUpdatedObject.Builder.class)
public final class OrderFulfillmentUpdatedObject {
    private final Optional<OrderFulfillmentUpdated> orderFulfillmentUpdated;

    private final Map<String, Object> additionalProperties;

    private OrderFulfillmentUpdatedObject(
            Optional<OrderFulfillmentUpdated> orderFulfillmentUpdated, Map<String, Object> additionalProperties) {
        this.orderFulfillmentUpdated = orderFulfillmentUpdated;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Information about the updated order fulfillment.
     */
    @JsonProperty("order_fulfillment_updated")
    public Optional<OrderFulfillmentUpdated> getOrderFulfillmentUpdated() {
        return orderFulfillmentUpdated;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrderFulfillmentUpdatedObject && equalTo((OrderFulfillmentUpdatedObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrderFulfillmentUpdatedObject other) {
        return orderFulfillmentUpdated.equals(other.orderFulfillmentUpdated);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orderFulfillmentUpdated);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OrderFulfillmentUpdated> orderFulfillmentUpdated = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrderFulfillmentUpdatedObject other) {
            orderFulfillmentUpdated(other.getOrderFulfillmentUpdated());
            return this;
        }

        @JsonSetter(value = "order_fulfillment_updated", nulls = Nulls.SKIP)
        public Builder orderFulfillmentUpdated(Optional<OrderFulfillmentUpdated> orderFulfillmentUpdated) {
            this.orderFulfillmentUpdated = orderFulfillmentUpdated;
            return this;
        }

        public Builder orderFulfillmentUpdated(OrderFulfillmentUpdated orderFulfillmentUpdated) {
            this.orderFulfillmentUpdated = Optional.ofNullable(orderFulfillmentUpdated);
            return this;
        }

        public OrderFulfillmentUpdatedObject build() {
            return new OrderFulfillmentUpdatedObject(orderFulfillmentUpdated, additionalProperties);
        }
    }
}
