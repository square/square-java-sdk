/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogQuerySortedAttribute.Builder.class)
public final class CatalogQuerySortedAttribute {
    private final String attributeName;

    private final Optional<String> initialAttributeValue;

    private final Optional<SortOrder> sortOrder;

    private final Map<String, Object> additionalProperties;

    private CatalogQuerySortedAttribute(
            String attributeName,
            Optional<String> initialAttributeValue,
            Optional<SortOrder> sortOrder,
            Map<String, Object> additionalProperties) {
        this.attributeName = attributeName;
        this.initialAttributeValue = initialAttributeValue;
        this.sortOrder = sortOrder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The attribute whose value is used as the sort key.
     */
    @JsonProperty("attribute_name")
    public String getAttributeName() {
        return attributeName;
    }

    /**
     * @return The first attribute value to be returned by the query. Ascending sorts will return only
     * objects with this value or greater, while descending sorts will return only objects with this value
     * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
     */
    @JsonIgnore
    public Optional<String> getInitialAttributeValue() {
        if (initialAttributeValue == null) {
            return Optional.empty();
        }
        return initialAttributeValue;
    }

    /**
     * @return The desired sort order, <code>&quot;ASC&quot;</code> (ascending) or <code>&quot;DESC&quot;</code> (descending).
     * See <a href="#type-sortorder">SortOrder</a> for possible values
     */
    @JsonProperty("sort_order")
    public Optional<SortOrder> getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("initial_attribute_value")
    private Optional<String> _getInitialAttributeValue() {
        return initialAttributeValue;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CatalogQuerySortedAttribute && equalTo((CatalogQuerySortedAttribute) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CatalogQuerySortedAttribute other) {
        return attributeName.equals(other.attributeName)
                && initialAttributeValue.equals(other.initialAttributeValue)
                && sortOrder.equals(other.sortOrder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attributeName, this.initialAttributeValue, this.sortOrder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AttributeNameStage builder() {
        return new Builder();
    }

    public interface AttributeNameStage {
        /**
         * <p>The attribute whose value is used as the sort key.</p>
         */
        _FinalStage attributeName(@NotNull String attributeName);

        Builder from(CatalogQuerySortedAttribute other);
    }

    public interface _FinalStage {
        CatalogQuerySortedAttribute build();

        /**
         * <p>The first attribute value to be returned by the query. Ascending sorts will return only
         * objects with this value or greater, while descending sorts will return only objects with this value
         * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</p>
         */
        _FinalStage initialAttributeValue(Optional<String> initialAttributeValue);

        _FinalStage initialAttributeValue(String initialAttributeValue);

        _FinalStage initialAttributeValue(Nullable<String> initialAttributeValue);

        /**
         * <p>The desired sort order, <code>&quot;ASC&quot;</code> (ascending) or <code>&quot;DESC&quot;</code> (descending).
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         */
        _FinalStage sortOrder(Optional<SortOrder> sortOrder);

        _FinalStage sortOrder(SortOrder sortOrder);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AttributeNameStage, _FinalStage {
        private String attributeName;

        private Optional<SortOrder> sortOrder = Optional.empty();

        private Optional<String> initialAttributeValue = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CatalogQuerySortedAttribute other) {
            attributeName(other.getAttributeName());
            initialAttributeValue(other.getInitialAttributeValue());
            sortOrder(other.getSortOrder());
            return this;
        }

        /**
         * <p>The attribute whose value is used as the sort key.</p>
         * <p>The attribute whose value is used as the sort key.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("attribute_name")
        public _FinalStage attributeName(@NotNull String attributeName) {
            this.attributeName = Objects.requireNonNull(attributeName, "attributeName must not be null");
            return this;
        }

        /**
         * <p>The desired sort order, <code>&quot;ASC&quot;</code> (ascending) or <code>&quot;DESC&quot;</code> (descending).
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        /**
         * <p>The desired sort order, <code>&quot;ASC&quot;</code> (ascending) or <code>&quot;DESC&quot;</code> (descending).
         * See <a href="#type-sortorder">SortOrder</a> for possible values</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public _FinalStage sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * <p>The first attribute value to be returned by the query. Ascending sorts will return only
         * objects with this value or greater, while descending sorts will return only objects with this value
         * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage initialAttributeValue(Nullable<String> initialAttributeValue) {
            if (initialAttributeValue.isNull()) {
                this.initialAttributeValue = null;
            } else if (initialAttributeValue.isEmpty()) {
                this.initialAttributeValue = Optional.empty();
            } else {
                this.initialAttributeValue = Optional.of(initialAttributeValue.get());
            }
            return this;
        }

        /**
         * <p>The first attribute value to be returned by the query. Ascending sorts will return only
         * objects with this value or greater, while descending sorts will return only objects with this value
         * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage initialAttributeValue(String initialAttributeValue) {
            this.initialAttributeValue = Optional.ofNullable(initialAttributeValue);
            return this;
        }

        /**
         * <p>The first attribute value to be returned by the query. Ascending sorts will return only
         * objects with this value or greater, while descending sorts will return only objects with this value
         * or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "initial_attribute_value", nulls = Nulls.SKIP)
        public _FinalStage initialAttributeValue(Optional<String> initialAttributeValue) {
            this.initialAttributeValue = initialAttributeValue;
            return this;
        }

        @java.lang.Override
        public CatalogQuerySortedAttribute build() {
            return new CatalogQuerySortedAttribute(
                    attributeName, initialAttributeValue, sortOrder, additionalProperties);
        }
    }
}
