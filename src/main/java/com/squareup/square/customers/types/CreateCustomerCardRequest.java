/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.customers.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.Address;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateCustomerCardRequest.Builder.class)
public final class CreateCustomerCardRequest {
    private final String customerId;

    private final String cardNonce;

    private final Optional<Address> billingAddress;

    private final Optional<String> cardholderName;

    private final Optional<String> verificationToken;

    private final Map<String, Object> additionalProperties;

    private CreateCustomerCardRequest(
            String customerId,
            String cardNonce,
            Optional<Address> billingAddress,
            Optional<String> cardholderName,
            Optional<String> verificationToken,
            Map<String, Object> additionalProperties) {
        this.customerId = customerId;
        this.cardNonce = cardNonce;
        this.billingAddress = billingAddress;
        this.cardholderName = cardholderName;
        this.verificationToken = verificationToken;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Square ID of the customer profile the card is linked to.
     */
    @JsonProperty("customer_id")
    public String getCustomerId() {
        return customerId;
    }

    /**
     * @return A card nonce representing the credit card to link to the customer.
     * <p>Card nonces are generated by the Square payment form when customers enter
     * their card information. For more information, see
     * <a href="https://developer.squareup.com/docs/web-payments/take-card-payment">Walkthrough: Integrate Square Payments in a Website</a>.</p>
     * <p><strong>NOTE:</strong> Card nonces generated by digital wallets (such as Apple Pay)
     * cannot be used to create a customer card.</p>
     */
    @JsonProperty("card_nonce")
    public String getCardNonce() {
        return cardNonce;
    }

    /**
     * @return Address information for the card on file.
     * <p><strong>NOTE:</strong> If a billing address is provided in the request, the
     * <code>CreateCustomerCardRequest.billing_address.postal_code</code> must match
     * the postal code encoded in the card nonce.</p>
     */
    @JsonProperty("billing_address")
    public Optional<Address> getBillingAddress() {
        return billingAddress;
    }

    /**
     * @return The full name printed on the credit card.
     */
    @JsonProperty("cardholder_name")
    public Optional<String> getCardholderName() {
        return cardholderName;
    }

    /**
     * @return An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
     * Verification tokens encapsulate customer device information and 3-D Secure
     * challenge results to indicate that Square has verified the buyer identity.
     */
    @JsonProperty("verification_token")
    public Optional<String> getVerificationToken() {
        return verificationToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateCustomerCardRequest && equalTo((CreateCustomerCardRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateCustomerCardRequest other) {
        return customerId.equals(other.customerId)
                && cardNonce.equals(other.cardNonce)
                && billingAddress.equals(other.billingAddress)
                && cardholderName.equals(other.cardholderName)
                && verificationToken.equals(other.verificationToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerId, this.cardNonce, this.billingAddress, this.cardholderName, this.verificationToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CustomerIdStage builder() {
        return new Builder();
    }

    public interface CustomerIdStage {
        /**
         * <p>The Square ID of the customer profile the card is linked to.</p>
         */
        CardNonceStage customerId(@NotNull String customerId);

        Builder from(CreateCustomerCardRequest other);
    }

    public interface CardNonceStage {
        /**
         * <p>A card nonce representing the credit card to link to the customer.</p>
         * <p>Card nonces are generated by the Square payment form when customers enter
         * their card information. For more information, see
         * <a href="https://developer.squareup.com/docs/web-payments/take-card-payment">Walkthrough: Integrate Square Payments in a Website</a>.</p>
         * <p><strong>NOTE:</strong> Card nonces generated by digital wallets (such as Apple Pay)
         * cannot be used to create a customer card.</p>
         */
        _FinalStage cardNonce(@NotNull String cardNonce);
    }

    public interface _FinalStage {
        CreateCustomerCardRequest build();

        /**
         * <p>Address information for the card on file.</p>
         * <p><strong>NOTE:</strong> If a billing address is provided in the request, the
         * <code>CreateCustomerCardRequest.billing_address.postal_code</code> must match
         * the postal code encoded in the card nonce.</p>
         */
        _FinalStage billingAddress(Optional<Address> billingAddress);

        _FinalStage billingAddress(Address billingAddress);

        /**
         * <p>The full name printed on the credit card.</p>
         */
        _FinalStage cardholderName(Optional<String> cardholderName);

        _FinalStage cardholderName(String cardholderName);

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         */
        _FinalStage verificationToken(Optional<String> verificationToken);

        _FinalStage verificationToken(String verificationToken);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CustomerIdStage, CardNonceStage, _FinalStage {
        private String customerId;

        private String cardNonce;

        private Optional<String> verificationToken = Optional.empty();

        private Optional<String> cardholderName = Optional.empty();

        private Optional<Address> billingAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateCustomerCardRequest other) {
            customerId(other.getCustomerId());
            cardNonce(other.getCardNonce());
            billingAddress(other.getBillingAddress());
            cardholderName(other.getCardholderName());
            verificationToken(other.getVerificationToken());
            return this;
        }

        /**
         * <p>The Square ID of the customer profile the card is linked to.</p>
         * <p>The Square ID of the customer profile the card is linked to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("customer_id")
        public CardNonceStage customerId(@NotNull String customerId) {
            this.customerId = Objects.requireNonNull(customerId, "customerId must not be null");
            return this;
        }

        /**
         * <p>A card nonce representing the credit card to link to the customer.</p>
         * <p>Card nonces are generated by the Square payment form when customers enter
         * their card information. For more information, see
         * <a href="https://developer.squareup.com/docs/web-payments/take-card-payment">Walkthrough: Integrate Square Payments in a Website</a>.</p>
         * <p><strong>NOTE:</strong> Card nonces generated by digital wallets (such as Apple Pay)
         * cannot be used to create a customer card.</p>
         * <p>A card nonce representing the credit card to link to the customer.</p>
         * <p>Card nonces are generated by the Square payment form when customers enter
         * their card information. For more information, see
         * <a href="https://developer.squareup.com/docs/web-payments/take-card-payment">Walkthrough: Integrate Square Payments in a Website</a>.</p>
         * <p><strong>NOTE:</strong> Card nonces generated by digital wallets (such as Apple Pay)
         * cannot be used to create a customer card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("card_nonce")
        public _FinalStage cardNonce(@NotNull String cardNonce) {
            this.cardNonce = Objects.requireNonNull(cardNonce, "cardNonce must not be null");
            return this;
        }

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage verificationToken(String verificationToken) {
            this.verificationToken = Optional.ofNullable(verificationToken);
            return this;
        }

        /**
         * <p>An identifying token generated by <a href="https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer">Payments.verifyBuyer()</a>.
         * Verification tokens encapsulate customer device information and 3-D Secure
         * challenge results to indicate that Square has verified the buyer identity.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "verification_token", nulls = Nulls.SKIP)
        public _FinalStage verificationToken(Optional<String> verificationToken) {
            this.verificationToken = verificationToken;
            return this;
        }

        /**
         * <p>The full name printed on the credit card.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cardholderName(String cardholderName) {
            this.cardholderName = Optional.ofNullable(cardholderName);
            return this;
        }

        /**
         * <p>The full name printed on the credit card.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cardholder_name", nulls = Nulls.SKIP)
        public _FinalStage cardholderName(Optional<String> cardholderName) {
            this.cardholderName = cardholderName;
            return this;
        }

        /**
         * <p>Address information for the card on file.</p>
         * <p><strong>NOTE:</strong> If a billing address is provided in the request, the
         * <code>CreateCustomerCardRequest.billing_address.postal_code</code> must match
         * the postal code encoded in the card nonce.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingAddress(Address billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        /**
         * <p>Address information for the card on file.</p>
         * <p><strong>NOTE:</strong> If a billing address is provided in the request, the
         * <code>CreateCustomerCardRequest.billing_address.postal_code</code> must match
         * the postal code encoded in the card nonce.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "billing_address", nulls = Nulls.SKIP)
        public _FinalStage billingAddress(Optional<Address> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        @java.lang.Override
        public CreateCustomerCardRequest build() {
            return new CreateCustomerCardRequest(
                    customerId, cardNonce, billingAddress, cardholderName, verificationToken, additionalProperties);
        }
    }
}
