/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.GetPayoutResponse;
import com.squareup.square.types.GetPayoutsRequest;
import com.squareup.square.types.ListEntriesPayoutsRequest;
import com.squareup.square.types.ListPayoutsRequest;
import com.squareup.square.types.Payout;
import com.squareup.square.types.PayoutEntry;

public class PayoutsClient {
    protected final ClientOptions clientOptions;

    private final RawPayoutsClient rawClient;

    public PayoutsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawPayoutsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawPayoutsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public SyncPagingIterable<Payout> list() {
        return this.rawClient.list().body();
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public SyncPagingIterable<Payout> list(ListPayoutsRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public SyncPagingIterable<Payout> list(ListPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public GetPayoutResponse get(GetPayoutsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public GetPayoutResponse get(GetPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public SyncPagingIterable<PayoutEntry> listEntries(ListEntriesPayoutsRequest request) {
        return this.rawClient.listEntries(request).body();
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public SyncPagingIterable<PayoutEntry> listEntries(
            ListEntriesPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listEntries(request, requestOptions).body();
    }
}
