/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.devices.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.DeviceCodeStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListCodesRequest.Builder.class)
public final class ListCodesRequest {
    private final Optional<String> cursor;

    private final Optional<String> locationId;

    private final Optional<String> productType;

    private final Optional<DeviceCodeStatus> status;

    private final Map<String, Object> additionalProperties;

    private ListCodesRequest(
            Optional<String> cursor,
            Optional<String> locationId,
            Optional<String> productType,
            Optional<DeviceCodeStatus> status,
            Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.locationId = locationId;
        this.productType = productType;
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this to retrieve the next set of results for your original query.
     * <p>See <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Paginating results</a> for more information.</p>
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return If specified, only returns DeviceCodes of the specified location.
     * Returns DeviceCodes of all locations if empty.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return If specified, only returns DeviceCodes targeting the specified product type.
     * Returns DeviceCodes of all product types if empty.
     */
    @JsonIgnore
    public Optional<String> getProductType() {
        if (productType == null) {
            return Optional.empty();
        }
        return productType;
    }

    /**
     * @return If specified, returns DeviceCodes with the specified statuses.
     * Returns DeviceCodes of status <code>PAIRED</code> and <code>UNPAIRED</code> if empty.
     */
    @JsonIgnore
    public Optional<DeviceCodeStatus> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("product_type")
    private Optional<String> _getProductType() {
        return productType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("status")
    private Optional<DeviceCodeStatus> _getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListCodesRequest && equalTo((ListCodesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListCodesRequest other) {
        return cursor.equals(other.cursor)
                && locationId.equals(other.locationId)
                && productType.equals(other.productType)
                && status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cursor, this.locationId, this.productType, this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> productType = Optional.empty();

        private Optional<DeviceCodeStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListCodesRequest other) {
            cursor(other.getCursor());
            locationId(other.getLocationId());
            productType(other.getProductType());
            status(other.getStatus());
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this to retrieve the next set of results for your original query.</p>
         * <p>See <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Paginating results</a> for more information.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>If specified, only returns DeviceCodes of the specified location.
         * Returns DeviceCodes of all locations if empty.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>If specified, only returns DeviceCodes targeting the specified product type.
         * Returns DeviceCodes of all product types if empty.</p>
         */
        @JsonSetter(value = "product_type", nulls = Nulls.SKIP)
        public Builder productType(Optional<String> productType) {
            this.productType = productType;
            return this;
        }

        public Builder productType(String productType) {
            this.productType = Optional.ofNullable(productType);
            return this;
        }

        public Builder productType(Nullable<String> productType) {
            if (productType.isNull()) {
                this.productType = null;
            } else if (productType.isEmpty()) {
                this.productType = Optional.empty();
            } else {
                this.productType = Optional.of(productType.get());
            }
            return this;
        }

        /**
         * <p>If specified, returns DeviceCodes with the specified statuses.
         * Returns DeviceCodes of status <code>PAIRED</code> and <code>UNPAIRED</code> if empty.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<DeviceCodeStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(DeviceCodeStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<DeviceCodeStatus> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        public ListCodesRequest build() {
            return new ListCodesRequest(cursor, locationId, productType, status, additionalProperties);
        }
    }
}
