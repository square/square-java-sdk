/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.disputes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeleteEvidenceRequest.Builder.class)
public final class DeleteEvidenceRequest {
    private final String disputeId;

    private final String evidenceId;

    private final Map<String, Object> additionalProperties;

    private DeleteEvidenceRequest(String disputeId, String evidenceId, Map<String, Object> additionalProperties) {
        this.disputeId = disputeId;
        this.evidenceId = evidenceId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the dispute from which you want to remove evidence.
     */
    @JsonProperty("dispute_id")
    public String getDisputeId() {
        return disputeId;
    }

    /**
     * @return The ID of the evidence you want to remove.
     */
    @JsonProperty("evidence_id")
    public String getEvidenceId() {
        return evidenceId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteEvidenceRequest && equalTo((DeleteEvidenceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteEvidenceRequest other) {
        return disputeId.equals(other.disputeId) && evidenceId.equals(other.evidenceId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.disputeId, this.evidenceId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DisputeIdStage builder() {
        return new Builder();
    }

    public interface DisputeIdStage {
        EvidenceIdStage disputeId(@NotNull String disputeId);

        Builder from(DeleteEvidenceRequest other);
    }

    public interface EvidenceIdStage {
        _FinalStage evidenceId(@NotNull String evidenceId);
    }

    public interface _FinalStage {
        DeleteEvidenceRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DisputeIdStage, EvidenceIdStage, _FinalStage {
        private String disputeId;

        private String evidenceId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeleteEvidenceRequest other) {
            disputeId(other.getDisputeId());
            evidenceId(other.getEvidenceId());
            return this;
        }

        /**
         * <p>The ID of the dispute from which you want to remove evidence.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("dispute_id")
        public EvidenceIdStage disputeId(@NotNull String disputeId) {
            this.disputeId = Objects.requireNonNull(disputeId, "disputeId must not be null");
            return this;
        }

        /**
         * <p>The ID of the evidence you want to remove.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("evidence_id")
        public _FinalStage evidenceId(@NotNull String evidenceId) {
            this.evidenceId = Objects.requireNonNull(evidenceId, "evidenceId must not be null");
            return this;
        }

        @java.lang.Override
        public DeleteEvidenceRequest build() {
            return new DeleteEvidenceRequest(disputeId, evidenceId, additionalProperties);
        }
    }
}
