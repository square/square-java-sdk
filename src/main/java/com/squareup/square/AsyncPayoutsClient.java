/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.GetPayoutResponse;
import com.squareup.square.types.GetPayoutsRequest;
import com.squareup.square.types.ListEntriesPayoutsRequest;
import com.squareup.square.types.ListPayoutsRequest;
import com.squareup.square.types.Payout;
import com.squareup.square.types.PayoutEntry;
import java.util.concurrent.CompletableFuture;

public class AsyncPayoutsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawPayoutsClient rawClient;

    public AsyncPayoutsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawPayoutsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawPayoutsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SyncPagingIterable<Payout>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SyncPagingIterable<Payout>> list(ListPayoutsRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SyncPagingIterable<Payout>> list(
            ListPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<GetPayoutResponse> get(GetPayoutsRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<GetPayoutResponse> get(GetPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SyncPagingIterable<PayoutEntry>> listEntries(ListEntriesPayoutsRequest request) {
        return this.rawClient.listEntries(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SyncPagingIterable<PayoutEntry>> listEntries(
            ListEntriesPayoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listEntries(request, requestOptions).thenApply(response -> response.body());
    }
}
