/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.GetPaymentRefundResponse;
import com.squareup.square.types.GetRefundsRequest;
import com.squareup.square.types.ListRefundsRequest;
import com.squareup.square.types.PaymentRefund;
import com.squareup.square.types.RefundPaymentRequest;
import com.squareup.square.types.RefundPaymentResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncRefundsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawRefundsClient rawClient;

    public AsyncRefundsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawRefundsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawRefundsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SyncPagingIterable<PaymentRefund>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SyncPagingIterable<PaymentRefund>> list(ListRefundsRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of refunds for the account making the request.
     * <p>Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.</p>
     * <p>The maximum results per page is 100.</p>
     */
    public CompletableFuture<SyncPagingIterable<PaymentRefund>> list(
            ListRefundsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/refund-payments">Refund Payment</a>.
     */
    public CompletableFuture<RefundPaymentResponse> refundPayment(RefundPaymentRequest request) {
        return this.rawClient.refundPayment(request).thenApply(response -> response.body());
    }

    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * <a href="https://developer.squareup.com/docs/payments-api/refund-payments">Refund Payment</a>.
     */
    public CompletableFuture<RefundPaymentResponse> refundPayment(
            RefundPaymentRequest request, RequestOptions requestOptions) {
        return this.rawClient.refundPayment(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a specific refund using the <code>refund_id</code>.
     */
    public CompletableFuture<GetPaymentRefundResponse> get(GetRefundsRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a specific refund using the <code>refund_id</code>.
     */
    public CompletableFuture<GetPaymentRefundResponse> get(GetRefundsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }
}
