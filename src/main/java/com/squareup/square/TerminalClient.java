/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.Suppliers;
import com.squareup.square.terminal.ActionsClient;
import com.squareup.square.terminal.CheckoutsClient;
import com.squareup.square.terminal.RefundsClient;
import com.squareup.square.types.DismissTerminalActionRequest;
import com.squareup.square.types.DismissTerminalActionResponse;
import com.squareup.square.types.DismissTerminalCheckoutRequest;
import com.squareup.square.types.DismissTerminalCheckoutResponse;
import com.squareup.square.types.DismissTerminalRefundRequest;
import com.squareup.square.types.DismissTerminalRefundResponse;
import java.util.function.Supplier;

public class TerminalClient {
    protected final ClientOptions clientOptions;

    private final RawTerminalClient rawClient;

    protected final Supplier<ActionsClient> actionsClient;

    protected final Supplier<CheckoutsClient> checkoutsClient;

    protected final Supplier<RefundsClient> refundsClient;

    public TerminalClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawTerminalClient(clientOptions);
        this.actionsClient = Suppliers.memoize(() -> new ActionsClient(clientOptions));
        this.checkoutsClient = Suppliers.memoize(() -> new CheckoutsClient(clientOptions));
        this.refundsClient = Suppliers.memoize(() -> new RefundsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawTerminalClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Dismisses a Terminal action request if the status and type of the request permits it.
     * <p>See <a href="https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions">Link and Dismiss Actions</a> for more details.</p>
     */
    public DismissTerminalActionResponse dismissTerminalAction(DismissTerminalActionRequest request) {
        return this.rawClient.dismissTerminalAction(request).body();
    }

    /**
     * Dismisses a Terminal action request if the status and type of the request permits it.
     * <p>See <a href="https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions">Link and Dismiss Actions</a> for more details.</p>
     */
    public DismissTerminalActionResponse dismissTerminalAction(
            DismissTerminalActionRequest request, RequestOptions requestOptions) {
        return this.rawClient.dismissTerminalAction(request, requestOptions).body();
    }

    /**
     * Dismisses a Terminal checkout request if the status and type of the request permits it.
     */
    public DismissTerminalCheckoutResponse dismissTerminalCheckout(DismissTerminalCheckoutRequest request) {
        return this.rawClient.dismissTerminalCheckout(request).body();
    }

    /**
     * Dismisses a Terminal checkout request if the status and type of the request permits it.
     */
    public DismissTerminalCheckoutResponse dismissTerminalCheckout(
            DismissTerminalCheckoutRequest request, RequestOptions requestOptions) {
        return this.rawClient.dismissTerminalCheckout(request, requestOptions).body();
    }

    /**
     * Dismisses a Terminal refund request if the status and type of the request permits it.
     */
    public DismissTerminalRefundResponse dismissTerminalRefund(DismissTerminalRefundRequest request) {
        return this.rawClient.dismissTerminalRefund(request).body();
    }

    /**
     * Dismisses a Terminal refund request if the status and type of the request permits it.
     */
    public DismissTerminalRefundResponse dismissTerminalRefund(
            DismissTerminalRefundRequest request, RequestOptions requestOptions) {
        return this.rawClient.dismissTerminalRefund(request, requestOptions).body();
    }

    public ActionsClient actions() {
        return this.actionsClient.get();
    }

    public CheckoutsClient checkouts() {
        return this.checkoutsClient.get();
    }

    public RefundsClient refunds() {
        return this.refundsClient.get();
    }
}
