/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.cashdrawers.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.SortOrder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListShiftsRequest.Builder.class)
public final class ListShiftsRequest {
    private final String locationId;

    private final Optional<SortOrder> sortOrder;

    private final Optional<String> beginTime;

    private final Optional<String> endTime;

    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Map<String, Object> additionalProperties;

    private ListShiftsRequest(
            String locationId,
            Optional<SortOrder> sortOrder,
            Optional<String> beginTime,
            Optional<String> endTime,
            Optional<Integer> limit,
            Optional<String> cursor,
            Map<String, Object> additionalProperties) {
        this.locationId = locationId;
        this.sortOrder = sortOrder;
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.limit = limit;
        this.cursor = cursor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the location to query for a list of cash drawer shifts.
     */
    @JsonProperty("location_id")
    public String getLocationId() {
        return locationId;
    }

    /**
     * @return The order in which cash drawer shifts are listed in the response,
     * based on their opened_at field. Default value: ASC
     */
    @JsonIgnore
    public Optional<SortOrder> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    /**
     * @return The inclusive start time of the query on opened_at, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getBeginTime() {
        if (beginTime == null) {
            return Optional.empty();
        }
        return beginTime;
    }

    /**
     * @return The exclusive end date of the query on opened_at, in ISO 8601 format.
     */
    @JsonIgnore
    public Optional<String> getEndTime() {
        if (endTime == null) {
            return Optional.empty();
        }
        return endTime;
    }

    /**
     * @return Number of cash drawer shift events in a page of results (200 by
     * default, 1000 max).
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return Opaque cursor for fetching the next page of results.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<SortOrder> _getSortOrder() {
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("begin_time")
    private Optional<String> _getBeginTime() {
        return beginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_time")
    private Optional<String> _getEndTime() {
        return endTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListShiftsRequest && equalTo((ListShiftsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListShiftsRequest other) {
        return locationId.equals(other.locationId)
                && sortOrder.equals(other.sortOrder)
                && beginTime.equals(other.beginTime)
                && endTime.equals(other.endTime)
                && limit.equals(other.limit)
                && cursor.equals(other.cursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.locationId, this.sortOrder, this.beginTime, this.endTime, this.limit, this.cursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LocationIdStage builder() {
        return new Builder();
    }

    public interface LocationIdStage {
        _FinalStage locationId(@NotNull String locationId);

        Builder from(ListShiftsRequest other);
    }

    public interface _FinalStage {
        ListShiftsRequest build();

        _FinalStage sortOrder(Optional<SortOrder> sortOrder);

        _FinalStage sortOrder(SortOrder sortOrder);

        _FinalStage sortOrder(Nullable<SortOrder> sortOrder);

        _FinalStage beginTime(Optional<String> beginTime);

        _FinalStage beginTime(String beginTime);

        _FinalStage beginTime(Nullable<String> beginTime);

        _FinalStage endTime(Optional<String> endTime);

        _FinalStage endTime(String endTime);

        _FinalStage endTime(Nullable<String> endTime);

        _FinalStage limit(Optional<Integer> limit);

        _FinalStage limit(Integer limit);

        _FinalStage limit(Nullable<Integer> limit);

        _FinalStage cursor(Optional<String> cursor);

        _FinalStage cursor(String cursor);

        _FinalStage cursor(Nullable<String> cursor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LocationIdStage, _FinalStage {
        private String locationId;

        private Optional<String> cursor = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> endTime = Optional.empty();

        private Optional<String> beginTime = Optional.empty();

        private Optional<SortOrder> sortOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListShiftsRequest other) {
            locationId(other.getLocationId());
            sortOrder(other.getSortOrder());
            beginTime(other.getBeginTime());
            endTime(other.getEndTime());
            limit(other.getLimit());
            cursor(other.getCursor());
            return this;
        }

        /**
         * <p>The ID of the location to query for a list of cash drawer shifts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("location_id")
        public _FinalStage locationId(@NotNull String locationId) {
            this.locationId = Objects.requireNonNull(locationId, "locationId must not be null");
            return this;
        }

        /**
         * <p>Opaque cursor for fetching the next page of results.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>Opaque cursor for fetching the next page of results.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public _FinalStage cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        /**
         * <p>Number of cash drawer shift events in a page of results (200 by
         * default, 1000 max).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>Number of cash drawer shift events in a page of results (200 by
         * default, 1000 max).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public _FinalStage limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        /**
         * <p>The exclusive end date of the query on opened_at, in ISO 8601 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endTime(Nullable<String> endTime) {
            if (endTime.isNull()) {
                this.endTime = null;
            } else if (endTime.isEmpty()) {
                this.endTime = Optional.empty();
            } else {
                this.endTime = Optional.of(endTime.get());
            }
            return this;
        }

        /**
         * <p>The exclusive end date of the query on opened_at, in ISO 8601 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage endTime(String endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "end_time", nulls = Nulls.SKIP)
        public _FinalStage endTime(Optional<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        /**
         * <p>The inclusive start time of the query on opened_at, in ISO 8601 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage beginTime(Nullable<String> beginTime) {
            if (beginTime.isNull()) {
                this.beginTime = null;
            } else if (beginTime.isEmpty()) {
                this.beginTime = Optional.empty();
            } else {
                this.beginTime = Optional.of(beginTime.get());
            }
            return this;
        }

        /**
         * <p>The inclusive start time of the query on opened_at, in ISO 8601 format.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage beginTime(String beginTime) {
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "begin_time", nulls = Nulls.SKIP)
        public _FinalStage beginTime(Optional<String> beginTime) {
            this.beginTime = beginTime;
            return this;
        }

        /**
         * <p>The order in which cash drawer shifts are listed in the response,
         * based on their opened_at field. Default value: ASC</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(Nullable<SortOrder> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        /**
         * <p>The order in which cash drawer shifts are listed in the response,
         * based on their opened_at field. Default value: ASC</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortOrder(SortOrder sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public _FinalStage sortOrder(Optional<SortOrder> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        @java.lang.Override
        public ListShiftsRequest build() {
            return new ListShiftsRequest(
                    locationId, sortOrder, beginTime, endTime, limit, cursor, additionalProperties);
        }
    }
}
