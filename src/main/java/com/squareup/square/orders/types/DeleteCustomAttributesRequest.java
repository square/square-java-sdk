/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.orders.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeleteCustomAttributesRequest.Builder.class)
public final class DeleteCustomAttributesRequest {
    private final String orderId;

    private final String customAttributeKey;

    private final Map<String, Object> additionalProperties;

    private DeleteCustomAttributesRequest(
            String orderId, String customAttributeKey, Map<String, Object> additionalProperties) {
        this.orderId = orderId;
        this.customAttributeKey = customAttributeKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the target <a href="entity:Order">order</a>.
     */
    @JsonProperty("order_id")
    public String getOrderId() {
        return orderId;
    }

    /**
     * @return The key of the custom attribute to delete.  This key must match the key of an
     * existing custom attribute definition.
     */
    @JsonProperty("custom_attribute_key")
    public String getCustomAttributeKey() {
        return customAttributeKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteCustomAttributesRequest && equalTo((DeleteCustomAttributesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteCustomAttributesRequest other) {
        return orderId.equals(other.orderId) && customAttributeKey.equals(other.customAttributeKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orderId, this.customAttributeKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OrderIdStage builder() {
        return new Builder();
    }

    public interface OrderIdStage {
        CustomAttributeKeyStage orderId(@NotNull String orderId);

        Builder from(DeleteCustomAttributesRequest other);
    }

    public interface CustomAttributeKeyStage {
        _FinalStage customAttributeKey(@NotNull String customAttributeKey);
    }

    public interface _FinalStage {
        DeleteCustomAttributesRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OrderIdStage, CustomAttributeKeyStage, _FinalStage {
        private String orderId;

        private String customAttributeKey;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeleteCustomAttributesRequest other) {
            orderId(other.getOrderId());
            customAttributeKey(other.getCustomAttributeKey());
            return this;
        }

        /**
         * <p>The ID of the target <a href="entity:Order">order</a>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("order_id")
        public CustomAttributeKeyStage orderId(@NotNull String orderId) {
            this.orderId = Objects.requireNonNull(orderId, "orderId must not be null");
            return this;
        }

        /**
         * <p>The key of the custom attribute to delete.  This key must match the key of an
         * existing custom attribute definition.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("custom_attribute_key")
        public _FinalStage customAttributeKey(@NotNull String customAttributeKey) {
            this.customAttributeKey = Objects.requireNonNull(customAttributeKey, "customAttributeKey must not be null");
            return this;
        }

        @java.lang.Override
        public DeleteCustomAttributesRequest build() {
            return new DeleteCustomAttributesRequest(orderId, customAttributeKey, additionalProperties);
        }
    }
}
