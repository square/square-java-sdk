/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.orders;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.QueryStringMapper;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.orders.types.CreateOrderCustomAttributeDefinitionRequest;
import com.squareup.square.orders.types.DeleteCustomAttributeDefinitionsRequest;
import com.squareup.square.orders.types.GetCustomAttributeDefinitionsRequest;
import com.squareup.square.orders.types.ListCustomAttributeDefinitionsRequest;
import com.squareup.square.orders.types.UpdateOrderCustomAttributeDefinitionRequest;
import com.squareup.square.types.CreateOrderCustomAttributeDefinitionResponse;
import com.squareup.square.types.CustomAttributeDefinition;
import com.squareup.square.types.DeleteOrderCustomAttributeDefinitionResponse;
import com.squareup.square.types.ListOrderCustomAttributeDefinitionsResponse;
import com.squareup.square.types.RetrieveOrderCustomAttributeDefinitionResponse;
import com.squareup.square.types.UpdateOrderCustomAttributeDefinitionResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawCustomAttributeDefinitionsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawCustomAttributeDefinitionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Lists the order-related <a href="entity:CustomAttributeDefinition">custom attribute definitions</a> that belong to a Square seller account.
     * <p>When all response pages are retrieved, the results include all custom attribute definitions
     * that are visible to the requesting application, including those that are created by other
     * applications and set to <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that
     * seller-defined custom attributes (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttributeDefinition>>> list() {
        return list(ListCustomAttributeDefinitionsRequest.builder().build());
    }

    /**
     * Lists the order-related <a href="entity:CustomAttributeDefinition">custom attribute definitions</a> that belong to a Square seller account.
     * <p>When all response pages are retrieved, the results include all custom attribute definitions
     * that are visible to the requesting application, including those that are created by other
     * applications and set to <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that
     * seller-defined custom attributes (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttributeDefinition>>> list(
            ListCustomAttributeDefinitionsRequest request) {
        return list(request, null);
    }

    /**
     * Lists the order-related <a href="entity:CustomAttributeDefinition">custom attribute definitions</a> that belong to a Square seller account.
     * <p>When all response pages are retrieved, the results include all custom attribute definitions
     * that are visible to the requesting application, including those that are created by other
     * applications and set to <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that
     * seller-defined custom attributes (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttributeDefinition>>> list(
            ListCustomAttributeDefinitionsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attribute-definitions");
        if (request.getVisibilityFilter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "visibility_filter", request.getVisibilityFilter().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttributeDefinition>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListOrderCustomAttributeDefinitionsResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), ListOrderCustomAttributeDefinitionsResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListCustomAttributeDefinitionsRequest nextRequest =
                                ListCustomAttributeDefinitionsRequest.builder()
                                        .from(request)
                                        .cursor(startingAfter)
                                        .build();
                        List<CustomAttributeDefinition> result = parsedResponse.getCustomAttributeDefinitions();
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<CustomAttributeDefinition>(
                                        startingAfter.isPresent(), result, () -> {
                                            try {
                                                return list(nextRequest, requestOptions)
                                                        .get()
                                                        .body();
                                            } catch (InterruptedException | ExecutionException e) {
                                                throw new RuntimeException(e);
                                            }
                                        }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Creates an order-related custom attribute definition.  Use this endpoint to
     * define a custom attribute that can be associated with orders.
     * <p>After creating a custom attribute definition, you can set the custom attribute for orders
     * in the Square seller account.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateOrderCustomAttributeDefinitionResponse>> create(
            CreateOrderCustomAttributeDefinitionRequest request) {
        return create(request, null);
    }

    /**
     * Creates an order-related custom attribute definition.  Use this endpoint to
     * define a custom attribute that can be associated with orders.
     * <p>After creating a custom attribute definition, you can set the custom attribute for orders
     * in the Square seller account.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<CreateOrderCustomAttributeDefinitionResponse>> create(
            CreateOrderCustomAttributeDefinitionRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attribute-definitions")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<CreateOrderCustomAttributeDefinitionResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), CreateOrderCustomAttributeDefinitionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves an order-related <a href="entity:CustomAttributeDefinition">custom attribute definition</a> from a Square seller account.
     * <p>To retrieve a custom attribute definition created by another application, the <code>visibility</code>
     * setting must be <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeDefinitionResponse>> get(
            GetCustomAttributeDefinitionsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves an order-related <a href="entity:CustomAttributeDefinition">custom attribute definition</a> from a Square seller account.
     * <p>To retrieve a custom attribute definition created by another application, the <code>visibility</code>
     * setting must be <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeDefinitionResponse>> get(
            GetCustomAttributeDefinitionsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attribute-definitions")
                .addPathSegment(request.getKey());
        if (request.getVersion().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "version", request.getVersion().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeDefinitionResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), RetrieveOrderCustomAttributeDefinitionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Updates an order-related custom attribute definition for a Square seller account.
     * <p>Only the definition owner can update a custom attribute definition. Note that sellers can view all custom attributes in exported customer data, including those set to <code>VISIBILITY_HIDDEN</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<UpdateOrderCustomAttributeDefinitionResponse>> update(
            UpdateOrderCustomAttributeDefinitionRequest request) {
        return update(request, null);
    }

    /**
     * Updates an order-related custom attribute definition for a Square seller account.
     * <p>Only the definition owner can update a custom attribute definition. Note that sellers can view all custom attributes in exported customer data, including those set to <code>VISIBILITY_HIDDEN</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<UpdateOrderCustomAttributeDefinitionResponse>> update(
            UpdateOrderCustomAttributeDefinitionRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attribute-definitions")
                .addPathSegment(request.getKey())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<UpdateOrderCustomAttributeDefinitionResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), UpdateOrderCustomAttributeDefinitionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Deletes an order-related <a href="entity:CustomAttributeDefinition">custom attribute definition</a> from a Square seller account.
     * <p>Only the definition owner can delete a custom attribute definition.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeDefinitionResponse>> delete(
            DeleteCustomAttributeDefinitionsRequest request) {
        return delete(request, null);
    }

    /**
     * Deletes an order-related <a href="entity:CustomAttributeDefinition">custom attribute definition</a> from a Square seller account.
     * <p>Only the definition owner can delete a custom attribute definition.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeDefinitionResponse>> delete(
            DeleteCustomAttributeDefinitionsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attribute-definitions")
                .addPathSegment(request.getKey())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeDefinitionResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), DeleteOrderCustomAttributeDefinitionResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
