/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.orders;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.QueryStringMapper;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.orders.types.BulkDeleteOrderCustomAttributesRequest;
import com.squareup.square.orders.types.BulkUpsertOrderCustomAttributesRequest;
import com.squareup.square.orders.types.DeleteCustomAttributesRequest;
import com.squareup.square.orders.types.GetCustomAttributesRequest;
import com.squareup.square.orders.types.ListCustomAttributesRequest;
import com.squareup.square.orders.types.UpsertOrderCustomAttributeRequest;
import com.squareup.square.types.BulkDeleteOrderCustomAttributesResponse;
import com.squareup.square.types.BulkUpsertOrderCustomAttributesResponse;
import com.squareup.square.types.CustomAttribute;
import com.squareup.square.types.DeleteOrderCustomAttributeResponse;
import com.squareup.square.types.ListOrderCustomAttributesResponse;
import com.squareup.square.types.RetrieveOrderCustomAttributeResponse;
import com.squareup.square.types.UpsertOrderCustomAttributeResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawCustomAttributesClient {
    protected final ClientOptions clientOptions;

    public AsyncRawCustomAttributesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Deletes order <a href="entity:CustomAttribute">custom attributes</a> as a bulk operation.
     * <p>Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>This <code>BulkDeleteOrderCustomAttributes</code> endpoint accepts a map of 1 to 25 individual delete
     * requests and returns a map of individual delete responses. Each delete request has a unique ID
     * and provides an order ID and custom attribute. Each delete response is returned with the ID
     * of the corresponding request.</p>
     * <p>To delete a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<BulkDeleteOrderCustomAttributesResponse>> batchDelete(
            BulkDeleteOrderCustomAttributesRequest request) {
        return batchDelete(request, null);
    }

    /**
     * Deletes order <a href="entity:CustomAttribute">custom attributes</a> as a bulk operation.
     * <p>Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>This <code>BulkDeleteOrderCustomAttributes</code> endpoint accepts a map of 1 to 25 individual delete
     * requests and returns a map of individual delete responses. Each delete request has a unique ID
     * and provides an order ID and custom attribute. Each delete response is returned with the ID
     * of the corresponding request.</p>
     * <p>To delete a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<BulkDeleteOrderCustomAttributesResponse>> batchDelete(
            BulkDeleteOrderCustomAttributesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attributes/bulk-delete")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<BulkDeleteOrderCustomAttributesResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkDeleteOrderCustomAttributesResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Creates or updates order <a href="entity:CustomAttribute">custom attributes</a> as a bulk operation.
     * <p>Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>This <code>BulkUpsertOrderCustomAttributes</code> endpoint accepts a map of 1 to 25 individual upsert
     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID
     * and provides an order ID and custom attribute. Each upsert response is returned with the ID
     * of the corresponding request.</p>
     * <p>To create or update a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<BulkUpsertOrderCustomAttributesResponse>> batchUpsert(
            BulkUpsertOrderCustomAttributesRequest request) {
        return batchUpsert(request, null);
    }

    /**
     * Creates or updates order <a href="entity:CustomAttribute">custom attributes</a> as a bulk operation.
     * <p>Use this endpoint to delete one or more custom attributes from one or more orders.
     * A custom attribute is based on a custom attribute definition in a Square seller account.  (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>This <code>BulkUpsertOrderCustomAttributes</code> endpoint accepts a map of 1 to 25 individual upsert
     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID
     * and provides an order ID and custom attribute. Each upsert response is returned with the ID
     * of the corresponding request.</p>
     * <p>To create or update a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<BulkUpsertOrderCustomAttributesResponse>> batchUpsert(
            BulkUpsertOrderCustomAttributesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders/custom-attributes/bulk-upsert")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<BulkUpsertOrderCustomAttributesResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), BulkUpsertOrderCustomAttributesResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Lists the <a href="entity:CustomAttribute">custom attributes</a> associated with an order.
     * <p>You can use the <code>with_definitions</code> query parameter to also retrieve custom attribute definitions
     * in the same call.</p>
     * <p>When all response pages are retrieved, the results include all custom attributes that are
     * visible to the requesting application, including those that are owned by other applications
     * and set to <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttribute>>> list(
            ListCustomAttributesRequest request) {
        return list(request, null);
    }

    /**
     * Lists the <a href="entity:CustomAttribute">custom attributes</a> associated with an order.
     * <p>You can use the <code>with_definitions</code> query parameter to also retrieve custom attribute definitions
     * in the same call.</p>
     * <p>When all response pages are retrieved, the results include all custom attributes that are
     * visible to the requesting application, including those that are owned by other applications
     * and set to <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttribute>>> list(
            ListCustomAttributesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders")
                .addPathSegment(request.getOrderId())
                .addPathSegments("custom-attributes");
        if (request.getVisibilityFilter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "visibility_filter", request.getVisibilityFilter().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getWithDefinitions().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "with_definitions", request.getWithDefinitions().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<CustomAttribute>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListOrderCustomAttributesResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListOrderCustomAttributesResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListCustomAttributesRequest nextRequest = ListCustomAttributesRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<CustomAttribute> result =
                                parsedResponse.getCustomAttributes().orElse(Collections.emptyList());
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<CustomAttribute>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a <a href="entity:CustomAttribute">custom attribute</a> associated with an order.
     * <p>You can use the <code>with_definition</code> query parameter to also retrieve the custom attribute definition
     * in the same call.</p>
     * <p>To retrieve a custom attribute owned by another application, the <code>visibility</code> setting must be
     * <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeResponse>> get(
            GetCustomAttributesRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves a <a href="entity:CustomAttribute">custom attribute</a> associated with an order.
     * <p>You can use the <code>with_definition</code> query parameter to also retrieve the custom attribute definition
     * in the same call.</p>
     * <p>To retrieve a custom attribute owned by another application, the <code>visibility</code> setting must be
     * <code>VISIBILITY_READ_ONLY</code> or <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeResponse>> get(
            GetCustomAttributesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders")
                .addPathSegment(request.getOrderId())
                .addPathSegments("custom-attributes")
                .addPathSegment(request.getCustomAttributeKey());
        if (request.getVersion().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "version", request.getVersion().get(), false);
        }
        if (request.getWithDefinition().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "with_definition", request.getWithDefinition().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<RetrieveOrderCustomAttributeResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), RetrieveOrderCustomAttributeResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Creates or updates a <a href="entity:CustomAttribute">custom attribute</a> for an order.
     * <p>Use this endpoint to set the value of a custom attribute for a specific order.
     * A custom attribute is based on a custom attribute definition in a Square seller account. (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>To create or update a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<UpsertOrderCustomAttributeResponse>> upsert(
            UpsertOrderCustomAttributeRequest request) {
        return upsert(request, null);
    }

    /**
     * Creates or updates a <a href="entity:CustomAttribute">custom attribute</a> for an order.
     * <p>Use this endpoint to set the value of a custom attribute for a specific order.
     * A custom attribute is based on a custom attribute definition in a Square seller account. (To create a
     * custom attribute definition, use the <a href="api-endpoint:OrderCustomAttributes-CreateOrderCustomAttributeDefinition">CreateOrderCustomAttributeDefinition</a> endpoint.)</p>
     * <p>To create or update a custom attribute owned by another application, the <code>visibility</code> setting
     * must be <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<UpsertOrderCustomAttributeResponse>> upsert(
            UpsertOrderCustomAttributeRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders")
                .addPathSegment(request.getOrderId())
                .addPathSegments("custom-attributes")
                .addPathSegment(request.getCustomAttributeKey())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<UpsertOrderCustomAttributeResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), UpsertOrderCustomAttributeResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Deletes a <a href="entity:CustomAttribute">custom attribute</a> associated with a customer profile.
     * <p>To delete a custom attribute owned by another application, the <code>visibility</code> setting must be
     * <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeResponse>> delete(
            DeleteCustomAttributesRequest request) {
        return delete(request, null);
    }

    /**
     * Deletes a <a href="entity:CustomAttribute">custom attribute</a> associated with a customer profile.
     * <p>To delete a custom attribute owned by another application, the <code>visibility</code> setting must be
     * <code>VISIBILITY_READ_WRITE_VALUES</code>. Note that seller-defined custom attributes
     * (also known as custom fields) are always set to <code>VISIBILITY_READ_WRITE_VALUES</code>.</p>
     */
    public CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeResponse>> delete(
            DeleteCustomAttributesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/orders")
                .addPathSegment(request.getOrderId())
                .addPathSegments("custom-attributes")
                .addPathSegment(request.getCustomAttributeKey())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<DeleteOrderCustomAttributeResponse>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), DeleteOrderCustomAttributeResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
