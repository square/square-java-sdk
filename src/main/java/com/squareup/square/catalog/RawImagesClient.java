/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.catalog;

import com.squareup.square.catalog.types.CreateImagesRequest;
import com.squareup.square.catalog.types.UpdateImagesRequest;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.types.CreateCatalogImageResponse;
import com.squareup.square.types.UpdateCatalogImageResponse;
import java.io.IOException;
import java.nio.file.Files;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawImagesClient {
    protected final ClientOptions clientOptions;

    public RawImagesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public SquareClientHttpResponse<CreateCatalogImageResponse> create() {
        return create(CreateImagesRequest.builder().build());
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public SquareClientHttpResponse<CreateCatalogImageResponse> create(CreateImagesRequest request) {
        return create(request, null);
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public SquareClientHttpResponse<CreateCatalogImageResponse> create(
            CreateImagesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/catalog/images")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (request.getRequest().isPresent()) {
                body.addFormDataPart(
                        "request",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getRequest().get()));
            }
            if (request.getImageFile().isPresent()) {
                String imageFileMimeType =
                        Files.probeContentType(request.getImageFile().get().toPath());
                MediaType imageFileMimeTypeMediaType =
                        imageFileMimeType != null ? MediaType.parse(imageFileMimeType) : null;
                body.addFormDataPart(
                        "image_file",
                        request.getImageFile().get().getName(),
                        RequestBody.create(request.getImageFile().get(), imageFileMimeTypeMediaType));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateCatalogImageResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Uploads a new image file to replace the existing one in the specified <a href="entity:CatalogImage">CatalogImage</a> object.
     * <p>This <code>UpdateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public SquareClientHttpResponse<UpdateCatalogImageResponse> update(UpdateImagesRequest request) {
        return update(request, null);
    }

    /**
     * Uploads a new image file to replace the existing one in the specified <a href="entity:CatalogImage">CatalogImage</a> object.
     * <p>This <code>UpdateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public SquareClientHttpResponse<UpdateCatalogImageResponse> update(
            UpdateImagesRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/catalog/images")
                .addPathSegment(request.getImageId())
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (request.getRequest().isPresent()) {
                body.addFormDataPart(
                        "request",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getRequest().get()));
            }
            if (request.getImageFile().isPresent()) {
                String imageFileMimeType =
                        Files.probeContentType(request.getImageFile().get().toPath());
                MediaType imageFileMimeTypeMediaType =
                        imageFileMimeType != null ? MediaType.parse(imageFileMimeType) : null;
                body.addFormDataPart(
                        "image_file",
                        request.getImageFile().get().getName(),
                        RequestBody.create(request.getImageFile().get(), imageFileMimeTypeMediaType));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateCatalogImageResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }
}
