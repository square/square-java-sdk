/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.catalog;

import com.squareup.square.catalog.types.CreateImagesRequest;
import com.squareup.square.catalog.types.UpdateImagesRequest;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.types.CreateCatalogImageResponse;
import com.squareup.square.types.UpdateCatalogImageResponse;

public class ImagesClient {
    protected final ClientOptions clientOptions;

    private final RawImagesClient rawClient;

    public ImagesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawImagesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawImagesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public CreateCatalogImageResponse create() {
        return this.rawClient.create().body();
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public CreateCatalogImageResponse create(CreateImagesRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Uploads an image file to be represented by a <a href="entity:CatalogImage">CatalogImage</a> object that can be linked to an existing
     * <a href="entity:CatalogObject">CatalogObject</a> instance. The resulting <code>CatalogImage</code> is unattached to any <code>CatalogObject</code> if the <code>object_id</code>
     * is not specified.
     * <p>This <code>CreateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public CreateCatalogImageResponse create(CreateImagesRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Uploads a new image file to replace the existing one in the specified <a href="entity:CatalogImage">CatalogImage</a> object.
     * <p>This <code>UpdateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public UpdateCatalogImageResponse update(UpdateImagesRequest request) {
        return this.rawClient.update(request).body();
    }

    /**
     * Uploads a new image file to replace the existing one in the specified <a href="entity:CatalogImage">CatalogImage</a> object.
     * <p>This <code>UpdateCatalogImage</code> endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.</p>
     */
    public UpdateCatalogImageResponse update(UpdateImagesRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).body();
    }
}
