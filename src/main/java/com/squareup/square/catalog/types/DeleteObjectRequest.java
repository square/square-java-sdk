/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.catalog.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeleteObjectRequest.Builder.class)
public final class DeleteObjectRequest {
    private final String objectId;

    private final Map<String, Object> additionalProperties;

    private DeleteObjectRequest(String objectId, Map<String, Object> additionalProperties) {
        this.objectId = objectId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the catalog object to be deleted. When an object is deleted, other
     * objects in the graph that depend on that object will be deleted as well (for example, deleting a
     * catalog item will delete its catalog item variations).
     */
    @JsonProperty("object_id")
    public String getObjectId() {
        return objectId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteObjectRequest && equalTo((DeleteObjectRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteObjectRequest other) {
        return objectId.equals(other.objectId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.objectId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ObjectIdStage builder() {
        return new Builder();
    }

    public interface ObjectIdStage {
        /**
         * <p>The ID of the catalog object to be deleted. When an object is deleted, other
         * objects in the graph that depend on that object will be deleted as well (for example, deleting a
         * catalog item will delete its catalog item variations).</p>
         */
        _FinalStage objectId(@NotNull String objectId);

        Builder from(DeleteObjectRequest other);
    }

    public interface _FinalStage {
        DeleteObjectRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ObjectIdStage, _FinalStage {
        private String objectId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeleteObjectRequest other) {
            objectId(other.getObjectId());
            return this;
        }

        /**
         * <p>The ID of the catalog object to be deleted. When an object is deleted, other
         * objects in the graph that depend on that object will be deleted as well (for example, deleting a
         * catalog item will delete its catalog item variations).</p>
         * <p>The ID of the catalog object to be deleted. When an object is deleted, other
         * objects in the graph that depend on that object will be deleted as well (for example, deleting a
         * catalog item will delete its catalog item variations).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object_id")
        public _FinalStage objectId(@NotNull String objectId) {
            this.objectId = Objects.requireNonNull(objectId, "objectId must not be null");
            return this;
        }

        @java.lang.Override
        public DeleteObjectRequest build() {
            return new DeleteObjectRequest(objectId, additionalProperties);
        }
    }
}
