/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.catalog.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.CatalogObject;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpsertCatalogObjectRequest.Builder.class)
public final class UpsertCatalogObjectRequest {
    private final String idempotencyKey;

    private final CatalogObject object;

    private final Map<String, Object> additionalProperties;

    private UpsertCatalogObjectRequest(
            String idempotencyKey, CatalogObject object, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.object = object;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A value you specify that uniquely identifies this
     * request among all your requests. A common way to create
     * a valid idempotency key is to use a Universally unique
     * identifier (UUID).
     * <p>If you're unsure whether a particular request was successful,
     * you can reattempt it with the same idempotency key without
     * worrying about creating duplicate objects.</p>
     * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return A CatalogObject to be created or updated.
     * <ul>
     * <li>For updates, the object must be active (the <code>is_deleted</code> field is not <code>true</code>).</li>
     * <li>For creates, the object ID must start with <code>#</code>. The provided ID is replaced with a server-generated ID.</li>
     * </ul>
     */
    @JsonProperty("object")
    public CatalogObject getObject() {
        return object;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpsertCatalogObjectRequest && equalTo((UpsertCatalogObjectRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpsertCatalogObjectRequest other) {
        return idempotencyKey.equals(other.idempotencyKey) && object.equals(other.object);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.object);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        ObjectStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(UpsertCatalogObjectRequest other);
    }

    public interface ObjectStage {
        _FinalStage object(@NotNull CatalogObject object);
    }

    public interface _FinalStage {
        UpsertCatalogObjectRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, ObjectStage, _FinalStage {
        private String idempotencyKey;

        private CatalogObject object;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpsertCatalogObjectRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            object(other.getObject());
            return this;
        }

        /**
         * <p>A value you specify that uniquely identifies this
         * request among all your requests. A common way to create
         * a valid idempotency key is to use a Universally unique
         * identifier (UUID).</p>
         * <p>If you're unsure whether a particular request was successful,
         * you can reattempt it with the same idempotency key without
         * worrying about creating duplicate objects.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency</a> for more information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public ObjectStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>A CatalogObject to be created or updated.</p>
         * <ul>
         * <li>For updates, the object must be active (the <code>is_deleted</code> field is not <code>true</code>).</li>
         * <li>For creates, the object ID must start with <code>#</code>. The provided ID is replaced with a server-generated ID.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("object")
        public _FinalStage object(@NotNull CatalogObject object) {
            this.object = Objects.requireNonNull(object, "object must not be null");
            return this;
        }

        @java.lang.Override
        public UpsertCatalogObjectRequest build() {
            return new UpsertCatalogObjectRequest(idempotencyKey, object, additionalProperties);
        }
    }
}
