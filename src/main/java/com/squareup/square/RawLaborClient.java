/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.types.BulkPublishScheduledShiftsRequest;
import com.squareup.square.types.BulkPublishScheduledShiftsResponse;
import com.squareup.square.types.CreateScheduledShiftRequest;
import com.squareup.square.types.CreateScheduledShiftResponse;
import com.squareup.square.types.CreateTimecardRequest;
import com.squareup.square.types.CreateTimecardResponse;
import com.squareup.square.types.DeleteTimecardRequest;
import com.squareup.square.types.DeleteTimecardResponse;
import com.squareup.square.types.PublishScheduledShiftRequest;
import com.squareup.square.types.PublishScheduledShiftResponse;
import com.squareup.square.types.RetrieveScheduledShiftRequest;
import com.squareup.square.types.RetrieveScheduledShiftResponse;
import com.squareup.square.types.RetrieveTimecardRequest;
import com.squareup.square.types.RetrieveTimecardResponse;
import com.squareup.square.types.SearchScheduledShiftsRequest;
import com.squareup.square.types.SearchScheduledShiftsResponse;
import com.squareup.square.types.SearchTimecardsRequest;
import com.squareup.square.types.SearchTimecardsResponse;
import com.squareup.square.types.UpdateScheduledShiftRequest;
import com.squareup.square.types.UpdateScheduledShiftResponse;
import com.squareup.square.types.UpdateTimecardRequest;
import com.squareup.square.types.UpdateTimecardResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawLaborClient {
    protected final ClientOptions clientOptions;

    public RawLaborClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates a scheduled shift by providing draft shift details such as job ID,
     * team member assignment, and start and end times.
     * <p>The following <code>draft_shift_details</code> fields are required:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>job_id</code></li>
     * <li><code>start_at</code></li>
     * <li><code>end_at</code></li>
     * </ul>
     */
    public SquareClientHttpResponse<CreateScheduledShiftResponse> createScheduledShift(
            CreateScheduledShiftRequest request) {
        return createScheduledShift(request, null);
    }

    /**
     * Creates a scheduled shift by providing draft shift details such as job ID,
     * team member assignment, and start and end times.
     * <p>The following <code>draft_shift_details</code> fields are required:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>job_id</code></li>
     * <li><code>start_at</code></li>
     * <li><code>end_at</code></li>
     * </ul>
     */
    public SquareClientHttpResponse<CreateScheduledShiftResponse> createScheduledShift(
            CreateScheduledShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateScheduledShiftResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
     * requests and returns a map of responses. When a scheduled shift is published, Square keeps
     * the <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     * <p>The minimum <code>start_at</code> and maximum <code>end_at</code> timestamps of all shifts in a
     * <code>BulkPublishScheduledShifts</code> request must fall within a two-week period.</p>
     */
    public SquareClientHttpResponse<BulkPublishScheduledShiftsResponse> bulkPublishScheduledShifts(
            BulkPublishScheduledShiftsRequest request) {
        return bulkPublishScheduledShifts(request, null);
    }

    /**
     * Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
     * requests and returns a map of responses. When a scheduled shift is published, Square keeps
     * the <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     * <p>The minimum <code>start_at</code> and maximum <code>end_at</code> timestamps of all shifts in a
     * <code>BulkPublishScheduledShifts</code> request must fall within a two-week period.</p>
     */
    public SquareClientHttpResponse<BulkPublishScheduledShiftsResponse> bulkPublishScheduledShifts(
            BulkPublishScheduledShiftsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts/bulk-publish")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), BulkPublishScheduledShiftsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public SquareClientHttpResponse<SearchScheduledShiftsResponse> searchScheduledShifts() {
        return searchScheduledShifts(SearchScheduledShiftsRequest.builder().build());
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public SquareClientHttpResponse<SearchScheduledShiftsResponse> searchScheduledShifts(
            SearchScheduledShiftsRequest request) {
        return searchScheduledShifts(request, null);
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public SquareClientHttpResponse<SearchScheduledShiftsResponse> searchScheduledShifts(
            SearchScheduledShiftsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchScheduledShiftsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves a scheduled shift by ID.
     */
    public SquareClientHttpResponse<RetrieveScheduledShiftResponse> retrieveScheduledShift(
            RetrieveScheduledShiftRequest request) {
        return retrieveScheduledShift(request, null);
    }

    /**
     * Retrieves a scheduled shift by ID.
     */
    public SquareClientHttpResponse<RetrieveScheduledShiftResponse> retrieveScheduledShift(
            RetrieveScheduledShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts")
                .addPathSegment(request.getId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), RetrieveScheduledShiftResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates the draft shift details for a scheduled shift. This endpoint supports
     * sparse updates, so only new, changed, or removed fields are required in the request.
     * You must publish the shift to make updates public.
     * <p>You can make the following updates to <code>draft_shift_details</code>:</p>
     * <ul>
     * <li>Change the <code>location_id</code>, <code>job_id</code>, <code>start_at</code>, and <code>end_at</code> fields.</li>
     * <li>Add, change, or clear the <code>team_member_id</code> and <code>notes</code> fields. To clear these fields,
     * set the value to null.</li>
     * <li>Change the <code>is_deleted</code> field. To delete a scheduled shift, set <code>is_deleted</code> to true
     * and then publish the shift.</li>
     * </ul>
     */
    public SquareClientHttpResponse<UpdateScheduledShiftResponse> updateScheduledShift(
            UpdateScheduledShiftRequest request) {
        return updateScheduledShift(request, null);
    }

    /**
     * Updates the draft shift details for a scheduled shift. This endpoint supports
     * sparse updates, so only new, changed, or removed fields are required in the request.
     * You must publish the shift to make updates public.
     * <p>You can make the following updates to <code>draft_shift_details</code>:</p>
     * <ul>
     * <li>Change the <code>location_id</code>, <code>job_id</code>, <code>start_at</code>, and <code>end_at</code> fields.</li>
     * <li>Add, change, or clear the <code>team_member_id</code> and <code>notes</code> fields. To clear these fields,
     * set the value to null.</li>
     * <li>Change the <code>is_deleted</code> field. To delete a scheduled shift, set <code>is_deleted</code> to true
     * and then publish the shift.</li>
     * </ul>
     */
    public SquareClientHttpResponse<UpdateScheduledShiftResponse> updateScheduledShift(
            UpdateScheduledShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts")
                .addPathSegment(request.getId())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateScheduledShiftResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
     * <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     */
    public SquareClientHttpResponse<PublishScheduledShiftResponse> publishScheduledShift(
            PublishScheduledShiftRequest request) {
        return publishScheduledShift(request, null);
    }

    /**
     * Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
     * <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     */
    public SquareClientHttpResponse<PublishScheduledShiftResponse> publishScheduledShift(
            PublishScheduledShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/scheduled-shifts")
                .addPathSegment(request.getId())
                .addPathSegments("publish")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PublishScheduledShiftResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Creates a new <code>Timecard</code>.
     * <p>A <code>Timecard</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Timecard</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Timecard</code> is <code>OPEN</code> and the team member has another
     * timecard with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another timecard for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Timecard.start_at</code>, a break <code>end_at</code> is after
     * the <code>Timecard.end_at</code>, or both.</li>
     * </ul>
     */
    public SquareClientHttpResponse<CreateTimecardResponse> createTimecard(CreateTimecardRequest request) {
        return createTimecard(request, null);
    }

    /**
     * Creates a new <code>Timecard</code>.
     * <p>A <code>Timecard</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Timecard</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Timecard</code> is <code>OPEN</code> and the team member has another
     * timecard with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another timecard for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Timecard.start_at</code>, a break <code>end_at</code> is after
     * the <code>Timecard.end_at</code>, or both.</li>
     * </ul>
     */
    public SquareClientHttpResponse<CreateTimecardResponse> createTimecard(
            CreateTimecardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/timecards")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateTimecardResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public SquareClientHttpResponse<SearchTimecardsResponse> searchTimecards() {
        return searchTimecards(SearchTimecardsRequest.builder().build());
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public SquareClientHttpResponse<SearchTimecardsResponse> searchTimecards(SearchTimecardsRequest request) {
        return searchTimecards(request, null);
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public SquareClientHttpResponse<SearchTimecardsResponse> searchTimecards(
            SearchTimecardsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/timecards/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchTimecardsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns a single <code>Timecard</code> specified by <code>id</code>.
     */
    public SquareClientHttpResponse<RetrieveTimecardResponse> retrieveTimecard(RetrieveTimecardRequest request) {
        return retrieveTimecard(request, null);
    }

    /**
     * Returns a single <code>Timecard</code> specified by <code>id</code>.
     */
    public SquareClientHttpResponse<RetrieveTimecardResponse> retrieveTimecard(
            RetrieveTimecardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/timecards")
                .addPathSegment(request.getId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RetrieveTimecardResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates an existing <code>Timecard</code>.
     * <p>When adding a <code>Break</code> to a <code>Timecard</code>, any earlier <code>Break</code> instances in the <code>Timecard</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Timecard</code>, all <code>Break</code> instances in the <code>Timecard</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public SquareClientHttpResponse<UpdateTimecardResponse> updateTimecard(UpdateTimecardRequest request) {
        return updateTimecard(request, null);
    }

    /**
     * Updates an existing <code>Timecard</code>.
     * <p>When adding a <code>Break</code> to a <code>Timecard</code>, any earlier <code>Break</code> instances in the <code>Timecard</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Timecard</code>, all <code>Break</code> instances in the <code>Timecard</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public SquareClientHttpResponse<UpdateTimecardResponse> updateTimecard(
            UpdateTimecardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/timecards")
                .addPathSegment(request.getId())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateTimecardResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }

    /**
     * Deletes a <code>Timecard</code>.
     */
    public SquareClientHttpResponse<DeleteTimecardResponse> deleteTimecard(DeleteTimecardRequest request) {
        return deleteTimecard(request, null);
    }

    /**
     * Deletes a <code>Timecard</code>.
     */
    public SquareClientHttpResponse<DeleteTimecardResponse> deleteTimecard(
            DeleteTimecardRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/timecards")
                .addPathSegment(request.getId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SquareClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), DeleteTimecardResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SquareApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SquareException("Network error executing HTTP request", e);
        }
    }
}
