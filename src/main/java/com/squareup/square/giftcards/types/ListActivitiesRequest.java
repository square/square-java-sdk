/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.giftcards.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListActivitiesRequest.Builder.class)
public final class ListActivitiesRequest {
    private final Optional<String> giftCardId;

    private final Optional<String> type;

    private final Optional<String> locationId;

    private final Optional<String> beginTime;

    private final Optional<String> endTime;

    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Optional<String> sortOrder;

    private final Map<String, Object> additionalProperties;

    private ListActivitiesRequest(
            Optional<String> giftCardId,
            Optional<String> type,
            Optional<String> locationId,
            Optional<String> beginTime,
            Optional<String> endTime,
            Optional<Integer> limit,
            Optional<String> cursor,
            Optional<String> sortOrder,
            Map<String, Object> additionalProperties) {
        this.giftCardId = giftCardId;
        this.type = type;
        this.locationId = locationId;
        this.beginTime = beginTime;
        this.endTime = endTime;
        this.limit = limit;
        this.cursor = cursor;
        this.sortOrder = sortOrder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If a gift card ID is provided, the endpoint returns activities related
     * to the specified gift card. Otherwise, the endpoint returns all gift card activities for
     * the seller.
     */
    @JsonIgnore
    public Optional<String> getGiftCardId() {
        if (giftCardId == null) {
            return Optional.empty();
        }
        return giftCardId;
    }

    /**
     * @return If a <a href="entity:GiftCardActivityType">type</a> is provided, the endpoint returns gift card activities of the specified type.
     * Otherwise, the endpoint returns all types of gift card activities.
     */
    @JsonIgnore
    public Optional<String> getType() {
        if (type == null) {
            return Optional.empty();
        }
        return type;
    }

    /**
     * @return If a location ID is provided, the endpoint returns gift card activities for the specified location.
     * Otherwise, the endpoint returns gift card activities for all locations.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    /**
     * @return The timestamp for the beginning of the reporting period, in RFC 3339 format.
     * This start time is inclusive. The default value is the current time minus one year.
     */
    @JsonIgnore
    public Optional<String> getBeginTime() {
        if (beginTime == null) {
            return Optional.empty();
        }
        return beginTime;
    }

    /**
     * @return The timestamp for the end of the reporting period, in RFC 3339 format.
     * This end time is inclusive. The default value is the current time.
     */
    @JsonIgnore
    public Optional<String> getEndTime() {
        if (endTime == null) {
            return Optional.empty();
        }
        return endTime;
    }

    /**
     * @return If a limit is provided, the endpoint returns the specified number
     * of results (or fewer) per page. The maximum value is 100. The default value is 50.
     * For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Pagination</a>.
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return A pagination cursor returned by a previous call to this endpoint.
     * Provide this cursor to retrieve the next set of results for the original query.
     * If a cursor is not provided, the endpoint returns the first page of the results.
     * For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Pagination</a>.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return The order in which the endpoint returns the activities, based on <code>created_at</code>.
     * <ul>
     * <li><code>ASC</code> - Oldest to newest.</li>
     * <li><code>DESC</code> - Newest to oldest (default).</li>
     * </ul>
     */
    @JsonIgnore
    public Optional<String> getSortOrder() {
        if (sortOrder == null) {
            return Optional.empty();
        }
        return sortOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("gift_card_id")
    private Optional<String> _getGiftCardId() {
        return giftCardId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("type")
    private Optional<String> _getType() {
        return type;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("begin_time")
    private Optional<String> _getBeginTime() {
        return beginTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("end_time")
    private Optional<String> _getEndTime() {
        return endTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sort_order")
    private Optional<String> _getSortOrder() {
        return sortOrder;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListActivitiesRequest && equalTo((ListActivitiesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListActivitiesRequest other) {
        return giftCardId.equals(other.giftCardId)
                && type.equals(other.type)
                && locationId.equals(other.locationId)
                && beginTime.equals(other.beginTime)
                && endTime.equals(other.endTime)
                && limit.equals(other.limit)
                && cursor.equals(other.cursor)
                && sortOrder.equals(other.sortOrder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.giftCardId,
                this.type,
                this.locationId,
                this.beginTime,
                this.endTime,
                this.limit,
                this.cursor,
                this.sortOrder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> giftCardId = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<String> beginTime = Optional.empty();

        private Optional<String> endTime = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<String> sortOrder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListActivitiesRequest other) {
            giftCardId(other.getGiftCardId());
            type(other.getType());
            locationId(other.getLocationId());
            beginTime(other.getBeginTime());
            endTime(other.getEndTime());
            limit(other.getLimit());
            cursor(other.getCursor());
            sortOrder(other.getSortOrder());
            return this;
        }

        /**
         * <p>If a gift card ID is provided, the endpoint returns activities related
         * to the specified gift card. Otherwise, the endpoint returns all gift card activities for
         * the seller.</p>
         */
        @JsonSetter(value = "gift_card_id", nulls = Nulls.SKIP)
        public Builder giftCardId(Optional<String> giftCardId) {
            this.giftCardId = giftCardId;
            return this;
        }

        public Builder giftCardId(String giftCardId) {
            this.giftCardId = Optional.ofNullable(giftCardId);
            return this;
        }

        public Builder giftCardId(Nullable<String> giftCardId) {
            if (giftCardId.isNull()) {
                this.giftCardId = null;
            } else if (giftCardId.isEmpty()) {
                this.giftCardId = Optional.empty();
            } else {
                this.giftCardId = Optional.of(giftCardId.get());
            }
            return this;
        }

        /**
         * <p>If a <a href="entity:GiftCardActivityType">type</a> is provided, the endpoint returns gift card activities of the specified type.
         * Otherwise, the endpoint returns all types of gift card activities.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Nullable<String> type) {
            if (type.isNull()) {
                this.type = null;
            } else if (type.isEmpty()) {
                this.type = Optional.empty();
            } else {
                this.type = Optional.of(type.get());
            }
            return this;
        }

        /**
         * <p>If a location ID is provided, the endpoint returns gift card activities for the specified location.
         * Otherwise, the endpoint returns gift card activities for all locations.</p>
         */
        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        /**
         * <p>The timestamp for the beginning of the reporting period, in RFC 3339 format.
         * This start time is inclusive. The default value is the current time minus one year.</p>
         */
        @JsonSetter(value = "begin_time", nulls = Nulls.SKIP)
        public Builder beginTime(Optional<String> beginTime) {
            this.beginTime = beginTime;
            return this;
        }

        public Builder beginTime(String beginTime) {
            this.beginTime = Optional.ofNullable(beginTime);
            return this;
        }

        public Builder beginTime(Nullable<String> beginTime) {
            if (beginTime.isNull()) {
                this.beginTime = null;
            } else if (beginTime.isEmpty()) {
                this.beginTime = Optional.empty();
            } else {
                this.beginTime = Optional.of(beginTime.get());
            }
            return this;
        }

        /**
         * <p>The timestamp for the end of the reporting period, in RFC 3339 format.
         * This end time is inclusive. The default value is the current time.</p>
         */
        @JsonSetter(value = "end_time", nulls = Nulls.SKIP)
        public Builder endTime(Optional<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        public Builder endTime(Nullable<String> endTime) {
            if (endTime.isNull()) {
                this.endTime = null;
            } else if (endTime.isEmpty()) {
                this.endTime = Optional.empty();
            } else {
                this.endTime = Optional.of(endTime.get());
            }
            return this;
        }

        /**
         * <p>If a limit is provided, the endpoint returns the specified number
         * of results (or fewer) per page. The maximum value is 100. The default value is 50.
         * For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        /**
         * <p>A pagination cursor returned by a previous call to this endpoint.
         * Provide this cursor to retrieve the next set of results for the original query.
         * If a cursor is not provided, the endpoint returns the first page of the results.
         * For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/pagination">Pagination</a>.</p>
         */
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        /**
         * <p>The order in which the endpoint returns the activities, based on <code>created_at</code>.</p>
         * <ul>
         * <li><code>ASC</code> - Oldest to newest.</li>
         * <li><code>DESC</code> - Newest to oldest (default).</li>
         * </ul>
         */
        @JsonSetter(value = "sort_order", nulls = Nulls.SKIP)
        public Builder sortOrder(Optional<String> sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder sortOrder(String sortOrder) {
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Nullable<String> sortOrder) {
            if (sortOrder.isNull()) {
                this.sortOrder = null;
            } else if (sortOrder.isEmpty()) {
                this.sortOrder = Optional.empty();
            } else {
                this.sortOrder = Optional.of(sortOrder.get());
            }
            return this;
        }

        public ListActivitiesRequest build() {
            return new ListActivitiesRequest(
                    giftCardId, type, locationId, beginTime, endTime, limit, cursor, sortOrder, additionalProperties);
        }
    }
}
