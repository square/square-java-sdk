/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.giftcards;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.giftcards.types.CreateGiftCardActivityRequest;
import com.squareup.square.giftcards.types.ListActivitiesRequest;
import com.squareup.square.types.CreateGiftCardActivityResponse;
import com.squareup.square.types.GiftCardActivity;
import java.util.concurrent.CompletableFuture;

public class AsyncActivitiesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawActivitiesClient rawClient;

    public AsyncActivitiesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawActivitiesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawActivitiesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     */
    public CompletableFuture<SyncPagingIterable<GiftCardActivity>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     */
    public CompletableFuture<SyncPagingIterable<GiftCardActivity>> list(ListActivitiesRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     */
    public CompletableFuture<SyncPagingIterable<GiftCardActivity>> list(
            ListActivitiesRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a gift card activity to manage the balance or state of a <a href="entity:GiftCard">gift card</a>.
     * For example, create an <code>ACTIVATE</code> activity to activate a gift card with an initial balance before first use.
     */
    public CompletableFuture<CreateGiftCardActivityResponse> create(CreateGiftCardActivityRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a gift card activity to manage the balance or state of a <a href="entity:GiftCard">gift card</a>.
     * For example, create an <code>ACTIVATE</code> activity to activate a gift card with an initial balance before first use.
     */
    public CompletableFuture<CreateGiftCardActivityResponse> create(
            CreateGiftCardActivityRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }
}
