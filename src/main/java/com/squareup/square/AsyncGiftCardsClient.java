/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.Suppliers;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.giftcards.AsyncActivitiesClient;
import com.squareup.square.types.CreateGiftCardRequest;
import com.squareup.square.types.CreateGiftCardResponse;
import com.squareup.square.types.GetGiftCardFromGanRequest;
import com.squareup.square.types.GetGiftCardFromGanResponse;
import com.squareup.square.types.GetGiftCardFromNonceRequest;
import com.squareup.square.types.GetGiftCardFromNonceResponse;
import com.squareup.square.types.GetGiftCardResponse;
import com.squareup.square.types.GetGiftCardsRequest;
import com.squareup.square.types.GiftCard;
import com.squareup.square.types.LinkCustomerToGiftCardRequest;
import com.squareup.square.types.LinkCustomerToGiftCardResponse;
import com.squareup.square.types.ListGiftCardsRequest;
import com.squareup.square.types.UnlinkCustomerFromGiftCardRequest;
import com.squareup.square.types.UnlinkCustomerFromGiftCardResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncGiftCardsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawGiftCardsClient rawClient;

    protected final Supplier<AsyncActivitiesClient> activitiesClient;

    public AsyncGiftCardsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawGiftCardsClient(clientOptions);
        this.activitiesClient = Suppliers.memoize(() -> new AsyncActivitiesClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawGiftCardsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Lists all gift cards. You can specify optional filters to retrieve
     * a subset of the gift cards. Results are sorted by <code>created_at</code> in ascending order.
     */
    public CompletableFuture<SyncPagingIterable<GiftCard>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Lists all gift cards. You can specify optional filters to retrieve
     * a subset of the gift cards. Results are sorted by <code>created_at</code> in ascending order.
     */
    public CompletableFuture<SyncPagingIterable<GiftCard>> list(ListGiftCardsRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Lists all gift cards. You can specify optional filters to retrieve
     * a subset of the gift cards. Results are sorted by <code>created_at</code> in ascending order.
     */
    public CompletableFuture<SyncPagingIterable<GiftCard>> list(
            ListGiftCardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a digital gift card or registers a physical (plastic) gift card. The resulting gift card
     * has a <code>PENDING</code> state. To activate a gift card so that it can be redeemed for purchases, call
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> and create an <code>ACTIVATE</code>
     * activity with the initial balance. Alternatively, you can use <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
     * to refund a payment to the new gift card.
     */
    public CompletableFuture<CreateGiftCardResponse> create(CreateGiftCardRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a digital gift card or registers a physical (plastic) gift card. The resulting gift card
     * has a <code>PENDING</code> state. To activate a gift card so that it can be redeemed for purchases, call
     * <a href="api-endpoint:GiftCardActivities-CreateGiftCardActivity">CreateGiftCardActivity</a> and create an <code>ACTIVATE</code>
     * activity with the initial balance. Alternatively, you can use <a href="api-endpoint:Refunds-RefundPayment">RefundPayment</a>
     * to refund a payment to the new gift card.
     */
    public CompletableFuture<CreateGiftCardResponse> create(
            CreateGiftCardRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using the gift card account number (GAN).
     */
    public CompletableFuture<GetGiftCardFromGanResponse> getFromGan(GetGiftCardFromGanRequest request) {
        return this.rawClient.getFromGan(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using the gift card account number (GAN).
     */
    public CompletableFuture<GetGiftCardFromGanResponse> getFromGan(
            GetGiftCardFromGanRequest request, RequestOptions requestOptions) {
        return this.rawClient.getFromGan(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using a secure payment token that represents the gift card.
     */
    public CompletableFuture<GetGiftCardFromNonceResponse> getFromNonce(GetGiftCardFromNonceRequest request) {
        return this.rawClient.getFromNonce(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using a secure payment token that represents the gift card.
     */
    public CompletableFuture<GetGiftCardFromNonceResponse> getFromNonce(
            GetGiftCardFromNonceRequest request, RequestOptions requestOptions) {
        return this.rawClient.getFromNonce(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Links a customer to a gift card, which is also referred to as adding a card on file.
     */
    public CompletableFuture<LinkCustomerToGiftCardResponse> linkCustomer(LinkCustomerToGiftCardRequest request) {
        return this.rawClient.linkCustomer(request).thenApply(response -> response.body());
    }

    /**
     * Links a customer to a gift card, which is also referred to as adding a card on file.
     */
    public CompletableFuture<LinkCustomerToGiftCardResponse> linkCustomer(
            LinkCustomerToGiftCardRequest request, RequestOptions requestOptions) {
        return this.rawClient.linkCustomer(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Unlinks a customer from a gift card, which is also referred to as removing a card on file.
     */
    public CompletableFuture<UnlinkCustomerFromGiftCardResponse> unlinkCustomer(
            UnlinkCustomerFromGiftCardRequest request) {
        return this.rawClient.unlinkCustomer(request).thenApply(response -> response.body());
    }

    /**
     * Unlinks a customer from a gift card, which is also referred to as removing a card on file.
     */
    public CompletableFuture<UnlinkCustomerFromGiftCardResponse> unlinkCustomer(
            UnlinkCustomerFromGiftCardRequest request, RequestOptions requestOptions) {
        return this.rawClient.unlinkCustomer(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using the gift card ID.
     */
    public CompletableFuture<GetGiftCardResponse> get(GetGiftCardsRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a gift card using the gift card ID.
     */
    public CompletableFuture<GetGiftCardResponse> get(GetGiftCardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncActivitiesClient activities() {
        return this.activitiesClient.get();
    }
}
