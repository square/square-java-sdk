/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.CancelInvoiceRequest;
import com.squareup.square.types.CancelInvoiceResponse;
import com.squareup.square.types.CreateInvoiceAttachmentRequest;
import com.squareup.square.types.CreateInvoiceAttachmentResponse;
import com.squareup.square.types.CreateInvoiceRequest;
import com.squareup.square.types.CreateInvoiceResponse;
import com.squareup.square.types.DeleteInvoiceAttachmentRequest;
import com.squareup.square.types.DeleteInvoiceAttachmentResponse;
import com.squareup.square.types.DeleteInvoiceResponse;
import com.squareup.square.types.DeleteInvoicesRequest;
import com.squareup.square.types.GetInvoiceResponse;
import com.squareup.square.types.GetInvoicesRequest;
import com.squareup.square.types.Invoice;
import com.squareup.square.types.ListInvoicesRequest;
import com.squareup.square.types.PublishInvoiceRequest;
import com.squareup.square.types.PublishInvoiceResponse;
import com.squareup.square.types.SearchInvoicesRequest;
import com.squareup.square.types.SearchInvoicesResponse;
import com.squareup.square.types.UpdateInvoiceRequest;
import com.squareup.square.types.UpdateInvoiceResponse;

public class InvoicesClient {
    protected final ClientOptions clientOptions;

    private final RawInvoicesClient rawClient;

    public InvoicesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawInvoicesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawInvoicesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns a list of invoices for a given location. The response
     * is paginated. If truncated, the response includes a <code>cursor</code> that you
     * use in a subsequent request to retrieve the next set of invoices.
     */
    public SyncPagingIterable<Invoice> list(ListInvoicesRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * Returns a list of invoices for a given location. The response
     * is paginated. If truncated, the response includes a <code>cursor</code> that you
     * use in a subsequent request to retrieve the next set of invoices.
     */
    public SyncPagingIterable<Invoice> list(ListInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Creates a draft <a href="entity:Invoice">invoice</a>
     * for an order created using the Orders API.
     * <p>A draft invoice remains in your account and no action is taken.
     * You must publish the invoice before Square can process it (send it to the customer's email address or charge the customer’s card on file).</p>
     */
    public CreateInvoiceResponse create(CreateInvoiceRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a draft <a href="entity:Invoice">invoice</a>
     * for an order created using the Orders API.
     * <p>A draft invoice remains in your account and no action is taken.
     * You must publish the invoice before Square can process it (send it to the customer's email address or charge the customer’s card on file).</p>
     */
    public CreateInvoiceResponse create(CreateInvoiceRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Searches for invoices from a location specified in
     * the filter. You can optionally specify customers in the filter for whom to
     * retrieve invoices. In the current implementation, you can only specify one location and
     * optionally one customer.
     * <p>The response is paginated. If truncated, the response includes a <code>cursor</code>
     * that you use in a subsequent request to retrieve the next set of invoices.</p>
     */
    public SearchInvoicesResponse search(SearchInvoicesRequest request) {
        return this.rawClient.search(request).body();
    }

    /**
     * Searches for invoices from a location specified in
     * the filter. You can optionally specify customers in the filter for whom to
     * retrieve invoices. In the current implementation, you can only specify one location and
     * optionally one customer.
     * <p>The response is paginated. If truncated, the response includes a <code>cursor</code>
     * that you use in a subsequent request to retrieve the next set of invoices.</p>
     */
    public SearchInvoicesResponse search(SearchInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).body();
    }

    /**
     * Retrieves an invoice by invoice ID.
     */
    public GetInvoiceResponse get(GetInvoicesRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves an invoice by invoice ID.
     */
    public GetInvoiceResponse get(GetInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Updates an invoice. This endpoint supports sparse updates, so you only need
     * to specify the fields you want to change along with the required <code>version</code> field.
     * Some restrictions apply to updating invoices. For example, you cannot change the
     * <code>order_id</code> or <code>location_id</code> field.
     */
    public UpdateInvoiceResponse update(UpdateInvoiceRequest request) {
        return this.rawClient.update(request).body();
    }

    /**
     * Updates an invoice. This endpoint supports sparse updates, so you only need
     * to specify the fields you want to change along with the required <code>version</code> field.
     * Some restrictions apply to updating invoices. For example, you cannot change the
     * <code>order_id</code> or <code>location_id</code> field.
     */
    public UpdateInvoiceResponse update(UpdateInvoiceRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).body();
    }

    /**
     * Deletes the specified invoice. When an invoice is deleted, the
     * associated order status changes to CANCELED. You can only delete a draft
     * invoice (you cannot delete a published invoice, including one that is scheduled for processing).
     */
    public DeleteInvoiceResponse delete(DeleteInvoicesRequest request) {
        return this.rawClient.delete(request).body();
    }

    /**
     * Deletes the specified invoice. When an invoice is deleted, the
     * associated order status changes to CANCELED. You can only delete a draft
     * invoice (you cannot delete a published invoice, including one that is scheduled for processing).
     */
    public DeleteInvoiceResponse delete(DeleteInvoicesRequest request, RequestOptions requestOptions) {
        return this.rawClient.delete(request, requestOptions).body();
    }

    /**
     * Uploads a file and attaches it to an invoice. This endpoint accepts HTTP multipart/form-data file uploads
     * with a JSON <code>request</code> part and a <code>file</code> part. The <code>file</code> part must be a <code>readable stream</code> that contains a file
     * in a supported format: GIF, JPEG, PNG, TIFF, BMP, or PDF.
     * <p>Invoices can have up to 10 attachments with a total file size of 25 MB. Attachments can be added only to invoices
     * in the <code>DRAFT</code>, <code>SCHEDULED</code>, <code>UNPAID</code>, or <code>PARTIALLY_PAID</code> state.</p>
     * <p><strong>NOTE:</strong> When testing in the Sandbox environment, the total file size is limited to 1 KB.</p>
     */
    public CreateInvoiceAttachmentResponse createInvoiceAttachment(CreateInvoiceAttachmentRequest request) {
        return this.rawClient.createInvoiceAttachment(request).body();
    }

    /**
     * Uploads a file and attaches it to an invoice. This endpoint accepts HTTP multipart/form-data file uploads
     * with a JSON <code>request</code> part and a <code>file</code> part. The <code>file</code> part must be a <code>readable stream</code> that contains a file
     * in a supported format: GIF, JPEG, PNG, TIFF, BMP, or PDF.
     * <p>Invoices can have up to 10 attachments with a total file size of 25 MB. Attachments can be added only to invoices
     * in the <code>DRAFT</code>, <code>SCHEDULED</code>, <code>UNPAID</code>, or <code>PARTIALLY_PAID</code> state.</p>
     * <p><strong>NOTE:</strong> When testing in the Sandbox environment, the total file size is limited to 1 KB.</p>
     */
    public CreateInvoiceAttachmentResponse createInvoiceAttachment(
            CreateInvoiceAttachmentRequest request, RequestOptions requestOptions) {
        return this.rawClient.createInvoiceAttachment(request, requestOptions).body();
    }

    /**
     * Removes an attachment from an invoice and permanently deletes the file. Attachments can be removed only
     * from invoices in the <code>DRAFT</code>, <code>SCHEDULED</code>, <code>UNPAID</code>, or <code>PARTIALLY_PAID</code> state.
     */
    public DeleteInvoiceAttachmentResponse deleteInvoiceAttachment(DeleteInvoiceAttachmentRequest request) {
        return this.rawClient.deleteInvoiceAttachment(request).body();
    }

    /**
     * Removes an attachment from an invoice and permanently deletes the file. Attachments can be removed only
     * from invoices in the <code>DRAFT</code>, <code>SCHEDULED</code>, <code>UNPAID</code>, or <code>PARTIALLY_PAID</code> state.
     */
    public DeleteInvoiceAttachmentResponse deleteInvoiceAttachment(
            DeleteInvoiceAttachmentRequest request, RequestOptions requestOptions) {
        return this.rawClient.deleteInvoiceAttachment(request, requestOptions).body();
    }

    /**
     * Cancels an invoice. The seller cannot collect payments for
     * the canceled invoice.
     * <p>You cannot cancel an invoice in the <code>DRAFT</code> state or in a terminal state: <code>PAID</code>, <code>REFUNDED</code>, <code>CANCELED</code>, or <code>FAILED</code>.</p>
     */
    public CancelInvoiceResponse cancel(CancelInvoiceRequest request) {
        return this.rawClient.cancel(request).body();
    }

    /**
     * Cancels an invoice. The seller cannot collect payments for
     * the canceled invoice.
     * <p>You cannot cancel an invoice in the <code>DRAFT</code> state or in a terminal state: <code>PAID</code>, <code>REFUNDED</code>, <code>CANCELED</code>, or <code>FAILED</code>.</p>
     */
    public CancelInvoiceResponse cancel(CancelInvoiceRequest request, RequestOptions requestOptions) {
        return this.rawClient.cancel(request, requestOptions).body();
    }

    /**
     * Publishes the specified draft invoice.
     * <p>After an invoice is published, Square
     * follows up based on the invoice configuration. For example, Square
     * sends the invoice to the customer's email address, charges the customer's card on file, or does
     * nothing. Square also makes the invoice available on a Square-hosted invoice page.</p>
     * <p>The invoice <code>status</code> also changes from <code>DRAFT</code> to a status
     * based on the invoice configuration. For example, the status changes to <code>UNPAID</code> if
     * Square emails the invoice or <code>PARTIALLY_PAID</code> if Square charges a card on file for a portion of the
     * invoice amount.</p>
     * <p>In addition to the required <code>ORDERS_WRITE</code> and <code>INVOICES_WRITE</code> permissions, <code>CUSTOMERS_READ</code>
     * and <code>PAYMENTS_WRITE</code> are required when publishing invoices configured for card-on-file payments.</p>
     */
    public PublishInvoiceResponse publish(PublishInvoiceRequest request) {
        return this.rawClient.publish(request).body();
    }

    /**
     * Publishes the specified draft invoice.
     * <p>After an invoice is published, Square
     * follows up based on the invoice configuration. For example, Square
     * sends the invoice to the customer's email address, charges the customer's card on file, or does
     * nothing. Square also makes the invoice available on a Square-hosted invoice page.</p>
     * <p>The invoice <code>status</code> also changes from <code>DRAFT</code> to a status
     * based on the invoice configuration. For example, the status changes to <code>UNPAID</code> if
     * Square emails the invoice or <code>PARTIALLY_PAID</code> if Square charges a card on file for a portion of the
     * invoice amount.</p>
     * <p>In addition to the required <code>ORDERS_WRITE</code> and <code>INVOICES_WRITE</code> permissions, <code>CUSTOMERS_READ</code>
     * and <code>PAYMENTS_WRITE</code> are required when publishing invoices configured for card-on-file payments.</p>
     */
    public PublishInvoiceResponse publish(PublishInvoiceRequest request, RequestOptions requestOptions) {
        return this.rawClient.publish(request, requestOptions).body();
    }
}
