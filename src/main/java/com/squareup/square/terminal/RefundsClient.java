/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.terminal;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.terminal.types.CancelRefundsRequest;
import com.squareup.square.terminal.types.CreateTerminalRefundRequest;
import com.squareup.square.terminal.types.GetRefundsRequest;
import com.squareup.square.terminal.types.SearchTerminalRefundsRequest;
import com.squareup.square.types.CancelTerminalRefundResponse;
import com.squareup.square.types.CreateTerminalRefundResponse;
import com.squareup.square.types.GetTerminalRefundResponse;
import com.squareup.square.types.SearchTerminalRefundsResponse;

public class RefundsClient {
    protected final ClientOptions clientOptions;

    private final RawRefundsClient rawClient;

    public RefundsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawRefundsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawRefundsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal. Refunds for Interac payments on a Square Terminal are supported only for Interac debit cards in Canada. Other refunds for Terminal payments should use the Refunds API. For more information, see <a href="api:Refunds">Refunds API</a>.
     */
    public CreateTerminalRefundResponse create(CreateTerminalRefundRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a request to refund an Interac payment completed on a Square Terminal. Refunds for Interac payments on a Square Terminal are supported only for Interac debit cards in Canada. Other refunds for Terminal payments should use the Refunds API. For more information, see <a href="api:Refunds">Refunds API</a>.
     */
    public CreateTerminalRefundResponse create(CreateTerminalRefundRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request. Terminal refund requests are available for 30 days.
     */
    public SearchTerminalRefundsResponse search() {
        return this.rawClient.search().body();
    }

    /**
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request. Terminal refund requests are available for 30 days.
     */
    public SearchTerminalRefundsResponse search(SearchTerminalRefundsRequest request) {
        return this.rawClient.search(request).body();
    }

    /**
     * Retrieves a filtered list of Interac Terminal refund requests created by the seller making the request. Terminal refund requests are available for 30 days.
     */
    public SearchTerminalRefundsResponse search(SearchTerminalRefundsRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).body();
    }

    /**
     * Retrieves an Interac Terminal refund object by ID. Terminal refund objects are available for 30 days.
     */
    public GetTerminalRefundResponse get(GetRefundsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves an Interac Terminal refund object by ID. Terminal refund objects are available for 30 days.
     */
    public GetTerminalRefundResponse get(GetRefundsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     */
    public CancelTerminalRefundResponse cancel(CancelRefundsRequest request) {
        return this.rawClient.cancel(request).body();
    }

    /**
     * Cancels an Interac Terminal refund request by refund request ID if the status of the request permits it.
     */
    public CancelTerminalRefundResponse cancel(CancelRefundsRequest request, RequestOptions requestOptions) {
        return this.rawClient.cancel(request, requestOptions).body();
    }
}
