/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.terminal;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.terminal.types.CancelCheckoutsRequest;
import com.squareup.square.terminal.types.CreateTerminalCheckoutRequest;
import com.squareup.square.terminal.types.GetCheckoutsRequest;
import com.squareup.square.terminal.types.SearchTerminalCheckoutsRequest;
import com.squareup.square.types.CancelTerminalCheckoutResponse;
import com.squareup.square.types.CreateTerminalCheckoutResponse;
import com.squareup.square.types.GetTerminalCheckoutResponse;
import com.squareup.square.types.SearchTerminalCheckoutsResponse;

public class CheckoutsClient {
    protected final ClientOptions clientOptions;

    private final RawCheckoutsClient rawClient;

    public CheckoutsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawCheckoutsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawCheckoutsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a Terminal checkout request and sends it to the specified device to take a payment
     * for the requested amount.
     */
    public CreateTerminalCheckoutResponse create(CreateTerminalCheckoutRequest request) {
        return this.rawClient.create(request).body();
    }

    /**
     * Creates a Terminal checkout request and sends it to the specified device to take a payment
     * for the requested amount.
     */
    public CreateTerminalCheckoutResponse create(CreateTerminalCheckoutRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).body();
    }

    /**
     * Returns a filtered list of Terminal checkout requests created by the application making the request. Only Terminal checkout requests created for the merchant scoped to the OAuth token are returned. Terminal checkout requests are available for 30 days.
     */
    public SearchTerminalCheckoutsResponse search() {
        return this.rawClient.search().body();
    }

    /**
     * Returns a filtered list of Terminal checkout requests created by the application making the request. Only Terminal checkout requests created for the merchant scoped to the OAuth token are returned. Terminal checkout requests are available for 30 days.
     */
    public SearchTerminalCheckoutsResponse search(SearchTerminalCheckoutsRequest request) {
        return this.rawClient.search(request).body();
    }

    /**
     * Returns a filtered list of Terminal checkout requests created by the application making the request. Only Terminal checkout requests created for the merchant scoped to the OAuth token are returned. Terminal checkout requests are available for 30 days.
     */
    public SearchTerminalCheckoutsResponse search(
            SearchTerminalCheckoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.search(request, requestOptions).body();
    }

    /**
     * Retrieves a Terminal checkout request by <code>checkout_id</code>. Terminal checkout requests are available for 30 days.
     */
    public GetTerminalCheckoutResponse get(GetCheckoutsRequest request) {
        return this.rawClient.get(request).body();
    }

    /**
     * Retrieves a Terminal checkout request by <code>checkout_id</code>. Terminal checkout requests are available for 30 days.
     */
    public GetTerminalCheckoutResponse get(GetCheckoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).body();
    }

    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     */
    public CancelTerminalCheckoutResponse cancel(CancelCheckoutsRequest request) {
        return this.rawClient.cancel(request).body();
    }

    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     */
    public CancelTerminalCheckoutResponse cancel(CancelCheckoutsRequest request, RequestOptions requestOptions) {
        return this.rawClient.cancel(request, requestOptions).body();
    }
}
