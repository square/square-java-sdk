/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.terminal.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.TerminalRefund;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTerminalRefundRequest.Builder.class)
public final class CreateTerminalRefundRequest {
    private final String idempotencyKey;

    private final Optional<TerminalRefund> refund;

    private final Map<String, Object> additionalProperties;

    private CreateTerminalRefundRequest(
            String idempotencyKey, Optional<TerminalRefund> refund, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.refund = refund;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string that identifies this <code>CreateRefund</code> request. Keys can be any valid string but
     * must be unique for every <code>CreateRefund</code> request.
     * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
     */
    @JsonProperty("idempotency_key")
    public String getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The refund to create.
     */
    @JsonProperty("refund")
    public Optional<TerminalRefund> getRefund() {
        return refund;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTerminalRefundRequest && equalTo((CreateTerminalRefundRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTerminalRefundRequest other) {
        return idempotencyKey.equals(other.idempotencyKey) && refund.equals(other.refund);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.refund);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdempotencyKeyStage builder() {
        return new Builder();
    }

    public interface IdempotencyKeyStage {
        /**
         * <p>A unique string that identifies this <code>CreateRefund</code> request. Keys can be any valid string but
         * must be unique for every <code>CreateRefund</code> request.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
         */
        _FinalStage idempotencyKey(@NotNull String idempotencyKey);

        Builder from(CreateTerminalRefundRequest other);
    }

    public interface _FinalStage {
        CreateTerminalRefundRequest build();

        /**
         * <p>The refund to create.</p>
         */
        _FinalStage refund(Optional<TerminalRefund> refund);

        _FinalStage refund(TerminalRefund refund);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdempotencyKeyStage, _FinalStage {
        private String idempotencyKey;

        private Optional<TerminalRefund> refund = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateTerminalRefundRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            refund(other.getRefund());
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>CreateRefund</code> request. Keys can be any valid string but
         * must be unique for every <code>CreateRefund</code> request.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
         * <p>A unique string that identifies this <code>CreateRefund</code> request. Keys can be any valid string but
         * must be unique for every <code>CreateRefund</code> request.</p>
         * <p>See <a href="https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency">Idempotency keys</a> for more information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("idempotency_key")
        public _FinalStage idempotencyKey(@NotNull String idempotencyKey) {
            this.idempotencyKey = Objects.requireNonNull(idempotencyKey, "idempotencyKey must not be null");
            return this;
        }

        /**
         * <p>The refund to create.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refund(TerminalRefund refund) {
            this.refund = Optional.ofNullable(refund);
            return this;
        }

        /**
         * <p>The refund to create.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "refund", nulls = Nulls.SKIP)
        public _FinalStage refund(Optional<TerminalRefund> refund) {
            this.refund = refund;
            return this;
        }

        @java.lang.Override
        public CreateTerminalRefundRequest build() {
            return new CreateTerminalRefundRequest(idempotencyKey, refund, additionalProperties);
        }
    }
}
