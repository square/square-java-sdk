/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.checkout.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.CheckoutOptions;
import com.squareup.square.types.Order;
import com.squareup.square.types.PrePopulatedData;
import com.squareup.square.types.QuickPay;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreatePaymentLinkRequest.Builder.class)
public final class CreatePaymentLinkRequest {
    private final Optional<String> idempotencyKey;

    private final Optional<String> description;

    private final Optional<QuickPay> quickPay;

    private final Optional<Order> order;

    private final Optional<CheckoutOptions> checkoutOptions;

    private final Optional<PrePopulatedData> prePopulatedData;

    private final Optional<String> paymentNote;

    private final Map<String, Object> additionalProperties;

    private CreatePaymentLinkRequest(
            Optional<String> idempotencyKey,
            Optional<String> description,
            Optional<QuickPay> quickPay,
            Optional<Order> order,
            Optional<CheckoutOptions> checkoutOptions,
            Optional<PrePopulatedData> prePopulatedData,
            Optional<String> paymentNote,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.description = description;
        this.quickPay = quickPay;
        this.order = order;
        this.checkoutOptions = checkoutOptions;
        this.prePopulatedData = prePopulatedData;
        this.paymentNote = paymentNote;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string that identifies this <code>CreatePaymentLinkRequest</code> request.
     * If you do not provide a unique string (or provide an empty string as the value),
     * the endpoint treats each request as independent.
     * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return A description of the payment link. You provide this optional description that is useful in your
     * application context. It is not used anywhere.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Describes an ad hoc item and price for which to generate a quick pay checkout link.
     * For more information,
     * see <a href="https://developer.squareup.com/docs/checkout-api/quick-pay-checkout">Quick Pay Checkout</a>.
     */
    @JsonProperty("quick_pay")
    public Optional<QuickPay> getQuickPay() {
        return quickPay;
    }

    /**
     * @return Describes the <code>Order</code> for which to create a checkout link.
     * For more information,
     * see <a href="https://developer.squareup.com/docs/checkout-api/square-order-checkout">Square Order Checkout</a>.
     */
    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    /**
     * @return Describes optional fields to add to the resulting checkout page.
     * For more information,
     * see <a href="https://developer.squareup.com/docs/checkout-api/optional-checkout-configurations">Optional Checkout Configurations</a>.
     */
    @JsonProperty("checkout_options")
    public Optional<CheckoutOptions> getCheckoutOptions() {
        return checkoutOptions;
    }

    /**
     * @return Describes fields to prepopulate in the resulting checkout page.
     * For more information, see <a href="https://developer.squareup.com/docs/checkout-api/optional-checkout-configurations#prepopulate-the-shipping-address">Prepopulate the shipping address</a>.
     */
    @JsonProperty("pre_populated_data")
    public Optional<PrePopulatedData> getPrePopulatedData() {
        return prePopulatedData;
    }

    /**
     * @return A note for the payment. After processing the payment, Square adds this note to the resulting <code>Payment</code>.
     */
    @JsonProperty("payment_note")
    public Optional<String> getPaymentNote() {
        return paymentNote;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreatePaymentLinkRequest && equalTo((CreatePaymentLinkRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreatePaymentLinkRequest other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && description.equals(other.description)
                && quickPay.equals(other.quickPay)
                && order.equals(other.order)
                && checkoutOptions.equals(other.checkoutOptions)
                && prePopulatedData.equals(other.prePopulatedData)
                && paymentNote.equals(other.paymentNote);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.description,
                this.quickPay,
                this.order,
                this.checkoutOptions,
                this.prePopulatedData,
                this.paymentNote);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<QuickPay> quickPay = Optional.empty();

        private Optional<Order> order = Optional.empty();

        private Optional<CheckoutOptions> checkoutOptions = Optional.empty();

        private Optional<PrePopulatedData> prePopulatedData = Optional.empty();

        private Optional<String> paymentNote = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreatePaymentLinkRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            description(other.getDescription());
            quickPay(other.getQuickPay());
            order(other.getOrder());
            checkoutOptions(other.getCheckoutOptions());
            prePopulatedData(other.getPrePopulatedData());
            paymentNote(other.getPaymentNote());
            return this;
        }

        /**
         * <p>A unique string that identifies this <code>CreatePaymentLinkRequest</code> request.
         * If you do not provide a unique string (or provide an empty string as the value),
         * the endpoint treats each request as independent.</p>
         * <p>For more information, see <a href="https://developer.squareup.com/docs/working-with-apis/idempotency">Idempotency</a>.</p>
         */
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>A description of the payment link. You provide this optional description that is useful in your
         * application context. It is not used anywhere.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Describes an ad hoc item and price for which to generate a quick pay checkout link.
         * For more information,
         * see <a href="https://developer.squareup.com/docs/checkout-api/quick-pay-checkout">Quick Pay Checkout</a>.</p>
         */
        @JsonSetter(value = "quick_pay", nulls = Nulls.SKIP)
        public Builder quickPay(Optional<QuickPay> quickPay) {
            this.quickPay = quickPay;
            return this;
        }

        public Builder quickPay(QuickPay quickPay) {
            this.quickPay = Optional.ofNullable(quickPay);
            return this;
        }

        /**
         * <p>Describes the <code>Order</code> for which to create a checkout link.
         * For more information,
         * see <a href="https://developer.squareup.com/docs/checkout-api/square-order-checkout">Square Order Checkout</a>.</p>
         */
        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        public Builder order(Order order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Describes optional fields to add to the resulting checkout page.
         * For more information,
         * see <a href="https://developer.squareup.com/docs/checkout-api/optional-checkout-configurations">Optional Checkout Configurations</a>.</p>
         */
        @JsonSetter(value = "checkout_options", nulls = Nulls.SKIP)
        public Builder checkoutOptions(Optional<CheckoutOptions> checkoutOptions) {
            this.checkoutOptions = checkoutOptions;
            return this;
        }

        public Builder checkoutOptions(CheckoutOptions checkoutOptions) {
            this.checkoutOptions = Optional.ofNullable(checkoutOptions);
            return this;
        }

        /**
         * <p>Describes fields to prepopulate in the resulting checkout page.
         * For more information, see <a href="https://developer.squareup.com/docs/checkout-api/optional-checkout-configurations#prepopulate-the-shipping-address">Prepopulate the shipping address</a>.</p>
         */
        @JsonSetter(value = "pre_populated_data", nulls = Nulls.SKIP)
        public Builder prePopulatedData(Optional<PrePopulatedData> prePopulatedData) {
            this.prePopulatedData = prePopulatedData;
            return this;
        }

        public Builder prePopulatedData(PrePopulatedData prePopulatedData) {
            this.prePopulatedData = Optional.ofNullable(prePopulatedData);
            return this;
        }

        /**
         * <p>A note for the payment. After processing the payment, Square adds this note to the resulting <code>Payment</code>.</p>
         */
        @JsonSetter(value = "payment_note", nulls = Nulls.SKIP)
        public Builder paymentNote(Optional<String> paymentNote) {
            this.paymentNote = paymentNote;
            return this;
        }

        public Builder paymentNote(String paymentNote) {
            this.paymentNote = Optional.ofNullable(paymentNote);
            return this;
        }

        public CreatePaymentLinkRequest build() {
            return new CreatePaymentLinkRequest(
                    idempotencyKey,
                    description,
                    quickPay,
                    order,
                    checkoutOptions,
                    prePopulatedData,
                    paymentNote,
                    additionalProperties);
        }
    }
}
