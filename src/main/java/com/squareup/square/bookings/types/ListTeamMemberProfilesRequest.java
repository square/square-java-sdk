/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.bookings.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.Nullable;
import com.squareup.square.core.NullableNonemptyFilter;
import com.squareup.square.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListTeamMemberProfilesRequest.Builder.class)
public final class ListTeamMemberProfilesRequest {
    private final Optional<Boolean> bookableOnly;

    private final Optional<Integer> limit;

    private final Optional<String> cursor;

    private final Optional<String> locationId;

    private final Map<String, Object> additionalProperties;

    private ListTeamMemberProfilesRequest(
            Optional<Boolean> bookableOnly,
            Optional<Integer> limit,
            Optional<String> cursor,
            Optional<String> locationId,
            Map<String, Object> additionalProperties) {
        this.bookableOnly = bookableOnly;
        this.limit = limit;
        this.cursor = cursor;
        this.locationId = locationId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether to include only bookable team members in the returned result (<code>true</code>) or not (<code>false</code>).
     */
    @JsonIgnore
    public Optional<Boolean> getBookableOnly() {
        if (bookableOnly == null) {
            return Optional.empty();
        }
        return bookableOnly;
    }

    /**
     * @return The maximum number of results to return in a paged response.
     */
    @JsonIgnore
    public Optional<Integer> getLimit() {
        if (limit == null) {
            return Optional.empty();
        }
        return limit;
    }

    /**
     * @return The pagination cursor from the preceding response to return the next page of the results. Do not set this when retrieving the first page of the results.
     */
    @JsonIgnore
    public Optional<String> getCursor() {
        if (cursor == null) {
            return Optional.empty();
        }
        return cursor;
    }

    /**
     * @return Indicates whether to include only team members enabled at the given location in the returned result.
     */
    @JsonIgnore
    public Optional<String> getLocationId() {
        if (locationId == null) {
            return Optional.empty();
        }
        return locationId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bookable_only")
    private Optional<Boolean> _getBookableOnly() {
        return bookableOnly;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("limit")
    private Optional<Integer> _getLimit() {
        return limit;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("cursor")
    private Optional<String> _getCursor() {
        return cursor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("location_id")
    private Optional<String> _getLocationId() {
        return locationId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListTeamMemberProfilesRequest && equalTo((ListTeamMemberProfilesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListTeamMemberProfilesRequest other) {
        return bookableOnly.equals(other.bookableOnly)
                && limit.equals(other.limit)
                && cursor.equals(other.cursor)
                && locationId.equals(other.locationId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bookableOnly, this.limit, this.cursor, this.locationId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> bookableOnly = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> cursor = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListTeamMemberProfilesRequest other) {
            bookableOnly(other.getBookableOnly());
            limit(other.getLimit());
            cursor(other.getCursor());
            locationId(other.getLocationId());
            return this;
        }

        @JsonSetter(value = "bookable_only", nulls = Nulls.SKIP)
        public Builder bookableOnly(Optional<Boolean> bookableOnly) {
            this.bookableOnly = bookableOnly;
            return this;
        }

        public Builder bookableOnly(Boolean bookableOnly) {
            this.bookableOnly = Optional.ofNullable(bookableOnly);
            return this;
        }

        public Builder bookableOnly(Nullable<Boolean> bookableOnly) {
            if (bookableOnly.isNull()) {
                this.bookableOnly = null;
            } else if (bookableOnly.isEmpty()) {
                this.bookableOnly = Optional.empty();
            } else {
                this.bookableOnly = Optional.of(bookableOnly.get());
            }
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Nullable<Integer> limit) {
            if (limit.isNull()) {
                this.limit = null;
            } else if (limit.isEmpty()) {
                this.limit = Optional.empty();
            } else {
                this.limit = Optional.of(limit.get());
            }
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        public Builder cursor(Nullable<String> cursor) {
            if (cursor.isNull()) {
                this.cursor = null;
            } else if (cursor.isEmpty()) {
                this.cursor = Optional.empty();
            } else {
                this.cursor = Optional.of(cursor.get());
            }
            return this;
        }

        @JsonSetter(value = "location_id", nulls = Nulls.SKIP)
        public Builder locationId(Optional<String> locationId) {
            this.locationId = locationId;
            return this;
        }

        public Builder locationId(String locationId) {
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Nullable<String> locationId) {
            if (locationId.isNull()) {
                this.locationId = null;
            } else if (locationId.isEmpty()) {
                this.locationId = Optional.empty();
            } else {
                this.locationId = Optional.of(locationId.get());
            }
            return this;
        }

        public ListTeamMemberProfilesRequest build() {
            return new ListTeamMemberProfilesRequest(bookableOnly, limit, cursor, locationId, additionalProperties);
        }
    }
}
