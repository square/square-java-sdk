/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.QueryStringMapper;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareClientHttpResponse;
import com.squareup.square.core.SquareException;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.types.GetPayoutResponse;
import com.squareup.square.types.GetPayoutsRequest;
import com.squareup.square.types.ListEntriesPayoutsRequest;
import com.squareup.square.types.ListPayoutEntriesResponse;
import com.squareup.square.types.ListPayoutsRequest;
import com.squareup.square.types.ListPayoutsResponse;
import com.squareup.square.types.Payout;
import com.squareup.square.types.PayoutEntry;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawPayoutsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawPayoutsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<Payout>>> list() {
        return list(ListPayoutsRequest.builder().build());
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<Payout>>> list(ListPayoutsRequest request) {
        return list(request, null);
    }

    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<Payout>>> list(
            ListPayoutsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/payouts");
        if (request.getLocationId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "location_id", request.getLocationId().get(), false);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), false);
        }
        if (request.getBeginTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "begin_time", request.getBeginTime().get(), false);
        }
        if (request.getEndTime().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "end_time", request.getEndTime().get(), false);
        }
        if (request.getSortOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_order", request.getSortOrder().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<Payout>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListPayoutsResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListPayoutsResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListPayoutsRequest nextRequest = ListPayoutsRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<Payout> result = parsedResponse.getPayouts().orElse(Collections.emptyList());
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<Payout>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<GetPayoutResponse>> get(GetPayoutsRequest request) {
        return get(request, null);
    }

    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<GetPayoutResponse>> get(
            GetPayoutsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/payouts")
                .addPathSegment(request.getPayoutId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<GetPayoutResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SquareClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetPayoutResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PayoutEntry>>> listEntries(
            ListEntriesPayoutsRequest request) {
        return listEntries(request, null);
    }

    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set <code>PAYOUTS_READ</code> for the OAuth scope.
     */
    public CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PayoutEntry>>> listEntries(
            ListEntriesPayoutsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/payouts")
                .addPathSegment(request.getPayoutId())
                .addPathSegments("payout-entries");
        if (request.getSortOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_order", request.getSortOrder().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SquareClientHttpResponse<SyncPagingIterable<PayoutEntry>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListPayoutEntriesResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListPayoutEntriesResponse.class);
                        Optional<String> startingAfter = parsedResponse.getCursor();
                        ListEntriesPayoutsRequest nextRequest = ListEntriesPayoutsRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<PayoutEntry> result =
                                parsedResponse.getPayoutEntries().orElse(Collections.emptyList());
                        future.complete(new SquareClientHttpResponse<>(
                                new SyncPagingIterable<PayoutEntry>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listEntries(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
