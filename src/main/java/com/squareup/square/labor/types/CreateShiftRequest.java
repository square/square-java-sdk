/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.labor.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.Shift;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateShiftRequest.Builder.class)
public final class CreateShiftRequest {
    private final Optional<String> idempotencyKey;

    private final Shift shift;

    private final Map<String, Object> additionalProperties;

    private CreateShiftRequest(Optional<String> idempotencyKey, Shift shift, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.shift = shift;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string value to ensure the idempotency of the operation.
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The <code>Shift</code> to be created.
     */
    @JsonProperty("shift")
    public Shift getShift() {
        return shift;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateShiftRequest && equalTo((CreateShiftRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateShiftRequest other) {
        return idempotencyKey.equals(other.idempotencyKey) && shift.equals(other.shift);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.shift);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ShiftStage builder() {
        return new Builder();
    }

    public interface ShiftStage {
        /**
         * <p>The <code>Shift</code> to be created.</p>
         */
        _FinalStage shift(@NotNull Shift shift);

        Builder from(CreateShiftRequest other);
    }

    public interface _FinalStage {
        CreateShiftRequest build();

        /**
         * <p>A unique string value to ensure the idempotency of the operation.</p>
         */
        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ShiftStage, _FinalStage {
        private Shift shift;

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateShiftRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            shift(other.getShift());
            return this;
        }

        /**
         * <p>The <code>Shift</code> to be created.</p>
         * <p>The <code>Shift</code> to be created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("shift")
        public _FinalStage shift(@NotNull Shift shift) {
            this.shift = Objects.requireNonNull(shift, "shift must not be null");
            return this;
        }

        /**
         * <p>A unique string value to ensure the idempotency of the operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>A unique string value to ensure the idempotency of the operation.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public CreateShiftRequest build() {
            return new CreateShiftRequest(idempotencyKey, shift, additionalProperties);
        }
    }
}
