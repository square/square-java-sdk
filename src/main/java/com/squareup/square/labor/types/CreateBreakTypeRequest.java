/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.labor.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.BreakType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateBreakTypeRequest.Builder.class)
public final class CreateBreakTypeRequest {
    private final Optional<String> idempotencyKey;

    private final BreakType breakType;

    private final Map<String, Object> additionalProperties;

    private CreateBreakTypeRequest(
            Optional<String> idempotencyKey, BreakType breakType, Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.breakType = breakType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique string value to ensure the idempotency of the operation.
     */
    @JsonProperty("idempotency_key")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return The <code>BreakType</code> to be created.
     */
    @JsonProperty("break_type")
    public BreakType getBreakType() {
        return breakType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateBreakTypeRequest && equalTo((CreateBreakTypeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateBreakTypeRequest other) {
        return idempotencyKey.equals(other.idempotencyKey) && breakType.equals(other.breakType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.breakType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BreakTypeStage builder() {
        return new Builder();
    }

    public interface BreakTypeStage {
        _FinalStage breakType(@NotNull BreakType breakType);

        Builder from(CreateBreakTypeRequest other);
    }

    public interface _FinalStage {
        CreateBreakTypeRequest build();

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BreakTypeStage, _FinalStage {
        private BreakType breakType;

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateBreakTypeRequest other) {
            idempotencyKey(other.getIdempotencyKey());
            breakType(other.getBreakType());
            return this;
        }

        /**
         * <p>The <code>BreakType</code> to be created.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("break_type")
        public _FinalStage breakType(@NotNull BreakType breakType) {
            this.breakType = Objects.requireNonNull(breakType, "breakType must not be null");
            return this;
        }

        /**
         * <p>A unique string value to ensure the idempotency of the operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotency_key", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public CreateBreakTypeRequest build() {
            return new CreateBreakTypeRequest(idempotencyKey, breakType, additionalProperties);
        }
    }
}
