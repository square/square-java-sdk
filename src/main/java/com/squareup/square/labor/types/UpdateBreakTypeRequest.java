/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.labor.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.types.BreakType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateBreakTypeRequest.Builder.class)
public final class UpdateBreakTypeRequest {
    private final String id;

    private final BreakType breakType;

    private final Map<String, Object> additionalProperties;

    private UpdateBreakTypeRequest(String id, BreakType breakType, Map<String, Object> additionalProperties) {
        this.id = id;
        this.breakType = breakType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The UUID for the <code>BreakType</code> being updated.
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The updated <code>BreakType</code>.
     */
    @JsonProperty("break_type")
    public BreakType getBreakType() {
        return breakType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateBreakTypeRequest && equalTo((UpdateBreakTypeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateBreakTypeRequest other) {
        return id.equals(other.id) && breakType.equals(other.breakType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.breakType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The UUID for the <code>BreakType</code> being updated.</p>
         */
        BreakTypeStage id(@NotNull String id);

        Builder from(UpdateBreakTypeRequest other);
    }

    public interface BreakTypeStage {
        /**
         * <p>The updated <code>BreakType</code>.</p>
         */
        _FinalStage breakType(@NotNull BreakType breakType);
    }

    public interface _FinalStage {
        UpdateBreakTypeRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, BreakTypeStage, _FinalStage {
        private String id;

        private BreakType breakType;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateBreakTypeRequest other) {
            id(other.getId());
            breakType(other.getBreakType());
            return this;
        }

        /**
         * <p>The UUID for the <code>BreakType</code> being updated.</p>
         * <p>The UUID for the <code>BreakType</code> being updated.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public BreakTypeStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The updated <code>BreakType</code>.</p>
         * <p>The updated <code>BreakType</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("break_type")
        public _FinalStage breakType(@NotNull BreakType breakType) {
            this.breakType = Objects.requireNonNull(breakType, "breakType must not be null");
            return this;
        }

        @java.lang.Override
        public UpdateBreakTypeRequest build() {
            return new UpdateBreakTypeRequest(id, breakType, additionalProperties);
        }
    }
}
