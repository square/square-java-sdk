/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.labor;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SyncPagingIterable;
import com.squareup.square.labor.types.CreateBreakTypeRequest;
import com.squareup.square.labor.types.DeleteBreakTypesRequest;
import com.squareup.square.labor.types.GetBreakTypesRequest;
import com.squareup.square.labor.types.ListBreakTypesRequest;
import com.squareup.square.labor.types.UpdateBreakTypeRequest;
import com.squareup.square.types.BreakType;
import com.squareup.square.types.CreateBreakTypeResponse;
import com.squareup.square.types.DeleteBreakTypeResponse;
import com.squareup.square.types.GetBreakTypeResponse;
import com.squareup.square.types.UpdateBreakTypeResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncBreakTypesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawBreakTypesClient rawClient;

    public AsyncBreakTypesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawBreakTypesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawBreakTypesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns a paginated list of <code>BreakType</code> instances for a business.
     */
    public CompletableFuture<SyncPagingIterable<BreakType>> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of <code>BreakType</code> instances for a business.
     */
    public CompletableFuture<SyncPagingIterable<BreakType>> list(ListBreakTypesRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of <code>BreakType</code> instances for a business.
     */
    public CompletableFuture<SyncPagingIterable<BreakType>> list(
            ListBreakTypesRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a new <code>BreakType</code>.
     * <p>A <code>BreakType</code> is a template for creating <code>Break</code> objects.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>break_name</code></li>
     * <li><code>expected_duration</code></li>
     * <li><code>is_paid</code></li>
     * </ul>
     * <p>You can only have three <code>BreakType</code> instances per location. If you attempt to add a fourth
     * <code>BreakType</code> for a location, an <code>INVALID_REQUEST_ERROR</code> &quot;Exceeded limit of 3 breaks per location.&quot;
     * is returned.</p>
     */
    public CompletableFuture<CreateBreakTypeResponse> create(CreateBreakTypeRequest request) {
        return this.rawClient.create(request).thenApply(response -> response.body());
    }

    /**
     * Creates a new <code>BreakType</code>.
     * <p>A <code>BreakType</code> is a template for creating <code>Break</code> objects.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>break_name</code></li>
     * <li><code>expected_duration</code></li>
     * <li><code>is_paid</code></li>
     * </ul>
     * <p>You can only have three <code>BreakType</code> instances per location. If you attempt to add a fourth
     * <code>BreakType</code> for a location, an <code>INVALID_REQUEST_ERROR</code> &quot;Exceeded limit of 3 breaks per location.&quot;
     * is returned.</p>
     */
    public CompletableFuture<CreateBreakTypeResponse> create(
            CreateBreakTypeRequest request, RequestOptions requestOptions) {
        return this.rawClient.create(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns a single <code>BreakType</code> specified by <code>id</code>.
     */
    public CompletableFuture<GetBreakTypeResponse> get(GetBreakTypesRequest request) {
        return this.rawClient.get(request).thenApply(response -> response.body());
    }

    /**
     * Returns a single <code>BreakType</code> specified by <code>id</code>.
     */
    public CompletableFuture<GetBreakTypeResponse> get(GetBreakTypesRequest request, RequestOptions requestOptions) {
        return this.rawClient.get(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates an existing <code>BreakType</code>.
     */
    public CompletableFuture<UpdateBreakTypeResponse> update(UpdateBreakTypeRequest request) {
        return this.rawClient.update(request).thenApply(response -> response.body());
    }

    /**
     * Updates an existing <code>BreakType</code>.
     */
    public CompletableFuture<UpdateBreakTypeResponse> update(
            UpdateBreakTypeRequest request, RequestOptions requestOptions) {
        return this.rawClient.update(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes an existing <code>BreakType</code>.
     * <p>A <code>BreakType</code> can be deleted even if it is referenced from a <code>Shift</code>.</p>
     */
    public CompletableFuture<DeleteBreakTypeResponse> delete(DeleteBreakTypesRequest request) {
        return this.rawClient.delete(request).thenApply(response -> response.body());
    }

    /**
     * Deletes an existing <code>BreakType</code>.
     * <p>A <code>BreakType</code> can be deleted even if it is referenced from a <code>Shift</code>.</p>
     */
    public CompletableFuture<DeleteBreakTypeResponse> delete(
            DeleteBreakTypesRequest request, RequestOptions requestOptions) {
        return this.rawClient.delete(request, requestOptions).thenApply(response -> response.body());
    }
}
