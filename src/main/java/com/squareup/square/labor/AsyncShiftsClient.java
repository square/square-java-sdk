/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square.labor;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.MediaTypes;
import com.squareup.square.core.ObjectMappers;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.SquareApiException;
import com.squareup.square.core.SquareException;
import com.squareup.square.labor.types.CreateShiftRequest;
import com.squareup.square.labor.types.DeleteShiftsRequest;
import com.squareup.square.labor.types.GetShiftsRequest;
import com.squareup.square.labor.types.SearchShiftsRequest;
import com.squareup.square.labor.types.UpdateShiftRequest;
import com.squareup.square.types.CreateShiftResponse;
import com.squareup.square.types.DeleteShiftResponse;
import com.squareup.square.types.GetShiftResponse;
import com.squareup.square.types.SearchShiftsResponse;
import com.squareup.square.types.UpdateShiftResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncShiftsClient {
    protected final ClientOptions clientOptions;

    public AsyncShiftsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates a new <code>Shift</code>.
     * <p>A <code>Shift</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Shift</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Shift</code> is <code>OPEN</code> and the team member has another
     * shift with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another shift for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Shift.start_at</code>, a break <code>end_at</code> is after
     * the <code>Shift.end_at</code>, or both.</li>
     * </ul>
     */
    public CompletableFuture<CreateShiftResponse> create(CreateShiftRequest request) {
        return create(request, null);
    }

    /**
     * Creates a new <code>Shift</code>.
     * <p>A <code>Shift</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Shift</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Shift</code> is <code>OPEN</code> and the team member has another
     * shift with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another shift for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Shift.start_at</code>, a break <code>end_at</code> is after
     * the <code>Shift.end_at</code>, or both.</li>
     * </ul>
     */
    public CompletableFuture<CreateShiftResponse> create(CreateShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/shifts")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CreateShiftResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CreateShiftResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Returns a paginated list of <code>Shift</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Shift status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Shift start</li>
     * <li>Shift end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchShiftsResponse> search() {
        return search(SearchShiftsRequest.builder().build());
    }

    /**
     * Returns a paginated list of <code>Shift</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Shift status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Shift start</li>
     * <li>Shift end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchShiftsResponse> search(SearchShiftsRequest request) {
        return search(request, null);
    }

    /**
     * Returns a paginated list of <code>Shift</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Shift status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Shift start</li>
     * <li>Shift end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchShiftsResponse> search(SearchShiftsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/shifts/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SearchShiftsResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchShiftsResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Returns a single <code>Shift</code> specified by <code>id</code>.
     */
    public CompletableFuture<GetShiftResponse> get(GetShiftsRequest request) {
        return get(request, null);
    }

    /**
     * Returns a single <code>Shift</code> specified by <code>id</code>.
     */
    public CompletableFuture<GetShiftResponse> get(GetShiftsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/shifts")
                .addPathSegment(request.getId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<GetShiftResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetShiftResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Updates an existing <code>Shift</code>.
     * <p>When adding a <code>Break</code> to a <code>Shift</code>, any earlier <code>Break</code> instances in the <code>Shift</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Shift</code>, all <code>Break</code> instances in the <code>Shift</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public CompletableFuture<UpdateShiftResponse> update(UpdateShiftRequest request) {
        return update(request, null);
    }

    /**
     * Updates an existing <code>Shift</code>.
     * <p>When adding a <code>Break</code> to a <code>Shift</code>, any earlier <code>Break</code> instances in the <code>Shift</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Shift</code>, all <code>Break</code> instances in the <code>Shift</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public CompletableFuture<UpdateShiftResponse> update(UpdateShiftRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/shifts")
                .addPathSegment(request.getId())
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SquareException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<UpdateShiftResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UpdateShiftResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Deletes a <code>Shift</code>.
     */
    public CompletableFuture<DeleteShiftResponse> delete(DeleteShiftsRequest request) {
        return delete(request, null);
    }

    /**
     * Deletes a <code>Shift</code>.
     */
    public CompletableFuture<DeleteShiftResponse> delete(DeleteShiftsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v2/labor/shifts")
                .addPathSegment(request.getId())
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<DeleteShiftResponse> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), DeleteShiftResponse.class));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SquareApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SquareException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
