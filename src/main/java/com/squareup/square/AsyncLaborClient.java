/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.squareup.square;

import com.squareup.square.core.ClientOptions;
import com.squareup.square.core.RequestOptions;
import com.squareup.square.core.Suppliers;
import com.squareup.square.labor.AsyncBreakTypesClient;
import com.squareup.square.labor.AsyncEmployeeWagesClient;
import com.squareup.square.labor.AsyncShiftsClient;
import com.squareup.square.labor.AsyncTeamMemberWagesClient;
import com.squareup.square.labor.AsyncWorkweekConfigsClient;
import com.squareup.square.types.BulkPublishScheduledShiftsRequest;
import com.squareup.square.types.BulkPublishScheduledShiftsResponse;
import com.squareup.square.types.CreateScheduledShiftRequest;
import com.squareup.square.types.CreateScheduledShiftResponse;
import com.squareup.square.types.CreateTimecardRequest;
import com.squareup.square.types.CreateTimecardResponse;
import com.squareup.square.types.DeleteTimecardRequest;
import com.squareup.square.types.DeleteTimecardResponse;
import com.squareup.square.types.PublishScheduledShiftRequest;
import com.squareup.square.types.PublishScheduledShiftResponse;
import com.squareup.square.types.RetrieveScheduledShiftRequest;
import com.squareup.square.types.RetrieveScheduledShiftResponse;
import com.squareup.square.types.RetrieveTimecardRequest;
import com.squareup.square.types.RetrieveTimecardResponse;
import com.squareup.square.types.SearchScheduledShiftsRequest;
import com.squareup.square.types.SearchScheduledShiftsResponse;
import com.squareup.square.types.SearchTimecardsRequest;
import com.squareup.square.types.SearchTimecardsResponse;
import com.squareup.square.types.UpdateScheduledShiftRequest;
import com.squareup.square.types.UpdateScheduledShiftResponse;
import com.squareup.square.types.UpdateTimecardRequest;
import com.squareup.square.types.UpdateTimecardResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncLaborClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawLaborClient rawClient;

    protected final Supplier<AsyncBreakTypesClient> breakTypesClient;

    protected final Supplier<AsyncEmployeeWagesClient> employeeWagesClient;

    protected final Supplier<AsyncShiftsClient> shiftsClient;

    protected final Supplier<AsyncTeamMemberWagesClient> teamMemberWagesClient;

    protected final Supplier<AsyncWorkweekConfigsClient> workweekConfigsClient;

    public AsyncLaborClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawLaborClient(clientOptions);
        this.breakTypesClient = Suppliers.memoize(() -> new AsyncBreakTypesClient(clientOptions));
        this.employeeWagesClient = Suppliers.memoize(() -> new AsyncEmployeeWagesClient(clientOptions));
        this.shiftsClient = Suppliers.memoize(() -> new AsyncShiftsClient(clientOptions));
        this.teamMemberWagesClient = Suppliers.memoize(() -> new AsyncTeamMemberWagesClient(clientOptions));
        this.workweekConfigsClient = Suppliers.memoize(() -> new AsyncWorkweekConfigsClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawLaborClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a scheduled shift by providing draft shift details such as job ID,
     * team member assignment, and start and end times.
     * <p>The following <code>draft_shift_details</code> fields are required:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>job_id</code></li>
     * <li><code>start_at</code></li>
     * <li><code>end_at</code></li>
     * </ul>
     */
    public CompletableFuture<CreateScheduledShiftResponse> createScheduledShift(CreateScheduledShiftRequest request) {
        return this.rawClient.createScheduledShift(request).thenApply(response -> response.body());
    }

    /**
     * Creates a scheduled shift by providing draft shift details such as job ID,
     * team member assignment, and start and end times.
     * <p>The following <code>draft_shift_details</code> fields are required:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>job_id</code></li>
     * <li><code>start_at</code></li>
     * <li><code>end_at</code></li>
     * </ul>
     */
    public CompletableFuture<CreateScheduledShiftResponse> createScheduledShift(
            CreateScheduledShiftRequest request, RequestOptions requestOptions) {
        return this.rawClient.createScheduledShift(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
     * requests and returns a map of responses. When a scheduled shift is published, Square keeps
     * the <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     * <p>The minimum <code>start_at</code> and maximum <code>end_at</code> timestamps of all shifts in a
     * <code>BulkPublishScheduledShifts</code> request must fall within a two-week period.</p>
     */
    public CompletableFuture<BulkPublishScheduledShiftsResponse> bulkPublishScheduledShifts(
            BulkPublishScheduledShiftsRequest request) {
        return this.rawClient.bulkPublishScheduledShifts(request).thenApply(response -> response.body());
    }

    /**
     * Publishes 1 - 100 scheduled shifts. This endpoint takes a map of individual publish
     * requests and returns a map of responses. When a scheduled shift is published, Square keeps
     * the <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     * <p>The minimum <code>start_at</code> and maximum <code>end_at</code> timestamps of all shifts in a
     * <code>BulkPublishScheduledShifts</code> request must fall within a two-week period.</p>
     */
    public CompletableFuture<BulkPublishScheduledShiftsResponse> bulkPublishScheduledShifts(
            BulkPublishScheduledShiftsRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .bulkPublishScheduledShifts(request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public CompletableFuture<SearchScheduledShiftsResponse> searchScheduledShifts() {
        return this.rawClient.searchScheduledShifts().thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public CompletableFuture<SearchScheduledShiftsResponse> searchScheduledShifts(
            SearchScheduledShiftsRequest request) {
        return this.rawClient.searchScheduledShifts(request).thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of scheduled shifts, with optional filter and sort settings.
     * By default, results are sorted by <code>start_at</code> in ascending order.
     */
    public CompletableFuture<SearchScheduledShiftsResponse> searchScheduledShifts(
            SearchScheduledShiftsRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchScheduledShifts(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a scheduled shift by ID.
     */
    public CompletableFuture<RetrieveScheduledShiftResponse> retrieveScheduledShift(
            RetrieveScheduledShiftRequest request) {
        return this.rawClient.retrieveScheduledShift(request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a scheduled shift by ID.
     */
    public CompletableFuture<RetrieveScheduledShiftResponse> retrieveScheduledShift(
            RetrieveScheduledShiftRequest request, RequestOptions requestOptions) {
        return this.rawClient.retrieveScheduledShift(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates the draft shift details for a scheduled shift. This endpoint supports
     * sparse updates, so only new, changed, or removed fields are required in the request.
     * You must publish the shift to make updates public.
     * <p>You can make the following updates to <code>draft_shift_details</code>:</p>
     * <ul>
     * <li>Change the <code>location_id</code>, <code>job_id</code>, <code>start_at</code>, and <code>end_at</code> fields.</li>
     * <li>Add, change, or clear the <code>team_member_id</code> and <code>notes</code> fields. To clear these fields,
     * set the value to null.</li>
     * <li>Change the <code>is_deleted</code> field. To delete a scheduled shift, set <code>is_deleted</code> to true
     * and then publish the shift.</li>
     * </ul>
     */
    public CompletableFuture<UpdateScheduledShiftResponse> updateScheduledShift(UpdateScheduledShiftRequest request) {
        return this.rawClient.updateScheduledShift(request).thenApply(response -> response.body());
    }

    /**
     * Updates the draft shift details for a scheduled shift. This endpoint supports
     * sparse updates, so only new, changed, or removed fields are required in the request.
     * You must publish the shift to make updates public.
     * <p>You can make the following updates to <code>draft_shift_details</code>:</p>
     * <ul>
     * <li>Change the <code>location_id</code>, <code>job_id</code>, <code>start_at</code>, and <code>end_at</code> fields.</li>
     * <li>Add, change, or clear the <code>team_member_id</code> and <code>notes</code> fields. To clear these fields,
     * set the value to null.</li>
     * <li>Change the <code>is_deleted</code> field. To delete a scheduled shift, set <code>is_deleted</code> to true
     * and then publish the shift.</li>
     * </ul>
     */
    public CompletableFuture<UpdateScheduledShiftResponse> updateScheduledShift(
            UpdateScheduledShiftRequest request, RequestOptions requestOptions) {
        return this.rawClient.updateScheduledShift(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
     * <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     */
    public CompletableFuture<PublishScheduledShiftResponse> publishScheduledShift(
            PublishScheduledShiftRequest request) {
        return this.rawClient.publishScheduledShift(request).thenApply(response -> response.body());
    }

    /**
     * Publishes a scheduled shift. When a scheduled shift is published, Square keeps the
     * <code>draft_shift_details</code> field as is and copies it to the <code>published_shift_details</code> field.
     */
    public CompletableFuture<PublishScheduledShiftResponse> publishScheduledShift(
            PublishScheduledShiftRequest request, RequestOptions requestOptions) {
        return this.rawClient.publishScheduledShift(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a new <code>Timecard</code>.
     * <p>A <code>Timecard</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Timecard</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Timecard</code> is <code>OPEN</code> and the team member has another
     * timecard with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another timecard for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Timecard.start_at</code>, a break <code>end_at</code> is after
     * the <code>Timecard.end_at</code>, or both.</li>
     * </ul>
     */
    public CompletableFuture<CreateTimecardResponse> createTimecard(CreateTimecardRequest request) {
        return this.rawClient.createTimecard(request).thenApply(response -> response.body());
    }

    /**
     * Creates a new <code>Timecard</code>.
     * <p>A <code>Timecard</code> represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:</p>
     * <ul>
     * <li><code>location_id</code></li>
     * <li><code>team_member_id</code></li>
     * <li><code>start_at</code></li>
     * </ul>
     * <p>An attempt to create a new <code>Timecard</code> can result in a <code>BAD_REQUEST</code> error when:</p>
     * <ul>
     * <li>The <code>status</code> of the new <code>Timecard</code> is <code>OPEN</code> and the team member has another
     * timecard with an <code>OPEN</code> status.</li>
     * <li>The <code>start_at</code> date is in the future.</li>
     * <li>The <code>start_at</code> or <code>end_at</code> date overlaps another timecard for the same team member.</li>
     * <li>The <code>Break</code> instances are set in the request and a break <code>start_at</code>
     * is before the <code>Timecard.start_at</code>, a break <code>end_at</code> is after
     * the <code>Timecard.end_at</code>, or both.</li>
     * </ul>
     */
    public CompletableFuture<CreateTimecardResponse> createTimecard(
            CreateTimecardRequest request, RequestOptions requestOptions) {
        return this.rawClient.createTimecard(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchTimecardsResponse> searchTimecards() {
        return this.rawClient.searchTimecards().thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchTimecardsResponse> searchTimecards(SearchTimecardsRequest request) {
        return this.rawClient.searchTimecards(request).thenApply(response -> response.body());
    }

    /**
     * Returns a paginated list of <code>Timecard</code> records for a business.
     * The list to be returned can be filtered by:
     * <ul>
     * <li>Location IDs</li>
     * <li>Team member IDs</li>
     * <li>Timecard status (<code>OPEN</code> or <code>CLOSED</code>)</li>
     * <li>Timecard start</li>
     * <li>Timecard end</li>
     * <li>Workday details</li>
     * </ul>
     * <p>The list can be sorted by:</p>
     * <ul>
     * <li><code>START_AT</code></li>
     * <li><code>END_AT</code></li>
     * <li><code>CREATED_AT</code></li>
     * <li><code>UPDATED_AT</code></li>
     * </ul>
     */
    public CompletableFuture<SearchTimecardsResponse> searchTimecards(
            SearchTimecardsRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchTimecards(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns a single <code>Timecard</code> specified by <code>id</code>.
     */
    public CompletableFuture<RetrieveTimecardResponse> retrieveTimecard(RetrieveTimecardRequest request) {
        return this.rawClient.retrieveTimecard(request).thenApply(response -> response.body());
    }

    /**
     * Returns a single <code>Timecard</code> specified by <code>id</code>.
     */
    public CompletableFuture<RetrieveTimecardResponse> retrieveTimecard(
            RetrieveTimecardRequest request, RequestOptions requestOptions) {
        return this.rawClient.retrieveTimecard(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates an existing <code>Timecard</code>.
     * <p>When adding a <code>Break</code> to a <code>Timecard</code>, any earlier <code>Break</code> instances in the <code>Timecard</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Timecard</code>, all <code>Break</code> instances in the <code>Timecard</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public CompletableFuture<UpdateTimecardResponse> updateTimecard(UpdateTimecardRequest request) {
        return this.rawClient.updateTimecard(request).thenApply(response -> response.body());
    }

    /**
     * Updates an existing <code>Timecard</code>.
     * <p>When adding a <code>Break</code> to a <code>Timecard</code>, any earlier <code>Break</code> instances in the <code>Timecard</code> have
     * the <code>end_at</code> property set to a valid RFC-3339 datetime string.</p>
     * <p>When closing a <code>Timecard</code>, all <code>Break</code> instances in the <code>Timecard</code> must be complete with <code>end_at</code>
     * set on each <code>Break</code>.</p>
     */
    public CompletableFuture<UpdateTimecardResponse> updateTimecard(
            UpdateTimecardRequest request, RequestOptions requestOptions) {
        return this.rawClient.updateTimecard(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes a <code>Timecard</code>.
     */
    public CompletableFuture<DeleteTimecardResponse> deleteTimecard(DeleteTimecardRequest request) {
        return this.rawClient.deleteTimecard(request).thenApply(response -> response.body());
    }

    /**
     * Deletes a <code>Timecard</code>.
     */
    public CompletableFuture<DeleteTimecardResponse> deleteTimecard(
            DeleteTimecardRequest request, RequestOptions requestOptions) {
        return this.rawClient.deleteTimecard(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncBreakTypesClient breakTypes() {
        return this.breakTypesClient.get();
    }

    public AsyncEmployeeWagesClient employeeWages() {
        return this.employeeWagesClient.get();
    }

    public AsyncShiftsClient shifts() {
        return this.shiftsClient.get();
    }

    public AsyncTeamMemberWagesClient teamMemberWages() {
        return this.teamMemberWagesClient.get();
    }

    public AsyncWorkweekConfigsClient workweekConfigs() {
        return this.workweekConfigsClient.get();
    }
}
